ARM GAS  /tmp/ccjIrmio.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "MDK-ARM/Lab07/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:MDK-ARM/Lab07/motor.c **** /* ------------------------------------------------------------------------------------------------
   2:MDK-ARM/Lab07/motor.c ****  *  Motor Control and Initialization Functions
   3:MDK-ARM/Lab07/motor.c ****  * ------------------------------------------------------------------------------------------------
   4:MDK-ARM/Lab07/motor.c ****  */
   5:MDK-ARM/Lab07/motor.c **** #include "motor.h"
   6:MDK-ARM/Lab07/motor.c **** 
   7:MDK-ARM/Lab07/motor.c **** volatile int16_t error_integral = 0;    // Integrated error signal
   8:MDK-ARM/Lab07/motor.c **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
   9:MDK-ARM/Lab07/motor.c **** volatile int16_t target_rpm = 0;    	// Desired speed target
  10:MDK-ARM/Lab07/motor.c **** volatile int16_t motorl_speed = 0;   	// Measured left motor speed
  11:MDK-ARM/Lab07/motor.c **** volatile int16_t motorr_speed = 0;   	// Measured left motor speed
  12:MDK-ARM/Lab07/motor.c **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  13:MDK-ARM/Lab07/motor.c **** volatile int16_t error = 0;         	// Speed error signal
  14:MDK-ARM/Lab07/motor.c **** volatile uint8_t Kp = 1;            	// Proportional gain
  15:MDK-ARM/Lab07/motor.c **** volatile uint8_t Ki = 1;            	// Integral gain
  16:MDK-ARM/Lab07/motor.c **** 
  17:MDK-ARM/Lab07/motor.c **** // Sets up the entire motor drive system
  18:MDK-ARM/Lab07/motor.c **** void motor_init(void) {
  19:MDK-ARM/Lab07/motor.c ****     pwm_init();
  20:MDK-ARM/Lab07/motor.c ****     encoder_init();
  21:MDK-ARM/Lab07/motor.c ****     ADC_init();
  22:MDK-ARM/Lab07/motor.c **** }
  23:MDK-ARM/Lab07/motor.c **** 
  24:MDK-ARM/Lab07/motor.c **** // Sets up the PWM and direction signals to drive the H-Bridge
  25:MDK-ARM/Lab07/motor.c **** void pwm_init(void) {
  27              		.loc 1 25 21 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccjIrmio.s 			page 2


  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  26:MDK-ARM/Lab07/motor.c **** 	
  27:MDK-ARM/Lab07/motor.c **** 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  37              		.loc 1 27 3 view .LVU1
  38              		.loc 1 27 6 is_stmt 0 view .LVU2
  39 0002 424C     		ldr	r4, .L2
  40 0004 6369     		ldr	r3, [r4, #20]
  41              		.loc 1 27 15 view .LVU3
  42 0006 8021     		movs	r1, #128
  43 0008 C902     		lsls	r1, r1, #11
  44 000a 0B43     		orrs	r3, r1
  45 000c 6361     		str	r3, [r4, #20]
  28:MDK-ARM/Lab07/motor.c **** 	
  29:MDK-ARM/Lab07/motor.c ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  30:MDK-ARM/Lab07/motor.c ****     GPIOA->MODER |= (1 << 9);
  46              		.loc 1 30 5 is_stmt 1 view .LVU4
  47              		.loc 1 30 10 is_stmt 0 view .LVU5
  48 000e 9023     		movs	r3, #144
  49 0010 DB05     		lsls	r3, r3, #23
  50 0012 1868     		ldr	r0, [r3]
  51              		.loc 1 30 18 view .LVU6
  52 0014 8022     		movs	r2, #128
  53 0016 9200     		lsls	r2, r2, #2
  54 0018 0243     		orrs	r2, r0
  55 001a 1A60     		str	r2, [r3]
  31:MDK-ARM/Lab07/motor.c ****     GPIOA->MODER &= ~(1 << 8);
  56              		.loc 1 31 5 is_stmt 1 view .LVU7
  57              		.loc 1 31 10 is_stmt 0 view .LVU8
  58 001c 1A68     		ldr	r2, [r3]
  59              		.loc 1 31 18 view .LVU9
  60 001e 3C48     		ldr	r0, .L2+4
  61 0020 0240     		ands	r2, r0
  62 0022 1A60     		str	r2, [r3]
  32:MDK-ARM/Lab07/motor.c **** 	
  33:MDK-ARM/Lab07/motor.c **** 	  // Set up pin PB3 for H-bridge PWM output (TIMER 2 CH2)
  34:MDK-ARM/Lab07/motor.c ****     GPIOB->MODER |= (1 << 7);
  63              		.loc 1 34 5 is_stmt 1 view .LVU10
  64              		.loc 1 34 10 is_stmt 0 view .LVU11
  65 0024 3B4A     		ldr	r2, .L2+8
  66 0026 1068     		ldr	r0, [r2]
  67              		.loc 1 34 18 view .LVU12
  68 0028 8025     		movs	r5, #128
  69 002a 2843     		orrs	r0, r5
  70 002c 1060     		str	r0, [r2]
  35:MDK-ARM/Lab07/motor.c ****     GPIOB->MODER &= ~(1 << 6);
  71              		.loc 1 35 5 is_stmt 1 view .LVU13
  72              		.loc 1 35 10 is_stmt 0 view .LVU14
  73 002e 1068     		ldr	r0, [r2]
  74              		.loc 1 35 18 view .LVU15
  75 0030 403D     		subs	r5, r5, #64
  76 0032 A843     		bics	r0, r5
  77 0034 1060     		str	r0, [r2]
  36:MDK-ARM/Lab07/motor.c **** 
  37:MDK-ARM/Lab07/motor.c ****     // Set PA4 to AF4,
  38:MDK-ARM/Lab07/motor.c ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
ARM GAS  /tmp/ccjIrmio.s 			page 3


  78              		.loc 1 38 5 is_stmt 1 view .LVU16
  79              		.loc 1 38 15 is_stmt 0 view .LVU17
  80 0036 186A     		ldr	r0, [r3, #32]
  81              		.loc 1 38 19 view .LVU18
  82 0038 374D     		ldr	r5, .L2+12
  83 003a 2840     		ands	r0, r5
  84 003c 1862     		str	r0, [r3, #32]
  39:MDK-ARM/Lab07/motor.c ****     GPIOA->AFR[0] |= (1 << 18);
  85              		.loc 1 39 5 is_stmt 1 view .LVU19
  86              		.loc 1 39 15 is_stmt 0 view .LVU20
  87 003e 186A     		ldr	r0, [r3, #32]
  88              		.loc 1 39 19 view .LVU21
  89 0040 0143     		orrs	r1, r0
  90 0042 1962     		str	r1, [r3, #32]
  40:MDK-ARM/Lab07/motor.c **** 	
  41:MDK-ARM/Lab07/motor.c **** 		// Set PB3 to AF4,
  42:MDK-ARM/Lab07/motor.c ****     GPIOB->AFR[0] &= 0xFFFF0FFF; // clear PA4 bits,
  91              		.loc 1 42 5 is_stmt 1 view .LVU22
  92              		.loc 1 42 15 is_stmt 0 view .LVU23
  93 0044 116A     		ldr	r1, [r2, #32]
  94              		.loc 1 42 19 view .LVU24
  95 0046 3548     		ldr	r0, .L2+16
  96 0048 0140     		ands	r1, r0
  97 004a 1162     		str	r1, [r2, #32]
  43:MDK-ARM/Lab07/motor.c ****     GPIOB->AFR[0] |= (1 << 13);
  98              		.loc 1 43 5 is_stmt 1 view .LVU25
  99              		.loc 1 43 15 is_stmt 0 view .LVU26
 100 004c 106A     		ldr	r0, [r2, #32]
 101              		.loc 1 43 19 view .LVU27
 102 004e 8021     		movs	r1, #128
 103 0050 8901     		lsls	r1, r1, #6
 104 0052 0143     		orrs	r1, r0
 105 0054 1162     		str	r1, [r2, #32]
  44:MDK-ARM/Lab07/motor.c **** 
  45:MDK-ARM/Lab07/motor.c ****     // Set up a PA2, PA5 as GPIO output pins for motor direction control
  46:MDK-ARM/Lab07/motor.c **** 	GPIOA->MODER &= ~(3<<16);
 106              		.loc 1 46 2 is_stmt 1 view .LVU28
 107              		.loc 1 46 7 is_stmt 0 view .LVU29
 108 0056 1968     		ldr	r1, [r3]
 109              		.loc 1 46 15 view .LVU30
 110 0058 3148     		ldr	r0, .L2+20
 111 005a 0140     		ands	r1, r0
 112 005c 1960     		str	r1, [r3]
  47:MDK-ARM/Lab07/motor.c **** 	GPIOA->MODER &= ~(3<<10);
 113              		.loc 1 47 2 is_stmt 1 view .LVU31
 114              		.loc 1 47 7 is_stmt 0 view .LVU32
 115 005e 1968     		ldr	r1, [r3]
 116              		.loc 1 47 15 view .LVU33
 117 0060 3048     		ldr	r0, .L2+24
 118 0062 0140     		ands	r1, r0
 119 0064 1960     		str	r1, [r3]
  48:MDK-ARM/Lab07/motor.c **** 	GPIOA->MODER |= (1 << 16);
 120              		.loc 1 48 2 is_stmt 1 view .LVU34
 121              		.loc 1 48 7 is_stmt 0 view .LVU35
 122 0066 1868     		ldr	r0, [r3]
 123              		.loc 1 48 15 view .LVU36
 124 0068 8021     		movs	r1, #128
ARM GAS  /tmp/ccjIrmio.s 			page 4


 125 006a 4902     		lsls	r1, r1, #9
 126 006c 0143     		orrs	r1, r0
 127 006e 1960     		str	r1, [r3]
  49:MDK-ARM/Lab07/motor.c ****     GPIOA->MODER |= (1 << 10);// | (1 << 4);
 128              		.loc 1 49 5 is_stmt 1 view .LVU37
 129              		.loc 1 49 10 is_stmt 0 view .LVU38
 130 0070 1968     		ldr	r1, [r3]
 131              		.loc 1 49 18 view .LVU39
 132 0072 8020     		movs	r0, #128
 133 0074 C000     		lsls	r0, r0, #3
 134 0076 0143     		orrs	r1, r0
 135 0078 1960     		str	r1, [r3]
  50:MDK-ARM/Lab07/motor.c **** 
  51:MDK-ARM/Lab07/motor.c **** 		// Set up a PB2, PB10 as GPIO output pins for motor direction control
  52:MDK-ARM/Lab07/motor.c ****     GPIOB->MODER &= 0xFFCFFFCF; // clear PB2, PB10 bits,
 136              		.loc 1 52 5 is_stmt 1 view .LVU40
 137              		.loc 1 52 10 is_stmt 0 view .LVU41
 138 007a 1168     		ldr	r1, [r2]
 139              		.loc 1 52 18 view .LVU42
 140 007c 2A4D     		ldr	r5, .L2+28
 141 007e 2940     		ands	r1, r5
 142 0080 1160     		str	r1, [r2]
  53:MDK-ARM/Lab07/motor.c ****     GPIOB->MODER |= (1 << 4) | (1 << 20);
 143              		.loc 1 53 5 is_stmt 1 view .LVU43
 144              		.loc 1 53 10 is_stmt 0 view .LVU44
 145 0082 1568     		ldr	r5, [r2]
 146              		.loc 1 53 18 view .LVU45
 147 0084 2949     		ldr	r1, .L2+32
 148 0086 2943     		orrs	r1, r5
 149 0088 1160     		str	r1, [r2]
  54:MDK-ARM/Lab07/motor.c ****    
  55:MDK-ARM/Lab07/motor.c ****     //Initialize one direction pin to high, the other low
  56:MDK-ARM/Lab07/motor.c ****     GPIOA->ODR &= ~(1 << 5);
 150              		.loc 1 56 5 is_stmt 1 view .LVU46
 151              		.loc 1 56 10 is_stmt 0 view .LVU47
 152 008a 5969     		ldr	r1, [r3, #20]
 153              		.loc 1 56 16 view .LVU48
 154 008c 2025     		movs	r5, #32
 155 008e A943     		bics	r1, r5
 156 0090 5961     		str	r1, [r3, #20]
  57:MDK-ARM/Lab07/motor.c ****     GPIOA->ODR |= (1 << 8);
 157              		.loc 1 57 5 is_stmt 1 view .LVU49
 158              		.loc 1 57 10 is_stmt 0 view .LVU50
 159 0092 5D69     		ldr	r5, [r3, #20]
 160              		.loc 1 57 16 view .LVU51
 161 0094 8021     		movs	r1, #128
 162 0096 4900     		lsls	r1, r1, #1
 163 0098 0D43     		orrs	r5, r1
 164 009a 5D61     		str	r5, [r3, #20]
  58:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR |= (1 << 10);
 165              		.loc 1 58 3 is_stmt 1 view .LVU52
 166              		.loc 1 58 8 is_stmt 0 view .LVU53
 167 009c 5369     		ldr	r3, [r2, #20]
 168              		.loc 1 58 14 view .LVU54
 169 009e 1843     		orrs	r0, r3
 170 00a0 5061     		str	r0, [r2, #20]
  59:MDK-ARM/Lab07/motor.c ****     GPIOB->ODR &= ~(1 << 2);
ARM GAS  /tmp/ccjIrmio.s 			page 5


 171              		.loc 1 59 5 is_stmt 1 view .LVU55
 172              		.loc 1 59 10 is_stmt 0 view .LVU56
 173 00a2 5369     		ldr	r3, [r2, #20]
 174              		.loc 1 59 16 view .LVU57
 175 00a4 0420     		movs	r0, #4
 176 00a6 8343     		bics	r3, r0
 177 00a8 5361     		str	r3, [r2, #20]
  60:MDK-ARM/Lab07/motor.c **** 
  61:MDK-ARM/Lab07/motor.c ****     // Set up PWM timer
  62:MDK-ARM/Lab07/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 178              		.loc 1 62 5 is_stmt 1 view .LVU58
 179              		.loc 1 62 8 is_stmt 0 view .LVU59
 180 00aa E369     		ldr	r3, [r4, #28]
 181              		.loc 1 62 18 view .LVU60
 182 00ac 1943     		orrs	r1, r3
 183 00ae E161     		str	r1, [r4, #28]
  63:MDK-ARM/Lab07/motor.c ****     TIM14->CR1 = 0;                         // Clear control registers
 184              		.loc 1 63 5 is_stmt 1 view .LVU61
 185              		.loc 1 63 16 is_stmt 0 view .LVU62
 186 00b0 1F4A     		ldr	r2, .L2+36
 187 00b2 0021     		movs	r1, #0
 188 00b4 1160     		str	r1, [r2]
  64:MDK-ARM/Lab07/motor.c ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 189              		.loc 1 64 5 is_stmt 1 view .LVU63
 190              		.loc 1 64 18 is_stmt 0 view .LVU64
 191 00b6 9161     		str	r1, [r2, #24]
  65:MDK-ARM/Lab07/motor.c ****     TIM14->CCER = 0;
 192              		.loc 1 65 5 is_stmt 1 view .LVU65
 193              		.loc 1 65 17 is_stmt 0 view .LVU66
 194 00b8 1162     		str	r1, [r2, #32]
  66:MDK-ARM/Lab07/motor.c **** 		
  67:MDK-ARM/Lab07/motor.c **** 		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 195              		.loc 1 67 3 is_stmt 1 view .LVU67
 196              		.loc 1 67 6 is_stmt 0 view .LVU68
 197 00ba E369     		ldr	r3, [r4, #28]
 198              		.loc 1 67 16 view .LVU69
 199 00bc 0338     		subs	r0, r0, #3
 200 00be 0343     		orrs	r3, r0
 201 00c0 E361     		str	r3, [r4, #28]
  68:MDK-ARM/Lab07/motor.c ****     TIM2->CR1 = 0;                         // Clear control registers
 202              		.loc 1 68 5 is_stmt 1 view .LVU70
 203              		.loc 1 68 15 is_stmt 0 view .LVU71
 204 00c2 8023     		movs	r3, #128
 205 00c4 DB05     		lsls	r3, r3, #23
 206 00c6 1960     		str	r1, [r3]
  69:MDK-ARM/Lab07/motor.c ****     TIM2->CCMR1 = 0;                       // (prevents having to manually clear bits)
 207              		.loc 1 69 5 is_stmt 1 view .LVU72
 208              		.loc 1 69 17 is_stmt 0 view .LVU73
 209 00c8 9961     		str	r1, [r3, #24]
  70:MDK-ARM/Lab07/motor.c ****     TIM2->CCER = 0;
 210              		.loc 1 70 5 is_stmt 1 view .LVU74
 211              		.loc 1 70 16 is_stmt 0 view .LVU75
 212 00ca 1962     		str	r1, [r3, #32]
  71:MDK-ARM/Lab07/motor.c **** 
  72:MDK-ARM/Lab07/motor.c ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  73:MDK-ARM/Lab07/motor.c ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 213              		.loc 1 73 5 is_stmt 1 view .LVU76
ARM GAS  /tmp/ccjIrmio.s 			page 6


 214              		.loc 1 73 10 is_stmt 0 view .LVU77
 215 00cc 9469     		ldr	r4, [r2, #24]
 216              		.loc 1 73 18 view .LVU78
 217 00ce 6825     		movs	r5, #104
 218 00d0 2C43     		orrs	r4, r5
 219 00d2 9461     		str	r4, [r2, #24]
  74:MDK-ARM/Lab07/motor.c ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 220              		.loc 1 74 5 is_stmt 1 view .LVU79
 221              		.loc 1 74 10 is_stmt 0 view .LVU80
 222 00d4 146A     		ldr	r4, [r2, #32]
 223              		.loc 1 74 17 view .LVU81
 224 00d6 0443     		orrs	r4, r0
 225 00d8 1462     		str	r4, [r2, #32]
  75:MDK-ARM/Lab07/motor.c ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 226              		.loc 1 75 5 is_stmt 1 view .LVU82
 227              		.loc 1 75 16 is_stmt 0 view .LVU83
 228 00da 9062     		str	r0, [r2, #40]
  76:MDK-ARM/Lab07/motor.c ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 229              		.loc 1 76 5 is_stmt 1 view .LVU84
 230              		.loc 1 76 16 is_stmt 0 view .LVU85
 231 00dc 9625     		movs	r5, #150
 232 00de ED00     		lsls	r5, r5, #3
 233 00e0 D562     		str	r5, [r2, #44]
  77:MDK-ARM/Lab07/motor.c ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 234              		.loc 1 77 5 is_stmt 1 view .LVU86
 235              		.loc 1 77 17 is_stmt 0 view .LVU87
 236 00e2 5163     		str	r1, [r2, #52]
  78:MDK-ARM/Lab07/motor.c ****     
  79:MDK-ARM/Lab07/motor.c ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 237              		.loc 1 79 5 is_stmt 1 view .LVU88
 238              		.loc 1 79 10 is_stmt 0 view .LVU89
 239 00e4 1468     		ldr	r4, [r2]
 240              		.loc 1 79 16 view .LVU90
 241 00e6 0443     		orrs	r4, r0
 242 00e8 1460     		str	r4, [r2]
  80:MDK-ARM/Lab07/motor.c **** 		
  81:MDK-ARM/Lab07/motor.c **** 		TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 243              		.loc 1 81 3 is_stmt 1 view .LVU91
 244              		.loc 1 81 7 is_stmt 0 view .LVU92
 245 00ea 9C69     		ldr	r4, [r3, #24]
 246              		.loc 1 81 15 view .LVU93
 247 00ec D022     		movs	r2, #208
 248 00ee D201     		lsls	r2, r2, #7
 249 00f0 2243     		orrs	r2, r4
 250 00f2 9A61     		str	r2, [r3, #24]
  82:MDK-ARM/Lab07/motor.c ****     TIM2->CCER |= TIM_CCER_CC2E;           // Enable capture-compare channel 2
 251              		.loc 1 82 5 is_stmt 1 view .LVU94
 252              		.loc 1 82 9 is_stmt 0 view .LVU95
 253 00f4 1A6A     		ldr	r2, [r3, #32]
 254              		.loc 1 82 16 view .LVU96
 255 00f6 1024     		movs	r4, #16
 256 00f8 2243     		orrs	r2, r4
 257 00fa 1A62     		str	r2, [r3, #32]
  83:MDK-ARM/Lab07/motor.c ****     TIM2->PSC = 1;                         // Run timer on 24Mhz
 258              		.loc 1 83 5 is_stmt 1 view .LVU97
 259              		.loc 1 83 15 is_stmt 0 view .LVU98
 260 00fc 9862     		str	r0, [r3, #40]
ARM GAS  /tmp/ccjIrmio.s 			page 7


  84:MDK-ARM/Lab07/motor.c ****     TIM2->ARR = 1200;                      // PWM at 20kHz
 261              		.loc 1 84 5 is_stmt 1 view .LVU99
 262              		.loc 1 84 15 is_stmt 0 view .LVU100
 263 00fe DD62     		str	r5, [r3, #44]
  85:MDK-ARM/Lab07/motor.c ****     TIM2->CCR1 = 0;                        // Start PWM at 0% duty cycle
 264              		.loc 1 85 5 is_stmt 1 view .LVU101
 265              		.loc 1 85 16 is_stmt 0 view .LVU102
 266 0100 5963     		str	r1, [r3, #52]
  86:MDK-ARM/Lab07/motor.c ****     
  87:MDK-ARM/Lab07/motor.c ****     TIM2->CR1 |= TIM_CR1_CEN;              // Enable timer
 267              		.loc 1 87 5 is_stmt 1 view .LVU103
 268              		.loc 1 87 9 is_stmt 0 view .LVU104
 269 0102 1A68     		ldr	r2, [r3]
 270              		.loc 1 87 15 view .LVU105
 271 0104 0243     		orrs	r2, r0
 272 0106 1A60     		str	r2, [r3]
  88:MDK-ARM/Lab07/motor.c **** }
 273              		.loc 1 88 1 view .LVU106
 274              		@ sp needed
 275 0108 30BD     		pop	{r4, r5, pc}
 276              	.L3:
 277 010a C046     		.align	2
 278              	.L2:
 279 010c 00100240 		.word	1073876992
 280 0110 FFFEFFFF 		.word	-257
 281 0114 00040048 		.word	1207960576
 282 0118 FFFFF0FF 		.word	-983041
 283 011c FF0FFFFF 		.word	-61441
 284 0120 FFFFFCFF 		.word	-196609
 285 0124 FFF3FFFF 		.word	-3073
 286 0128 CFFFCFFF 		.word	-3145777
 287 012c 10001000 		.word	1048592
 288 0130 00200040 		.word	1073750016
 289              		.cfi_endproc
 290              	.LFE44:
 292              		.global	__aeabi_uidiv
 293              		.section	.text.pwm_setDutyCycleL,"ax",%progbits
 294              		.align	1
 295              		.global	pwm_setDutyCycleL
 296              		.syntax unified
 297              		.code	16
 298              		.thumb_func
 300              	pwm_setDutyCycleL:
 301              	.LVL0:
 302              	.LFB45:
  89:MDK-ARM/Lab07/motor.c **** 
  90:MDK-ARM/Lab07/motor.c **** // Set the duty cycle of the PWM Left, accepts (0-100)
  91:MDK-ARM/Lab07/motor.c **** void pwm_setDutyCycleL(uint8_t duty) {
 303              		.loc 1 91 38 is_stmt 1 view -0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		.loc 1 91 38 is_stmt 0 view .LVU108
 308 0000 10B5     		push	{r4, lr}
 309              	.LCFI1:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 4, -8
ARM GAS  /tmp/ccjIrmio.s 			page 8


 312              		.cfi_offset 14, -4
  92:MDK-ARM/Lab07/motor.c ****     if(duty <= 100) {
 313              		.loc 1 92 5 is_stmt 1 view .LVU109
 314              		.loc 1 92 7 is_stmt 0 view .LVU110
 315 0002 6428     		cmp	r0, #100
 316 0004 06D8     		bhi	.L4
  93:MDK-ARM/Lab07/motor.c ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 317              		.loc 1 93 9 is_stmt 1 view .LVU111
 318              		.loc 1 93 44 is_stmt 0 view .LVU112
 319 0006 044C     		ldr	r4, .L6
 320 0008 E36A     		ldr	r3, [r4, #44]
 321              		.loc 1 93 38 view .LVU113
 322 000a 5843     		muls	r0, r3
 323              	.LVL1:
 324              		.loc 1 93 50 view .LVU114
 325 000c 6421     		movs	r1, #100
 326 000e FFF7FEFF 		bl	__aeabi_uidiv
 327              	.LVL2:
 328              		.loc 1 93 21 view .LVU115
 329 0012 6063     		str	r0, [r4, #52]
 330              	.L4:
  94:MDK-ARM/Lab07/motor.c ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  95:MDK-ARM/Lab07/motor.c ****     }
  96:MDK-ARM/Lab07/motor.c **** }
 331              		.loc 1 96 1 view .LVU116
 332              		@ sp needed
 333 0014 10BD     		pop	{r4, pc}
 334              	.L7:
 335 0016 C046     		.align	2
 336              	.L6:
 337 0018 00200040 		.word	1073750016
 338              		.cfi_endproc
 339              	.LFE45:
 341              		.section	.text.pwm_setDutyCycleR,"ax",%progbits
 342              		.align	1
 343              		.global	pwm_setDutyCycleR
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	pwm_setDutyCycleR:
 349              	.LVL3:
 350              	.LFB46:
  97:MDK-ARM/Lab07/motor.c **** 
  98:MDK-ARM/Lab07/motor.c **** // Set the duty cycle of the PWM Right, accepts (0-100)
  99:MDK-ARM/Lab07/motor.c **** void pwm_setDutyCycleR(uint8_t duty) {
 351              		.loc 1 99 38 is_stmt 1 view -0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              		.loc 1 99 38 is_stmt 0 view .LVU118
 356 0000 10B5     		push	{r4, lr}
 357              	.LCFI2:
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 4, -8
 360              		.cfi_offset 14, -4
 100:MDK-ARM/Lab07/motor.c ****     if(duty <= 100) {
 361              		.loc 1 100 5 is_stmt 1 view .LVU119
ARM GAS  /tmp/ccjIrmio.s 			page 9


 362              		.loc 1 100 7 is_stmt 0 view .LVU120
 363 0002 6428     		cmp	r0, #100
 364 0004 07D8     		bhi	.L8
 101:MDK-ARM/Lab07/motor.c ****         TIM2->CCR1 = ((uint32_t)duty*TIM2->ARR)/100;  // Use linear transform to produce CCR1 value
 365              		.loc 1 101 9 is_stmt 1 view .LVU121
 366              		.loc 1 101 42 is_stmt 0 view .LVU122
 367 0006 8024     		movs	r4, #128
 368 0008 E405     		lsls	r4, r4, #23
 369 000a E36A     		ldr	r3, [r4, #44]
 370              		.loc 1 101 37 view .LVU123
 371 000c 5843     		muls	r0, r3
 372              	.LVL4:
 373              		.loc 1 101 48 view .LVU124
 374 000e 6421     		movs	r1, #100
 375 0010 FFF7FEFF 		bl	__aeabi_uidiv
 376              	.LVL5:
 377              		.loc 1 101 20 view .LVU125
 378 0014 6063     		str	r0, [r4, #52]
 379              	.L8:
 102:MDK-ARM/Lab07/motor.c ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
 103:MDK-ARM/Lab07/motor.c ****     }
 104:MDK-ARM/Lab07/motor.c **** }
 380              		.loc 1 104 1 view .LVU126
 381              		@ sp needed
 382 0016 10BD     		pop	{r4, pc}
 383              		.cfi_endproc
 384              	.LFE46:
 386              		.section	.text.set_Forward,"ax",%progbits
 387              		.align	1
 388              		.global	set_Forward
 389              		.syntax unified
 390              		.code	16
 391              		.thumb_func
 393              	set_Forward:
 394              	.LFB47:
 105:MDK-ARM/Lab07/motor.c **** 
 106:MDK-ARM/Lab07/motor.c **** void set_Forward(){
 395              		.loc 1 106 19 is_stmt 1 view -0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 107:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR |= (1 << 5);
 400              		.loc 1 107 3 view .LVU128
 401              		.loc 1 107 8 is_stmt 0 view .LVU129
 402 0000 9023     		movs	r3, #144
 403 0002 DB05     		lsls	r3, r3, #23
 404 0004 5A69     		ldr	r2, [r3, #20]
 405              		.loc 1 107 14 view .LVU130
 406 0006 2021     		movs	r1, #32
 407 0008 0A43     		orrs	r2, r1
 408 000a 5A61     		str	r2, [r3, #20]
 108:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR &= ~(1 << 8);
 409              		.loc 1 108 3 is_stmt 1 view .LVU131
 410              		.loc 1 108 8 is_stmt 0 view .LVU132
 411 000c 5A69     		ldr	r2, [r3, #20]
 412              		.loc 1 108 14 view .LVU133
ARM GAS  /tmp/ccjIrmio.s 			page 10


 413 000e 0749     		ldr	r1, .L11
 414 0010 0A40     		ands	r2, r1
 415 0012 5A61     		str	r2, [r3, #20]
 109:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR |= (1 << 10);
 416              		.loc 1 109 3 is_stmt 1 view .LVU134
 417              		.loc 1 109 8 is_stmt 0 view .LVU135
 418 0014 064B     		ldr	r3, .L11+4
 419 0016 5969     		ldr	r1, [r3, #20]
 420              		.loc 1 109 14 view .LVU136
 421 0018 8022     		movs	r2, #128
 422 001a D200     		lsls	r2, r2, #3
 423 001c 0A43     		orrs	r2, r1
 424 001e 5A61     		str	r2, [r3, #20]
 110:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR &= ~(1 << 2);
 425              		.loc 1 110 3 is_stmt 1 view .LVU137
 426              		.loc 1 110 8 is_stmt 0 view .LVU138
 427 0020 5A69     		ldr	r2, [r3, #20]
 428              		.loc 1 110 14 view .LVU139
 429 0022 0421     		movs	r1, #4
 430 0024 8A43     		bics	r2, r1
 431 0026 5A61     		str	r2, [r3, #20]
 111:MDK-ARM/Lab07/motor.c **** }
 432              		.loc 1 111 1 view .LVU140
 433              		@ sp needed
 434 0028 7047     		bx	lr
 435              	.L12:
 436 002a C046     		.align	2
 437              	.L11:
 438 002c FFFEFFFF 		.word	-257
 439 0030 00040048 		.word	1207960576
 440              		.cfi_endproc
 441              	.LFE47:
 443              		.section	.text.set_Backward,"ax",%progbits
 444              		.align	1
 445              		.global	set_Backward
 446              		.syntax unified
 447              		.code	16
 448              		.thumb_func
 450              	set_Backward:
 451              	.LFB48:
 112:MDK-ARM/Lab07/motor.c **** 
 113:MDK-ARM/Lab07/motor.c **** void set_Backward(){
 452              		.loc 1 113 20 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 114:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR |= (1 << 8);
 457              		.loc 1 114 3 view .LVU142
 458              		.loc 1 114 8 is_stmt 0 view .LVU143
 459 0000 9023     		movs	r3, #144
 460 0002 DB05     		lsls	r3, r3, #23
 461 0004 5969     		ldr	r1, [r3, #20]
 462              		.loc 1 114 14 view .LVU144
 463 0006 8022     		movs	r2, #128
 464 0008 5200     		lsls	r2, r2, #1
 465 000a 0A43     		orrs	r2, r1
ARM GAS  /tmp/ccjIrmio.s 			page 11


 466 000c 5A61     		str	r2, [r3, #20]
 115:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR &= ~(1 << 5);
 467              		.loc 1 115 3 is_stmt 1 view .LVU145
 468              		.loc 1 115 8 is_stmt 0 view .LVU146
 469 000e 5A69     		ldr	r2, [r3, #20]
 470              		.loc 1 115 14 view .LVU147
 471 0010 2021     		movs	r1, #32
 472 0012 8A43     		bics	r2, r1
 473 0014 5A61     		str	r2, [r3, #20]
 116:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR |= (1 << 2);
 474              		.loc 1 116 3 is_stmt 1 view .LVU148
 475              		.loc 1 116 8 is_stmt 0 view .LVU149
 476 0016 054B     		ldr	r3, .L14
 477 0018 5A69     		ldr	r2, [r3, #20]
 478              		.loc 1 116 14 view .LVU150
 479 001a 1C39     		subs	r1, r1, #28
 480 001c 0A43     		orrs	r2, r1
 481 001e 5A61     		str	r2, [r3, #20]
 117:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR &= ~(1 << 10);
 482              		.loc 1 117 3 is_stmt 1 view .LVU151
 483              		.loc 1 117 8 is_stmt 0 view .LVU152
 484 0020 5A69     		ldr	r2, [r3, #20]
 485              		.loc 1 117 14 view .LVU153
 486 0022 0349     		ldr	r1, .L14+4
 487 0024 0A40     		ands	r2, r1
 488 0026 5A61     		str	r2, [r3, #20]
 118:MDK-ARM/Lab07/motor.c **** }
 489              		.loc 1 118 1 view .LVU154
 490              		@ sp needed
 491 0028 7047     		bx	lr
 492              	.L15:
 493 002a C046     		.align	2
 494              	.L14:
 495 002c 00040048 		.word	1207960576
 496 0030 FFFBFFFF 		.word	-1025
 497              		.cfi_endproc
 498              	.LFE48:
 500              		.section	.text.set_Right,"ax",%progbits
 501              		.align	1
 502              		.global	set_Right
 503              		.syntax unified
 504              		.code	16
 505              		.thumb_func
 507              	set_Right:
 508              	.LFB49:
 119:MDK-ARM/Lab07/motor.c **** 
 120:MDK-ARM/Lab07/motor.c **** void set_Right(){
 509              		.loc 1 120 17 is_stmt 1 view -0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 121:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR |= (1 << 5);
 514              		.loc 1 121 3 view .LVU156
 515              		.loc 1 121 8 is_stmt 0 view .LVU157
 516 0000 9023     		movs	r3, #144
 517 0002 DB05     		lsls	r3, r3, #23
ARM GAS  /tmp/ccjIrmio.s 			page 12


 518 0004 5A69     		ldr	r2, [r3, #20]
 519              		.loc 1 121 14 view .LVU158
 520 0006 2021     		movs	r1, #32
 521 0008 0A43     		orrs	r2, r1
 522 000a 5A61     		str	r2, [r3, #20]
 122:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR &= ~(1 << 6);
 523              		.loc 1 122 3 is_stmt 1 view .LVU159
 524              		.loc 1 122 8 is_stmt 0 view .LVU160
 525 000c 5A69     		ldr	r2, [r3, #20]
 526              		.loc 1 122 14 view .LVU161
 527 000e 2031     		adds	r1, r1, #32
 528 0010 8A43     		bics	r2, r1
 529 0012 5A61     		str	r2, [r3, #20]
 123:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR |= (1 << 2);
 530              		.loc 1 123 3 is_stmt 1 view .LVU162
 531              		.loc 1 123 8 is_stmt 0 view .LVU163
 532 0014 044B     		ldr	r3, .L17
 533 0016 5A69     		ldr	r2, [r3, #20]
 534              		.loc 1 123 14 view .LVU164
 535 0018 3C39     		subs	r1, r1, #60
 536 001a 0A43     		orrs	r2, r1
 537 001c 5A61     		str	r2, [r3, #20]
 124:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR &= ~(1 << 10);
 538              		.loc 1 124 3 is_stmt 1 view .LVU165
 539              		.loc 1 124 8 is_stmt 0 view .LVU166
 540 001e 5A69     		ldr	r2, [r3, #20]
 541              		.loc 1 124 14 view .LVU167
 542 0020 0249     		ldr	r1, .L17+4
 543 0022 0A40     		ands	r2, r1
 544 0024 5A61     		str	r2, [r3, #20]
 125:MDK-ARM/Lab07/motor.c **** }
 545              		.loc 1 125 1 view .LVU168
 546              		@ sp needed
 547 0026 7047     		bx	lr
 548              	.L18:
 549              		.align	2
 550              	.L17:
 551 0028 00040048 		.word	1207960576
 552 002c FFFBFFFF 		.word	-1025
 553              		.cfi_endproc
 554              	.LFE49:
 556              		.section	.text.set_Left,"ax",%progbits
 557              		.align	1
 558              		.global	set_Left
 559              		.syntax unified
 560              		.code	16
 561              		.thumb_func
 563              	set_Left:
 564              	.LFB50:
 126:MDK-ARM/Lab07/motor.c **** 
 127:MDK-ARM/Lab07/motor.c **** void set_Left(){
 565              		.loc 1 127 16 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		@ link register save eliminated.
 128:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR |= (1 << 6);
ARM GAS  /tmp/ccjIrmio.s 			page 13


 570              		.loc 1 128 3 view .LVU170
 571              		.loc 1 128 8 is_stmt 0 view .LVU171
 572 0000 9023     		movs	r3, #144
 573 0002 DB05     		lsls	r3, r3, #23
 574 0004 5A69     		ldr	r2, [r3, #20]
 575              		.loc 1 128 14 view .LVU172
 576 0006 4021     		movs	r1, #64
 577 0008 0A43     		orrs	r2, r1
 578 000a 5A61     		str	r2, [r3, #20]
 129:MDK-ARM/Lab07/motor.c **** 		GPIOA->ODR &= ~(1 << 5);
 579              		.loc 1 129 3 is_stmt 1 view .LVU173
 580              		.loc 1 129 8 is_stmt 0 view .LVU174
 581 000c 5A69     		ldr	r2, [r3, #20]
 582              		.loc 1 129 14 view .LVU175
 583 000e 2039     		subs	r1, r1, #32
 584 0010 8A43     		bics	r2, r1
 585 0012 5A61     		str	r2, [r3, #20]
 130:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR |= (1 << 10);
 586              		.loc 1 130 3 is_stmt 1 view .LVU176
 587              		.loc 1 130 8 is_stmt 0 view .LVU177
 588 0014 054B     		ldr	r3, .L20
 589 0016 5969     		ldr	r1, [r3, #20]
 590              		.loc 1 130 14 view .LVU178
 591 0018 8022     		movs	r2, #128
 592 001a D200     		lsls	r2, r2, #3
 593 001c 0A43     		orrs	r2, r1
 594 001e 5A61     		str	r2, [r3, #20]
 131:MDK-ARM/Lab07/motor.c **** 		GPIOB->ODR &= ~(1 << 2);
 595              		.loc 1 131 3 is_stmt 1 view .LVU179
 596              		.loc 1 131 8 is_stmt 0 view .LVU180
 597 0020 5A69     		ldr	r2, [r3, #20]
 598              		.loc 1 131 14 view .LVU181
 599 0022 0421     		movs	r1, #4
 600 0024 8A43     		bics	r2, r1
 601 0026 5A61     		str	r2, [r3, #20]
 132:MDK-ARM/Lab07/motor.c **** }
 602              		.loc 1 132 1 view .LVU182
 603              		@ sp needed
 604 0028 7047     		bx	lr
 605              	.L21:
 606 002a C046     		.align	2
 607              	.L20:
 608 002c 00040048 		.word	1207960576
 609              		.cfi_endproc
 610              	.LFE50:
 612              		.section	.text.encoder_init,"ax",%progbits
 613              		.align	1
 614              		.global	encoder_init
 615              		.syntax unified
 616              		.code	16
 617              		.thumb_func
 619              	encoder_init:
 620              	.LFB51:
 133:MDK-ARM/Lab07/motor.c **** 
 134:MDK-ARM/Lab07/motor.c **** // Sets up encoder interface to read motor speed
 135:MDK-ARM/Lab07/motor.c **** void encoder_init(void) {
 621              		.loc 1 135 25 is_stmt 1 view -0
ARM GAS  /tmp/ccjIrmio.s 			page 14


 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 626              	.LCFI3:
 627              		.cfi_def_cfa_offset 20
 628              		.cfi_offset 4, -20
 629              		.cfi_offset 5, -16
 630              		.cfi_offset 6, -12
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 14, -4
 633 0002 C646     		mov	lr, r8
 634 0004 00B5     		push	{lr}
 635              	.LCFI4:
 636              		.cfi_def_cfa_offset 24
 637              		.cfi_offset 8, -24
 136:MDK-ARM/Lab07/motor.c ****     
 137:MDK-ARM/Lab07/motor.c ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
 138:MDK-ARM/Lab07/motor.c ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 638              		.loc 1 138 5 view .LVU184
 639              		.loc 1 138 10 is_stmt 0 view .LVU185
 640 0006 394B     		ldr	r3, .L23
 641 0008 1A68     		ldr	r2, [r3]
 642              		.loc 1 138 18 view .LVU186
 643 000a 3949     		ldr	r1, .L23+4
 644 000c 0A40     		ands	r2, r1
 645 000e 1A60     		str	r2, [r3]
 139:MDK-ARM/Lab07/motor.c ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 646              		.loc 1 139 5 is_stmt 1 view .LVU187
 647              		.loc 1 139 10 is_stmt 0 view .LVU188
 648 0010 1968     		ldr	r1, [r3]
 649              		.loc 1 139 18 view .LVU189
 650 0012 A022     		movs	r2, #160
 651 0014 1201     		lsls	r2, r2, #4
 652 0016 0A43     		orrs	r2, r1
 653 0018 1A60     		str	r2, [r3]
 140:MDK-ARM/Lab07/motor.c ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 654              		.loc 1 140 5 is_stmt 1 view .LVU190
 655              		.loc 1 140 15 is_stmt 0 view .LVU191
 656 001a 196A     		ldr	r1, [r3, #32]
 657              		.loc 1 140 19 view .LVU192
 658 001c 8822     		movs	r2, #136
 659 001e 5203     		lsls	r2, r2, #13
 660 0020 0A43     		orrs	r2, r1
 661 0022 1A62     		str	r2, [r3, #32]
 141:MDK-ARM/Lab07/motor.c **** 		
 142:MDK-ARM/Lab07/motor.c **** 		// Set up encoder input pins (TIMER 15 CH1 and CH2)
 143:MDK-ARM/Lab07/motor.c **** 		GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 662              		.loc 1 143 3 is_stmt 1 view .LVU193
 663              		.loc 1 143 8 is_stmt 0 view .LVU194
 664 0024 1A68     		ldr	r2, [r3]
 665              		.loc 1 143 16 view .LVU195
 666 0026 3349     		ldr	r1, .L23+8
 667 0028 0A40     		ands	r2, r1
 668 002a 1A60     		str	r2, [r3]
 144:MDK-ARM/Lab07/motor.c ****     GPIOB->MODER |= (GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 669              		.loc 1 144 5 is_stmt 1 view .LVU196
ARM GAS  /tmp/ccjIrmio.s 			page 15


 670              		.loc 1 144 10 is_stmt 0 view .LVU197
 671 002c 1968     		ldr	r1, [r3]
 672              		.loc 1 144 18 view .LVU198
 673 002e A022     		movs	r2, #160
 674 0030 1206     		lsls	r2, r2, #24
 675 0032 0A43     		orrs	r2, r1
 676 0034 1A60     		str	r2, [r3]
 145:MDK-ARM/Lab07/motor.c ****     GPIOB->AFR[1] |= ( (1 << 24) | (1 << 28) );
 677              		.loc 1 145 5 is_stmt 1 view .LVU199
 678              		.loc 1 145 15 is_stmt 0 view .LVU200
 679 0036 596A     		ldr	r1, [r3, #36]
 680              		.loc 1 145 19 view .LVU201
 681 0038 8822     		movs	r2, #136
 682 003a 5205     		lsls	r2, r2, #21
 683 003c 0A43     		orrs	r2, r1
 684 003e 5A62     		str	r2, [r3, #36]
 146:MDK-ARM/Lab07/motor.c **** 
 147:MDK-ARM/Lab07/motor.c ****     // Set up encoder interface (TIM3 encoder input mode)
 148:MDK-ARM/Lab07/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 685              		.loc 1 148 5 is_stmt 1 view .LVU202
 686              		.loc 1 148 8 is_stmt 0 view .LVU203
 687 0040 2D49     		ldr	r1, .L23+12
 688 0042 CB69     		ldr	r3, [r1, #28]
 689              		.loc 1 148 18 view .LVU204
 690 0044 0222     		movs	r2, #2
 691 0046 1343     		orrs	r3, r2
 692 0048 CB61     		str	r3, [r1, #28]
 149:MDK-ARM/Lab07/motor.c ****     TIM3->CCMR1 = 0;
 693              		.loc 1 149 5 is_stmt 1 view .LVU205
 694              		.loc 1 149 17 is_stmt 0 view .LVU206
 695 004a 2C4B     		ldr	r3, .L23+16
 696 004c 0022     		movs	r2, #0
 697 004e 9A61     		str	r2, [r3, #24]
 150:MDK-ARM/Lab07/motor.c ****     TIM3->CCER = 0;
 698              		.loc 1 150 5 is_stmt 1 view .LVU207
 699              		.loc 1 150 16 is_stmt 0 view .LVU208
 700 0050 1A62     		str	r2, [r3, #32]
 151:MDK-ARM/Lab07/motor.c ****     TIM3->SMCR = 0;
 701              		.loc 1 151 5 is_stmt 1 view .LVU209
 702              		.loc 1 151 16 is_stmt 0 view .LVU210
 703 0052 9A60     		str	r2, [r3, #8]
 152:MDK-ARM/Lab07/motor.c ****     TIM3->CR1 = 0;
 704              		.loc 1 152 5 is_stmt 1 view .LVU211
 705              		.loc 1 152 15 is_stmt 0 view .LVU212
 706 0054 1A60     		str	r2, [r3]
 153:MDK-ARM/Lab07/motor.c **** 
 154:MDK-ARM/Lab07/motor.c ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 707              		.loc 1 154 5 is_stmt 1 view .LVU213
 708              		.loc 1 154 9 is_stmt 0 view .LVU214
 709 0056 9869     		ldr	r0, [r3, #24]
 710              		.loc 1 154 17 view .LVU215
 711 0058 0224     		movs	r4, #2
 712 005a FF34     		adds	r4, r4, #255
 713 005c A046     		mov	r8, r4
 714 005e 2043     		orrs	r0, r4
 715 0060 9861     		str	r0, [r3, #24]
 155:MDK-ARM/Lab07/motor.c ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
ARM GAS  /tmp/ccjIrmio.s 			page 16


 716              		.loc 1 155 5 is_stmt 1 view .LVU216
 717              		.loc 1 155 9 is_stmt 0 view .LVU217
 718 0062 9868     		ldr	r0, [r3, #8]
 719              		.loc 1 155 16 view .LVU218
 720 0064 0327     		movs	r7, #3
 721 0066 3843     		orrs	r0, r7
 722 0068 9860     		str	r0, [r3, #8]
 156:MDK-ARM/Lab07/motor.c ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 723              		.loc 1 156 5 is_stmt 1 view .LVU219
 724              		.loc 1 156 15 is_stmt 0 view .LVU220
 725 006a 254E     		ldr	r6, .L23+20
 726 006c DE62     		str	r6, [r3, #44]
 157:MDK-ARM/Lab07/motor.c ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 727              		.loc 1 157 5 is_stmt 1 view .LVU221
 728              		.loc 1 157 15 is_stmt 0 view .LVU222
 729 006e 254D     		ldr	r5, .L23+24
 730 0070 5D62     		str	r5, [r3, #36]
 158:MDK-ARM/Lab07/motor.c ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 159:MDK-ARM/Lab07/motor.c ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 160:MDK-ARM/Lab07/motor.c ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 731              		.loc 1 160 5 is_stmt 1 view .LVU223
 732              		.loc 1 160 9 is_stmt 0 view .LVU224
 733 0072 1868     		ldr	r0, [r3]
 734 0074 8446     		mov	ip, r0
 735              		.loc 1 160 15 view .LVU225
 736 0076 0120     		movs	r0, #1
 737 0078 6446     		mov	r4, ip
 738 007a 0443     		orrs	r4, r0
 739 007c 1C60     		str	r4, [r3]
 161:MDK-ARM/Lab07/motor.c **** 		
 162:MDK-ARM/Lab07/motor.c **** 		RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 740              		.loc 1 162 3 is_stmt 1 view .LVU226
 741              		.loc 1 162 6 is_stmt 0 view .LVU227
 742 007e 8B69     		ldr	r3, [r1, #24]
 743 0080 9C46     		mov	ip, r3
 744              		.loc 1 162 16 view .LVU228
 745 0082 8023     		movs	r3, #128
 746 0084 5B02     		lsls	r3, r3, #9
 747 0086 6446     		mov	r4, ip
 748 0088 2343     		orrs	r3, r4
 749 008a 8B61     		str	r3, [r1, #24]
 163:MDK-ARM/Lab07/motor.c ****     TIM15->CCMR1 = 0;
 750              		.loc 1 163 5 is_stmt 1 view .LVU229
 751              		.loc 1 163 18 is_stmt 0 view .LVU230
 752 008c 1E4B     		ldr	r3, .L23+28
 753 008e 9A61     		str	r2, [r3, #24]
 164:MDK-ARM/Lab07/motor.c ****     TIM15->CCER = 0;
 754              		.loc 1 164 5 is_stmt 1 view .LVU231
 755              		.loc 1 164 17 is_stmt 0 view .LVU232
 756 0090 1A62     		str	r2, [r3, #32]
 165:MDK-ARM/Lab07/motor.c ****     TIM15->SMCR = 0;
 757              		.loc 1 165 5 is_stmt 1 view .LVU233
 758              		.loc 1 165 17 is_stmt 0 view .LVU234
 759 0092 9A60     		str	r2, [r3, #8]
 166:MDK-ARM/Lab07/motor.c ****     TIM15->CR1 = 0;
 760              		.loc 1 166 5 is_stmt 1 view .LVU235
 761              		.loc 1 166 16 is_stmt 0 view .LVU236
ARM GAS  /tmp/ccjIrmio.s 			page 17


 762 0094 1A60     		str	r2, [r3]
 167:MDK-ARM/Lab07/motor.c **** 
 168:MDK-ARM/Lab07/motor.c ****     TIM15->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected
 763              		.loc 1 168 5 is_stmt 1 view .LVU237
 764              		.loc 1 168 10 is_stmt 0 view .LVU238
 765 0096 9A69     		ldr	r2, [r3, #24]
 766              		.loc 1 168 18 view .LVU239
 767 0098 4446     		mov	r4, r8
 768 009a 1443     		orrs	r4, r2
 769 009c 9C61     		str	r4, [r3, #24]
 169:MDK-ARM/Lab07/motor.c ****     TIM15->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and 
 770              		.loc 1 169 5 is_stmt 1 view .LVU240
 771              		.loc 1 169 10 is_stmt 0 view .LVU241
 772 009e 9A68     		ldr	r2, [r3, #8]
 773              		.loc 1 169 17 view .LVU242
 774 00a0 3A43     		orrs	r2, r7
 775 00a2 9A60     		str	r2, [r3, #8]
 170:MDK-ARM/Lab07/motor.c ****     TIM15->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest po
 776              		.loc 1 170 5 is_stmt 1 view .LVU243
 777              		.loc 1 170 16 is_stmt 0 view .LVU244
 778 00a4 DE62     		str	r6, [r3, #44]
 171:MDK-ARM/Lab07/motor.c ****     TIM15->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negat
 779              		.loc 1 171 5 is_stmt 1 view .LVU245
 780              		.loc 1 171 16 is_stmt 0 view .LVU246
 781 00a6 5D62     		str	r5, [r3, #36]
 172:MDK-ARM/Lab07/motor.c ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 173:MDK-ARM/Lab07/motor.c ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 174:MDK-ARM/Lab07/motor.c ****     TIM15->CR1 |= TIM_CR1_CEN;     
 782              		.loc 1 174 5 is_stmt 1 view .LVU247
 783              		.loc 1 174 10 is_stmt 0 view .LVU248
 784 00a8 1A68     		ldr	r2, [r3]
 785              		.loc 1 174 16 view .LVU249
 786 00aa 0243     		orrs	r2, r0
 787 00ac 1A60     		str	r2, [r3]
 175:MDK-ARM/Lab07/motor.c **** 
 176:MDK-ARM/Lab07/motor.c ****     // Configure a second timer (TIM6) to fire an ISR on update event
 177:MDK-ARM/Lab07/motor.c ****     // Used to periodically check and update speed variable
 178:MDK-ARM/Lab07/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 788              		.loc 1 178 5 is_stmt 1 view .LVU250
 789              		.loc 1 178 8 is_stmt 0 view .LVU251
 790 00ae CB69     		ldr	r3, [r1, #28]
 791              		.loc 1 178 18 view .LVU252
 792 00b0 1022     		movs	r2, #16
 793 00b2 1343     		orrs	r3, r2
 794 00b4 CB61     		str	r3, [r1, #28]
 179:MDK-ARM/Lab07/motor.c ****     
 180:MDK-ARM/Lab07/motor.c ****     // Select PSC and ARR values that give an appropriate interrupt rate
 181:MDK-ARM/Lab07/motor.c ****     TIM6->PSC = 11;
 795              		.loc 1 181 5 is_stmt 1 view .LVU253
 796              		.loc 1 181 15 is_stmt 0 view .LVU254
 797 00b6 154B     		ldr	r3, .L23+32
 798 00b8 053A     		subs	r2, r2, #5
 799 00ba 9A62     		str	r2, [r3, #40]
 182:MDK-ARM/Lab07/motor.c ****     TIM6->ARR = 30000;
 800              		.loc 1 182 5 is_stmt 1 view .LVU255
 801              		.loc 1 182 15 is_stmt 0 view .LVU256
 802 00bc 144A     		ldr	r2, .L23+36
ARM GAS  /tmp/ccjIrmio.s 			page 18


 803 00be DA62     		str	r2, [r3, #44]
 183:MDK-ARM/Lab07/motor.c ****     
 184:MDK-ARM/Lab07/motor.c ****     TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 804              		.loc 1 184 5 is_stmt 1 view .LVU257
 805              		.loc 1 184 9 is_stmt 0 view .LVU258
 806 00c0 DA68     		ldr	r2, [r3, #12]
 807              		.loc 1 184 16 view .LVU259
 808 00c2 0243     		orrs	r2, r0
 809 00c4 DA60     		str	r2, [r3, #12]
 185:MDK-ARM/Lab07/motor.c ****     TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 810              		.loc 1 185 5 is_stmt 1 view .LVU260
 811              		.loc 1 185 9 is_stmt 0 view .LVU261
 812 00c6 1A68     		ldr	r2, [r3]
 813              		.loc 1 185 15 view .LVU262
 814 00c8 0243     		orrs	r2, r0
 815 00ca 1A60     		str	r2, [r3]
 186:MDK-ARM/Lab07/motor.c **** 
 187:MDK-ARM/Lab07/motor.c ****     NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 816              		.loc 1 187 5 is_stmt 1 view .LVU263
 817              	.LVL6:
 818              	.LBB6:
 819              	.LBI6:
 820              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
ARM GAS  /tmp/ccjIrmio.s 			page 19


  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccjIrmio.s 			page 20


  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccjIrmio.s 			page 21


 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
ARM GAS  /tmp/ccjIrmio.s 			page 22


 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccjIrmio.s 			page 23


 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
ARM GAS  /tmp/ccjIrmio.s 			page 24


 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccjIrmio.s 			page 25


 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
ARM GAS  /tmp/ccjIrmio.s 			page 26


 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccjIrmio.s 			page 27


 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccjIrmio.s 			page 28


 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
ARM GAS  /tmp/ccjIrmio.s 			page 29


 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 821              		.loc 2 623 22 view .LVU264
 822              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 823              		.loc 2 625 3 view .LVU265
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 824              		.loc 2 627 5 view .LVU266
 825              		.loc 2 627 20 is_stmt 0 view .LVU267
 826 00cc 114B     		ldr	r3, .L23+40
 827 00ce 8022     		movs	r2, #128
 828 00d0 9202     		lsls	r2, r2, #10
 829 00d2 1A60     		str	r2, [r3]
 830              	.LVL7:
 831              		.loc 2 627 20 view .LVU268
 832              	.LBE7:
 833              	.LBE6:
 188:MDK-ARM/Lab07/motor.c ****     NVIC_SetPriority(TIM6_DAC_IRQn,2);
 834              		.loc 1 188 5 is_stmt 1 view .LVU269
 835              	.LBB8:
 836              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
ARM GAS  /tmp/ccjIrmio.s 			page 30


 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
ARM GAS  /tmp/ccjIrmio.s 			page 31


 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 837              		.loc 2 730 22 view .LVU270
 838              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 839              		.loc 2 732 3 view .LVU271
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 840              		.loc 2 734 5 view .LVU272
 841              		.loc 2 734 52 is_stmt 0 view .LVU273
 842 00d4 C420     		movs	r0, #196
 843 00d6 8000     		lsls	r0, r0, #2
 844 00d8 1958     		ldr	r1, [r3, r0]
 845              		.loc 2 734 33 view .LVU274
 846 00da 0F4A     		ldr	r2, .L23+44
 847 00dc 1140     		ands	r1, r2
 848              		.loc 2 734 102 view .LVU275
 849 00de 8022     		movs	r2, #128
 850 00e0 1202     		lsls	r2, r2, #8
 851 00e2 0A43     		orrs	r2, r1
 852              		.loc 2 734 30 view .LVU276
 853 00e4 1A50     		str	r2, [r3, r0]
 854              	.LVL8:
 855              		.loc 2 734 30 view .LVU277
 856              	.LBE9:
 857              	.LBE8:
 189:MDK-ARM/Lab07/motor.c **** }
 858              		.loc 1 189 1 view .LVU278
 859              		@ sp needed
ARM GAS  /tmp/ccjIrmio.s 			page 32


 860 00e6 80BC     		pop	{r7}
 861 00e8 B846     		mov	r8, r7
 862 00ea F0BD     		pop	{r4, r5, r6, r7, pc}
 863              	.L24:
 864              		.align	2
 865              	.L23:
 866 00ec 00040048 		.word	1207960576
 867 00f0 FFFAFFFF 		.word	-1281
 868 00f4 FFFFFFAF 		.word	-1342177281
 869 00f8 00100240 		.word	1073876992
 870 00fc 00040040 		.word	1073742848
 871 0100 FFFF0000 		.word	65535
 872 0104 FF7F0000 		.word	32767
 873 0108 00400140 		.word	1073823744
 874 010c 00100040 		.word	1073745920
 875 0110 30750000 		.word	30000
 876 0114 00E100E0 		.word	-536813312
 877 0118 FF00FFFF 		.word	-65281
 878              		.cfi_endproc
 879              	.LFE51:
 881              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 882              		.align	1
 883              		.global	TIM6_DAC_IRQHandler
 884              		.syntax unified
 885              		.code	16
 886              		.thumb_func
 888              	TIM6_DAC_IRQHandler:
 889              	.LFB52:
 190:MDK-ARM/Lab07/motor.c **** 
 191:MDK-ARM/Lab07/motor.c **** // Encoder interrupt to calculate motor speed, also manages PI controller
 192:MDK-ARM/Lab07/motor.c **** void TIM6_DAC_IRQHandler(void) {
 890              		.loc 1 192 32 is_stmt 1 view -0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 193:MDK-ARM/Lab07/motor.c ****     /* Calculate the motor speed in raw encoder counts
 194:MDK-ARM/Lab07/motor.c ****      * Note the motor speed is signed! Motor can be run in reverse.
 195:MDK-ARM/Lab07/motor.c ****      * Speed is measured by how far the counter moved from center point
 196:MDK-ARM/Lab07/motor.c ****      */
 197:MDK-ARM/Lab07/motor.c ****     motorl_speed = (TIM3->CNT - 0x7FFF);
 895              		.loc 1 197 5 view .LVU280
 896              		.loc 1 197 25 is_stmt 0 view .LVU281
 897 0000 0B4A     		ldr	r2, .L26
 898 0002 536A     		ldr	r3, [r2, #36]
 899              		.loc 1 197 31 view .LVU282
 900 0004 0B49     		ldr	r1, .L26+4
 901 0006 8C46     		mov	ip, r1
 902 0008 6344     		add	r3, r3, ip
 903 000a 1BB2     		sxth	r3, r3
 904              		.loc 1 197 18 view .LVU283
 905 000c 0A49     		ldr	r1, .L26+8
 906 000e 0B80     		strh	r3, [r1]
 198:MDK-ARM/Lab07/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 907              		.loc 1 198 5 is_stmt 1 view .LVU284
 908              		.loc 1 198 15 is_stmt 0 view .LVU285
 909 0010 0A49     		ldr	r1, .L26+12
ARM GAS  /tmp/ccjIrmio.s 			page 33


 910 0012 5162     		str	r1, [r2, #36]
 199:MDK-ARM/Lab07/motor.c **** 	  motorr_speed = (TIM15->CNT - 0x7FFF);
 911              		.loc 1 199 4 is_stmt 1 view .LVU286
 912              		.loc 1 199 25 is_stmt 0 view .LVU287
 913 0014 0A4A     		ldr	r2, .L26+16
 914 0016 536A     		ldr	r3, [r2, #36]
 915              		.loc 1 199 31 view .LVU288
 916 0018 6344     		add	r3, r3, ip
 917 001a 1BB2     		sxth	r3, r3
 918              		.loc 1 199 17 view .LVU289
 919 001c 0948     		ldr	r0, .L26+20
 920 001e 0380     		strh	r3, [r0]
 200:MDK-ARM/Lab07/motor.c ****     TIM15->CNT = 0x7FFF; // Reset back to center point
 921              		.loc 1 200 5 is_stmt 1 view .LVU290
 922              		.loc 1 200 16 is_stmt 0 view .LVU291
 923 0020 5162     		str	r1, [r2, #36]
 201:MDK-ARM/Lab07/motor.c ****     
 202:MDK-ARM/Lab07/motor.c ****     // Call the PI update function
 203:MDK-ARM/Lab07/motor.c ****     TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 924              		.loc 1 203 5 is_stmt 1 view .LVU292
 925              		.loc 1 203 9 is_stmt 0 view .LVU293
 926 0022 094A     		ldr	r2, .L26+24
 927 0024 1369     		ldr	r3, [r2, #16]
 928              		.loc 1 203 14 view .LVU294
 929 0026 0121     		movs	r1, #1
 930 0028 8B43     		bics	r3, r1
 931 002a 1361     		str	r3, [r2, #16]
 204:MDK-ARM/Lab07/motor.c **** }
 932              		.loc 1 204 1 view .LVU295
 933              		@ sp needed
 934 002c 7047     		bx	lr
 935              	.L27:
 936 002e C046     		.align	2
 937              	.L26:
 938 0030 00040040 		.word	1073742848
 939 0034 0180FFFF 		.word	-32767
 940 0038 00000000 		.word	motorl_speed
 941 003c FF7F0000 		.word	32767
 942 0040 00400140 		.word	1073823744
 943 0044 00000000 		.word	motorr_speed
 944 0048 00100040 		.word	1073745920
 945              		.cfi_endproc
 946              	.LFE52:
 948              		.section	.text.ADC_init,"ax",%progbits
 949              		.align	1
 950              		.global	ADC_init
 951              		.syntax unified
 952              		.code	16
 953              		.thumb_func
 955              	ADC_init:
 956              	.LFB53:
 205:MDK-ARM/Lab07/motor.c **** 
 206:MDK-ARM/Lab07/motor.c **** void ADC_init(void) {
 957              		.loc 1 206 21 is_stmt 1 view -0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjIrmio.s 			page 34


 961              		@ link register save eliminated.
 207:MDK-ARM/Lab07/motor.c **** 
 208:MDK-ARM/Lab07/motor.c ****     // Configure PA1 for ADC input (used for current monitoring)
 209:MDK-ARM/Lab07/motor.c ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 962              		.loc 1 209 5 view .LVU297
 963              		.loc 1 209 10 is_stmt 0 view .LVU298
 964 0000 9022     		movs	r2, #144
 965 0002 D205     		lsls	r2, r2, #23
 966 0004 1368     		ldr	r3, [r2]
 967              		.loc 1 209 18 view .LVU299
 968 0006 0C21     		movs	r1, #12
 969 0008 0B43     		orrs	r3, r1
 970 000a 1360     		str	r3, [r2]
 210:MDK-ARM/Lab07/motor.c **** 
 211:MDK-ARM/Lab07/motor.c ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 212:MDK-ARM/Lab07/motor.c ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 971              		.loc 1 212 5 is_stmt 1 view .LVU300
 972              		.loc 1 212 8 is_stmt 0 view .LVU301
 973 000c 154A     		ldr	r2, .L32
 974 000e 9169     		ldr	r1, [r2, #24]
 975              		.loc 1 212 18 view .LVU302
 976 0010 8023     		movs	r3, #128
 977 0012 9B00     		lsls	r3, r3, #2
 978 0014 0B43     		orrs	r3, r1
 979 0016 9361     		str	r3, [r2, #24]
 213:MDK-ARM/Lab07/motor.c **** 
 214:MDK-ARM/Lab07/motor.c ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 980              		.loc 1 214 5 is_stmt 1 view .LVU303
 981              		.loc 1 214 17 is_stmt 0 view .LVU304
 982 0018 134B     		ldr	r3, .L32+4
 983 001a 0021     		movs	r1, #0
 984 001c D960     		str	r1, [r3, #12]
 215:MDK-ARM/Lab07/motor.c ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 985              		.loc 1 215 5 is_stmt 1 view .LVU305
 986              		.loc 1 215 9 is_stmt 0 view .LVU306
 987 001e D868     		ldr	r0, [r3, #12]
 988              		.loc 1 215 17 view .LVU307
 989 0020 8022     		movs	r2, #128
 990 0022 9201     		lsls	r2, r2, #6
 991 0024 0243     		orrs	r2, r0
 992 0026 DA60     		str	r2, [r3, #12]
 216:MDK-ARM/Lab07/motor.c ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 993              		.loc 1 216 5 is_stmt 1 view .LVU308
 994              		.loc 1 216 9 is_stmt 0 view .LVU309
 995 0028 9A6A     		ldr	r2, [r3, #40]
 996              		.loc 1 216 18 view .LVU310
 997 002a 0220     		movs	r0, #2
 998 002c 0243     		orrs	r2, r0
 999 002e 9A62     		str	r2, [r3, #40]
 217:MDK-ARM/Lab07/motor.c **** 
 218:MDK-ARM/Lab07/motor.c ****     ADC1->CR = 0;
 1000              		.loc 1 218 5 is_stmt 1 view .LVU311
 1001              		.loc 1 218 14 is_stmt 0 view .LVU312
 1002 0030 9960     		str	r1, [r3, #8]
 219:MDK-ARM/Lab07/motor.c ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 1003              		.loc 1 219 5 is_stmt 1 view .LVU313
 1004              		.loc 1 219 9 is_stmt 0 view .LVU314
ARM GAS  /tmp/ccjIrmio.s 			page 35


 1005 0032 9968     		ldr	r1, [r3, #8]
 1006              		.loc 1 219 14 view .LVU315
 1007 0034 8022     		movs	r2, #128
 1008 0036 1206     		lsls	r2, r2, #24
 1009 0038 0A43     		orrs	r2, r1
 1010 003a 9A60     		str	r2, [r3, #8]
 220:MDK-ARM/Lab07/motor.c ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 1011              		.loc 1 220 5 is_stmt 1 view .LVU316
 1012              	.L29:
 1013              		.loc 1 220 11 discriminator 1 view .LVU317
 1014              		.loc 1 220 15 is_stmt 0 discriminator 1 view .LVU318
 1015 003c 0A4B     		ldr	r3, .L32+4
 1016 003e 9B68     		ldr	r3, [r3, #8]
 1017              		.loc 1 220 11 discriminator 1 view .LVU319
 1018 0040 002B     		cmp	r3, #0
 1019 0042 FBDB     		blt	.L29
 221:MDK-ARM/Lab07/motor.c **** 
 222:MDK-ARM/Lab07/motor.c ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 1020              		.loc 1 222 5 is_stmt 1 view .LVU320
 1021              		.loc 1 222 9 is_stmt 0 view .LVU321
 1022 0044 084A     		ldr	r2, .L32+4
 1023 0046 9368     		ldr	r3, [r2, #8]
 1024              		.loc 1 222 14 view .LVU322
 1025 0048 0121     		movs	r1, #1
 1026 004a 0B43     		orrs	r3, r1
 1027 004c 9360     		str	r3, [r2, #8]
 223:MDK-ARM/Lab07/motor.c ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 1028              		.loc 1 223 5 is_stmt 1 view .LVU323
 1029              	.L30:
 1030              		.loc 1 223 11 discriminator 1 view .LVU324
 1031              		.loc 1 223 17 is_stmt 0 discriminator 1 view .LVU325
 1032 004e 064B     		ldr	r3, .L32+4
 1033 0050 1B68     		ldr	r3, [r3]
 1034              		.loc 1 223 11 discriminator 1 view .LVU326
 1035 0052 DB07     		lsls	r3, r3, #31
 1036 0054 FBD5     		bpl	.L30
 224:MDK-ARM/Lab07/motor.c ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 1037              		.loc 1 224 5 is_stmt 1 view .LVU327
 1038              		.loc 1 224 9 is_stmt 0 view .LVU328
 1039 0056 044A     		ldr	r2, .L32+4
 1040 0058 9368     		ldr	r3, [r2, #8]
 1041              		.loc 1 224 14 view .LVU329
 1042 005a 0421     		movs	r1, #4
 1043 005c 0B43     		orrs	r3, r1
 1044 005e 9360     		str	r3, [r2, #8]
 225:MDK-ARM/Lab07/motor.c **** }
 1045              		.loc 1 225 1 view .LVU330
 1046              		@ sp needed
 1047 0060 7047     		bx	lr
 1048              	.L33:
 1049 0062 C046     		.align	2
 1050              	.L32:
 1051 0064 00100240 		.word	1073876992
 1052 0068 00240140 		.word	1073816576
 1053              		.cfi_endproc
 1054              	.LFE53:
 1056              		.section	.text.motor_init,"ax",%progbits
ARM GAS  /tmp/ccjIrmio.s 			page 36


 1057              		.align	1
 1058              		.global	motor_init
 1059              		.syntax unified
 1060              		.code	16
 1061              		.thumb_func
 1063              	motor_init:
 1064              	.LFB43:
  18:MDK-ARM/Lab07/motor.c ****     pwm_init();
 1065              		.loc 1 18 23 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069 0000 10B5     		push	{r4, lr}
 1070              	.LCFI5:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 4, -8
 1073              		.cfi_offset 14, -4
  19:MDK-ARM/Lab07/motor.c ****     encoder_init();
 1074              		.loc 1 19 5 view .LVU332
 1075 0002 FFF7FEFF 		bl	pwm_init
 1076              	.LVL9:
  20:MDK-ARM/Lab07/motor.c ****     ADC_init();
 1077              		.loc 1 20 5 view .LVU333
 1078 0006 FFF7FEFF 		bl	encoder_init
 1079              	.LVL10:
  21:MDK-ARM/Lab07/motor.c **** }
 1080              		.loc 1 21 5 view .LVU334
 1081 000a FFF7FEFF 		bl	ADC_init
 1082              	.LVL11:
  22:MDK-ARM/Lab07/motor.c **** 
 1083              		.loc 1 22 1 is_stmt 0 view .LVU335
 1084              		@ sp needed
 1085 000e 10BD     		pop	{r4, pc}
 1086              		.cfi_endproc
 1087              	.LFE43:
 1089              		.global	Ki
 1090              		.section	.data.Ki,"aw"
 1093              	Ki:
 1094 0000 01       		.byte	1
 1095              		.global	Kp
 1096              		.section	.data.Kp,"aw"
 1099              	Kp:
 1100 0000 01       		.byte	1
 1101              		.global	error
 1102              		.section	.bss.error,"aw",%nobits
 1103              		.align	1
 1106              	error:
 1107 0000 0000     		.space	2
 1108              		.global	adc_value
 1109              		.section	.bss.adc_value,"aw",%nobits
 1112              	adc_value:
 1113 0000 00       		.space	1
 1114              		.global	motorr_speed
 1115              		.section	.bss.motorr_speed,"aw",%nobits
 1116              		.align	1
 1119              	motorr_speed:
 1120 0000 0000     		.space	2
ARM GAS  /tmp/ccjIrmio.s 			page 37


 1121              		.global	motorl_speed
 1122              		.section	.bss.motorl_speed,"aw",%nobits
 1123              		.align	1
 1126              	motorl_speed:
 1127 0000 0000     		.space	2
 1128              		.global	target_rpm
 1129              		.section	.bss.target_rpm,"aw",%nobits
 1130              		.align	1
 1133              	target_rpm:
 1134 0000 0000     		.space	2
 1135              		.global	duty_cycle
 1136              		.section	.bss.duty_cycle,"aw",%nobits
 1139              	duty_cycle:
 1140 0000 00       		.space	1
 1141              		.global	error_integral
 1142              		.section	.bss.error_integral,"aw",%nobits
 1143              		.align	1
 1146              	error_integral:
 1147 0000 0000     		.space	2
 1148              		.text
 1149              	.Letext0:
 1150              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1151              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1152              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1153              		.file 6 "Core/Inc/motor.h"
ARM GAS  /tmp/ccjIrmio.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/ccjIrmio.s:19     .text.pwm_init:00000000 $t
     /tmp/ccjIrmio.s:25     .text.pwm_init:00000000 pwm_init
     /tmp/ccjIrmio.s:279    .text.pwm_init:0000010c $d
     /tmp/ccjIrmio.s:294    .text.pwm_setDutyCycleL:00000000 $t
     /tmp/ccjIrmio.s:300    .text.pwm_setDutyCycleL:00000000 pwm_setDutyCycleL
     /tmp/ccjIrmio.s:337    .text.pwm_setDutyCycleL:00000018 $d
     /tmp/ccjIrmio.s:342    .text.pwm_setDutyCycleR:00000000 $t
     /tmp/ccjIrmio.s:348    .text.pwm_setDutyCycleR:00000000 pwm_setDutyCycleR
     /tmp/ccjIrmio.s:387    .text.set_Forward:00000000 $t
     /tmp/ccjIrmio.s:393    .text.set_Forward:00000000 set_Forward
     /tmp/ccjIrmio.s:438    .text.set_Forward:0000002c $d
     /tmp/ccjIrmio.s:444    .text.set_Backward:00000000 $t
     /tmp/ccjIrmio.s:450    .text.set_Backward:00000000 set_Backward
     /tmp/ccjIrmio.s:495    .text.set_Backward:0000002c $d
     /tmp/ccjIrmio.s:501    .text.set_Right:00000000 $t
     /tmp/ccjIrmio.s:507    .text.set_Right:00000000 set_Right
     /tmp/ccjIrmio.s:551    .text.set_Right:00000028 $d
     /tmp/ccjIrmio.s:557    .text.set_Left:00000000 $t
     /tmp/ccjIrmio.s:563    .text.set_Left:00000000 set_Left
     /tmp/ccjIrmio.s:608    .text.set_Left:0000002c $d
     /tmp/ccjIrmio.s:613    .text.encoder_init:00000000 $t
     /tmp/ccjIrmio.s:619    .text.encoder_init:00000000 encoder_init
     /tmp/ccjIrmio.s:866    .text.encoder_init:000000ec $d
     /tmp/ccjIrmio.s:882    .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/ccjIrmio.s:888    .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/ccjIrmio.s:938    .text.TIM6_DAC_IRQHandler:00000030 $d
     /tmp/ccjIrmio.s:1126   .bss.motorl_speed:00000000 motorl_speed
     /tmp/ccjIrmio.s:1119   .bss.motorr_speed:00000000 motorr_speed
     /tmp/ccjIrmio.s:949    .text.ADC_init:00000000 $t
     /tmp/ccjIrmio.s:955    .text.ADC_init:00000000 ADC_init
     /tmp/ccjIrmio.s:1051   .text.ADC_init:00000064 $d
     /tmp/ccjIrmio.s:1057   .text.motor_init:00000000 $t
     /tmp/ccjIrmio.s:1063   .text.motor_init:00000000 motor_init
     /tmp/ccjIrmio.s:1093   .data.Ki:00000000 Ki
     /tmp/ccjIrmio.s:1099   .data.Kp:00000000 Kp
     /tmp/ccjIrmio.s:1106   .bss.error:00000000 error
     /tmp/ccjIrmio.s:1103   .bss.error:00000000 $d
     /tmp/ccjIrmio.s:1112   .bss.adc_value:00000000 adc_value
     /tmp/ccjIrmio.s:1113   .bss.adc_value:00000000 $d
     /tmp/ccjIrmio.s:1116   .bss.motorr_speed:00000000 $d
     /tmp/ccjIrmio.s:1123   .bss.motorl_speed:00000000 $d
     /tmp/ccjIrmio.s:1133   .bss.target_rpm:00000000 target_rpm
     /tmp/ccjIrmio.s:1130   .bss.target_rpm:00000000 $d
     /tmp/ccjIrmio.s:1139   .bss.duty_cycle:00000000 duty_cycle
     /tmp/ccjIrmio.s:1140   .bss.duty_cycle:00000000 $d
     /tmp/ccjIrmio.s:1146   .bss.error_integral:00000000 error_integral
     /tmp/ccjIrmio.s:1143   .bss.error_integral:00000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
