ARM GAS  /tmp/ccxZrjrM.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** #include "main.h"
   7:Src/motor.c   **** #include <math.h>
   8:Src/motor.c   **** 
   9:Src/motor.c   **** volatile int16_t motorl_speed = 0;   	// Measured left motor speed
  10:Src/motor.c   **** volatile int16_t motorr_speed = 0;   	// Measured left motor speed
  11:Src/motor.c   **** volatile float target_dist = 0;
  12:Src/motor.c   **** volatile float current_dist = 0;
  13:Src/motor.c   **** volatile float absolute_dist = 0;
  14:Src/motor.c   **** volatile float heading = 0;
  15:Src/motor.c   **** volatile bool turning = false;
  16:Src/motor.c   **** 
  17:Src/motor.c   **** #define max(a,b) ((a>b) ? a : b)
  18:Src/motor.c   **** #define min(a,b) ((a>b) ? b : a)
  19:Src/motor.c   **** 
  20:Src/motor.c   **** #define PRINT_DEBUG 0
  21:Src/motor.c   **** #define STOP_ULTRASONIC 20 //cm
  22:Src/motor.c   **** #define INFINITY 5000 //long long course lmao
  23:Src/motor.c   **** 
  24:Src/motor.c   **** // Sets up the entire motor drive system
  25:Src/motor.c   **** void motor_init(void) {
  26:Src/motor.c   **** 	pwm_init();
  27:Src/motor.c   **** 	encoder_init();
  28:Src/motor.c   **** }
  29:Src/motor.c   **** 
  30:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  31:Src/motor.c   **** void pwm_init(void) {
  27              		.loc 1 31 21 view -0
ARM GAS  /tmp/ccxZrjrM.s 			page 2


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  32:Src/motor.c   **** 	//RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  33:Src/motor.c   **** 
  34:Src/motor.c   **** 	// Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  35:Src/motor.c   **** 	/*
  36:Src/motor.c   **** 	   GPIOA->MODER |= (1 << 9);
  37:Src/motor.c   **** 	   GPIOA->MODER &= ~(1 << 8);
  38:Src/motor.c   **** 
  39:Src/motor.c   **** 	// Set up pin PB3 for H-bridge PWM output (TIMER 2 CH2)
  40:Src/motor.c   **** 	GPIOB->MODER |= (1 << 7);
  41:Src/motor.c   **** 	GPIOB->MODER &= ~(1 << 6);
  42:Src/motor.c   **** 
  43:Src/motor.c   **** 	// Set PA4 to AF4,
  44:Src/motor.c   **** 	GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  45:Src/motor.c   **** 	GPIOA->AFR[0] |= (1 << 18);
  46:Src/motor.c   **** 
  47:Src/motor.c   **** 	// Set PB3 to AF2,
  48:Src/motor.c   **** 	GPIOB->AFR[0] &= 0xFFFF0FFF; // clear PB3 bits,
  49:Src/motor.c   **** 	GPIOB->AFR[0] |= (1 << 13);
  50:Src/motor.c   **** 
  51:Src/motor.c   **** 	// Set up a PA5, PA8 as GPIO output pins for motor direction control
  52:Src/motor.c   **** 	GPIOA->MODER &= 0xFFFCF3FF; // clear PA5, PA6 bits,
  53:Src/motor.c   **** 	GPIOA->MODER |= (1 << 10) | (1 << 16);
  54:Src/motor.c   **** 
  55:Src/motor.c   **** 	// Set up a PB2, PB10 as GPIO output pins for motor direction control
  56:Src/motor.c   **** 	GPIOB->MODER &= 0xFFCFFFCF; // clear PB2, PB10 bits,
  57:Src/motor.c   **** 	GPIOB->MODER |= (1 << 4) | (1 << 20);
  58:Src/motor.c   **** 	*/
  59:Src/motor.c   **** 
  60:Src/motor.c   **** 	//Initialize one direction pin to high, the other low
  61:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_a.gpio, motor_left_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  38              		.loc 1 61 2 view .LVU1
  39              		.loc 1 61 73 is_stmt 0 view .LVU2
  40 0002 244C     		ldr	r4, .L2
  41              		.loc 1 61 2 view .LVU3
  42 0004 A18B     		ldrh	r1, [r4, #28]
  43 0006 A069     		ldr	r0, [r4, #24]
  44 0008 0122     		movs	r2, #1
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL0:
  62:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_b.gpio, motor_left_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  47              		.loc 1 62 2 is_stmt 1 view .LVU4
  48 000e A18E     		ldrh	r1, [r4, #52]
  49 0010 206B     		ldr	r0, [r4, #48]
  50 0012 0022     		movs	r2, #0
  51 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  52              	.LVL1:
  63:Src/motor.c   **** 
ARM GAS  /tmp/ccxZrjrM.s 			page 3


  64:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_a.gpio, motor_right_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  53              		.loc 1 64 2 view .LVU5
  54              		.loc 1 64 75 is_stmt 0 view .LVU6
  55 0018 1F4C     		ldr	r4, .L2+4
  56              		.loc 1 64 2 view .LVU7
  57 001a A18B     		ldrh	r1, [r4, #28]
  58 001c A069     		ldr	r0, [r4, #24]
  59 001e 0122     		movs	r2, #1
  60 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL2:
  65:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_b.gpio, motor_right_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  62              		.loc 1 65 2 is_stmt 1 view .LVU8
  63 0024 A18E     		ldrh	r1, [r4, #52]
  64 0026 206B     		ldr	r0, [r4, #48]
  65 0028 0022     		movs	r2, #0
  66 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL3:
  66:Src/motor.c   **** 
  67:Src/motor.c   **** 	// Set up PWM timer
  68:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
  68              		.loc 1 68 2 view .LVU9
  69              		.loc 1 68 5 is_stmt 0 view .LVU10
  70 002e 1B4B     		ldr	r3, .L2+8
  71 0030 D969     		ldr	r1, [r3, #28]
  72              		.loc 1 68 15 view .LVU11
  73 0032 8022     		movs	r2, #128
  74 0034 5200     		lsls	r2, r2, #1
  75 0036 0A43     		orrs	r2, r1
  76 0038 DA61     		str	r2, [r3, #28]
  69:Src/motor.c   **** 	TIM14->CR1 = 0;                         // Clear control registers
  77              		.loc 1 69 2 is_stmt 1 view .LVU12
  78              		.loc 1 69 13 is_stmt 0 view .LVU13
  79 003a 194A     		ldr	r2, .L2+12
  80 003c 0021     		movs	r1, #0
  81 003e 1160     		str	r1, [r2]
  70:Src/motor.c   **** 	TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
  82              		.loc 1 70 2 is_stmt 1 view .LVU14
  83              		.loc 1 70 15 is_stmt 0 view .LVU15
  84 0040 9161     		str	r1, [r2, #24]
  71:Src/motor.c   **** 	TIM14->CCER = 0;
  85              		.loc 1 71 2 is_stmt 1 view .LVU16
  86              		.loc 1 71 14 is_stmt 0 view .LVU17
  87 0042 1162     		str	r1, [r2, #32]
  72:Src/motor.c   **** 
  73:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  88              		.loc 1 73 2 is_stmt 1 view .LVU18
  89              		.loc 1 73 5 is_stmt 0 view .LVU19
  90 0044 DC69     		ldr	r4, [r3, #28]
  91              		.loc 1 73 15 view .LVU20
  92 0046 0120     		movs	r0, #1
  93 0048 0443     		orrs	r4, r0
  94 004a DC61     		str	r4, [r3, #28]
  74:Src/motor.c   **** 	TIM2->CR1 = 0;                         // Clear control registers
  95              		.loc 1 74 2 is_stmt 1 view .LVU21
  96              		.loc 1 74 12 is_stmt 0 view .LVU22
  97 004c 8023     		movs	r3, #128
  98 004e DB05     		lsls	r3, r3, #23
ARM GAS  /tmp/ccxZrjrM.s 			page 4


  99 0050 1960     		str	r1, [r3]
  75:Src/motor.c   **** 	TIM2->CCMR1 = 0;                       // (prevents having to manually clear bits)
 100              		.loc 1 75 2 is_stmt 1 view .LVU23
 101              		.loc 1 75 14 is_stmt 0 view .LVU24
 102 0052 9961     		str	r1, [r3, #24]
  76:Src/motor.c   **** 	TIM2->CCER = 0;
 103              		.loc 1 76 2 is_stmt 1 view .LVU25
 104              		.loc 1 76 13 is_stmt 0 view .LVU26
 105 0054 1962     		str	r1, [r3, #32]
  77:Src/motor.c   **** 
  78:Src/motor.c   **** 	// Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  79:Src/motor.c   **** 	TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 106              		.loc 1 79 2 is_stmt 1 view .LVU27
 107              		.loc 1 79 7 is_stmt 0 view .LVU28
 108 0056 9469     		ldr	r4, [r2, #24]
 109              		.loc 1 79 15 view .LVU29
 110 0058 6825     		movs	r5, #104
 111 005a 2C43     		orrs	r4, r5
 112 005c 9461     		str	r4, [r2, #24]
  80:Src/motor.c   **** 	TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 113              		.loc 1 80 2 is_stmt 1 view .LVU30
 114              		.loc 1 80 7 is_stmt 0 view .LVU31
 115 005e 146A     		ldr	r4, [r2, #32]
 116              		.loc 1 80 14 view .LVU32
 117 0060 0443     		orrs	r4, r0
 118 0062 1462     		str	r4, [r2, #32]
  81:Src/motor.c   **** 	TIM14->PSC = 1;                         // Run timer on 24Mhz
 119              		.loc 1 81 2 is_stmt 1 view .LVU33
 120              		.loc 1 81 13 is_stmt 0 view .LVU34
 121 0064 9062     		str	r0, [r2, #40]
  82:Src/motor.c   **** 	TIM14->ARR = 1200;                      // PWM at 20kHz
 122              		.loc 1 82 2 is_stmt 1 view .LVU35
 123              		.loc 1 82 13 is_stmt 0 view .LVU36
 124 0066 9625     		movs	r5, #150
 125 0068 ED00     		lsls	r5, r5, #3
 126 006a D562     		str	r5, [r2, #44]
  83:Src/motor.c   **** 	TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 127              		.loc 1 83 2 is_stmt 1 view .LVU37
 128              		.loc 1 83 14 is_stmt 0 view .LVU38
 129 006c 5163     		str	r1, [r2, #52]
  84:Src/motor.c   **** 
  85:Src/motor.c   **** 	TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 130              		.loc 1 85 2 is_stmt 1 view .LVU39
 131              		.loc 1 85 7 is_stmt 0 view .LVU40
 132 006e 1468     		ldr	r4, [r2]
 133              		.loc 1 85 13 view .LVU41
 134 0070 0443     		orrs	r4, r0
 135 0072 1460     		str	r4, [r2]
  86:Src/motor.c   **** 
  87:Src/motor.c   **** 	TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 136              		.loc 1 87 2 is_stmt 1 view .LVU42
 137              		.loc 1 87 6 is_stmt 0 view .LVU43
 138 0074 9C69     		ldr	r4, [r3, #24]
 139              		.loc 1 87 14 view .LVU44
 140 0076 D022     		movs	r2, #208
 141 0078 D201     		lsls	r2, r2, #7
 142 007a 2243     		orrs	r2, r4
ARM GAS  /tmp/ccxZrjrM.s 			page 5


 143 007c 9A61     		str	r2, [r3, #24]
  88:Src/motor.c   **** 	TIM2->CCER |= TIM_CCER_CC2E;           // Enable capture-compare channel 2
 144              		.loc 1 88 2 is_stmt 1 view .LVU45
 145              		.loc 1 88 6 is_stmt 0 view .LVU46
 146 007e 1A6A     		ldr	r2, [r3, #32]
 147              		.loc 1 88 13 view .LVU47
 148 0080 1024     		movs	r4, #16
 149 0082 2243     		orrs	r2, r4
 150 0084 1A62     		str	r2, [r3, #32]
  89:Src/motor.c   **** 	TIM2->PSC = 1;                         // Run timer on 24Mhz
 151              		.loc 1 89 2 is_stmt 1 view .LVU48
 152              		.loc 1 89 12 is_stmt 0 view .LVU49
 153 0086 9862     		str	r0, [r3, #40]
  90:Src/motor.c   **** 	TIM2->ARR = 1200;                      // PWM at 20kHz
 154              		.loc 1 90 2 is_stmt 1 view .LVU50
 155              		.loc 1 90 12 is_stmt 0 view .LVU51
 156 0088 DD62     		str	r5, [r3, #44]
  91:Src/motor.c   **** 	TIM2->CCR2 = 0;                        // Start PWM at 0% duty cycle
 157              		.loc 1 91 2 is_stmt 1 view .LVU52
 158              		.loc 1 91 13 is_stmt 0 view .LVU53
 159 008a 9963     		str	r1, [r3, #56]
  92:Src/motor.c   **** 
  93:Src/motor.c   **** 	TIM2->CR1 |= TIM_CR1_CEN;              // Enable timer
 160              		.loc 1 93 2 is_stmt 1 view .LVU54
 161              		.loc 1 93 6 is_stmt 0 view .LVU55
 162 008c 1A68     		ldr	r2, [r3]
 163              		.loc 1 93 12 view .LVU56
 164 008e 0243     		orrs	r2, r0
 165 0090 1A60     		str	r2, [r3]
  94:Src/motor.c   **** }
 166              		.loc 1 94 1 view .LVU57
 167              		@ sp needed
 168 0092 70BD     		pop	{r4, r5, r6, pc}
 169              	.L3:
 170              		.align	2
 171              	.L2:
 172 0094 00000000 		.word	motor_left_pins
 173 0098 00000000 		.word	motor_right_pins
 174 009c 00100240 		.word	1073876992
 175 00a0 00200040 		.word	1073750016
 176              		.cfi_endproc
 177              	.LFE44:
 179              		.global	__aeabi_uidiv
 180              		.section	.text.pwm_setDutyCycleL,"ax",%progbits
 181              		.align	1
 182              		.global	pwm_setDutyCycleL
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 187              	pwm_setDutyCycleL:
 188              	.LVL4:
 189              	.LFB45:
  95:Src/motor.c   **** 
  96:Src/motor.c   **** // Set the duty cycle of the PWM Left, accepts (0-100)
  97:Src/motor.c   **** void pwm_setDutyCycleL(uint8_t duty) {
 190              		.loc 1 97 38 is_stmt 1 view -0
 191              		.cfi_startproc
ARM GAS  /tmp/ccxZrjrM.s 			page 6


 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 97 38 is_stmt 0 view .LVU59
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI1:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
  98:Src/motor.c   **** 	if(duty <= 100) {
 200              		.loc 1 98 2 is_stmt 1 view .LVU60
 201              		.loc 1 98 4 is_stmt 0 view .LVU61
 202 0002 6428     		cmp	r0, #100
 203 0004 06D8     		bhi	.L4
  99:Src/motor.c   **** 		TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 value
 204              		.loc 1 99 3 is_stmt 1 view .LVU62
 205              		.loc 1 99 38 is_stmt 0 view .LVU63
 206 0006 044C     		ldr	r4, .L6
 207 0008 E36A     		ldr	r3, [r4, #44]
 208              		.loc 1 99 32 view .LVU64
 209 000a 5843     		muls	r0, r3
 210              	.LVL5:
 211              		.loc 1 99 44 view .LVU65
 212 000c 6421     		movs	r1, #100
 213 000e FFF7FEFF 		bl	__aeabi_uidiv
 214              	.LVL6:
 215              		.loc 1 99 15 view .LVU66
 216 0012 6063     		str	r0, [r4, #52]
 217              	.L4:
 100:Src/motor.c   **** 														// (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
 101:Src/motor.c   **** 	}
 102:Src/motor.c   **** }
 218              		.loc 1 102 1 view .LVU67
 219              		@ sp needed
 220 0014 10BD     		pop	{r4, pc}
 221              	.L7:
 222 0016 C046     		.align	2
 223              	.L6:
 224 0018 00200040 		.word	1073750016
 225              		.cfi_endproc
 226              	.LFE45:
 228              		.section	.text.pwm_setDutyCycleR,"ax",%progbits
 229              		.align	1
 230              		.global	pwm_setDutyCycleR
 231              		.syntax unified
 232              		.code	16
 233              		.thumb_func
 235              	pwm_setDutyCycleR:
 236              	.LVL7:
 237              	.LFB46:
 103:Src/motor.c   **** 
 104:Src/motor.c   **** // Set the duty cycle of the PWM Right, accepts (0-100)
 105:Src/motor.c   **** void pwm_setDutyCycleR(uint8_t duty) {
 238              		.loc 1 105 38 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		.loc 1 105 38 is_stmt 0 view .LVU69
ARM GAS  /tmp/ccxZrjrM.s 			page 7


 243 0000 10B5     		push	{r4, lr}
 244              	.LCFI2:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 4, -8
 247              		.cfi_offset 14, -4
 106:Src/motor.c   **** 	if(duty <= 100) {
 248              		.loc 1 106 2 is_stmt 1 view .LVU70
 249              		.loc 1 106 4 is_stmt 0 view .LVU71
 250 0002 6428     		cmp	r0, #100
 251 0004 07D8     		bhi	.L8
 107:Src/motor.c   **** 		TIM2->CCR2 = ((uint32_t)duty*TIM2->ARR)/100;  // Use linear transform to produce CCR1 value
 252              		.loc 1 107 3 is_stmt 1 view .LVU72
 253              		.loc 1 107 36 is_stmt 0 view .LVU73
 254 0006 8024     		movs	r4, #128
 255 0008 E405     		lsls	r4, r4, #23
 256 000a E36A     		ldr	r3, [r4, #44]
 257              		.loc 1 107 31 view .LVU74
 258 000c 5843     		muls	r0, r3
 259              	.LVL8:
 260              		.loc 1 107 42 view .LVU75
 261 000e 6421     		movs	r1, #100
 262 0010 FFF7FEFF 		bl	__aeabi_uidiv
 263              	.LVL9:
 264              		.loc 1 107 14 view .LVU76
 265 0014 A063     		str	r0, [r4, #56]
 266              	.L8:
 108:Src/motor.c   **** 													  // (CCR2 == "pulse" parameter in PWM struct used by peripheral library)
 109:Src/motor.c   **** 	}
 110:Src/motor.c   **** }
 267              		.loc 1 110 1 view .LVU77
 268              		@ sp needed
 269 0016 10BD     		pop	{r4, pc}
 270              		.cfi_endproc
 271              	.LFE46:
 273              		.section	.text.set_Motor_Direction,"ax",%progbits
 274              		.align	1
 275              		.global	set_Motor_Direction
 276              		.syntax unified
 277              		.code	16
 278              		.thumb_func
 280              	set_Motor_Direction:
 281              	.LVL10:
 282              	.LFB47:
 111:Src/motor.c   **** 
 112:Src/motor.c   **** /*
 113:Src/motor.c   ****  * This sets an individual motor's direction.
 114:Src/motor.c   ****  * Note: use MoveMotors to change multiple motor values, eg to turn.
 115:Src/motor.c   ****  */
 116:Src/motor.c   **** void set_Motor_Direction(Direction dir, motor_pins_t* pins){
 283              		.loc 1 116 60 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		.loc 1 116 60 is_stmt 0 view .LVU79
 288 0000 10B5     		push	{r4, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccxZrjrM.s 			page 8


 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
 293 0002 0C00     		movs	r4, r1
 117:Src/motor.c   **** 	switch(dir){
 294              		.loc 1 117 2 is_stmt 1 view .LVU80
 295 0004 0028     		cmp	r0, #0
 296 0006 02D0     		beq	.L11
 297 0008 0328     		cmp	r0, #3
 298 000a 0BD0     		beq	.L12
 299              	.LVL11:
 300              	.L10:
 118:Src/motor.c   **** 		case FORWARD:
 119:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_SET);
 120:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 121:Src/motor.c   **** 			break;
 122:Src/motor.c   **** 		case BACKWARD:
 123:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_RESET);
 124:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 125:Src/motor.c   **** 			break;
 126:Src/motor.c   **** 		default:
 127:Src/motor.c   **** 			;
 128:Src/motor.c   **** 	}
 129:Src/motor.c   **** }
 301              		.loc 1 129 1 is_stmt 0 view .LVU81
 302              		@ sp needed
 303              	.LVL12:
 304              		.loc 1 129 1 view .LVU82
 305 000c 10BD     		pop	{r4, pc}
 306              	.LVL13:
 307              	.L11:
 119:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 308              		.loc 1 119 4 is_stmt 1 view .LVU83
 309 000e 898B     		ldrh	r1, [r1, #28]
 310              	.LVL14:
 119:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 311              		.loc 1 119 4 is_stmt 0 view .LVU84
 312 0010 A069     		ldr	r0, [r4, #24]
 313              	.LVL15:
 119:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 314              		.loc 1 119 4 view .LVU85
 315 0012 0122     		movs	r2, #1
 316 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL16:
 120:Src/motor.c   **** 			break;
 318              		.loc 1 120 4 is_stmt 1 view .LVU86
 319 0018 A18E     		ldrh	r1, [r4, #52]
 320 001a 206B     		ldr	r0, [r4, #48]
 321 001c 0022     		movs	r2, #0
 322 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 323              	.LVL17:
 121:Src/motor.c   **** 		case BACKWARD:
 324              		.loc 1 121 4 view .LVU87
 325 0022 F3E7     		b	.L10
 326              	.LVL18:
 327              	.L12:
 123:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 328              		.loc 1 123 4 view .LVU88
ARM GAS  /tmp/ccxZrjrM.s 			page 9


 329 0024 898B     		ldrh	r1, [r1, #28]
 330              	.LVL19:
 123:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 331              		.loc 1 123 4 is_stmt 0 view .LVU89
 332 0026 A069     		ldr	r0, [r4, #24]
 333              	.LVL20:
 123:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 334              		.loc 1 123 4 view .LVU90
 335 0028 0022     		movs	r2, #0
 336 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 337              	.LVL21:
 124:Src/motor.c   **** 			break;
 338              		.loc 1 124 4 is_stmt 1 view .LVU91
 339 002e A18E     		ldrh	r1, [r4, #52]
 340 0030 206B     		ldr	r0, [r4, #48]
 341 0032 0122     		movs	r2, #1
 342 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 343              	.LVL22:
 125:Src/motor.c   **** 		default:
 344              		.loc 1 125 4 view .LVU92
 127:Src/motor.c   **** 	}
 345              		.loc 1 127 4 view .LVU93
 346              		.loc 1 129 1 is_stmt 0 view .LVU94
 347 0038 E8E7     		b	.L10
 348              		.cfi_endproc
 349              	.LFE47:
 351              		.section	.text.set_Forward,"ax",%progbits
 352              		.align	1
 353              		.global	set_Forward
 354              		.syntax unified
 355              		.code	16
 356              		.thumb_func
 358              	set_Forward:
 359              	.LFB48:
 130:Src/motor.c   **** 
 131:Src/motor.c   **** //Experimentation led to this 91 number for driving straight.
 132:Src/motor.c   **** volatile uint8_t pwm_right = 100;
 133:Src/motor.c   **** volatile uint8_t pwm_left = 100;
 134:Src/motor.c   **** 
 135:Src/motor.c   **** void set_Forward(){
 360              		.loc 1 135 19 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
 368              		.cfi_offset 14, -4
 136:Src/motor.c   **** 	//left go forward
 137:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 369              		.loc 1 137 2 view .LVU96
 370 0002 0949     		ldr	r1, .L15
 371 0004 0020     		movs	r0, #0
 372 0006 FFF7FEFF 		bl	set_Motor_Direction
 373              	.LVL23:
 138:Src/motor.c   **** 
ARM GAS  /tmp/ccxZrjrM.s 			page 10


 139:Src/motor.c   **** 	//right go forward
 140:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 374              		.loc 1 140 2 view .LVU97
 375 000a 0849     		ldr	r1, .L15+4
 376 000c 0020     		movs	r0, #0
 377 000e FFF7FEFF 		bl	set_Motor_Direction
 378              	.LVL24:
 141:Src/motor.c   **** 
 142:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 379              		.loc 1 142 2 view .LVU98
 380 0012 074B     		ldr	r3, .L15+8
 381 0014 1878     		ldrb	r0, [r3]
 382 0016 C0B2     		uxtb	r0, r0
 383 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 384              	.LVL25:
 143:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 385              		.loc 1 143 2 view .LVU99
 386 001c 054B     		ldr	r3, .L15+12
 387 001e 1878     		ldrb	r0, [r3]
 388 0020 C0B2     		uxtb	r0, r0
 389 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 390              	.LVL26:
 144:Src/motor.c   **** 
 145:Src/motor.c   **** 
 146:Src/motor.c   **** 	/* the old way
 147:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 5);
 148:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 8);
 149:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 10);
 150:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 2);
 151:Src/motor.c   **** 	   */
 152:Src/motor.c   **** }
 391              		.loc 1 152 1 is_stmt 0 view .LVU100
 392              		@ sp needed
 393 0026 10BD     		pop	{r4, pc}
 394              	.L16:
 395              		.align	2
 396              	.L15:
 397 0028 00000000 		.word	motor_left_pins
 398 002c 00000000 		.word	motor_right_pins
 399 0030 00000000 		.word	pwm_right
 400 0034 00000000 		.word	pwm_left
 401              		.cfi_endproc
 402              	.LFE48:
 404              		.section	.text.set_Backward,"ax",%progbits
 405              		.align	1
 406              		.global	set_Backward
 407              		.syntax unified
 408              		.code	16
 409              		.thumb_func
 411              	set_Backward:
 412              	.LFB49:
 153:Src/motor.c   **** 
 154:Src/motor.c   **** void set_Backward(){
 413              		.loc 1 154 20 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccxZrjrM.s 			page 11


 417 0000 10B5     		push	{r4, lr}
 418              	.LCFI5:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 155:Src/motor.c   **** 	//left go backward
 156:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 422              		.loc 1 156 2 view .LVU102
 423 0002 0949     		ldr	r1, .L18
 424 0004 0320     		movs	r0, #3
 425 0006 FFF7FEFF 		bl	set_Motor_Direction
 426              	.LVL27:
 157:Src/motor.c   **** 
 158:Src/motor.c   **** 	//right go backward
 159:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 427              		.loc 1 159 2 view .LVU103
 428 000a 0849     		ldr	r1, .L18+4
 429 000c 0320     		movs	r0, #3
 430 000e FFF7FEFF 		bl	set_Motor_Direction
 431              	.LVL28:
 160:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 432              		.loc 1 160 2 view .LVU104
 433 0012 074B     		ldr	r3, .L18+8
 434 0014 1878     		ldrb	r0, [r3]
 435 0016 C0B2     		uxtb	r0, r0
 436 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 437              	.LVL29:
 161:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 438              		.loc 1 161 2 view .LVU105
 439 001c 054B     		ldr	r3, .L18+12
 440 001e 1878     		ldrb	r0, [r3]
 441 0020 C0B2     		uxtb	r0, r0
 442 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 443              	.LVL30:
 162:Src/motor.c   **** 	/* the old way
 163:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 8);
 164:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 5);
 165:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 2);
 166:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 10);
 167:Src/motor.c   **** 	   */
 168:Src/motor.c   **** }
 444              		.loc 1 168 1 is_stmt 0 view .LVU106
 445              		@ sp needed
 446 0026 10BD     		pop	{r4, pc}
 447              	.L19:
 448              		.align	2
 449              	.L18:
 450 0028 00000000 		.word	motor_left_pins
 451 002c 00000000 		.word	motor_right_pins
 452 0030 00000000 		.word	pwm_right
 453 0034 00000000 		.word	pwm_left
 454              		.cfi_endproc
 455              	.LFE49:
 457              		.section	.text.set_Right,"ax",%progbits
 458              		.align	1
 459              		.global	set_Right
 460              		.syntax unified
ARM GAS  /tmp/ccxZrjrM.s 			page 12


 461              		.code	16
 462              		.thumb_func
 464              	set_Right:
 465              	.LFB50:
 169:Src/motor.c   **** 
 170:Src/motor.c   **** void set_Right(){
 466              		.loc 1 170 17 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 10B5     		push	{r4, lr}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 171:Src/motor.c   **** 	//left go forward
 172:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 475              		.loc 1 172 2 view .LVU108
 476 0002 0949     		ldr	r1, .L21
 477 0004 0020     		movs	r0, #0
 478 0006 FFF7FEFF 		bl	set_Motor_Direction
 479              	.LVL31:
 173:Src/motor.c   **** 
 174:Src/motor.c   **** 	//right go backward
 175:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 480              		.loc 1 175 2 view .LVU109
 481 000a 0849     		ldr	r1, .L21+4
 482 000c 0320     		movs	r0, #3
 483 000e FFF7FEFF 		bl	set_Motor_Direction
 484              	.LVL32:
 176:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 485              		.loc 1 176 2 view .LVU110
 486 0012 074B     		ldr	r3, .L21+8
 487 0014 1878     		ldrb	r0, [r3]
 488 0016 C0B2     		uxtb	r0, r0
 489 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 490              	.LVL33:
 177:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 491              		.loc 1 177 2 view .LVU111
 492 001c 054B     		ldr	r3, .L21+12
 493 001e 1878     		ldrb	r0, [r3]
 494 0020 C0B2     		uxtb	r0, r0
 495 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 496              	.LVL34:
 178:Src/motor.c   **** 	/* old way
 179:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 5);
 180:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 8);
 181:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 2);
 182:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 10);
 183:Src/motor.c   **** 	   */
 184:Src/motor.c   **** }
 497              		.loc 1 184 1 is_stmt 0 view .LVU112
 498              		@ sp needed
 499 0026 10BD     		pop	{r4, pc}
 500              	.L22:
 501              		.align	2
 502              	.L21:
ARM GAS  /tmp/ccxZrjrM.s 			page 13


 503 0028 00000000 		.word	motor_left_pins
 504 002c 00000000 		.word	motor_right_pins
 505 0030 00000000 		.word	pwm_right
 506 0034 00000000 		.word	pwm_left
 507              		.cfi_endproc
 508              	.LFE50:
 510              		.section	.text.set_Left,"ax",%progbits
 511              		.align	1
 512              		.global	set_Left
 513              		.syntax unified
 514              		.code	16
 515              		.thumb_func
 517              	set_Left:
 518              	.LFB51:
 185:Src/motor.c   **** 
 186:Src/motor.c   **** void set_Left(){
 519              		.loc 1 186 16 is_stmt 1 view -0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523 0000 10B5     		push	{r4, lr}
 524              	.LCFI7:
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 4, -8
 527              		.cfi_offset 14, -4
 187:Src/motor.c   **** 	//left go backward
 188:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 528              		.loc 1 188 2 view .LVU114
 529 0002 0949     		ldr	r1, .L24
 530 0004 0320     		movs	r0, #3
 531 0006 FFF7FEFF 		bl	set_Motor_Direction
 532              	.LVL35:
 189:Src/motor.c   **** 
 190:Src/motor.c   **** 	//right go forward
 191:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 533              		.loc 1 191 2 view .LVU115
 534 000a 0849     		ldr	r1, .L24+4
 535 000c 0020     		movs	r0, #0
 536 000e FFF7FEFF 		bl	set_Motor_Direction
 537              	.LVL36:
 192:Src/motor.c   **** 
 193:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 538              		.loc 1 193 2 view .LVU116
 539 0012 074B     		ldr	r3, .L24+8
 540 0014 1878     		ldrb	r0, [r3]
 541 0016 C0B2     		uxtb	r0, r0
 542 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 543              	.LVL37:
 194:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 544              		.loc 1 194 2 view .LVU117
 545 001c 054B     		ldr	r3, .L24+12
 546 001e 1878     		ldrb	r0, [r3]
 547 0020 C0B2     		uxtb	r0, r0
 548 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 549              	.LVL38:
 195:Src/motor.c   **** 	/*
 196:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 8);
ARM GAS  /tmp/ccxZrjrM.s 			page 14


 197:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 5);
 198:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 10);
 199:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 2);
 200:Src/motor.c   **** 	   */
 201:Src/motor.c   **** }
 550              		.loc 1 201 1 is_stmt 0 view .LVU118
 551              		@ sp needed
 552 0026 10BD     		pop	{r4, pc}
 553              	.L25:
 554              		.align	2
 555              	.L24:
 556 0028 00000000 		.word	motor_left_pins
 557 002c 00000000 		.word	motor_right_pins
 558 0030 00000000 		.word	pwm_right
 559 0034 00000000 		.word	pwm_left
 560              		.cfi_endproc
 561              	.LFE51:
 563              		.section	.text.motors_Off,"ax",%progbits
 564              		.align	1
 565              		.global	motors_Off
 566              		.syntax unified
 567              		.code	16
 568              		.thumb_func
 570              	motors_Off:
 571              	.LFB52:
 202:Src/motor.c   **** 
 203:Src/motor.c   **** void motors_Off(){
 572              		.loc 1 203 18 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576 0000 10B5     		push	{r4, lr}
 577              	.LCFI8:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 4, -8
 580              		.cfi_offset 14, -4
 204:Src/motor.c   **** 	pwm_setDutyCycleR(0);
 581              		.loc 1 204 2 view .LVU120
 582 0002 0020     		movs	r0, #0
 583 0004 FFF7FEFF 		bl	pwm_setDutyCycleR
 584              	.LVL39:
 205:Src/motor.c   **** 	pwm_setDutyCycleL(0);
 585              		.loc 1 205 2 view .LVU121
 586 0008 0020     		movs	r0, #0
 587 000a FFF7FEFF 		bl	pwm_setDutyCycleL
 588              	.LVL40:
 206:Src/motor.c   **** }
 589              		.loc 1 206 1 is_stmt 0 view .LVU122
 590              		@ sp needed
 591 000e 10BD     		pop	{r4, pc}
 592              		.cfi_endproc
 593              	.LFE52:
 595              		.section	.rodata.MoveMotors.str1.4,"aMS",%progbits,1
 596              		.align	2
 597              	.LC18:
 598 0000 4D6F7665 		.ascii	"MoveMotors executed!\012\000"
 598      4D6F746F 
ARM GAS  /tmp/ccxZrjrM.s 			page 15


 598      72732065 
 598      78656375 
 598      74656421 
 599 0016 0000     		.align	2
 600              	.LC20:
 601 0018 496E7661 		.ascii	"Invalid command to MoveMotors!\012\000"
 601      6C696420 
 601      636F6D6D 
 601      616E6420 
 601      746F204D 
 602              		.global	__aeabi_fcmpeq
 603              		.global	__aeabi_f2d
 604              		.global	__aeabi_ddiv
 605              		.global	__aeabi_d2f
 606              		.global	__aeabi_dmul
 607              		.global	__aeabi_dadd
 608              		.global	__aeabi_dsub
 609              		.section	.text.MoveMotors,"ax",%progbits
 610              		.align	1
 611              		.global	MoveMotors
 612              		.syntax unified
 613              		.code	16
 614              		.thumb_func
 616              	MoveMotors:
 617              	.LVL41:
 618              	.LFB53:
 207:Src/motor.c   **** 
 208:Src/motor.c   **** uint8_t* MoveMotors(MotorCommand* cmd){
 619              		.loc 1 208 39 is_stmt 1 view -0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		.loc 1 208 39 is_stmt 0 view .LVU124
 624 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 625              	.LCFI9:
 626              		.cfi_def_cfa_offset 24
 627              		.cfi_offset 3, -24
 628              		.cfi_offset 4, -20
 629              		.cfi_offset 5, -16
 630              		.cfi_offset 6, -12
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 14, -4
 633 0002 0400     		movs	r4, r0
 209:Src/motor.c   **** 	motors_Off();
 634              		.loc 1 209 2 is_stmt 1 view .LVU125
 635 0004 FFF7FEFF 		bl	motors_Off
 636              	.LVL42:
 210:Src/motor.c   **** 	pwm_right = 100;
 637              		.loc 1 210 2 view .LVU126
 638              		.loc 1 210 12 is_stmt 0 view .LVU127
 639 0008 3E4B     		ldr	r3, .L41
 640 000a 6422     		movs	r2, #100
 641 000c 1A70     		strb	r2, [r3]
 211:Src/motor.c   **** 	uint8_t* err = "MoveMotors executed!\n";
 642              		.loc 1 211 2 is_stmt 1 view .LVU128
 643              	.LVL43:
 212:Src/motor.c   **** 	switch(cmd->dir){
ARM GAS  /tmp/ccxZrjrM.s 			page 16


 644              		.loc 1 212 2 view .LVU129
 645              		.loc 1 212 12 is_stmt 0 view .LVU130
 646 000e 2378     		ldrb	r3, [r4]
 647              		.loc 1 212 2 view .LVU131
 648 0010 022B     		cmp	r3, #2
 649 0012 4ED0     		beq	.L28
 650 0014 2DD8     		bhi	.L29
 651 0016 002B     		cmp	r3, #0
 652 0018 37D0     		beq	.L30
 653 001a 012B     		cmp	r3, #1
 654 001c 27D1     		bne	.L39
 213:Src/motor.c   **** 		case FORWARD:
 214:Src/motor.c   **** 			turning = false;
 215:Src/motor.c   **** 			if(cmd->amount==0.0)
 216:Src/motor.c   **** 				target_dist = INFINITY;
 217:Src/motor.c   **** 			else
 218:Src/motor.c   **** 				target_dist = cmd->amount;
 219:Src/motor.c   **** 			set_Forward();
 220:Src/motor.c   **** 			break;
 221:Src/motor.c   **** 		case LEFT:
 222:Src/motor.c   **** 			turning = true;
 655              		.loc 1 222 4 is_stmt 1 view .LVU132
 656              		.loc 1 222 12 is_stmt 0 view .LVU133
 657 001e 3A4B     		ldr	r3, .L41+4
 658 0020 0122     		movs	r2, #1
 659 0022 1A70     		strb	r2, [r3]
 223:Src/motor.c   **** 			target_dist = cmd->amount / 11.4592;
 660              		.loc 1 223 4 is_stmt 1 view .LVU134
 661              		.loc 1 223 21 is_stmt 0 view .LVU135
 662 0024 6068     		ldr	r0, [r4, #4]
 663 0026 FFF7FEFF 		bl	__aeabi_f2d
 664              	.LVL44:
 665 002a 0400     		movs	r4, r0
 666              	.LVL45:
 667              		.loc 1 223 21 view .LVU136
 668 002c 0D00     		movs	r5, r1
 669              		.loc 1 223 30 view .LVU137
 670 002e 374A     		ldr	r2, .L41+8
 671 0030 374B     		ldr	r3, .L41+12
 672 0032 FFF7FEFF 		bl	__aeabi_ddiv
 673              	.LVL46:
 674 0036 FFF7FEFF 		bl	__aeabi_d2f
 675              	.LVL47:
 676              		.loc 1 223 16 view .LVU138
 677 003a 364B     		ldr	r3, .L41+16
 678 003c 1860     		str	r0, [r3]
 224:Src/motor.c   **** 			heading += cmd->amount * 0.0174533; //convert to radians
 679              		.loc 1 224 4 is_stmt 1 view .LVU139
 680              		.loc 1 224 12 is_stmt 0 view .LVU140
 681 003e 364E     		ldr	r6, .L41+20
 682 0040 3768     		ldr	r7, [r6]
 683              		.loc 1 224 27 view .LVU141
 684 0042 364A     		ldr	r2, .L41+24
 685 0044 364B     		ldr	r3, .L41+28
 686 0046 2000     		movs	r0, r4
 687 0048 2900     		movs	r1, r5
 688 004a FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccxZrjrM.s 			page 17


 689              	.LVL48:
 690 004e 0400     		movs	r4, r0
 691 0050 0D00     		movs	r5, r1
 692              		.loc 1 224 12 view .LVU142
 693 0052 381C     		adds	r0, r7, #0
 694 0054 FFF7FEFF 		bl	__aeabi_f2d
 695              	.LVL49:
 696 0058 2200     		movs	r2, r4
 697 005a 2B00     		movs	r3, r5
 698 005c FFF7FEFF 		bl	__aeabi_dadd
 699              	.LVL50:
 700 0060 FFF7FEFF 		bl	__aeabi_d2f
 701              	.LVL51:
 702 0064 3060     		str	r0, [r6]
 225:Src/motor.c   **** 			set_Left();
 703              		.loc 1 225 4 is_stmt 1 view .LVU143
 704 0066 FFF7FEFF 		bl	set_Left
 705              	.LVL52:
 226:Src/motor.c   **** 			break;
 706              		.loc 1 226 4 view .LVU144
 211:Src/motor.c   **** 	switch(cmd->dir){
 707              		.loc 1 211 11 is_stmt 0 view .LVU145
 708 006a 2E48     		ldr	r0, .L41+32
 709              		.loc 1 226 4 view .LVU146
 710 006c 0CE0     		b	.L27
 711              	.LVL53:
 712              	.L39:
 212:Src/motor.c   **** 		case FORWARD:
 713              		.loc 1 212 2 view .LVU147
 714 006e 2E48     		ldr	r0, .L41+36
 715 0070 0AE0     		b	.L27
 716              	.L29:
 717 0072 042B     		cmp	r3, #4
 718 0074 07D1     		bne	.L40
 227:Src/motor.c   **** 		case RIGHT:
 228:Src/motor.c   **** 			turning = true;
 229:Src/motor.c   **** 			target_dist = cmd->amount / 11.4592;
 230:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 231:Src/motor.c   **** 			set_Right();
 232:Src/motor.c   **** 			break;
 233:Src/motor.c   **** 		case OFF:
 234:Src/motor.c   **** 			target_dist = 1.0;
 719              		.loc 1 234 4 is_stmt 1 view .LVU148
 720              		.loc 1 234 16 is_stmt 0 view .LVU149
 721 0076 274B     		ldr	r3, .L41+16
 722 0078 FE22     		movs	r2, #254
 723 007a 9205     		lsls	r2, r2, #22
 724 007c 1A60     		str	r2, [r3]
 235:Src/motor.c   **** 			motors_Off();
 725              		.loc 1 235 4 is_stmt 1 view .LVU150
 726 007e FFF7FEFF 		bl	motors_Off
 727              	.LVL54:
 236:Src/motor.c   **** 			break;
 728              		.loc 1 236 4 view .LVU151
 211:Src/motor.c   **** 	switch(cmd->dir){
 729              		.loc 1 211 11 is_stmt 0 view .LVU152
 730 0082 2848     		ldr	r0, .L41+32
ARM GAS  /tmp/ccxZrjrM.s 			page 18


 731              	.LVL55:
 237:Src/motor.c   **** 		default:
 238:Src/motor.c   **** 			err = "Invalid command to MoveMotors!\n";
 239:Src/motor.c   **** 	}
 240:Src/motor.c   **** 	return err;
 732              		.loc 1 240 2 is_stmt 1 view .LVU153
 733              		.loc 1 240 9 is_stmt 0 view .LVU154
 734 0084 00E0     		b	.L27
 735              	.LVL56:
 736              	.L40:
 212:Src/motor.c   **** 		case FORWARD:
 737              		.loc 1 212 2 view .LVU155
 738 0086 2848     		ldr	r0, .L41+36
 739              	.LVL57:
 740              	.L27:
 241:Src/motor.c   **** }
 741              		.loc 1 241 1 view .LVU156
 742              		@ sp needed
 743 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 744              	.LVL58:
 745              	.L30:
 214:Src/motor.c   **** 			if(cmd->amount==0.0)
 746              		.loc 1 214 4 is_stmt 1 view .LVU157
 214:Src/motor.c   **** 			if(cmd->amount==0.0)
 747              		.loc 1 214 12 is_stmt 0 view .LVU158
 748 008a 1F4B     		ldr	r3, .L41+4
 749 008c 0022     		movs	r2, #0
 750 008e 1A70     		strb	r2, [r3]
 215:Src/motor.c   **** 				target_dist = INFINITY;
 751              		.loc 1 215 4 is_stmt 1 view .LVU159
 215:Src/motor.c   **** 				target_dist = INFINITY;
 752              		.loc 1 215 10 is_stmt 0 view .LVU160
 753 0090 6468     		ldr	r4, [r4, #4]
 754              	.LVL59:
 215:Src/motor.c   **** 				target_dist = INFINITY;
 755              		.loc 1 215 6 view .LVU161
 756 0092 0021     		movs	r1, #0
 757 0094 201C     		adds	r0, r4, #0
 758 0096 FFF7FEFF 		bl	__aeabi_fcmpeq
 759              	.LVL60:
 760 009a 0028     		cmp	r0, #0
 761 009c 06D0     		beq	.L38
 216:Src/motor.c   **** 			else
 762              		.loc 1 216 5 is_stmt 1 view .LVU162
 216:Src/motor.c   **** 			else
 763              		.loc 1 216 17 is_stmt 0 view .LVU163
 764 009e 1D4B     		ldr	r3, .L41+16
 765 00a0 224A     		ldr	r2, .L41+40
 766 00a2 1A60     		str	r2, [r3]
 767              	.L36:
 219:Src/motor.c   **** 			break;
 768              		.loc 1 219 4 is_stmt 1 view .LVU164
 769 00a4 FFF7FEFF 		bl	set_Forward
 770              	.LVL61:
 220:Src/motor.c   **** 		case LEFT:
 771              		.loc 1 220 4 view .LVU165
 211:Src/motor.c   **** 	switch(cmd->dir){
ARM GAS  /tmp/ccxZrjrM.s 			page 19


 772              		.loc 1 211 11 is_stmt 0 view .LVU166
 773 00a8 1E48     		ldr	r0, .L41+32
 220:Src/motor.c   **** 		case LEFT:
 774              		.loc 1 220 4 view .LVU167
 775 00aa EDE7     		b	.L27
 776              	.L38:
 218:Src/motor.c   **** 			set_Forward();
 777              		.loc 1 218 5 is_stmt 1 view .LVU168
 218:Src/motor.c   **** 			set_Forward();
 778              		.loc 1 218 17 is_stmt 0 view .LVU169
 779 00ac 194B     		ldr	r3, .L41+16
 780 00ae 1C60     		str	r4, [r3]
 781 00b0 F8E7     		b	.L36
 782              	.LVL62:
 783              	.L28:
 228:Src/motor.c   **** 			target_dist = cmd->amount / 11.4592;
 784              		.loc 1 228 4 is_stmt 1 view .LVU170
 228:Src/motor.c   **** 			target_dist = cmd->amount / 11.4592;
 785              		.loc 1 228 12 is_stmt 0 view .LVU171
 786 00b2 154B     		ldr	r3, .L41+4
 787 00b4 0122     		movs	r2, #1
 788 00b6 1A70     		strb	r2, [r3]
 229:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 789              		.loc 1 229 4 is_stmt 1 view .LVU172
 229:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 790              		.loc 1 229 21 is_stmt 0 view .LVU173
 791 00b8 6068     		ldr	r0, [r4, #4]
 792 00ba FFF7FEFF 		bl	__aeabi_f2d
 793              	.LVL63:
 794 00be 0400     		movs	r4, r0
 795              	.LVL64:
 229:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 796              		.loc 1 229 21 view .LVU174
 797 00c0 0D00     		movs	r5, r1
 229:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 798              		.loc 1 229 30 view .LVU175
 799 00c2 124A     		ldr	r2, .L41+8
 800 00c4 124B     		ldr	r3, .L41+12
 801 00c6 FFF7FEFF 		bl	__aeabi_ddiv
 802              	.LVL65:
 803 00ca FFF7FEFF 		bl	__aeabi_d2f
 804              	.LVL66:
 229:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 805              		.loc 1 229 16 view .LVU176
 806 00ce 114B     		ldr	r3, .L41+16
 807 00d0 1860     		str	r0, [r3]
 230:Src/motor.c   **** 			set_Right();
 808              		.loc 1 230 4 is_stmt 1 view .LVU177
 230:Src/motor.c   **** 			set_Right();
 809              		.loc 1 230 12 is_stmt 0 view .LVU178
 810 00d2 114E     		ldr	r6, .L41+20
 811 00d4 3768     		ldr	r7, [r6]
 230:Src/motor.c   **** 			set_Right();
 812              		.loc 1 230 27 view .LVU179
 813 00d6 114A     		ldr	r2, .L41+24
 814 00d8 114B     		ldr	r3, .L41+28
 815 00da 2000     		movs	r0, r4
ARM GAS  /tmp/ccxZrjrM.s 			page 20


 816 00dc 2900     		movs	r1, r5
 817 00de FFF7FEFF 		bl	__aeabi_dmul
 818              	.LVL67:
 819 00e2 0400     		movs	r4, r0
 820 00e4 0D00     		movs	r5, r1
 230:Src/motor.c   **** 			set_Right();
 821              		.loc 1 230 12 view .LVU180
 822 00e6 381C     		adds	r0, r7, #0
 823 00e8 FFF7FEFF 		bl	__aeabi_f2d
 824              	.LVL68:
 825 00ec 2200     		movs	r2, r4
 826 00ee 2B00     		movs	r3, r5
 827 00f0 FFF7FEFF 		bl	__aeabi_dsub
 828              	.LVL69:
 829 00f4 FFF7FEFF 		bl	__aeabi_d2f
 830              	.LVL70:
 831 00f8 3060     		str	r0, [r6]
 231:Src/motor.c   **** 			break;
 832              		.loc 1 231 4 is_stmt 1 view .LVU181
 833 00fa FFF7FEFF 		bl	set_Right
 834              	.LVL71:
 232:Src/motor.c   **** 		case OFF:
 835              		.loc 1 232 4 view .LVU182
 211:Src/motor.c   **** 	switch(cmd->dir){
 836              		.loc 1 211 11 is_stmt 0 view .LVU183
 837 00fe 0948     		ldr	r0, .L41+32
 232:Src/motor.c   **** 		case OFF:
 838              		.loc 1 232 4 view .LVU184
 839 0100 C2E7     		b	.L27
 840              	.L42:
 841 0102 C046     		.align	2
 842              	.L41:
 843 0104 00000000 		.word	pwm_right
 844 0108 00000000 		.word	turning
 845 010c 7AA52C43 		.word	1126999418
 846 0110 1CEB2640 		.word	1076292380
 847 0114 00000000 		.word	target_dist
 848 0118 00000000 		.word	heading
 849 011c 5F40D422 		.word	584335455
 850 0120 47DF913F 		.word	1066524487
 851 0124 00000000 		.word	.LC18
 852 0128 18000000 		.word	.LC20
 853 012c 00409C45 		.word	1167867904
 854              		.cfi_endproc
 855              	.LFE53:
 857              		.section	.text.encoder_init,"ax",%progbits
 858              		.align	1
 859              		.global	encoder_init
 860              		.syntax unified
 861              		.code	16
 862              		.thumb_func
 864              	encoder_init:
 865              	.LFB54:
 242:Src/motor.c   **** 
 243:Src/motor.c   **** // Sets up encoder interface to read motor speed
 244:Src/motor.c   **** void encoder_init(void) {
 866              		.loc 1 244 25 is_stmt 1 view -0
ARM GAS  /tmp/ccxZrjrM.s 			page 21


 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 871              	.LCFI10:
 872              		.cfi_def_cfa_offset 20
 873              		.cfi_offset 4, -20
 874              		.cfi_offset 5, -16
 875              		.cfi_offset 6, -12
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 245:Src/motor.c   **** 
 246:Src/motor.c   **** 	// Set up encoder input pins (TIMER 3 CH1 and CH2)
 247:Src/motor.c   **** 	/*
 248:Src/motor.c   **** 	   GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 249:Src/motor.c   **** 	   GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 250:Src/motor.c   **** 	   GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 251:Src/motor.c   **** 
 252:Src/motor.c   **** 	// Set up encoder input pins (TIMER 15 CH1 and CH2)
 253:Src/motor.c   **** 	GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 254:Src/motor.c   **** 	GPIOB->MODER |= (GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 255:Src/motor.c   **** 	GPIOB->AFR[1] |= ( (1 << 24) | (1 << 28) );
 256:Src/motor.c   **** 	*/
 257:Src/motor.c   **** 
 258:Src/motor.c   **** 	// Set up encoder interface (TIM3 encoder input mode)
 259:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 878              		.loc 1 259 2 view .LVU186
 879              		.loc 1 259 5 is_stmt 0 view .LVU187
 880 0002 2849     		ldr	r1, .L44
 881 0004 CB69     		ldr	r3, [r1, #28]
 882              		.loc 1 259 15 view .LVU188
 883 0006 0222     		movs	r2, #2
 884 0008 1343     		orrs	r3, r2
 885 000a CB61     		str	r3, [r1, #28]
 260:Src/motor.c   **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 886              		.loc 1 260 2 is_stmt 1 view .LVU189
 887              		.loc 1 260 5 is_stmt 0 view .LVU190
 888 000c 8A69     		ldr	r2, [r1, #24]
 889              		.loc 1 260 15 view .LVU191
 890 000e 8023     		movs	r3, #128
 891 0010 1B01     		lsls	r3, r3, #4
 892 0012 1343     		orrs	r3, r2
 893 0014 8B61     		str	r3, [r1, #24]
 261:Src/motor.c   **** 	TIM3->CCMR1 = 0;
 894              		.loc 1 261 2 is_stmt 1 view .LVU192
 895              		.loc 1 261 14 is_stmt 0 view .LVU193
 896 0016 244B     		ldr	r3, .L44+4
 897 0018 0022     		movs	r2, #0
 898 001a 9A61     		str	r2, [r3, #24]
 262:Src/motor.c   **** 	TIM3->CCER = 0;
 899              		.loc 1 262 2 is_stmt 1 view .LVU194
 900              		.loc 1 262 13 is_stmt 0 view .LVU195
 901 001c 1A62     		str	r2, [r3, #32]
 263:Src/motor.c   **** 	TIM3->SMCR = 0;
 902              		.loc 1 263 2 is_stmt 1 view .LVU196
 903              		.loc 1 263 13 is_stmt 0 view .LVU197
 904 001e 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccxZrjrM.s 			page 22


 264:Src/motor.c   **** 	TIM3->CR1 = 0;
 905              		.loc 1 264 2 is_stmt 1 view .LVU198
 906              		.loc 1 264 12 is_stmt 0 view .LVU199
 907 0020 1A60     		str	r2, [r3]
 265:Src/motor.c   **** 
 266:Src/motor.c   **** 	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected to 
 908              		.loc 1 266 2 is_stmt 1 view .LVU200
 909              		.loc 1 266 6 is_stmt 0 view .LVU201
 910 0022 9869     		ldr	r0, [r3, #24]
 911              		.loc 1 266 14 view .LVU202
 912 0024 0224     		movs	r4, #2
 913 0026 FF34     		adds	r4, r4, #255
 914 0028 2043     		orrs	r0, r4
 915 002a 9861     		str	r0, [r3, #24]
 267:Src/motor.c   **** 	TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and fall
 916              		.loc 1 267 2 is_stmt 1 view .LVU203
 917              		.loc 1 267 6 is_stmt 0 view .LVU204
 918 002c 9868     		ldr	r0, [r3, #8]
 919              		.loc 1 267 13 view .LVU205
 920 002e 0325     		movs	r5, #3
 921 0030 AC46     		mov	ip, r5
 922 0032 2843     		orrs	r0, r5
 923 0034 9860     		str	r0, [r3, #8]
 268:Src/motor.c   **** 	TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest possib
 924              		.loc 1 268 2 is_stmt 1 view .LVU206
 925              		.loc 1 268 12 is_stmt 0 view .LVU207
 926 0036 1D4F     		ldr	r7, .L44+8
 927 0038 DF62     		str	r7, [r3, #44]
 269:Src/motor.c   **** 	TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negative 
 928              		.loc 1 269 2 is_stmt 1 view .LVU208
 929              		.loc 1 269 12 is_stmt 0 view .LVU209
 930 003a 1D4E     		ldr	r6, .L44+12
 931 003c 5E62     		str	r6, [r3, #36]
 270:Src/motor.c   **** 															// (Could also cast unsigned register to signed number to get negative numbers if it
 271:Src/motor.c   **** 															//  just another option, the mid-bias is a bit simpler to understand though.)
 272:Src/motor.c   **** 	TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 932              		.loc 1 272 2 is_stmt 1 view .LVU210
 933              		.loc 1 272 6 is_stmt 0 view .LVU211
 934 003e 1D68     		ldr	r5, [r3]
 935              		.loc 1 272 12 view .LVU212
 936 0040 0120     		movs	r0, #1
 937 0042 0543     		orrs	r5, r0
 938 0044 1D60     		str	r5, [r3]
 273:Src/motor.c   **** 
 274:Src/motor.c   **** 	TIM1->CCMR1 = 0;
 939              		.loc 1 274 2 is_stmt 1 view .LVU213
 940              		.loc 1 274 14 is_stmt 0 view .LVU214
 941 0046 1B4B     		ldr	r3, .L44+16
 942 0048 9A61     		str	r2, [r3, #24]
 275:Src/motor.c   **** 	TIM1->CCER = 0;
 943              		.loc 1 275 2 is_stmt 1 view .LVU215
 944              		.loc 1 275 13 is_stmt 0 view .LVU216
 945 004a 1A62     		str	r2, [r3, #32]
 276:Src/motor.c   **** 	TIM1->SMCR = 0;
 946              		.loc 1 276 2 is_stmt 1 view .LVU217
 947              		.loc 1 276 13 is_stmt 0 view .LVU218
 948 004c 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccxZrjrM.s 			page 23


 277:Src/motor.c   **** 	TIM1->CR1 = 0;
 949              		.loc 1 277 2 is_stmt 1 view .LVU219
 950              		.loc 1 277 12 is_stmt 0 view .LVU220
 951 004e 1A60     		str	r2, [r3]
 278:Src/motor.c   **** 	TIM1->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected to 
 952              		.loc 1 278 2 is_stmt 1 view .LVU221
 953              		.loc 1 278 6 is_stmt 0 view .LVU222
 954 0050 9A69     		ldr	r2, [r3, #24]
 955              		.loc 1 278 14 view .LVU223
 956 0052 1443     		orrs	r4, r2
 957 0054 9C61     		str	r4, [r3, #24]
 279:Src/motor.c   **** 	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and fall
 958              		.loc 1 279 2 is_stmt 1 view .LVU224
 959              		.loc 1 279 6 is_stmt 0 view .LVU225
 960 0056 9A68     		ldr	r2, [r3, #8]
 961              		.loc 1 279 13 view .LVU226
 962 0058 6446     		mov	r4, ip
 963 005a 2243     		orrs	r2, r4
 964 005c 9A60     		str	r2, [r3, #8]
 280:Src/motor.c   **** 	TIM1->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest possib
 965              		.loc 1 280 2 is_stmt 1 view .LVU227
 966              		.loc 1 280 12 is_stmt 0 view .LVU228
 967 005e DF62     		str	r7, [r3, #44]
 281:Src/motor.c   **** 	TIM1->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negative 
 968              		.loc 1 281 2 is_stmt 1 view .LVU229
 969              		.loc 1 281 12 is_stmt 0 view .LVU230
 970 0060 5E62     		str	r6, [r3, #36]
 282:Src/motor.c   **** 															// (Could also cast unsigned register to signed number to get negative numbers if it
 283:Src/motor.c   **** 															//  just another option, the mid-bias is a bit simpler to understand though.)
 284:Src/motor.c   **** 	TIM1->CR1 |= TIM_CR1_CEN;     
 971              		.loc 1 284 2 is_stmt 1 view .LVU231
 972              		.loc 1 284 6 is_stmt 0 view .LVU232
 973 0062 1A68     		ldr	r2, [r3]
 974              		.loc 1 284 12 view .LVU233
 975 0064 0243     		orrs	r2, r0
 976 0066 1A60     		str	r2, [r3]
 285:Src/motor.c   **** 
 286:Src/motor.c   **** 	// Configure a second timer (TIM6) to fire an ISR on update event
 287:Src/motor.c   **** 	// Used to periodically check and update speed variable
 288:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 977              		.loc 1 288 2 is_stmt 1 view .LVU234
 978              		.loc 1 288 5 is_stmt 0 view .LVU235
 979 0068 CB69     		ldr	r3, [r1, #28]
 980              		.loc 1 288 15 view .LVU236
 981 006a 1022     		movs	r2, #16
 982 006c 1343     		orrs	r3, r2
 983 006e CB61     		str	r3, [r1, #28]
 289:Src/motor.c   **** 
 290:Src/motor.c   **** 	// Select PSC and ARR values that give an appropriate interrupt rate
 291:Src/motor.c   **** 	TIM6->PSC = 11;
 984              		.loc 1 291 2 is_stmt 1 view .LVU237
 985              		.loc 1 291 12 is_stmt 0 view .LVU238
 986 0070 114B     		ldr	r3, .L44+20
 987 0072 053A     		subs	r2, r2, #5
 988 0074 9A62     		str	r2, [r3, #40]
 292:Src/motor.c   **** 	TIM6->ARR = 30000;
 989              		.loc 1 292 2 is_stmt 1 view .LVU239
ARM GAS  /tmp/ccxZrjrM.s 			page 24


 990              		.loc 1 292 12 is_stmt 0 view .LVU240
 991 0076 114A     		ldr	r2, .L44+24
 992 0078 DA62     		str	r2, [r3, #44]
 293:Src/motor.c   **** 
 294:Src/motor.c   **** 	TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 993              		.loc 1 294 2 is_stmt 1 view .LVU241
 994              		.loc 1 294 6 is_stmt 0 view .LVU242
 995 007a DA68     		ldr	r2, [r3, #12]
 996              		.loc 1 294 13 view .LVU243
 997 007c 0243     		orrs	r2, r0
 998 007e DA60     		str	r2, [r3, #12]
 295:Src/motor.c   **** 	TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 999              		.loc 1 295 2 is_stmt 1 view .LVU244
 1000              		.loc 1 295 6 is_stmt 0 view .LVU245
 1001 0080 1A68     		ldr	r2, [r3]
 1002              		.loc 1 295 12 view .LVU246
 1003 0082 0243     		orrs	r2, r0
 1004 0084 1A60     		str	r2, [r3]
 296:Src/motor.c   **** 
 297:Src/motor.c   **** 	NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 1005              		.loc 1 297 2 is_stmt 1 view .LVU247
 1006              	.LVL72:
 1007              	.LBB6:
 1008              	.LBI6:
 1009              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
ARM GAS  /tmp/ccxZrjrM.s 			page 25


  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
ARM GAS  /tmp/ccxZrjrM.s 			page 26


  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
ARM GAS  /tmp/ccxZrjrM.s 			page 27


 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
ARM GAS  /tmp/ccxZrjrM.s 			page 28


 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
ARM GAS  /tmp/ccxZrjrM.s 			page 29


 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
ARM GAS  /tmp/ccxZrjrM.s 			page 30


 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
ARM GAS  /tmp/ccxZrjrM.s 			page 31


 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
ARM GAS  /tmp/ccxZrjrM.s 			page 32


 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccxZrjrM.s 			page 33


 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccxZrjrM.s 			page 34


 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
ARM GAS  /tmp/ccxZrjrM.s 			page 35


 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1010              		.loc 2 623 22 view .LVU248
 1011              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1012              		.loc 2 625 3 view .LVU249
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1013              		.loc 2 627 5 view .LVU250
 1014              		.loc 2 627 20 is_stmt 0 view .LVU251
 1015 0086 0E4B     		ldr	r3, .L44+28
 1016 0088 8022     		movs	r2, #128
 1017 008a 9202     		lsls	r2, r2, #10
 1018 008c 1A60     		str	r2, [r3]
 1019              	.LVL73:
 1020              		.loc 2 627 20 view .LVU252
 1021              	.LBE7:
 1022              	.LBE6:
 298:Src/motor.c   **** 	NVIC_SetPriority(TIM6_DAC_IRQn,3);
 1023              		.loc 1 298 2 is_stmt 1 view .LVU253
 1024              	.LBB8:
 1025              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/ccxZrjrM.s 			page 36


 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/ccxZrjrM.s 			page 37


 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1026              		.loc 2 730 22 view .LVU254
 1027              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1028              		.loc 2 732 3 view .LVU255
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1029              		.loc 2 734 5 view .LVU256
 1030              		.loc 2 734 52 is_stmt 0 view .LVU257
 1031 008e C420     		movs	r0, #196
 1032 0090 8000     		lsls	r0, r0, #2
 1033 0092 1958     		ldr	r1, [r3, r0]
 1034              		.loc 2 734 33 view .LVU258
 1035 0094 0B4A     		ldr	r2, .L44+32
 1036 0096 1140     		ands	r1, r2
 1037              		.loc 2 734 102 view .LVU259
 1038 0098 C022     		movs	r2, #192
 1039 009a 1202     		lsls	r2, r2, #8
 1040 009c 0A43     		orrs	r2, r1
 1041              		.loc 2 734 30 view .LVU260
 1042 009e 1A50     		str	r2, [r3, r0]
 1043              	.LVL74:
 1044              		.loc 2 734 30 view .LVU261
 1045              	.LBE9:
 1046              	.LBE8:
 299:Src/motor.c   **** }
ARM GAS  /tmp/ccxZrjrM.s 			page 38


 1047              		.loc 1 299 1 view .LVU262
 1048              		@ sp needed
 1049 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1050              	.L45:
 1051 00a2 C046     		.align	2
 1052              	.L44:
 1053 00a4 00100240 		.word	1073876992
 1054 00a8 00040040 		.word	1073742848
 1055 00ac FFFF0000 		.word	65535
 1056 00b0 FF7F0000 		.word	32767
 1057 00b4 002C0140 		.word	1073818624
 1058 00b8 00100040 		.word	1073745920
 1059 00bc 30750000 		.word	30000
 1060 00c0 00E100E0 		.word	-536813312
 1061 00c4 FF00FFFF 		.word	-65281
 1062              		.cfi_endproc
 1063              	.LFE54:
 1065              		.section	.text.motor_init,"ax",%progbits
 1066              		.align	1
 1067              		.global	motor_init
 1068              		.syntax unified
 1069              		.code	16
 1070              		.thumb_func
 1072              	motor_init:
 1073              	.LFB43:
  25:Src/motor.c   **** 	pwm_init();
 1074              		.loc 1 25 23 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 1078 0000 10B5     		push	{r4, lr}
 1079              	.LCFI11:
 1080              		.cfi_def_cfa_offset 8
 1081              		.cfi_offset 4, -8
 1082              		.cfi_offset 14, -4
  26:Src/motor.c   **** 	encoder_init();
 1083              		.loc 1 26 2 view .LVU264
 1084 0002 FFF7FEFF 		bl	pwm_init
 1085              	.LVL75:
  27:Src/motor.c   **** }
 1086              		.loc 1 27 2 view .LVU265
 1087 0006 FFF7FEFF 		bl	encoder_init
 1088              	.LVL76:
  28:Src/motor.c   **** 
 1089              		.loc 1 28 1 is_stmt 0 view .LVU266
 1090              		@ sp needed
 1091 000a 10BD     		pop	{r4, pc}
 1092              		.cfi_endproc
 1093              	.LFE43:
 1095              		.section	.text.ObjectDetected,"ax",%progbits
 1096              		.align	1
 1097              		.global	ObjectDetected
 1098              		.syntax unified
 1099              		.code	16
 1100              		.thumb_func
 1102              	ObjectDetected:
 1103              	.LFB55:
ARM GAS  /tmp/ccxZrjrM.s 			page 39


 300:Src/motor.c   **** 
 301:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 302:Src/motor.c   **** #define ULTRASONIC_SAMPLES 1
 303:Src/motor.c   **** 
 304:Src/motor.c   **** uint8_t ObjectDetected(){
 1104              		.loc 1 304 25 is_stmt 1 view -0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108 0000 70B5     		push	{r4, r5, r6, lr}
 1109              	.LCFI12:
 1110              		.cfi_def_cfa_offset 16
 1111              		.cfi_offset 4, -16
 1112              		.cfi_offset 5, -12
 1113              		.cfi_offset 6, -8
 1114              		.cfi_offset 14, -4
 305:Src/motor.c   **** 	uint32_t us_left_sum = 0;
 1115              		.loc 1 305 2 view .LVU268
 1116              	.LVL77:
 306:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1117              		.loc 1 306 2 view .LVU269
 307:Src/motor.c   **** 
 308:Src/motor.c   **** 	for(uint8_t i=0;i<ULTRASONIC_SAMPLES;i++){
 1118              		.loc 1 308 2 view .LVU270
 1119              	.LBB10:
 1120              		.loc 1 308 6 view .LVU271
 1121              		.loc 1 308 14 is_stmt 0 view .LVU272
 1122 0002 0024     		movs	r4, #0
 1123              	.LBE10:
 306:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1124              		.loc 1 306 11 view .LVU273
 1125 0004 0026     		movs	r6, #0
 305:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1126              		.loc 1 305 11 view .LVU274
 1127 0006 0025     		movs	r5, #0
 1128              	.LVL78:
 1129              	.L48:
 1130              	.LBB11:
 1131              		.loc 1 308 19 is_stmt 1 discriminator 1 view .LVU275
 1132 0008 002C     		cmp	r4, #0
 1133 000a 05D0     		beq	.L49
 1134              	.LBE11:
 309:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 310:Src/motor.c   **** 		us_right_sum += GetUltrasonic(&ultrasonic_right_pins);
 311:Src/motor.c   **** 	}
 312:Src/motor.c   **** 
 313:Src/motor.c   **** 	/* us_left_sum >>= 1; //div by 2 */
 314:Src/motor.c   **** 	/* us_right_sum >>= 1; */
 315:Src/motor.c   **** 
 316:Src/motor.c   **** 	return (us_left_sum < STOP_ULTRASONIC) || (us_right_sum < STOP_ULTRASONIC);
 1135              		.loc 1 316 2 view .LVU276
 1136              		.loc 1 316 41 is_stmt 0 view .LVU277
 1137 000c 132D     		cmp	r5, #19
 1138 000e 0ED9     		bls	.L51
 1139              		.loc 1 316 41 discriminator 2 view .LVU278
 1140 0010 132E     		cmp	r6, #19
 1141 0012 0FD8     		bhi	.L52
ARM GAS  /tmp/ccxZrjrM.s 			page 40


 1142              		.loc 1 316 41 view .LVU279
 1143 0014 0120     		movs	r0, #1
 1144 0016 0BE0     		b	.L50
 1145              	.L49:
 1146              	.LBB12:
 309:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1147              		.loc 1 309 3 is_stmt 1 discriminator 3 view .LVU280
 309:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1148              		.loc 1 309 18 is_stmt 0 discriminator 3 view .LVU281
 1149 0018 0748     		ldr	r0, .L53
 1150 001a FFF7FEFF 		bl	GetUltrasonic
 1151              	.LVL79:
 309:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1152              		.loc 1 309 15 discriminator 3 view .LVU282
 1153 001e 2D18     		adds	r5, r5, r0
 1154              	.LVL80:
 310:Src/motor.c   **** 	}
 1155              		.loc 1 310 3 is_stmt 1 discriminator 3 view .LVU283
 310:Src/motor.c   **** 	}
 1156              		.loc 1 310 19 is_stmt 0 discriminator 3 view .LVU284
 1157 0020 0648     		ldr	r0, .L53+4
 1158 0022 FFF7FEFF 		bl	GetUltrasonic
 1159              	.LVL81:
 310:Src/motor.c   **** 	}
 1160              		.loc 1 310 16 discriminator 3 view .LVU285
 1161 0026 3618     		adds	r6, r6, r0
 1162              	.LVL82:
 308:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1163              		.loc 1 308 40 is_stmt 1 discriminator 3 view .LVU286
 1164 0028 0134     		adds	r4, r4, #1
 1165              	.LVL83:
 308:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1166              		.loc 1 308 40 is_stmt 0 discriminator 3 view .LVU287
 1167 002a E4B2     		uxtb	r4, r4
 1168              	.LVL84:
 308:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1169              		.loc 1 308 40 discriminator 3 view .LVU288
 1170 002c ECE7     		b	.L48
 1171              	.L51:
 308:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1172              		.loc 1 308 40 discriminator 3 view .LVU289
 1173              	.LBE12:
 1174              		.loc 1 316 41 view .LVU290
 1175 002e 0120     		movs	r0, #1
 1176              	.L50:
 1177              		.loc 1 316 41 discriminator 6 view .LVU291
 1178 0030 C0B2     		uxtb	r0, r0
 317:Src/motor.c   **** }
 1179              		.loc 1 317 1 discriminator 6 view .LVU292
 1180              		@ sp needed
 1181              	.LVL85:
 1182              	.LVL86:
 1183              	.LVL87:
 1184              		.loc 1 317 1 discriminator 6 view .LVU293
 1185 0032 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL88:
 1187              	.L52:
ARM GAS  /tmp/ccxZrjrM.s 			page 41


 316:Src/motor.c   **** }
 1188              		.loc 1 316 41 view .LVU294
 1189 0034 0020     		movs	r0, #0
 1190 0036 FBE7     		b	.L50
 1191              	.L54:
 1192              		.align	2
 1193              	.L53:
 1194 0038 00000000 		.word	ultrasonic_left_pins
 1195 003c 00000000 		.word	ultrasonic_right_pins
 1196              		.cfi_endproc
 1197              	.LFE55:
 1199              		.global	__aeabi_i2f
 1200              		.global	__aeabi_fdiv
 1201              		.global	__aeabi_fmul
 1202              		.global	__aeabi_f2iz
 1203              		.global	__aeabi_fadd
 1204              		.global	__aeabi_fcmpge
 1205              		.section	.rodata.TIM6_DAC_IRQHandler.str1.4,"aMS",%progbits,1
 1206              		.align	2
 1207              	.LC35:
 1208 0000 48697420 		.ascii	"Hit distance target\012\000"
 1208      64697374 
 1208      616E6365 
 1208      20746172 
 1208      6765740A 
 1209 0015 000000   		.align	2
 1210              	.LC38:
 1211 0018 4F626A65 		.ascii	"Object detected\012\000"
 1211      63742064 
 1211      65746563 
 1211      7465640A 
 1211      00
 1212 0029 000000   		.align	2
 1213              	.LC42:
 1214 002c 68656164 		.ascii	"heading: %d\012\000"
 1214      696E673A 
 1214      2025640A 
 1214      00
 1215              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 1216              		.align	1
 1217              		.global	TIM6_DAC_IRQHandler
 1218              		.syntax unified
 1219              		.code	16
 1220              		.thumb_func
 1222              	TIM6_DAC_IRQHandler:
 1223              	.LFB56:
 318:Src/motor.c   **** 
 319:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 1224              		.loc 1 319 32 is_stmt 1 view -0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 32
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228 0000 30B5     		push	{r4, r5, lr}
 1229              	.LCFI13:
 1230              		.cfi_def_cfa_offset 12
 1231              		.cfi_offset 4, -12
 1232              		.cfi_offset 5, -8
ARM GAS  /tmp/ccxZrjrM.s 			page 42


 1233              		.cfi_offset 14, -4
 1234 0002 89B0     		sub	sp, sp, #36
 1235              	.LCFI14:
 1236              		.cfi_def_cfa_offset 48
 320:Src/motor.c   **** 	/* Calculate the motor speed in raw encoder counts
 321:Src/motor.c   **** 	 * Note the motor speed is signed! Motor can be run in reverse.
 322:Src/motor.c   **** 	 * Speed is measured by how far the counter moved from center point
 323:Src/motor.c   **** 	 */
 324:Src/motor.c   **** 	uint8_t usart_buffer[32];
 1237              		.loc 1 324 2 view .LVU296
 325:Src/motor.c   **** 
 326:Src/motor.c   **** 
 327:Src/motor.c   **** 	motorl_speed = (TIM3->CNT - 0x7FFF);
 1238              		.loc 1 327 2 view .LVU297
 1239              		.loc 1 327 22 is_stmt 0 view .LVU298
 1240 0004 6149     		ldr	r1, .L71
 1241 0006 4B6A     		ldr	r3, [r1, #36]
 1242              		.loc 1 327 28 view .LVU299
 1243 0008 614A     		ldr	r2, .L71+4
 1244 000a 9446     		mov	ip, r2
 1245 000c 6344     		add	r3, r3, ip
 1246 000e 1BB2     		sxth	r3, r3
 1247              		.loc 1 327 15 view .LVU300
 1248 0010 604A     		ldr	r2, .L71+8
 1249 0012 1380     		strh	r3, [r2]
 328:Src/motor.c   **** 	/* sprintf(usart_buffer, "motorl: %d\n", motorl_speed); */
 329:Src/motor.c   **** 	/* USART_SendString(usart_buffer); */
 330:Src/motor.c   **** 	TIM3->CNT = 0x7FFF; // Reset back to center point
 1250              		.loc 1 330 2 is_stmt 1 view .LVU301
 1251              		.loc 1 330 12 is_stmt 0 view .LVU302
 1252 0014 6048     		ldr	r0, .L71+12
 1253 0016 4862     		str	r0, [r1, #36]
 331:Src/motor.c   **** 	motorr_speed = (TIM1->CNT - 0x7FFF);
 1254              		.loc 1 331 2 is_stmt 1 view .LVU303
 1255              		.loc 1 331 22 is_stmt 0 view .LVU304
 1256 0018 6049     		ldr	r1, .L71+16
 1257 001a 4B6A     		ldr	r3, [r1, #36]
 1258              		.loc 1 331 28 view .LVU305
 1259 001c 6344     		add	r3, r3, ip
 1260 001e 1BB2     		sxth	r3, r3
 1261              		.loc 1 331 15 view .LVU306
 1262 0020 5F4C     		ldr	r4, .L71+20
 1263 0022 2380     		strh	r3, [r4]
 332:Src/motor.c   **** 	TIM1->CNT = 0x7FFF; // Reset back to center point
 1264              		.loc 1 332 2 is_stmt 1 view .LVU307
 1265              		.loc 1 332 12 is_stmt 0 view .LVU308
 1266 0024 4862     		str	r0, [r1, #36]
 333:Src/motor.c   **** 
 334:Src/motor.c   **** 	if(abs(motorl_speed)>50){
 1267              		.loc 1 334 2 is_stmt 1 view .LVU309
 1268              		.loc 1 334 5 is_stmt 0 view .LVU310
 1269 0026 1388     		ldrh	r3, [r2]
 1270 0028 1BB2     		sxth	r3, r3
 1271 002a DA17     		asrs	r2, r3, #31
 1272 002c 9B18     		adds	r3, r3, r2
 1273 002e 5340     		eors	r3, r2
 1274 0030 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccxZrjrM.s 			page 43


 1275              		.loc 1 334 4 view .LVU311
 1276 0032 322B     		cmp	r3, #50
 1277 0034 36D9     		bls	.L56
 1278              	.LBB13:
 335:Src/motor.c   **** 		float ratio = ((float) abs(motorl_speed))/ ((float) abs(motorr_speed));
 1279              		.loc 1 335 3 is_stmt 1 view .LVU312
 1280              		.loc 1 335 26 is_stmt 0 view .LVU313
 1281 0036 574B     		ldr	r3, .L71+8
 1282 0038 1888     		ldrh	r0, [r3]
 1283 003a 00B2     		sxth	r0, r0
 1284 003c C317     		asrs	r3, r0, #31
 1285 003e C018     		adds	r0, r0, r3
 1286 0040 5840     		eors	r0, r3
 1287 0042 80B2     		uxth	r0, r0
 1288              		.loc 1 335 18 view .LVU314
 1289 0044 FFF7FEFF 		bl	__aeabi_i2f
 1290              	.LVL89:
 1291 0048 041C     		adds	r4, r0, #0
 1292              		.loc 1 335 55 view .LVU315
 1293 004a 554B     		ldr	r3, .L71+20
 1294 004c 1B88     		ldrh	r3, [r3]
 1295 004e 1BB2     		sxth	r3, r3
 1296 0050 DA17     		asrs	r2, r3, #31
 1297 0052 9B18     		adds	r3, r3, r2
 1298 0054 5340     		eors	r3, r2
 1299 0056 98B2     		uxth	r0, r3
 1300              		.loc 1 335 47 view .LVU316
 1301 0058 FFF7FEFF 		bl	__aeabi_i2f
 1302              	.LVL90:
 1303 005c 011C     		adds	r1, r0, #0
 1304              		.loc 1 335 9 view .LVU317
 1305 005e 201C     		adds	r0, r4, #0
 1306 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1307              	.LVL91:
 1308 0064 041C     		adds	r4, r0, #0
 1309              	.LVL92:
 336:Src/motor.c   **** 		pwm_right = min((int)(pwm_right * ratio), 100);
 1310              		.loc 1 336 3 is_stmt 1 view .LVU318
 1311              		.loc 1 336 15 is_stmt 0 view .LVU319
 1312 0066 4F4B     		ldr	r3, .L71+24
 1313 0068 1878     		ldrb	r0, [r3]
 1314              	.LVL93:
 1315              		.loc 1 336 15 view .LVU320
 1316 006a C0B2     		uxtb	r0, r0
 1317 006c FFF7FEFF 		bl	__aeabi_i2f
 1318              	.LVL94:
 1319 0070 211C     		adds	r1, r4, #0
 1320 0072 FFF7FEFF 		bl	__aeabi_fmul
 1321              	.LVL95:
 1322 0076 FFF7FEFF 		bl	__aeabi_f2iz
 1323              	.LVL96:
 1324              		.loc 1 336 13 view .LVU321
 1325 007a 6428     		cmp	r0, #100
 1326 007c 0BDC     		bgt	.L64
 1327              		.loc 1 336 15 discriminator 1 view .LVU322
 1328 007e 494B     		ldr	r3, .L71+24
 1329 0080 1878     		ldrb	r0, [r3]
ARM GAS  /tmp/ccxZrjrM.s 			page 44


 1330 0082 C0B2     		uxtb	r0, r0
 1331 0084 FFF7FEFF 		bl	__aeabi_i2f
 1332              	.LVL97:
 1333 0088 211C     		adds	r1, r4, #0
 1334 008a FFF7FEFF 		bl	__aeabi_fmul
 1335              	.LVL98:
 1336 008e FFF7FEFF 		bl	__aeabi_f2iz
 1337              	.LVL99:
 1338              		.loc 1 336 13 discriminator 1 view .LVU323
 1339 0092 C0B2     		uxtb	r0, r0
 1340 0094 00E0     		b	.L57
 1341              	.L64:
 1342              		.loc 1 336 13 view .LVU324
 1343 0096 6420     		movs	r0, #100
 1344              	.L57:
 1345              		.loc 1 336 13 discriminator 4 view .LVU325
 1346 0098 424B     		ldr	r3, .L71+24
 1347 009a 1870     		strb	r0, [r3]
 337:Src/motor.c   **** 		pwm_setDutyCycleR(pwm_right);
 1348              		.loc 1 337 3 is_stmt 1 discriminator 4 view .LVU326
 1349 009c 1878     		ldrb	r0, [r3]
 1350 009e C0B2     		uxtb	r0, r0
 1351 00a0 FFF7FEFF 		bl	pwm_setDutyCycleR
 1352              	.LVL100:
 1353              	.L56:
 1354              		.loc 1 337 3 is_stmt 0 discriminator 4 view .LVU327
 1355              	.LBE13:
 338:Src/motor.c   **** #if PRINT_DEBUG
 339:Src/motor.c   **** 		sprintf(usart_buffer, "pwm_right: %d\n", pwm_right);
 340:Src/motor.c   **** 		USART_SendString(usart_buffer);
 341:Src/motor.c   **** 		sprintf(usart_buffer, "motorr: %d\n", motorr_speed);
 342:Src/motor.c   **** 		USART_SendString(usart_buffer);
 343:Src/motor.c   **** #endif
 344:Src/motor.c   **** 	}
 345:Src/motor.c   **** 
 346:Src/motor.c   **** 	if(target_dist != 0.0){
 1356              		.loc 1 346 2 is_stmt 1 view .LVU328
 1357              		.loc 1 346 17 is_stmt 0 view .LVU329
 1358 00a4 404B     		ldr	r3, .L71+28
 1359 00a6 1868     		ldr	r0, [r3]
 1360              		.loc 1 346 4 view .LVU330
 1361 00a8 0021     		movs	r1, #0
 1362 00aa FFF7FEFF 		bl	__aeabi_fcmpeq
 1363              	.LVL101:
 1364 00ae 0028     		cmp	r0, #0
 1365 00b0 1CD1     		bne	.L58
 1366              	.LBB14:
 347:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/132;
 1367              		.loc 1 347 3 is_stmt 1 view .LVU331
 1368              		.loc 1 347 26 is_stmt 0 view .LVU332
 1369 00b2 384B     		ldr	r3, .L71+8
 1370 00b4 1888     		ldrh	r0, [r3]
 1371 00b6 00B2     		sxth	r0, r0
 1372 00b8 C317     		asrs	r3, r0, #31
 1373 00ba C018     		adds	r0, r0, r3
 1374 00bc 5840     		eors	r0, r3
 1375 00be 80B2     		uxth	r0, r0
ARM GAS  /tmp/ccxZrjrM.s 			page 45


 1376              		.loc 1 347 19 view .LVU333
 1377 00c0 FFF7FEFF 		bl	__aeabi_i2f
 1378              	.LVL102:
 1379              		.loc 1 347 43 view .LVU334
 1380 00c4 3949     		ldr	r1, .L71+32
 1381 00c6 FFF7FEFF 		bl	__aeabi_fdiv
 1382              	.LVL103:
 1383 00ca 011C     		adds	r1, r0, #0
 1384              		.loc 1 347 16 view .LVU335
 1385 00cc 384C     		ldr	r4, .L71+36
 1386 00ce 2068     		ldr	r0, [r4]
 1387 00d0 FFF7FEFF 		bl	__aeabi_fadd
 1388              	.LVL104:
 1389 00d4 2060     		str	r0, [r4]
 348:Src/motor.c   **** #if PRINT_DEBUG
 349:Src/motor.c   **** 		sprintf(usart_buffer, "current_dist: %d\n", (int)current_dist);
 350:Src/motor.c   **** 		USART_SendString(usart_buffer);
 351:Src/motor.c   **** #endif
 352:Src/motor.c   **** 		uint8_t obj = 0;
 1390              		.loc 1 352 3 is_stmt 1 view .LVU336
 1391              	.LVL105:
 353:Src/motor.c   **** 		if ((current_dist >= target_dist) || (!turning && (obj = ObjectDetected()))){
 1392              		.loc 1 353 3 view .LVU337
 1393              		.loc 1 353 21 is_stmt 0 view .LVU338
 1394 00d6 2068     		ldr	r0, [r4]
 1395 00d8 334B     		ldr	r3, .L71+28
 1396 00da 1968     		ldr	r1, [r3]
 1397              		.loc 1 353 6 view .LVU339
 1398 00dc FFF7FEFF 		bl	__aeabi_fcmpge
 1399              	.LVL106:
 1400 00e0 0028     		cmp	r0, #0
 1401 00e2 0AD1     		bne	.L68
 1402              		.loc 1 353 41 discriminator 1 view .LVU340
 1403 00e4 334B     		ldr	r3, .L71+40
 1404 00e6 1B78     		ldrb	r3, [r3]
 1405              		.loc 1 353 37 discriminator 1 view .LVU341
 1406 00e8 002B     		cmp	r3, #0
 1407 00ea 29D0     		beq	.L69
 1408              	.LVL107:
 1409              	.L58:
 1410              		.loc 1 353 37 discriminator 1 view .LVU342
 1411              	.LBE14:
 354:Src/motor.c   **** 			if(obj)
 355:Src/motor.c   **** 				USART_SendString("Object detected\n");
 356:Src/motor.c   **** 			else
 357:Src/motor.c   **** 				USART_SendString("Hit distance target\n");
 358:Src/motor.c   **** 			motors_Off();
 359:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 360:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 361:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 362:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 363:Src/motor.c   **** 			pwm_right = 0;
 364:Src/motor.c   **** 			if(!turning){
 365:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 366:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 367:Src/motor.c   **** 				USART_SendString(usart_buffer);
 368:Src/motor.c   **** 			}
ARM GAS  /tmp/ccxZrjrM.s 			page 46


 369:Src/motor.c   **** 			target_dist = 0.0;
 370:Src/motor.c   **** 			current_dist = 0.0;
 371:Src/motor.c   **** 		}
 372:Src/motor.c   **** 	}
 373:Src/motor.c   **** 
 374:Src/motor.c   **** 	// Call the PI update function
 375:Src/motor.c   **** 	TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 1412              		.loc 1 375 2 is_stmt 1 view .LVU343
 1413              		.loc 1 375 6 is_stmt 0 view .LVU344
 1414 00ec 324A     		ldr	r2, .L71+44
 1415 00ee 1369     		ldr	r3, [r2, #16]
 1416              		.loc 1 375 11 view .LVU345
 1417 00f0 0121     		movs	r1, #1
 1418 00f2 8B43     		bics	r3, r1
 1419 00f4 1361     		str	r3, [r2, #16]
 376:Src/motor.c   **** }
 1420              		.loc 1 376 1 view .LVU346
 1421 00f6 09B0     		add	sp, sp, #36
 1422              		@ sp needed
 1423 00f8 30BD     		pop	{r4, r5, pc}
 1424              	.LVL108:
 1425              	.L68:
 1426              	.LBB15:
 354:Src/motor.c   **** 			if(obj)
 1427              		.loc 1 354 4 is_stmt 1 view .LVU347
 357:Src/motor.c   **** 			motors_Off();
 1428              		.loc 1 357 5 view .LVU348
 1429 00fa 3048     		ldr	r0, .L71+48
 1430 00fc FFF7FEFF 		bl	USART_SendString
 1431              	.LVL109:
 1432              	.L62:
 358:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 1433              		.loc 1 358 4 view .LVU349
 1434 0100 FFF7FEFF 		bl	motors_Off
 1435              	.LVL110:
 359:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1436              		.loc 1 359 4 view .LVU350
 359:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1437              		.loc 1 359 24 is_stmt 0 view .LVU351
 1438 0104 214A     		ldr	r2, .L71
 1439 0106 536A     		ldr	r3, [r2, #36]
 359:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1440              		.loc 1 359 30 view .LVU352
 1441 0108 2149     		ldr	r1, .L71+4
 1442 010a 8C46     		mov	ip, r1
 1443 010c 6344     		add	r3, r3, ip
 1444 010e 1BB2     		sxth	r3, r3
 359:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1445              		.loc 1 359 17 view .LVU353
 1446 0110 2049     		ldr	r1, .L71+8
 1447 0112 0B80     		strh	r3, [r1]
 360:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1448              		.loc 1 360 4 is_stmt 1 view .LVU354
 360:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1449              		.loc 1 360 14 is_stmt 0 view .LVU355
 1450 0114 2049     		ldr	r1, .L71+12
 1451 0116 5162     		str	r1, [r2, #36]
ARM GAS  /tmp/ccxZrjrM.s 			page 47


 361:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1452              		.loc 1 361 4 is_stmt 1 view .LVU356
 361:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1453              		.loc 1 361 24 is_stmt 0 view .LVU357
 1454 0118 204A     		ldr	r2, .L71+16
 1455 011a 536A     		ldr	r3, [r2, #36]
 361:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1456              		.loc 1 361 30 view .LVU358
 1457 011c 6344     		add	r3, r3, ip
 1458 011e 1BB2     		sxth	r3, r3
 361:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1459              		.loc 1 361 17 view .LVU359
 1460 0120 1F48     		ldr	r0, .L71+20
 1461 0122 0380     		strh	r3, [r0]
 362:Src/motor.c   **** 			pwm_right = 0;
 1462              		.loc 1 362 4 is_stmt 1 view .LVU360
 362:Src/motor.c   **** 			pwm_right = 0;
 1463              		.loc 1 362 14 is_stmt 0 view .LVU361
 1464 0124 5162     		str	r1, [r2, #36]
 363:Src/motor.c   **** 			if(!turning){
 1465              		.loc 1 363 4 is_stmt 1 view .LVU362
 363:Src/motor.c   **** 			if(!turning){
 1466              		.loc 1 363 14 is_stmt 0 view .LVU363
 1467 0126 1F4B     		ldr	r3, .L71+24
 1468 0128 0022     		movs	r2, #0
 1469 012a 1A70     		strb	r2, [r3]
 364:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1470              		.loc 1 364 4 is_stmt 1 view .LVU364
 364:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1471              		.loc 1 364 7 is_stmt 0 view .LVU365
 1472 012c 214B     		ldr	r3, .L71+40
 1473 012e 1B78     		ldrb	r3, [r3]
 364:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1474              		.loc 1 364 6 view .LVU366
 1475 0130 002B     		cmp	r3, #0
 1476 0132 0DD0     		beq	.L70
 1477              	.L63:
 369:Src/motor.c   **** 			current_dist = 0.0;
 1478              		.loc 1 369 4 is_stmt 1 view .LVU367
 369:Src/motor.c   **** 			current_dist = 0.0;
 1479              		.loc 1 369 16 is_stmt 0 view .LVU368
 1480 0134 1C4B     		ldr	r3, .L71+28
 1481 0136 0022     		movs	r2, #0
 1482 0138 1A60     		str	r2, [r3]
 370:Src/motor.c   **** 		}
 1483              		.loc 1 370 4 is_stmt 1 view .LVU369
 370:Src/motor.c   **** 		}
 1484              		.loc 1 370 17 is_stmt 0 view .LVU370
 1485 013a 1D4B     		ldr	r3, .L71+36
 1486 013c 1A60     		str	r2, [r3]
 1487 013e D5E7     		b	.L58
 1488              	.LVL111:
 1489              	.L69:
 353:Src/motor.c   **** 			if(obj)
 1490              		.loc 1 353 60 discriminator 2 view .LVU371
 1491 0140 FFF7FEFF 		bl	ObjectDetected
 1492              	.LVL112:
ARM GAS  /tmp/ccxZrjrM.s 			page 48


 353:Src/motor.c   **** 			if(obj)
 1493              		.loc 1 353 50 discriminator 2 view .LVU372
 1494 0144 0028     		cmp	r0, #0
 1495 0146 D1D0     		beq	.L58
 354:Src/motor.c   **** 				USART_SendString("Object detected\n");
 1496              		.loc 1 354 4 is_stmt 1 view .LVU373
 355:Src/motor.c   **** 			else
 1497              		.loc 1 355 5 view .LVU374
 1498 0148 1D48     		ldr	r0, .L71+52
 1499              	.LVL113:
 355:Src/motor.c   **** 			else
 1500              		.loc 1 355 5 is_stmt 0 view .LVU375
 1501 014a FFF7FEFF 		bl	USART_SendString
 1502              	.LVL114:
 1503 014e D7E7     		b	.L62
 1504              	.LVL115:
 1505              	.L70:
 365:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1506              		.loc 1 365 5 is_stmt 1 view .LVU376
 365:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1507              		.loc 1 365 44 is_stmt 0 view .LVU377
 1508 0150 1C4C     		ldr	r4, .L71+56
 1509 0152 2068     		ldr	r0, [r4]
 1510 0154 FFF7FEFF 		bl	__aeabi_f2d
 1511              	.LVL116:
 1512 0158 FFF7FEFF 		bl	cos
 1513              	.LVL117:
 365:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1514              		.loc 1 365 37 view .LVU378
 1515 015c FFF7FEFF 		bl	__aeabi_d2f
 1516              	.LVL118:
 365:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1517              		.loc 1 365 35 view .LVU379
 1518 0160 134B     		ldr	r3, .L71+36
 1519 0162 1968     		ldr	r1, [r3]
 1520 0164 FFF7FEFF 		bl	__aeabi_fmul
 1521              	.LVL119:
 1522 0168 011C     		adds	r1, r0, #0
 365:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1523              		.loc 1 365 19 view .LVU380
 1524 016a 174D     		ldr	r5, .L71+60
 1525 016c 2868     		ldr	r0, [r5]
 1526 016e FFF7FEFF 		bl	__aeabi_fadd
 1527              	.LVL120:
 1528 0172 2860     		str	r0, [r5]
 366:Src/motor.c   **** 				USART_SendString(usart_buffer);
 1529              		.loc 1 366 5 is_stmt 1 view .LVU381
 1530 0174 2068     		ldr	r0, [r4]
 1531 0176 FFF7FEFF 		bl	__aeabi_f2iz
 1532              	.LVL121:
 1533 017a 0200     		movs	r2, r0
 1534 017c 1349     		ldr	r1, .L71+64
 1535 017e 6846     		mov	r0, sp
 1536 0180 FFF7FEFF 		bl	sprintf
 1537              	.LVL122:
 367:Src/motor.c   **** 			}
 1538              		.loc 1 367 5 view .LVU382
ARM GAS  /tmp/ccxZrjrM.s 			page 49


 1539 0184 6846     		mov	r0, sp
 1540 0186 FFF7FEFF 		bl	USART_SendString
 1541              	.LVL123:
 1542 018a D3E7     		b	.L63
 1543              	.L72:
 1544              		.align	2
 1545              	.L71:
 1546 018c 00040040 		.word	1073742848
 1547 0190 0180FFFF 		.word	-32767
 1548 0194 00000000 		.word	motorl_speed
 1549 0198 FF7F0000 		.word	32767
 1550 019c 002C0140 		.word	1073818624
 1551 01a0 00000000 		.word	motorr_speed
 1552 01a4 00000000 		.word	pwm_right
 1553 01a8 00000000 		.word	target_dist
 1554 01ac 00000443 		.word	1124335616
 1555 01b0 00000000 		.word	current_dist
 1556 01b4 00000000 		.word	turning
 1557 01b8 00100040 		.word	1073745920
 1558 01bc 00000000 		.word	.LC35
 1559 01c0 18000000 		.word	.LC38
 1560 01c4 00000000 		.word	heading
 1561 01c8 00000000 		.word	absolute_dist
 1562 01cc 2C000000 		.word	.LC42
 1563              	.LBE15:
 1564              		.cfi_endproc
 1565              	.LFE56:
 1567              		.section	.text.get_distance,"ax",%progbits
 1568              		.align	1
 1569              		.global	get_distance
 1570              		.syntax unified
 1571              		.code	16
 1572              		.thumb_func
 1574              	get_distance:
 1575              	.LFB57:
 377:Src/motor.c   **** 
 378:Src/motor.c   **** float get_distance(void){
 1576              		.loc 1 378 25 view -0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580              		@ link register save eliminated.
 379:Src/motor.c   **** 	return absolute_dist;
 1581              		.loc 1 379 2 view .LVU384
 1582              		.loc 1 379 9 is_stmt 0 view .LVU385
 1583 0000 014B     		ldr	r3, .L74
 1584 0002 1868     		ldr	r0, [r3]
 380:Src/motor.c   **** }
 1585              		.loc 1 380 1 view .LVU386
 1586              		@ sp needed
 1587 0004 7047     		bx	lr
 1588              	.L75:
 1589 0006 C046     		.align	2
 1590              	.L74:
 1591 0008 00000000 		.word	absolute_dist
 1592              		.cfi_endproc
 1593              	.LFE57:
ARM GAS  /tmp/ccxZrjrM.s 			page 50


 1595              		.global	__aeabi_d2iz
 1596              		.global	__aeabi_idivmod
 1597              		.section	.text.get_heading,"ax",%progbits
 1598              		.align	1
 1599              		.global	get_heading
 1600              		.syntax unified
 1601              		.code	16
 1602              		.thumb_func
 1604              	get_heading:
 1605              	.LFB58:
 381:Src/motor.c   **** 
 382:Src/motor.c   **** int32_t get_heading(){
 1606              		.loc 1 382 22 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610 0000 10B5     		push	{r4, lr}
 1611              	.LCFI15:
 1612              		.cfi_def_cfa_offset 8
 1613              		.cfi_offset 4, -8
 1614              		.cfi_offset 14, -4
 383:Src/motor.c   **** 	return (int32_t)(heading * 57.3) % 360;
 1615              		.loc 1 383 2 view .LVU388
 1616              		.loc 1 383 27 is_stmt 0 view .LVU389
 1617 0002 084B     		ldr	r3, .L77
 1618 0004 1868     		ldr	r0, [r3]
 1619 0006 FFF7FEFF 		bl	__aeabi_f2d
 1620              	.LVL124:
 1621 000a 074A     		ldr	r2, .L77+4
 1622 000c 074B     		ldr	r3, .L77+8
 1623 000e FFF7FEFF 		bl	__aeabi_dmul
 1624              	.LVL125:
 1625              		.loc 1 383 9 view .LVU390
 1626 0012 FFF7FEFF 		bl	__aeabi_d2iz
 1627              	.LVL126:
 1628              		.loc 1 383 35 view .LVU391
 1629 0016 B421     		movs	r1, #180
 1630 0018 4900     		lsls	r1, r1, #1
 1631 001a FFF7FEFF 		bl	__aeabi_idivmod
 1632              	.LVL127:
 1633 001e 0800     		movs	r0, r1
 384:Src/motor.c   **** }
 1634              		.loc 1 384 1 view .LVU392
 1635              		@ sp needed
 1636 0020 10BD     		pop	{r4, pc}
 1637              	.L78:
 1638 0022 C046     		.align	2
 1639              	.L77:
 1640 0024 00000000 		.word	heading
 1641 0028 66666666 		.word	1717986918
 1642 002c 66A64C40 		.word	1078765158
 1643              		.cfi_endproc
 1644              	.LFE58:
 1646              		.global	pwm_left
 1647              		.section	.data.pwm_left,"aw"
 1650              	pwm_left:
 1651 0000 64       		.byte	100
ARM GAS  /tmp/ccxZrjrM.s 			page 51


 1652              		.global	pwm_right
 1653              		.section	.data.pwm_right,"aw"
 1656              	pwm_right:
 1657 0000 64       		.byte	100
 1658              		.global	turning
 1659              		.section	.bss.turning,"aw",%nobits
 1662              	turning:
 1663 0000 00       		.space	1
 1664              		.global	heading
 1665              		.section	.bss.heading,"aw",%nobits
 1666              		.align	2
 1669              	heading:
 1670 0000 00000000 		.space	4
 1671              		.global	absolute_dist
 1672              		.section	.bss.absolute_dist,"aw",%nobits
 1673              		.align	2
 1676              	absolute_dist:
 1677 0000 00000000 		.space	4
 1678              		.global	current_dist
 1679              		.section	.bss.current_dist,"aw",%nobits
 1680              		.align	2
 1683              	current_dist:
 1684 0000 00000000 		.space	4
 1685              		.global	target_dist
 1686              		.section	.bss.target_dist,"aw",%nobits
 1687              		.align	2
 1690              	target_dist:
 1691 0000 00000000 		.space	4
 1692              		.global	motorr_speed
 1693              		.section	.bss.motorr_speed,"aw",%nobits
 1694              		.align	1
 1697              	motorr_speed:
 1698 0000 0000     		.space	2
 1699              		.global	motorl_speed
 1700              		.section	.bss.motorl_speed,"aw",%nobits
 1701              		.align	1
 1704              	motorl_speed:
 1705 0000 0000     		.space	2
 1706              		.text
 1707              	.Letext0:
 1708              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1709              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1710              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1711              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1712              		.file 7 "Inc/pins.h"
 1713              		.file 8 "Inc/motor.h"
 1714              		.file 9 "/usr/arm-none-eabi/include/stdio.h"
 1715              		.file 10 "Inc/main.h"
 1716              		.file 11 "/usr/arm-none-eabi/include/math.h"
ARM GAS  /tmp/ccxZrjrM.s 			page 52


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/ccxZrjrM.s:19     .text.pwm_init:00000000 $t
     /tmp/ccxZrjrM.s:25     .text.pwm_init:00000000 pwm_init
     /tmp/ccxZrjrM.s:172    .text.pwm_init:00000094 $d
     /tmp/ccxZrjrM.s:181    .text.pwm_setDutyCycleL:00000000 $t
     /tmp/ccxZrjrM.s:187    .text.pwm_setDutyCycleL:00000000 pwm_setDutyCycleL
     /tmp/ccxZrjrM.s:224    .text.pwm_setDutyCycleL:00000018 $d
     /tmp/ccxZrjrM.s:229    .text.pwm_setDutyCycleR:00000000 $t
     /tmp/ccxZrjrM.s:235    .text.pwm_setDutyCycleR:00000000 pwm_setDutyCycleR
     /tmp/ccxZrjrM.s:274    .text.set_Motor_Direction:00000000 $t
     /tmp/ccxZrjrM.s:280    .text.set_Motor_Direction:00000000 set_Motor_Direction
     /tmp/ccxZrjrM.s:352    .text.set_Forward:00000000 $t
     /tmp/ccxZrjrM.s:358    .text.set_Forward:00000000 set_Forward
     /tmp/ccxZrjrM.s:397    .text.set_Forward:00000028 $d
     /tmp/ccxZrjrM.s:1656   .data.pwm_right:00000000 pwm_right
     /tmp/ccxZrjrM.s:1650   .data.pwm_left:00000000 pwm_left
     /tmp/ccxZrjrM.s:405    .text.set_Backward:00000000 $t
     /tmp/ccxZrjrM.s:411    .text.set_Backward:00000000 set_Backward
     /tmp/ccxZrjrM.s:450    .text.set_Backward:00000028 $d
     /tmp/ccxZrjrM.s:458    .text.set_Right:00000000 $t
     /tmp/ccxZrjrM.s:464    .text.set_Right:00000000 set_Right
     /tmp/ccxZrjrM.s:503    .text.set_Right:00000028 $d
     /tmp/ccxZrjrM.s:511    .text.set_Left:00000000 $t
     /tmp/ccxZrjrM.s:517    .text.set_Left:00000000 set_Left
     /tmp/ccxZrjrM.s:556    .text.set_Left:00000028 $d
     /tmp/ccxZrjrM.s:564    .text.motors_Off:00000000 $t
     /tmp/ccxZrjrM.s:570    .text.motors_Off:00000000 motors_Off
     /tmp/ccxZrjrM.s:596    .rodata.MoveMotors.str1.4:00000000 $d
     /tmp/ccxZrjrM.s:610    .text.MoveMotors:00000000 $t
     /tmp/ccxZrjrM.s:616    .text.MoveMotors:00000000 MoveMotors
     /tmp/ccxZrjrM.s:843    .text.MoveMotors:00000104 $d
     /tmp/ccxZrjrM.s:1662   .bss.turning:00000000 turning
     /tmp/ccxZrjrM.s:1690   .bss.target_dist:00000000 target_dist
     /tmp/ccxZrjrM.s:1669   .bss.heading:00000000 heading
     /tmp/ccxZrjrM.s:858    .text.encoder_init:00000000 $t
     /tmp/ccxZrjrM.s:864    .text.encoder_init:00000000 encoder_init
     /tmp/ccxZrjrM.s:1053   .text.encoder_init:000000a4 $d
     /tmp/ccxZrjrM.s:1066   .text.motor_init:00000000 $t
     /tmp/ccxZrjrM.s:1072   .text.motor_init:00000000 motor_init
     /tmp/ccxZrjrM.s:1096   .text.ObjectDetected:00000000 $t
     /tmp/ccxZrjrM.s:1102   .text.ObjectDetected:00000000 ObjectDetected
     /tmp/ccxZrjrM.s:1194   .text.ObjectDetected:00000038 $d
     /tmp/ccxZrjrM.s:1206   .rodata.TIM6_DAC_IRQHandler.str1.4:00000000 $d
     /tmp/ccxZrjrM.s:1216   .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/ccxZrjrM.s:1222   .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/ccxZrjrM.s:1546   .text.TIM6_DAC_IRQHandler:0000018c $d
     /tmp/ccxZrjrM.s:1704   .bss.motorl_speed:00000000 motorl_speed
     /tmp/ccxZrjrM.s:1697   .bss.motorr_speed:00000000 motorr_speed
     /tmp/ccxZrjrM.s:1683   .bss.current_dist:00000000 current_dist
     /tmp/ccxZrjrM.s:1676   .bss.absolute_dist:00000000 absolute_dist
     /tmp/ccxZrjrM.s:1568   .text.get_distance:00000000 $t
     /tmp/ccxZrjrM.s:1574   .text.get_distance:00000000 get_distance
     /tmp/ccxZrjrM.s:1591   .text.get_distance:00000008 $d
     /tmp/ccxZrjrM.s:1598   .text.get_heading:00000000 $t
     /tmp/ccxZrjrM.s:1604   .text.get_heading:00000000 get_heading
     /tmp/ccxZrjrM.s:1640   .text.get_heading:00000024 $d
ARM GAS  /tmp/ccxZrjrM.s 			page 53


     /tmp/ccxZrjrM.s:1663   .bss.turning:00000000 $d
     /tmp/ccxZrjrM.s:1666   .bss.heading:00000000 $d
     /tmp/ccxZrjrM.s:1673   .bss.absolute_dist:00000000 $d
     /tmp/ccxZrjrM.s:1680   .bss.current_dist:00000000 $d
     /tmp/ccxZrjrM.s:1687   .bss.target_dist:00000000 $d
     /tmp/ccxZrjrM.s:1694   .bss.motorr_speed:00000000 $d
     /tmp/ccxZrjrM.s:1701   .bss.motorl_speed:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
motor_left_pins
motor_right_pins
__aeabi_uidiv
__aeabi_fcmpeq
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_dmul
__aeabi_dadd
__aeabi_dsub
GetUltrasonic
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_i2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2iz
__aeabi_fadd
__aeabi_fcmpge
USART_SendString
cos
sprintf
__aeabi_d2iz
__aeabi_idivmod
