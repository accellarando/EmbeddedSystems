ARM GAS  /tmp/ccCg0tSZ.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** #include "main.h"
   7:Src/motor.c   **** #include <math.h>
   8:Src/motor.c   **** 
   9:Src/motor.c   **** volatile int16_t motorl_speed = 0;   	// Measured left motor speed
  10:Src/motor.c   **** volatile int16_t motorr_speed = 0;   	// Measured left motor speed
  11:Src/motor.c   **** volatile uint8_t target_dist = 0;
  12:Src/motor.c   **** volatile float current_dist = 0;
  13:Src/motor.c   **** volatile float absolute_dist = 0;
  14:Src/motor.c   **** volatile float heading = 0;
  15:Src/motor.c   **** volatile bool turning = false;
  16:Src/motor.c   **** 
  17:Src/motor.c   **** #define max(a,b) ((a>b) ? a : b)
  18:Src/motor.c   **** #define min(a,b) ((a>b) ? b : a)
  19:Src/motor.c   **** 
  20:Src/motor.c   **** #define PRINT_DEBUG 1
  21:Src/motor.c   **** 
  22:Src/motor.c   **** // Sets up the entire motor drive system
  23:Src/motor.c   **** void motor_init(void) {
  24:Src/motor.c   ****     pwm_init();
  25:Src/motor.c   ****     encoder_init();
  26:Src/motor.c   **** }
  27:Src/motor.c   **** 
  28:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  29:Src/motor.c   **** void pwm_init(void) {
  27              		.loc 1 29 21 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccCg0tSZ.s 			page 2


  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  30:Src/motor.c   **** 	//RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  31:Src/motor.c   **** 	
  32:Src/motor.c   ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  33:Src/motor.c   **** 	/*
  34:Src/motor.c   ****     GPIOA->MODER |= (1 << 9);
  35:Src/motor.c   ****     GPIOA->MODER &= ~(1 << 8);
  36:Src/motor.c   **** 	
  37:Src/motor.c   **** 	  // Set up pin PB3 for H-bridge PWM output (TIMER 2 CH2)
  38:Src/motor.c   ****     GPIOB->MODER |= (1 << 7);
  39:Src/motor.c   ****     GPIOB->MODER &= ~(1 << 6);
  40:Src/motor.c   **** 
  41:Src/motor.c   ****     // Set PA4 to AF4,
  42:Src/motor.c   ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  43:Src/motor.c   ****     GPIOA->AFR[0] |= (1 << 18);
  44:Src/motor.c   **** 	
  45:Src/motor.c   **** 		// Set PB3 to AF2,
  46:Src/motor.c   ****     GPIOB->AFR[0] &= 0xFFFF0FFF; // clear PB3 bits,
  47:Src/motor.c   ****     GPIOB->AFR[0] |= (1 << 13);
  48:Src/motor.c   **** 
  49:Src/motor.c   ****     // Set up a PA5, PA8 as GPIO output pins for motor direction control
  50:Src/motor.c   ****     GPIOA->MODER &= 0xFFFCF3FF; // clear PA5, PA6 bits,
  51:Src/motor.c   ****     GPIOA->MODER |= (1 << 10) | (1 << 16);
  52:Src/motor.c   **** 	
  53:Src/motor.c   **** 		// Set up a PB2, PB10 as GPIO output pins for motor direction control
  54:Src/motor.c   ****     GPIOB->MODER &= 0xFFCFFFCF; // clear PB2, PB10 bits,
  55:Src/motor.c   ****     GPIOB->MODER |= (1 << 4) | (1 << 20);
  56:Src/motor.c   **** 	*/
  57:Src/motor.c   ****    
  58:Src/motor.c   ****     //Initialize one direction pin to high, the other low
  59:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_a.gpio, motor_left_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  38              		.loc 1 59 2 view .LVU1
  39              		.loc 1 59 73 is_stmt 0 view .LVU2
  40 0002 244C     		ldr	r4, .L2
  41              		.loc 1 59 2 view .LVU3
  42 0004 A18B     		ldrh	r1, [r4, #28]
  43 0006 A069     		ldr	r0, [r4, #24]
  44 0008 0122     		movs	r2, #1
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL0:
  60:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_b.gpio, motor_left_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  47              		.loc 1 60 2 is_stmt 1 view .LVU4
  48 000e A18E     		ldrh	r1, [r4, #52]
  49 0010 206B     		ldr	r0, [r4, #48]
  50 0012 0022     		movs	r2, #0
  51 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  52              	.LVL1:
  61:Src/motor.c   **** 
  62:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_a.gpio, motor_right_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  53              		.loc 1 62 2 view .LVU5
ARM GAS  /tmp/ccCg0tSZ.s 			page 3


  54              		.loc 1 62 75 is_stmt 0 view .LVU6
  55 0018 1F4C     		ldr	r4, .L2+4
  56              		.loc 1 62 2 view .LVU7
  57 001a A18B     		ldrh	r1, [r4, #28]
  58 001c A069     		ldr	r0, [r4, #24]
  59 001e 0122     		movs	r2, #1
  60 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL2:
  63:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_b.gpio, motor_right_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  62              		.loc 1 63 2 is_stmt 1 view .LVU8
  63 0024 A18E     		ldrh	r1, [r4, #52]
  64 0026 206B     		ldr	r0, [r4, #48]
  65 0028 0022     		movs	r2, #0
  66 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL3:
  64:Src/motor.c   **** 
  65:Src/motor.c   ****     // Set up PWM timer
  66:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
  68              		.loc 1 66 5 view .LVU9
  69              		.loc 1 66 8 is_stmt 0 view .LVU10
  70 002e 1B4B     		ldr	r3, .L2+8
  71 0030 D969     		ldr	r1, [r3, #28]
  72              		.loc 1 66 18 view .LVU11
  73 0032 8022     		movs	r2, #128
  74 0034 5200     		lsls	r2, r2, #1
  75 0036 0A43     		orrs	r2, r1
  76 0038 DA61     		str	r2, [r3, #28]
  67:Src/motor.c   ****     TIM14->CR1 = 0;                         // Clear control registers
  77              		.loc 1 67 5 is_stmt 1 view .LVU12
  78              		.loc 1 67 16 is_stmt 0 view .LVU13
  79 003a 194A     		ldr	r2, .L2+12
  80 003c 0021     		movs	r1, #0
  81 003e 1160     		str	r1, [r2]
  68:Src/motor.c   ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
  82              		.loc 1 68 5 is_stmt 1 view .LVU14
  83              		.loc 1 68 18 is_stmt 0 view .LVU15
  84 0040 9161     		str	r1, [r2, #24]
  69:Src/motor.c   ****     TIM14->CCER = 0;
  85              		.loc 1 69 5 is_stmt 1 view .LVU16
  86              		.loc 1 69 17 is_stmt 0 view .LVU17
  87 0042 1162     		str	r1, [r2, #32]
  70:Src/motor.c   **** 		
  71:Src/motor.c   **** 		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  88              		.loc 1 71 3 is_stmt 1 view .LVU18
  89              		.loc 1 71 6 is_stmt 0 view .LVU19
  90 0044 DC69     		ldr	r4, [r3, #28]
  91              		.loc 1 71 16 view .LVU20
  92 0046 0120     		movs	r0, #1
  93 0048 0443     		orrs	r4, r0
  94 004a DC61     		str	r4, [r3, #28]
  72:Src/motor.c   ****     TIM2->CR1 = 0;                         // Clear control registers
  95              		.loc 1 72 5 is_stmt 1 view .LVU21
  96              		.loc 1 72 15 is_stmt 0 view .LVU22
  97 004c 8023     		movs	r3, #128
  98 004e DB05     		lsls	r3, r3, #23
  99 0050 1960     		str	r1, [r3]
  73:Src/motor.c   ****     TIM2->CCMR1 = 0;                       // (prevents having to manually clear bits)
ARM GAS  /tmp/ccCg0tSZ.s 			page 4


 100              		.loc 1 73 5 is_stmt 1 view .LVU23
 101              		.loc 1 73 17 is_stmt 0 view .LVU24
 102 0052 9961     		str	r1, [r3, #24]
  74:Src/motor.c   ****     TIM2->CCER = 0;
 103              		.loc 1 74 5 is_stmt 1 view .LVU25
 104              		.loc 1 74 16 is_stmt 0 view .LVU26
 105 0054 1962     		str	r1, [r3, #32]
  75:Src/motor.c   **** 
  76:Src/motor.c   ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  77:Src/motor.c   ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 106              		.loc 1 77 5 is_stmt 1 view .LVU27
 107              		.loc 1 77 10 is_stmt 0 view .LVU28
 108 0056 9469     		ldr	r4, [r2, #24]
 109              		.loc 1 77 18 view .LVU29
 110 0058 6825     		movs	r5, #104
 111 005a 2C43     		orrs	r4, r5
 112 005c 9461     		str	r4, [r2, #24]
  78:Src/motor.c   ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 113              		.loc 1 78 5 is_stmt 1 view .LVU30
 114              		.loc 1 78 10 is_stmt 0 view .LVU31
 115 005e 146A     		ldr	r4, [r2, #32]
 116              		.loc 1 78 17 view .LVU32
 117 0060 0443     		orrs	r4, r0
 118 0062 1462     		str	r4, [r2, #32]
  79:Src/motor.c   ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 119              		.loc 1 79 5 is_stmt 1 view .LVU33
 120              		.loc 1 79 16 is_stmt 0 view .LVU34
 121 0064 9062     		str	r0, [r2, #40]
  80:Src/motor.c   ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 122              		.loc 1 80 5 is_stmt 1 view .LVU35
 123              		.loc 1 80 16 is_stmt 0 view .LVU36
 124 0066 9625     		movs	r5, #150
 125 0068 ED00     		lsls	r5, r5, #3
 126 006a D562     		str	r5, [r2, #44]
  81:Src/motor.c   ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 127              		.loc 1 81 5 is_stmt 1 view .LVU37
 128              		.loc 1 81 17 is_stmt 0 view .LVU38
 129 006c 5163     		str	r1, [r2, #52]
  82:Src/motor.c   ****     
  83:Src/motor.c   ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 130              		.loc 1 83 5 is_stmt 1 view .LVU39
 131              		.loc 1 83 10 is_stmt 0 view .LVU40
 132 006e 1468     		ldr	r4, [r2]
 133              		.loc 1 83 16 view .LVU41
 134 0070 0443     		orrs	r4, r0
 135 0072 1460     		str	r4, [r2]
  84:Src/motor.c   **** 		
  85:Src/motor.c   **** 		TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 136              		.loc 1 85 3 is_stmt 1 view .LVU42
 137              		.loc 1 85 7 is_stmt 0 view .LVU43
 138 0074 9C69     		ldr	r4, [r3, #24]
 139              		.loc 1 85 15 view .LVU44
 140 0076 D022     		movs	r2, #208
 141 0078 D201     		lsls	r2, r2, #7
 142 007a 2243     		orrs	r2, r4
 143 007c 9A61     		str	r2, [r3, #24]
  86:Src/motor.c   ****     TIM2->CCER |= TIM_CCER_CC2E;           // Enable capture-compare channel 2
ARM GAS  /tmp/ccCg0tSZ.s 			page 5


 144              		.loc 1 86 5 is_stmt 1 view .LVU45
 145              		.loc 1 86 9 is_stmt 0 view .LVU46
 146 007e 1A6A     		ldr	r2, [r3, #32]
 147              		.loc 1 86 16 view .LVU47
 148 0080 1024     		movs	r4, #16
 149 0082 2243     		orrs	r2, r4
 150 0084 1A62     		str	r2, [r3, #32]
  87:Src/motor.c   ****     TIM2->PSC = 1;                         // Run timer on 24Mhz
 151              		.loc 1 87 5 is_stmt 1 view .LVU48
 152              		.loc 1 87 15 is_stmt 0 view .LVU49
 153 0086 9862     		str	r0, [r3, #40]
  88:Src/motor.c   ****     TIM2->ARR = 1200;                      // PWM at 20kHz
 154              		.loc 1 88 5 is_stmt 1 view .LVU50
 155              		.loc 1 88 15 is_stmt 0 view .LVU51
 156 0088 DD62     		str	r5, [r3, #44]
  89:Src/motor.c   ****     TIM2->CCR2 = 0;                        // Start PWM at 0% duty cycle
 157              		.loc 1 89 5 is_stmt 1 view .LVU52
 158              		.loc 1 89 16 is_stmt 0 view .LVU53
 159 008a 9963     		str	r1, [r3, #56]
  90:Src/motor.c   ****     
  91:Src/motor.c   ****     TIM2->CR1 |= TIM_CR1_CEN;              // Enable timer
 160              		.loc 1 91 5 is_stmt 1 view .LVU54
 161              		.loc 1 91 9 is_stmt 0 view .LVU55
 162 008c 1A68     		ldr	r2, [r3]
 163              		.loc 1 91 15 view .LVU56
 164 008e 0243     		orrs	r2, r0
 165 0090 1A60     		str	r2, [r3]
  92:Src/motor.c   **** }
 166              		.loc 1 92 1 view .LVU57
 167              		@ sp needed
 168 0092 70BD     		pop	{r4, r5, r6, pc}
 169              	.L3:
 170              		.align	2
 171              	.L2:
 172 0094 00000000 		.word	motor_left_pins
 173 0098 00000000 		.word	motor_right_pins
 174 009c 00100240 		.word	1073876992
 175 00a0 00200040 		.word	1073750016
 176              		.cfi_endproc
 177              	.LFE44:
 179              		.global	__aeabi_uidiv
 180              		.section	.text.pwm_setDutyCycleL,"ax",%progbits
 181              		.align	1
 182              		.global	pwm_setDutyCycleL
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 187              	pwm_setDutyCycleL:
 188              	.LVL4:
 189              	.LFB45:
  93:Src/motor.c   **** 
  94:Src/motor.c   **** // Set the duty cycle of the PWM Left, accepts (0-100)
  95:Src/motor.c   **** void pwm_setDutyCycleL(uint8_t duty) {
 190              		.loc 1 95 38 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccCg0tSZ.s 			page 6


 194              		.loc 1 95 38 is_stmt 0 view .LVU59
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI1:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
  96:Src/motor.c   ****     if(duty <= 100) {
 200              		.loc 1 96 5 is_stmt 1 view .LVU60
 201              		.loc 1 96 7 is_stmt 0 view .LVU61
 202 0002 6428     		cmp	r0, #100
 203 0004 06D8     		bhi	.L4
  97:Src/motor.c   ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 204              		.loc 1 97 9 is_stmt 1 view .LVU62
 205              		.loc 1 97 44 is_stmt 0 view .LVU63
 206 0006 044C     		ldr	r4, .L6
 207 0008 E36A     		ldr	r3, [r4, #44]
 208              		.loc 1 97 38 view .LVU64
 209 000a 5843     		muls	r0, r3
 210              	.LVL5:
 211              		.loc 1 97 50 view .LVU65
 212 000c 6421     		movs	r1, #100
 213 000e FFF7FEFF 		bl	__aeabi_uidiv
 214              	.LVL6:
 215              		.loc 1 97 21 view .LVU66
 216 0012 6063     		str	r0, [r4, #52]
 217              	.L4:
  98:Src/motor.c   ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  99:Src/motor.c   ****     }
 100:Src/motor.c   **** }
 218              		.loc 1 100 1 view .LVU67
 219              		@ sp needed
 220 0014 10BD     		pop	{r4, pc}
 221              	.L7:
 222 0016 C046     		.align	2
 223              	.L6:
 224 0018 00200040 		.word	1073750016
 225              		.cfi_endproc
 226              	.LFE45:
 228              		.section	.text.pwm_setDutyCycleR,"ax",%progbits
 229              		.align	1
 230              		.global	pwm_setDutyCycleR
 231              		.syntax unified
 232              		.code	16
 233              		.thumb_func
 235              	pwm_setDutyCycleR:
 236              	.LVL7:
 237              	.LFB46:
 101:Src/motor.c   **** 
 102:Src/motor.c   **** // Set the duty cycle of the PWM Right, accepts (0-100)
 103:Src/motor.c   **** void pwm_setDutyCycleR(uint8_t duty) {
 238              		.loc 1 103 38 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		.loc 1 103 38 is_stmt 0 view .LVU69
 243 0000 10B5     		push	{r4, lr}
 244              	.LCFI2:
ARM GAS  /tmp/ccCg0tSZ.s 			page 7


 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 4, -8
 247              		.cfi_offset 14, -4
 104:Src/motor.c   ****     if(duty <= 100) {
 248              		.loc 1 104 5 is_stmt 1 view .LVU70
 249              		.loc 1 104 7 is_stmt 0 view .LVU71
 250 0002 6428     		cmp	r0, #100
 251 0004 07D8     		bhi	.L8
 105:Src/motor.c   ****         TIM2->CCR2 = ((uint32_t)duty*TIM2->ARR)/100;  // Use linear transform to produce CCR1 value
 252              		.loc 1 105 9 is_stmt 1 view .LVU72
 253              		.loc 1 105 42 is_stmt 0 view .LVU73
 254 0006 8024     		movs	r4, #128
 255 0008 E405     		lsls	r4, r4, #23
 256 000a E36A     		ldr	r3, [r4, #44]
 257              		.loc 1 105 37 view .LVU74
 258 000c 5843     		muls	r0, r3
 259              	.LVL8:
 260              		.loc 1 105 48 view .LVU75
 261 000e 6421     		movs	r1, #100
 262 0010 FFF7FEFF 		bl	__aeabi_uidiv
 263              	.LVL9:
 264              		.loc 1 105 20 view .LVU76
 265 0014 A063     		str	r0, [r4, #56]
 266              	.L8:
 106:Src/motor.c   ****         // (CCR2 == "pulse" parameter in PWM struct used by peripheral library)
 107:Src/motor.c   ****     }
 108:Src/motor.c   **** }
 267              		.loc 1 108 1 view .LVU77
 268              		@ sp needed
 269 0016 10BD     		pop	{r4, pc}
 270              		.cfi_endproc
 271              	.LFE46:
 273              		.section	.text.set_Motor_Direction,"ax",%progbits
 274              		.align	1
 275              		.global	set_Motor_Direction
 276              		.syntax unified
 277              		.code	16
 278              		.thumb_func
 280              	set_Motor_Direction:
 281              	.LVL10:
 282              	.LFB47:
 109:Src/motor.c   **** 
 110:Src/motor.c   **** /*
 111:Src/motor.c   ****  * This sets an individual motor's direction.
 112:Src/motor.c   ****  * Note: use MoveMotors to change multiple motor values, eg to turn.
 113:Src/motor.c   ****  */
 114:Src/motor.c   **** void set_Motor_Direction(Direction dir, motor_pins_t* pins){
 283              		.loc 1 114 60 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		.loc 1 114 60 is_stmt 0 view .LVU79
 288 0000 10B5     		push	{r4, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
ARM GAS  /tmp/ccCg0tSZ.s 			page 8


 293 0002 0C00     		movs	r4, r1
 115:Src/motor.c   **** 	switch(dir){
 294              		.loc 1 115 2 is_stmt 1 view .LVU80
 295 0004 0028     		cmp	r0, #0
 296 0006 02D0     		beq	.L11
 297 0008 0328     		cmp	r0, #3
 298 000a 0BD0     		beq	.L12
 299              	.LVL11:
 300              	.L10:
 116:Src/motor.c   **** 		case FORWARD:
 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_SET);
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 119:Src/motor.c   **** 			break;
 120:Src/motor.c   **** 		case BACKWARD:
 121:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_RESET);
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 123:Src/motor.c   **** 			break;
 124:Src/motor.c   **** 		default:
 125:Src/motor.c   **** 			;
 126:Src/motor.c   **** 	}
 127:Src/motor.c   **** }
 301              		.loc 1 127 1 is_stmt 0 view .LVU81
 302              		@ sp needed
 303              	.LVL12:
 304              		.loc 1 127 1 view .LVU82
 305 000c 10BD     		pop	{r4, pc}
 306              	.LVL13:
 307              	.L11:
 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 308              		.loc 1 117 4 is_stmt 1 view .LVU83
 309 000e 898B     		ldrh	r1, [r1, #28]
 310              	.LVL14:
 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 311              		.loc 1 117 4 is_stmt 0 view .LVU84
 312 0010 A069     		ldr	r0, [r4, #24]
 313              	.LVL15:
 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 314              		.loc 1 117 4 view .LVU85
 315 0012 0122     		movs	r2, #1
 316 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL16:
 118:Src/motor.c   **** 			break;
 318              		.loc 1 118 4 is_stmt 1 view .LVU86
 319 0018 A18E     		ldrh	r1, [r4, #52]
 320 001a 206B     		ldr	r0, [r4, #48]
 321 001c 0022     		movs	r2, #0
 322 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 323              	.LVL17:
 119:Src/motor.c   **** 		case BACKWARD:
 324              		.loc 1 119 4 view .LVU87
 325 0022 F3E7     		b	.L10
 326              	.LVL18:
 327              	.L12:
 121:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 328              		.loc 1 121 4 view .LVU88
 329 0024 898B     		ldrh	r1, [r1, #28]
 330              	.LVL19:
ARM GAS  /tmp/ccCg0tSZ.s 			page 9


 121:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 331              		.loc 1 121 4 is_stmt 0 view .LVU89
 332 0026 A069     		ldr	r0, [r4, #24]
 333              	.LVL20:
 121:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 334              		.loc 1 121 4 view .LVU90
 335 0028 0022     		movs	r2, #0
 336 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 337              	.LVL21:
 122:Src/motor.c   **** 			break;
 338              		.loc 1 122 4 is_stmt 1 view .LVU91
 339 002e A18E     		ldrh	r1, [r4, #52]
 340 0030 206B     		ldr	r0, [r4, #48]
 341 0032 0122     		movs	r2, #1
 342 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 343              	.LVL22:
 123:Src/motor.c   **** 		default:
 344              		.loc 1 123 4 view .LVU92
 125:Src/motor.c   **** 	}
 345              		.loc 1 125 4 view .LVU93
 346              		.loc 1 127 1 is_stmt 0 view .LVU94
 347 0038 E8E7     		b	.L10
 348              		.cfi_endproc
 349              	.LFE47:
 351              		.section	.text.set_Forward,"ax",%progbits
 352              		.align	1
 353              		.global	set_Forward
 354              		.syntax unified
 355              		.code	16
 356              		.thumb_func
 358              	set_Forward:
 359              	.LFB48:
 128:Src/motor.c   **** 
 129:Src/motor.c   **** //Experimentation led to this 91 number for driving straight.
 130:Src/motor.c   **** volatile uint8_t pwm_right = 100;
 131:Src/motor.c   **** volatile uint8_t pwm_left = 100;
 132:Src/motor.c   **** 
 133:Src/motor.c   **** void set_Forward(){
 360              		.loc 1 133 19 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
 368              		.cfi_offset 14, -4
 134:Src/motor.c   **** 	//left go forward
 135:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 369              		.loc 1 135 2 view .LVU96
 370 0002 0949     		ldr	r1, .L15
 371 0004 0020     		movs	r0, #0
 372 0006 FFF7FEFF 		bl	set_Motor_Direction
 373              	.LVL23:
 136:Src/motor.c   **** 
 137:Src/motor.c   **** 	//right go forward
 138:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
ARM GAS  /tmp/ccCg0tSZ.s 			page 10


 374              		.loc 1 138 2 view .LVU97
 375 000a 0849     		ldr	r1, .L15+4
 376 000c 0020     		movs	r0, #0
 377 000e FFF7FEFF 		bl	set_Motor_Direction
 378              	.LVL24:
 139:Src/motor.c   **** 
 140:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 379              		.loc 1 140 2 view .LVU98
 380 0012 074B     		ldr	r3, .L15+8
 381 0014 1878     		ldrb	r0, [r3]
 382 0016 C0B2     		uxtb	r0, r0
 383 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 384              	.LVL25:
 141:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 385              		.loc 1 141 2 view .LVU99
 386 001c 054B     		ldr	r3, .L15+12
 387 001e 1878     		ldrb	r0, [r3]
 388 0020 C0B2     		uxtb	r0, r0
 389 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 390              	.LVL26:
 142:Src/motor.c   **** 
 143:Src/motor.c   **** 
 144:Src/motor.c   **** 	/* the old way
 145:Src/motor.c   **** 		GPIOA->ODR |= (1 << 5);
 146:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 8);
 147:Src/motor.c   **** 		GPIOB->ODR |= (1 << 10);
 148:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 2);
 149:Src/motor.c   **** 	*/
 150:Src/motor.c   **** }
 391              		.loc 1 150 1 is_stmt 0 view .LVU100
 392              		@ sp needed
 393 0026 10BD     		pop	{r4, pc}
 394              	.L16:
 395              		.align	2
 396              	.L15:
 397 0028 00000000 		.word	motor_left_pins
 398 002c 00000000 		.word	motor_right_pins
 399 0030 00000000 		.word	pwm_right
 400 0034 00000000 		.word	pwm_left
 401              		.cfi_endproc
 402              	.LFE48:
 404              		.section	.text.set_Backward,"ax",%progbits
 405              		.align	1
 406              		.global	set_Backward
 407              		.syntax unified
 408              		.code	16
 409              		.thumb_func
 411              	set_Backward:
 412              	.LFB49:
 151:Src/motor.c   **** 
 152:Src/motor.c   **** void set_Backward(){
 413              		.loc 1 152 20 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 10B5     		push	{r4, lr}
 418              	.LCFI5:
ARM GAS  /tmp/ccCg0tSZ.s 			page 11


 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 153:Src/motor.c   **** 	//left go backward
 154:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 422              		.loc 1 154 2 view .LVU102
 423 0002 0949     		ldr	r1, .L18
 424 0004 0320     		movs	r0, #3
 425 0006 FFF7FEFF 		bl	set_Motor_Direction
 426              	.LVL27:
 155:Src/motor.c   **** 
 156:Src/motor.c   **** 	//right go backward
 157:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 427              		.loc 1 157 2 view .LVU103
 428 000a 0849     		ldr	r1, .L18+4
 429 000c 0320     		movs	r0, #3
 430 000e FFF7FEFF 		bl	set_Motor_Direction
 431              	.LVL28:
 158:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 432              		.loc 1 158 2 view .LVU104
 433 0012 074B     		ldr	r3, .L18+8
 434 0014 1878     		ldrb	r0, [r3]
 435 0016 C0B2     		uxtb	r0, r0
 436 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 437              	.LVL29:
 159:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 438              		.loc 1 159 2 view .LVU105
 439 001c 054B     		ldr	r3, .L18+12
 440 001e 1878     		ldrb	r0, [r3]
 441 0020 C0B2     		uxtb	r0, r0
 442 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 443              	.LVL30:
 160:Src/motor.c   **** 	/* the old way
 161:Src/motor.c   **** 		GPIOA->ODR |= (1 << 8);
 162:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 5);
 163:Src/motor.c   **** 		GPIOB->ODR |= (1 << 2);
 164:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 10);
 165:Src/motor.c   **** 	*/
 166:Src/motor.c   **** }
 444              		.loc 1 166 1 is_stmt 0 view .LVU106
 445              		@ sp needed
 446 0026 10BD     		pop	{r4, pc}
 447              	.L19:
 448              		.align	2
 449              	.L18:
 450 0028 00000000 		.word	motor_left_pins
 451 002c 00000000 		.word	motor_right_pins
 452 0030 00000000 		.word	pwm_right
 453 0034 00000000 		.word	pwm_left
 454              		.cfi_endproc
 455              	.LFE49:
 457              		.section	.text.set_Right,"ax",%progbits
 458              		.align	1
 459              		.global	set_Right
 460              		.syntax unified
 461              		.code	16
 462              		.thumb_func
ARM GAS  /tmp/ccCg0tSZ.s 			page 12


 464              	set_Right:
 465              	.LFB50:
 167:Src/motor.c   **** 
 168:Src/motor.c   **** void set_Right(){
 466              		.loc 1 168 17 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 10B5     		push	{r4, lr}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 169:Src/motor.c   **** 	//left go forward
 170:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 475              		.loc 1 170 2 view .LVU108
 476 0002 0949     		ldr	r1, .L21
 477 0004 0020     		movs	r0, #0
 478 0006 FFF7FEFF 		bl	set_Motor_Direction
 479              	.LVL31:
 171:Src/motor.c   **** 
 172:Src/motor.c   **** 	//right go backward
 173:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 480              		.loc 1 173 2 view .LVU109
 481 000a 0849     		ldr	r1, .L21+4
 482 000c 0320     		movs	r0, #3
 483 000e FFF7FEFF 		bl	set_Motor_Direction
 484              	.LVL32:
 174:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 485              		.loc 1 174 2 view .LVU110
 486 0012 074B     		ldr	r3, .L21+8
 487 0014 1878     		ldrb	r0, [r3]
 488 0016 C0B2     		uxtb	r0, r0
 489 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 490              	.LVL33:
 175:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 491              		.loc 1 175 2 view .LVU111
 492 001c 054B     		ldr	r3, .L21+12
 493 001e 1878     		ldrb	r0, [r3]
 494 0020 C0B2     		uxtb	r0, r0
 495 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 496              	.LVL34:
 176:Src/motor.c   **** 	/* old way
 177:Src/motor.c   **** 		GPIOA->ODR |= (1 << 5);
 178:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 8);
 179:Src/motor.c   **** 		GPIOB->ODR |= (1 << 2);
 180:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 10);
 181:Src/motor.c   **** 	*/
 182:Src/motor.c   **** }
 497              		.loc 1 182 1 is_stmt 0 view .LVU112
 498              		@ sp needed
 499 0026 10BD     		pop	{r4, pc}
 500              	.L22:
 501              		.align	2
 502              	.L21:
 503 0028 00000000 		.word	motor_left_pins
 504 002c 00000000 		.word	motor_right_pins
ARM GAS  /tmp/ccCg0tSZ.s 			page 13


 505 0030 00000000 		.word	pwm_right
 506 0034 00000000 		.word	pwm_left
 507              		.cfi_endproc
 508              	.LFE50:
 510              		.section	.text.set_Left,"ax",%progbits
 511              		.align	1
 512              		.global	set_Left
 513              		.syntax unified
 514              		.code	16
 515              		.thumb_func
 517              	set_Left:
 518              	.LFB51:
 183:Src/motor.c   **** 
 184:Src/motor.c   **** void set_Left(){
 519              		.loc 1 184 16 is_stmt 1 view -0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523 0000 10B5     		push	{r4, lr}
 524              	.LCFI7:
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 4, -8
 527              		.cfi_offset 14, -4
 185:Src/motor.c   **** 	//left go backward
 186:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 528              		.loc 1 186 2 view .LVU114
 529 0002 0949     		ldr	r1, .L24
 530 0004 0320     		movs	r0, #3
 531 0006 FFF7FEFF 		bl	set_Motor_Direction
 532              	.LVL35:
 187:Src/motor.c   **** 	
 188:Src/motor.c   **** 	//right go forward
 189:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 533              		.loc 1 189 2 view .LVU115
 534 000a 0849     		ldr	r1, .L24+4
 535 000c 0020     		movs	r0, #0
 536 000e FFF7FEFF 		bl	set_Motor_Direction
 537              	.LVL36:
 190:Src/motor.c   **** 
 191:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 538              		.loc 1 191 2 view .LVU116
 539 0012 074B     		ldr	r3, .L24+8
 540 0014 1878     		ldrb	r0, [r3]
 541 0016 C0B2     		uxtb	r0, r0
 542 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 543              	.LVL37:
 192:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 544              		.loc 1 192 2 view .LVU117
 545 001c 054B     		ldr	r3, .L24+12
 546 001e 1878     		ldrb	r0, [r3]
 547 0020 C0B2     		uxtb	r0, r0
 548 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 549              	.LVL38:
 193:Src/motor.c   **** 	/*
 194:Src/motor.c   **** 		GPIOA->ODR |= (1 << 8);
 195:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 5);
 196:Src/motor.c   **** 		GPIOB->ODR |= (1 << 10);
ARM GAS  /tmp/ccCg0tSZ.s 			page 14


 197:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 2);
 198:Src/motor.c   **** 	*/
 199:Src/motor.c   **** }
 550              		.loc 1 199 1 is_stmt 0 view .LVU118
 551              		@ sp needed
 552 0026 10BD     		pop	{r4, pc}
 553              	.L25:
 554              		.align	2
 555              	.L24:
 556 0028 00000000 		.word	motor_left_pins
 557 002c 00000000 		.word	motor_right_pins
 558 0030 00000000 		.word	pwm_right
 559 0034 00000000 		.word	pwm_left
 560              		.cfi_endproc
 561              	.LFE51:
 563              		.section	.text.motors_Off,"ax",%progbits
 564              		.align	1
 565              		.global	motors_Off
 566              		.syntax unified
 567              		.code	16
 568              		.thumb_func
 570              	motors_Off:
 571              	.LFB52:
 200:Src/motor.c   **** 
 201:Src/motor.c   **** void motors_Off(){
 572              		.loc 1 201 18 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576 0000 10B5     		push	{r4, lr}
 577              	.LCFI8:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 4, -8
 580              		.cfi_offset 14, -4
 202:Src/motor.c   **** 	pwm_setDutyCycleR(0);
 581              		.loc 1 202 2 view .LVU120
 582 0002 0020     		movs	r0, #0
 583 0004 FFF7FEFF 		bl	pwm_setDutyCycleR
 584              	.LVL39:
 203:Src/motor.c   **** 	pwm_setDutyCycleL(0);
 585              		.loc 1 203 2 view .LVU121
 586 0008 0020     		movs	r0, #0
 587 000a FFF7FEFF 		bl	pwm_setDutyCycleL
 588              	.LVL40:
 204:Src/motor.c   **** }
 589              		.loc 1 204 1 is_stmt 0 view .LVU122
 590              		@ sp needed
 591 000e 10BD     		pop	{r4, pc}
 592              		.cfi_endproc
 593              	.LFE52:
 595              		.section	.rodata.MoveMotors.str1.4,"aMS",%progbits,1
 596              		.align	2
 597              	.LC18:
 598 0000 4D6F7665 		.ascii	"MoveMotors executed!\012\000"
 598      4D6F746F 
 598      72732065 
 598      78656375 
ARM GAS  /tmp/ccCg0tSZ.s 			page 15


 598      74656421 
 599 0016 0000     		.align	2
 600              	.LC20:
 601 0018 496E7661 		.ascii	"Invalid command to MoveMotors!\012\000"
 601      6C696420 
 601      636F6D6D 
 601      616E6420 
 601      746F204D 
 602              		.global	__aeabi_i2d
 603              		.global	__aeabi_ddiv
 604              		.global	__aeabi_d2uiz
 605              		.global	__aeabi_i2f
 606              		.global	__aeabi_fadd
 607              		.global	__aeabi_fsub
 608              		.section	.text.MoveMotors,"ax",%progbits
 609              		.align	1
 610              		.global	MoveMotors
 611              		.syntax unified
 612              		.code	16
 613              		.thumb_func
 615              	MoveMotors:
 616              	.LVL41:
 617              	.LFB53:
 205:Src/motor.c   **** 
 206:Src/motor.c   **** uint8_t* MoveMotors(MotorCommand* cmd){
 618              		.loc 1 206 39 is_stmt 1 view -0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622              		.loc 1 206 39 is_stmt 0 view .LVU124
 623 0000 70B5     		push	{r4, r5, r6, lr}
 624              	.LCFI9:
 625              		.cfi_def_cfa_offset 16
 626              		.cfi_offset 4, -16
 627              		.cfi_offset 5, -12
 628              		.cfi_offset 6, -8
 629              		.cfi_offset 14, -4
 630 0002 0400     		movs	r4, r0
 207:Src/motor.c   **** 	motors_Off();
 631              		.loc 1 207 2 is_stmt 1 view .LVU125
 632 0004 FFF7FEFF 		bl	motors_Off
 633              	.LVL42:
 208:Src/motor.c   **** 	uint8_t* err = "MoveMotors executed!\n";
 634              		.loc 1 208 2 view .LVU126
 209:Src/motor.c   **** 	switch(cmd->dir){
 635              		.loc 1 209 2 view .LVU127
 636              		.loc 1 209 12 is_stmt 0 view .LVU128
 637 0008 2378     		ldrb	r3, [r4]
 638              		.loc 1 209 2 view .LVU129
 639 000a 022B     		cmp	r3, #2
 640 000c 38D0     		beq	.L28
 641 000e 22D8     		bhi	.L29
 642 0010 002B     		cmp	r3, #0
 643 0012 2BD0     		beq	.L30
 644 0014 012B     		cmp	r3, #1
 645 0016 1CD1     		bne	.L34
 210:Src/motor.c   **** 		case FORWARD:
ARM GAS  /tmp/ccCg0tSZ.s 			page 16


 211:Src/motor.c   **** 			turning = false;
 212:Src/motor.c   **** 			target_dist = cmd->amount;
 213:Src/motor.c   **** 			set_Forward();
 214:Src/motor.c   **** 			break;
 215:Src/motor.c   **** 		case LEFT:
 216:Src/motor.c   **** 			turning = true;
 646              		.loc 1 216 4 is_stmt 1 view .LVU130
 647              		.loc 1 216 12 is_stmt 0 view .LVU131
 648 0018 284B     		ldr	r3, .L36
 649 001a 0122     		movs	r2, #1
 650 001c 1A70     		strb	r2, [r3]
 217:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 651              		.loc 1 217 4 is_stmt 1 view .LVU132
 652              		.loc 1 217 32 is_stmt 0 view .LVU133
 653 001e 6478     		ldrb	r4, [r4, #1]
 654              	.LVL43:
 655              		.loc 1 217 41 view .LVU134
 656 0020 2000     		movs	r0, r4
 657 0022 FFF7FEFF 		bl	__aeabi_i2d
 658              	.LVL44:
 659 0026 0022     		movs	r2, #0
 660 0028 254B     		ldr	r3, .L36+4
 661 002a FFF7FEFF 		bl	__aeabi_ddiv
 662              	.LVL45:
 663              		.loc 1 217 18 view .LVU135
 664 002e FFF7FEFF 		bl	__aeabi_d2uiz
 665              	.LVL46:
 666 0032 C0B2     		uxtb	r0, r0
 667              		.loc 1 217 16 view .LVU136
 668 0034 234B     		ldr	r3, .L36+8
 669 0036 1870     		strb	r0, [r3]
 218:Src/motor.c   **** 			heading += cmd->amount;
 670              		.loc 1 218 4 is_stmt 1 view .LVU137
 671              		.loc 1 218 12 is_stmt 0 view .LVU138
 672 0038 234D     		ldr	r5, .L36+12
 673 003a 2E68     		ldr	r6, [r5]
 674 003c 2000     		movs	r0, r4
 675 003e FFF7FEFF 		bl	__aeabi_i2f
 676              	.LVL47:
 677 0042 311C     		adds	r1, r6, #0
 678 0044 FFF7FEFF 		bl	__aeabi_fadd
 679              	.LVL48:
 680 0048 2860     		str	r0, [r5]
 219:Src/motor.c   **** 			set_Left();
 681              		.loc 1 219 4 is_stmt 1 view .LVU139
 682 004a FFF7FEFF 		bl	set_Left
 683              	.LVL49:
 220:Src/motor.c   **** 			break;
 684              		.loc 1 220 4 view .LVU140
 208:Src/motor.c   **** 	switch(cmd->dir){
 685              		.loc 1 208 11 is_stmt 0 view .LVU141
 686 004e 1F48     		ldr	r0, .L36+16
 687              		.loc 1 220 4 view .LVU142
 688 0050 0BE0     		b	.L27
 689              	.LVL50:
 690              	.L34:
 209:Src/motor.c   **** 		case FORWARD:
ARM GAS  /tmp/ccCg0tSZ.s 			page 17


 691              		.loc 1 209 2 view .LVU143
 692 0052 1F48     		ldr	r0, .L36+20
 693 0054 09E0     		b	.L27
 694              	.L29:
 695 0056 042B     		cmp	r3, #4
 696 0058 06D1     		bne	.L35
 221:Src/motor.c   **** 		case RIGHT:
 222:Src/motor.c   **** 			turning = true;
 223:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 224:Src/motor.c   **** 			heading -= cmd->amount;
 225:Src/motor.c   **** 			set_Right();
 226:Src/motor.c   **** 			break;
 227:Src/motor.c   **** 		case OFF:
 228:Src/motor.c   **** 			target_dist = 1;
 697              		.loc 1 228 4 is_stmt 1 view .LVU144
 698              		.loc 1 228 16 is_stmt 0 view .LVU145
 699 005a 1A4B     		ldr	r3, .L36+8
 700 005c 0122     		movs	r2, #1
 701 005e 1A70     		strb	r2, [r3]
 229:Src/motor.c   **** 			motors_Off();
 702              		.loc 1 229 4 is_stmt 1 view .LVU146
 703 0060 FFF7FEFF 		bl	motors_Off
 704              	.LVL51:
 230:Src/motor.c   **** 			break;
 705              		.loc 1 230 4 view .LVU147
 208:Src/motor.c   **** 	switch(cmd->dir){
 706              		.loc 1 208 11 is_stmt 0 view .LVU148
 707 0064 1948     		ldr	r0, .L36+16
 708              	.LVL52:
 231:Src/motor.c   **** 		default:
 232:Src/motor.c   **** 			err = "Invalid command to MoveMotors!\n";
 233:Src/motor.c   **** 	}
 234:Src/motor.c   **** 	//THIS IS BAD. if you send an x it won't stop motors until this delay finishes!
 235:Src/motor.c   **** 	//Switch to a polling structure instead for final
 236:Src/motor.c   **** 	/* while(get_distance() < target_dist) */
 237:Src/motor.c   **** 	/* 	; */
 238:Src/motor.c   **** 	/* motors_Off(); */
 239:Src/motor.c   **** 	return err;
 709              		.loc 1 239 2 is_stmt 1 view .LVU149
 710              		.loc 1 239 9 is_stmt 0 view .LVU150
 711 0066 00E0     		b	.L27
 712              	.LVL53:
 713              	.L35:
 209:Src/motor.c   **** 		case FORWARD:
 714              		.loc 1 209 2 view .LVU151
 715 0068 1948     		ldr	r0, .L36+20
 716              	.LVL54:
 717              	.L27:
 240:Src/motor.c   **** }
 718              		.loc 1 240 1 view .LVU152
 719              		@ sp needed
 720 006a 70BD     		pop	{r4, r5, r6, pc}
 721              	.LVL55:
 722              	.L30:
 211:Src/motor.c   **** 			target_dist = cmd->amount;
 723              		.loc 1 211 4 is_stmt 1 view .LVU153
 211:Src/motor.c   **** 			target_dist = cmd->amount;
ARM GAS  /tmp/ccCg0tSZ.s 			page 18


 724              		.loc 1 211 12 is_stmt 0 view .LVU154
 725 006c 134B     		ldr	r3, .L36
 726 006e 0022     		movs	r2, #0
 727 0070 1A70     		strb	r2, [r3]
 212:Src/motor.c   **** 			set_Forward();
 728              		.loc 1 212 4 is_stmt 1 view .LVU155
 212:Src/motor.c   **** 			set_Forward();
 729              		.loc 1 212 21 is_stmt 0 view .LVU156
 730 0072 6278     		ldrb	r2, [r4, #1]
 212:Src/motor.c   **** 			set_Forward();
 731              		.loc 1 212 16 view .LVU157
 732 0074 134B     		ldr	r3, .L36+8
 733 0076 1A70     		strb	r2, [r3]
 213:Src/motor.c   **** 			break;
 734              		.loc 1 213 4 is_stmt 1 view .LVU158
 735 0078 FFF7FEFF 		bl	set_Forward
 736              	.LVL56:
 214:Src/motor.c   **** 		case LEFT:
 737              		.loc 1 214 4 view .LVU159
 208:Src/motor.c   **** 	switch(cmd->dir){
 738              		.loc 1 208 11 is_stmt 0 view .LVU160
 739 007c 1348     		ldr	r0, .L36+16
 214:Src/motor.c   **** 		case LEFT:
 740              		.loc 1 214 4 view .LVU161
 741 007e F4E7     		b	.L27
 742              	.L28:
 222:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 743              		.loc 1 222 4 is_stmt 1 view .LVU162
 222:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 744              		.loc 1 222 12 is_stmt 0 view .LVU163
 745 0080 0E4B     		ldr	r3, .L36
 746 0082 0122     		movs	r2, #1
 747 0084 1A70     		strb	r2, [r3]
 223:Src/motor.c   **** 			heading -= cmd->amount;
 748              		.loc 1 223 4 is_stmt 1 view .LVU164
 223:Src/motor.c   **** 			heading -= cmd->amount;
 749              		.loc 1 223 32 is_stmt 0 view .LVU165
 750 0086 6478     		ldrb	r4, [r4, #1]
 751              	.LVL57:
 223:Src/motor.c   **** 			heading -= cmd->amount;
 752              		.loc 1 223 41 view .LVU166
 753 0088 2000     		movs	r0, r4
 754 008a FFF7FEFF 		bl	__aeabi_i2d
 755              	.LVL58:
 756 008e 0022     		movs	r2, #0
 757 0090 0B4B     		ldr	r3, .L36+4
 758 0092 FFF7FEFF 		bl	__aeabi_ddiv
 759              	.LVL59:
 223:Src/motor.c   **** 			heading -= cmd->amount;
 760              		.loc 1 223 18 view .LVU167
 761 0096 FFF7FEFF 		bl	__aeabi_d2uiz
 762              	.LVL60:
 763 009a C0B2     		uxtb	r0, r0
 223:Src/motor.c   **** 			heading -= cmd->amount;
 764              		.loc 1 223 16 view .LVU168
 765 009c 094B     		ldr	r3, .L36+8
 766 009e 1870     		strb	r0, [r3]
ARM GAS  /tmp/ccCg0tSZ.s 			page 19


 224:Src/motor.c   **** 			set_Right();
 767              		.loc 1 224 4 is_stmt 1 view .LVU169
 224:Src/motor.c   **** 			set_Right();
 768              		.loc 1 224 12 is_stmt 0 view .LVU170
 769 00a0 094D     		ldr	r5, .L36+12
 770 00a2 2E68     		ldr	r6, [r5]
 771 00a4 2000     		movs	r0, r4
 772 00a6 FFF7FEFF 		bl	__aeabi_i2f
 773              	.LVL61:
 774 00aa 011C     		adds	r1, r0, #0
 775 00ac 301C     		adds	r0, r6, #0
 776 00ae FFF7FEFF 		bl	__aeabi_fsub
 777              	.LVL62:
 778 00b2 2860     		str	r0, [r5]
 225:Src/motor.c   **** 			break;
 779              		.loc 1 225 4 is_stmt 1 view .LVU171
 780 00b4 FFF7FEFF 		bl	set_Right
 781              	.LVL63:
 226:Src/motor.c   **** 		case OFF:
 782              		.loc 1 226 4 view .LVU172
 208:Src/motor.c   **** 	switch(cmd->dir){
 783              		.loc 1 208 11 is_stmt 0 view .LVU173
 784 00b8 0448     		ldr	r0, .L36+16
 226:Src/motor.c   **** 		case OFF:
 785              		.loc 1 226 4 view .LVU174
 786 00ba D6E7     		b	.L27
 787              	.L37:
 788              		.align	2
 789              	.L36:
 790 00bc 00000000 		.word	turning
 791 00c0 00002740 		.word	1076297728
 792 00c4 00000000 		.word	target_dist
 793 00c8 00000000 		.word	heading
 794 00cc 00000000 		.word	.LC18
 795 00d0 18000000 		.word	.LC20
 796              		.cfi_endproc
 797              	.LFE53:
 799              		.section	.text.encoder_init,"ax",%progbits
 800              		.align	1
 801              		.global	encoder_init
 802              		.syntax unified
 803              		.code	16
 804              		.thumb_func
 806              	encoder_init:
 807              	.LFB54:
 241:Src/motor.c   **** 
 242:Src/motor.c   **** // Sets up encoder interface to read motor speed
 243:Src/motor.c   **** void encoder_init(void) {
 808              		.loc 1 243 25 is_stmt 1 view -0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 813              	.LCFI10:
 814              		.cfi_def_cfa_offset 20
 815              		.cfi_offset 4, -20
 816              		.cfi_offset 5, -16
ARM GAS  /tmp/ccCg0tSZ.s 			page 20


 817              		.cfi_offset 6, -12
 818              		.cfi_offset 7, -8
 819              		.cfi_offset 14, -4
 244:Src/motor.c   ****     
 245:Src/motor.c   ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
 246:Src/motor.c   **** 	/*
 247:Src/motor.c   ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 248:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 249:Src/motor.c   ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 250:Src/motor.c   **** 		
 251:Src/motor.c   **** 		// Set up encoder input pins (TIMER 15 CH1 and CH2)
 252:Src/motor.c   **** 		GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 253:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 254:Src/motor.c   ****     GPIOB->AFR[1] |= ( (1 << 24) | (1 << 28) );
 255:Src/motor.c   **** 	*/
 256:Src/motor.c   **** 
 257:Src/motor.c   ****     // Set up encoder interface (TIM3 encoder input mode)
 258:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 820              		.loc 1 258 5 view .LVU176
 821              		.loc 1 258 8 is_stmt 0 view .LVU177
 822 0002 2849     		ldr	r1, .L39
 823 0004 CB69     		ldr	r3, [r1, #28]
 824              		.loc 1 258 18 view .LVU178
 825 0006 0222     		movs	r2, #2
 826 0008 1343     		orrs	r3, r2
 827 000a CB61     		str	r3, [r1, #28]
 259:Src/motor.c   **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 828              		.loc 1 259 2 is_stmt 1 view .LVU179
 829              		.loc 1 259 5 is_stmt 0 view .LVU180
 830 000c 8A69     		ldr	r2, [r1, #24]
 831              		.loc 1 259 15 view .LVU181
 832 000e 8023     		movs	r3, #128
 833 0010 1B01     		lsls	r3, r3, #4
 834 0012 1343     		orrs	r3, r2
 835 0014 8B61     		str	r3, [r1, #24]
 260:Src/motor.c   ****     TIM3->CCMR1 = 0;
 836              		.loc 1 260 5 is_stmt 1 view .LVU182
 837              		.loc 1 260 17 is_stmt 0 view .LVU183
 838 0016 244B     		ldr	r3, .L39+4
 839 0018 0022     		movs	r2, #0
 840 001a 9A61     		str	r2, [r3, #24]
 261:Src/motor.c   ****     TIM3->CCER = 0;
 841              		.loc 1 261 5 is_stmt 1 view .LVU184
 842              		.loc 1 261 16 is_stmt 0 view .LVU185
 843 001c 1A62     		str	r2, [r3, #32]
 262:Src/motor.c   ****     TIM3->SMCR = 0;
 844              		.loc 1 262 5 is_stmt 1 view .LVU186
 845              		.loc 1 262 16 is_stmt 0 view .LVU187
 846 001e 9A60     		str	r2, [r3, #8]
 263:Src/motor.c   ****     TIM3->CR1 = 0;
 847              		.loc 1 263 5 is_stmt 1 view .LVU188
 848              		.loc 1 263 15 is_stmt 0 view .LVU189
 849 0020 1A60     		str	r2, [r3]
 264:Src/motor.c   **** 
 265:Src/motor.c   ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 850              		.loc 1 265 5 is_stmt 1 view .LVU190
 851              		.loc 1 265 9 is_stmt 0 view .LVU191
ARM GAS  /tmp/ccCg0tSZ.s 			page 21


 852 0022 9869     		ldr	r0, [r3, #24]
 853              		.loc 1 265 17 view .LVU192
 854 0024 0224     		movs	r4, #2
 855 0026 FF34     		adds	r4, r4, #255
 856 0028 2043     		orrs	r0, r4
 857 002a 9861     		str	r0, [r3, #24]
 266:Src/motor.c   ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 858              		.loc 1 266 5 is_stmt 1 view .LVU193
 859              		.loc 1 266 9 is_stmt 0 view .LVU194
 860 002c 9868     		ldr	r0, [r3, #8]
 861              		.loc 1 266 16 view .LVU195
 862 002e 0325     		movs	r5, #3
 863 0030 AC46     		mov	ip, r5
 864 0032 2843     		orrs	r0, r5
 865 0034 9860     		str	r0, [r3, #8]
 267:Src/motor.c   ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 866              		.loc 1 267 5 is_stmt 1 view .LVU196
 867              		.loc 1 267 15 is_stmt 0 view .LVU197
 868 0036 1D4F     		ldr	r7, .L39+8
 869 0038 DF62     		str	r7, [r3, #44]
 268:Src/motor.c   ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 870              		.loc 1 268 5 is_stmt 1 view .LVU198
 871              		.loc 1 268 15 is_stmt 0 view .LVU199
 872 003a 1D4E     		ldr	r6, .L39+12
 873 003c 5E62     		str	r6, [r3, #36]
 269:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 270:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 271:Src/motor.c   ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 874              		.loc 1 271 5 is_stmt 1 view .LVU200
 875              		.loc 1 271 9 is_stmt 0 view .LVU201
 876 003e 1D68     		ldr	r5, [r3]
 877              		.loc 1 271 15 view .LVU202
 878 0040 0120     		movs	r0, #1
 879 0042 0543     		orrs	r5, r0
 880 0044 1D60     		str	r5, [r3]
 272:Src/motor.c   **** 		
 273:Src/motor.c   **** 	TIM1->CCMR1 = 0;
 881              		.loc 1 273 2 is_stmt 1 view .LVU203
 882              		.loc 1 273 14 is_stmt 0 view .LVU204
 883 0046 1B4B     		ldr	r3, .L39+16
 884 0048 9A61     		str	r2, [r3, #24]
 274:Src/motor.c   ****     TIM1->CCER = 0;
 885              		.loc 1 274 5 is_stmt 1 view .LVU205
 886              		.loc 1 274 16 is_stmt 0 view .LVU206
 887 004a 1A62     		str	r2, [r3, #32]
 275:Src/motor.c   ****     TIM1->SMCR = 0;
 888              		.loc 1 275 5 is_stmt 1 view .LVU207
 889              		.loc 1 275 16 is_stmt 0 view .LVU208
 890 004c 9A60     		str	r2, [r3, #8]
 276:Src/motor.c   ****     TIM1->CR1 = 0;
 891              		.loc 1 276 5 is_stmt 1 view .LVU209
 892              		.loc 1 276 15 is_stmt 0 view .LVU210
 893 004e 1A60     		str	r2, [r3]
 277:Src/motor.c   ****     TIM1->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 894              		.loc 1 277 5 is_stmt 1 view .LVU211
 895              		.loc 1 277 9 is_stmt 0 view .LVU212
 896 0050 9A69     		ldr	r2, [r3, #24]
ARM GAS  /tmp/ccCg0tSZ.s 			page 22


 897              		.loc 1 277 17 view .LVU213
 898 0052 1443     		orrs	r4, r2
 899 0054 9C61     		str	r4, [r3, #24]
 278:Src/motor.c   ****     TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 900              		.loc 1 278 5 is_stmt 1 view .LVU214
 901              		.loc 1 278 9 is_stmt 0 view .LVU215
 902 0056 9A68     		ldr	r2, [r3, #8]
 903              		.loc 1 278 16 view .LVU216
 904 0058 6446     		mov	r4, ip
 905 005a 2243     		orrs	r2, r4
 906 005c 9A60     		str	r2, [r3, #8]
 279:Src/motor.c   ****     TIM1->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 907              		.loc 1 279 5 is_stmt 1 view .LVU217
 908              		.loc 1 279 15 is_stmt 0 view .LVU218
 909 005e DF62     		str	r7, [r3, #44]
 280:Src/motor.c   ****     TIM1->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 910              		.loc 1 280 5 is_stmt 1 view .LVU219
 911              		.loc 1 280 15 is_stmt 0 view .LVU220
 912 0060 5E62     		str	r6, [r3, #36]
 281:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 282:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 283:Src/motor.c   ****     TIM1->CR1 |= TIM_CR1_CEN;     
 913              		.loc 1 283 5 is_stmt 1 view .LVU221
 914              		.loc 1 283 9 is_stmt 0 view .LVU222
 915 0062 1A68     		ldr	r2, [r3]
 916              		.loc 1 283 15 view .LVU223
 917 0064 0243     		orrs	r2, r0
 918 0066 1A60     		str	r2, [r3]
 284:Src/motor.c   **** 
 285:Src/motor.c   ****     // Configure a second timer (TIM6) to fire an ISR on update event
 286:Src/motor.c   ****     // Used to periodically check and update speed variable
 287:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 919              		.loc 1 287 5 is_stmt 1 view .LVU224
 920              		.loc 1 287 8 is_stmt 0 view .LVU225
 921 0068 CB69     		ldr	r3, [r1, #28]
 922              		.loc 1 287 18 view .LVU226
 923 006a 1022     		movs	r2, #16
 924 006c 1343     		orrs	r3, r2
 925 006e CB61     		str	r3, [r1, #28]
 288:Src/motor.c   ****     
 289:Src/motor.c   ****     // Select PSC and ARR values that give an appropriate interrupt rate
 290:Src/motor.c   ****     TIM6->PSC = 11;
 926              		.loc 1 290 5 is_stmt 1 view .LVU227
 927              		.loc 1 290 15 is_stmt 0 view .LVU228
 928 0070 114B     		ldr	r3, .L39+20
 929 0072 053A     		subs	r2, r2, #5
 930 0074 9A62     		str	r2, [r3, #40]
 291:Src/motor.c   ****     TIM6->ARR = 30000;
 931              		.loc 1 291 5 is_stmt 1 view .LVU229
 932              		.loc 1 291 15 is_stmt 0 view .LVU230
 933 0076 114A     		ldr	r2, .L39+24
 934 0078 DA62     		str	r2, [r3, #44]
 292:Src/motor.c   ****     
 293:Src/motor.c   ****     TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 935              		.loc 1 293 5 is_stmt 1 view .LVU231
 936              		.loc 1 293 9 is_stmt 0 view .LVU232
 937 007a DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccCg0tSZ.s 			page 23


 938              		.loc 1 293 16 view .LVU233
 939 007c 0243     		orrs	r2, r0
 940 007e DA60     		str	r2, [r3, #12]
 294:Src/motor.c   ****     TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 941              		.loc 1 294 5 is_stmt 1 view .LVU234
 942              		.loc 1 294 9 is_stmt 0 view .LVU235
 943 0080 1A68     		ldr	r2, [r3]
 944              		.loc 1 294 15 view .LVU236
 945 0082 0243     		orrs	r2, r0
 946 0084 1A60     		str	r2, [r3]
 295:Src/motor.c   **** 
 296:Src/motor.c   ****     NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 947              		.loc 1 296 5 is_stmt 1 view .LVU237
 948              	.LVL64:
 949              	.LBB6:
 950              	.LBI6:
 951              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccCg0tSZ.s 			page 24


  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccCg0tSZ.s 			page 25


  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccCg0tSZ.s 			page 26


 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccCg0tSZ.s 			page 27


 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccCg0tSZ.s 			page 28


 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
ARM GAS  /tmp/ccCg0tSZ.s 			page 29


 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccCg0tSZ.s 			page 30


 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
ARM GAS  /tmp/ccCg0tSZ.s 			page 31


 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccCg0tSZ.s 			page 32


 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
ARM GAS  /tmp/ccCg0tSZ.s 			page 33


 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
ARM GAS  /tmp/ccCg0tSZ.s 			page 34


 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 952              		.loc 2 623 22 view .LVU238
 953              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 954              		.loc 2 625 3 view .LVU239
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 955              		.loc 2 627 5 view .LVU240
 956              		.loc 2 627 20 is_stmt 0 view .LVU241
 957 0086 0E4B     		ldr	r3, .L39+28
 958 0088 8022     		movs	r2, #128
 959 008a 9202     		lsls	r2, r2, #10
 960 008c 1A60     		str	r2, [r3]
 961              	.LVL65:
 962              		.loc 2 627 20 view .LVU242
 963              	.LBE7:
 964              	.LBE6:
 297:Src/motor.c   ****     NVIC_SetPriority(TIM6_DAC_IRQn,2);
 965              		.loc 1 297 5 is_stmt 1 view .LVU243
 966              	.LBB8:
 967              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /tmp/ccCg0tSZ.s 			page 35


 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
ARM GAS  /tmp/ccCg0tSZ.s 			page 36


 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 968              		.loc 2 730 22 view .LVU244
 969              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 970              		.loc 2 732 3 view .LVU245
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 971              		.loc 2 734 5 view .LVU246
 972              		.loc 2 734 52 is_stmt 0 view .LVU247
 973 008e C420     		movs	r0, #196
 974 0090 8000     		lsls	r0, r0, #2
 975 0092 1958     		ldr	r1, [r3, r0]
 976              		.loc 2 734 33 view .LVU248
 977 0094 0B4A     		ldr	r2, .L39+32
 978 0096 1140     		ands	r1, r2
 979              		.loc 2 734 102 view .LVU249
 980 0098 8022     		movs	r2, #128
 981 009a 1202     		lsls	r2, r2, #8
 982 009c 0A43     		orrs	r2, r1
 983              		.loc 2 734 30 view .LVU250
 984 009e 1A50     		str	r2, [r3, r0]
 985              	.LVL66:
 986              		.loc 2 734 30 view .LVU251
 987              	.LBE9:
 988              	.LBE8:
 298:Src/motor.c   **** }
 989              		.loc 1 298 1 view .LVU252
 990              		@ sp needed
 991 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 992              	.L40:
 993 00a2 C046     		.align	2
 994              	.L39:
 995 00a4 00100240 		.word	1073876992
 996 00a8 00040040 		.word	1073742848
ARM GAS  /tmp/ccCg0tSZ.s 			page 37


 997 00ac FFFF0000 		.word	65535
 998 00b0 FF7F0000 		.word	32767
 999 00b4 002C0140 		.word	1073818624
 1000 00b8 00100040 		.word	1073745920
 1001 00bc 30750000 		.word	30000
 1002 00c0 00E100E0 		.word	-536813312
 1003 00c4 FF00FFFF 		.word	-65281
 1004              		.cfi_endproc
 1005              	.LFE54:
 1007              		.section	.text.motor_init,"ax",%progbits
 1008              		.align	1
 1009              		.global	motor_init
 1010              		.syntax unified
 1011              		.code	16
 1012              		.thumb_func
 1014              	motor_init:
 1015              	.LFB43:
  23:Src/motor.c   ****     pwm_init();
 1016              		.loc 1 23 23 is_stmt 1 view -0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020 0000 10B5     		push	{r4, lr}
 1021              	.LCFI11:
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 4, -8
 1024              		.cfi_offset 14, -4
  24:Src/motor.c   ****     encoder_init();
 1025              		.loc 1 24 5 view .LVU254
 1026 0002 FFF7FEFF 		bl	pwm_init
 1027              	.LVL67:
  25:Src/motor.c   **** }
 1028              		.loc 1 25 5 view .LVU255
 1029 0006 FFF7FEFF 		bl	encoder_init
 1030              	.LVL68:
  26:Src/motor.c   **** 
 1031              		.loc 1 26 1 is_stmt 0 view .LVU256
 1032              		@ sp needed
 1033 000a 10BD     		pop	{r4, pc}
 1034              		.cfi_endproc
 1035              	.LFE43:
 1037              		.global	__aeabi_fdiv
 1038              		.global	__aeabi_fmul
 1039              		.global	__aeabi_f2iz
 1040              		.section	.rodata.TIM6_DAC_IRQHandler.str1.4,"aMS",%progbits,1
 1041              		.align	2
 1042              	.LC28:
 1043 0000 70776D5F 		.ascii	"pwm_right: %d\012\000"
 1043      72696768 
 1043      743A2025 
 1043      640A00
 1044 000f 00       		.align	2
 1045              	.LC30:
 1046 0010 6D6F746F 		.ascii	"motorr: %d\012\000"
 1046      72723A20 
 1046      25640A00 
 1047              		.align	2
ARM GAS  /tmp/ccCg0tSZ.s 			page 38


 1048              	.LC34:
 1049 001c 63757272 		.ascii	"current_dist: %d\012\000"
 1049      656E745F 
 1049      64697374 
 1049      3A202564 
 1049      0A00
 1050              		.global	__aeabi_f2uiz
 1051 002e 0000     		.align	2
 1052              	.LC36:
 1053 0030 48697420 		.ascii	"Hit target\012\000"
 1053      74617267 
 1053      65740A00 
 1054              		.global	__aeabi_f2d
 1055              		.global	__aeabi_d2f
 1056              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 1057              		.align	1
 1058              		.global	TIM6_DAC_IRQHandler
 1059              		.syntax unified
 1060              		.code	16
 1061              		.thumb_func
 1063              	TIM6_DAC_IRQHandler:
 1064              	.LFB55:
 299:Src/motor.c   **** 
 300:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 301:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 1065              		.loc 1 301 32 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 32
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069 0000 10B5     		push	{r4, lr}
 1070              	.LCFI12:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 4, -8
 1073              		.cfi_offset 14, -4
 1074 0002 88B0     		sub	sp, sp, #32
 1075              	.LCFI13:
 1076              		.cfi_def_cfa_offset 40
 302:Src/motor.c   ****     /* Calculate the motor speed in raw encoder counts
 303:Src/motor.c   ****      * Note the motor speed is signed! Motor can be run in reverse.
 304:Src/motor.c   ****      * Speed is measured by how far the counter moved from center point
 305:Src/motor.c   ****      */
 306:Src/motor.c   **** 	uint8_t usart_buffer[32];
 1077              		.loc 1 306 2 view .LVU258
 307:Src/motor.c   ****     motorl_speed = (TIM3->CNT - 0x7FFF);
 1078              		.loc 1 307 5 view .LVU259
 1079              		.loc 1 307 25 is_stmt 0 view .LVU260
 1080 0004 6449     		ldr	r1, .L49
 1081 0006 4B6A     		ldr	r3, [r1, #36]
 1082              		.loc 1 307 31 view .LVU261
 1083 0008 644A     		ldr	r2, .L49+4
 1084 000a 9446     		mov	ip, r2
 1085 000c 6344     		add	r3, r3, ip
 1086 000e 1BB2     		sxth	r3, r3
 1087              		.loc 1 307 18 view .LVU262
 1088 0010 634A     		ldr	r2, .L49+8
 1089 0012 1380     		strh	r3, [r2]
 308:Src/motor.c   **** 	/* sprintf(usart_buffer, "motorl: %d\n", motorl_speed); */
ARM GAS  /tmp/ccCg0tSZ.s 			page 39


 309:Src/motor.c   **** 	/* USART_SendString(usart_buffer); */
 310:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1090              		.loc 1 310 5 is_stmt 1 view .LVU263
 1091              		.loc 1 310 15 is_stmt 0 view .LVU264
 1092 0014 6348     		ldr	r0, .L49+12
 1093 0016 4862     		str	r0, [r1, #36]
 311:Src/motor.c   **** 	motorr_speed = (TIM1->CNT - 0x7FFF);
 1094              		.loc 1 311 2 is_stmt 1 view .LVU265
 1095              		.loc 1 311 22 is_stmt 0 view .LVU266
 1096 0018 6349     		ldr	r1, .L49+16
 1097 001a 4B6A     		ldr	r3, [r1, #36]
 1098              		.loc 1 311 28 view .LVU267
 1099 001c 6344     		add	r3, r3, ip
 1100 001e 1BB2     		sxth	r3, r3
 1101              		.loc 1 311 15 view .LVU268
 1102 0020 624C     		ldr	r4, .L49+20
 1103 0022 2380     		strh	r3, [r4]
 312:Src/motor.c   ****     TIM1->CNT = 0x7FFF; // Reset back to center point
 1104              		.loc 1 312 5 is_stmt 1 view .LVU269
 1105              		.loc 1 312 15 is_stmt 0 view .LVU270
 1106 0024 4862     		str	r0, [r1, #36]
 313:Src/motor.c   **** 	
 314:Src/motor.c   **** 	if(abs(motorl_speed)>50){
 1107              		.loc 1 314 2 is_stmt 1 view .LVU271
 1108              		.loc 1 314 5 is_stmt 0 view .LVU272
 1109 0026 1388     		ldrh	r3, [r2]
 1110 0028 1BB2     		sxth	r3, r3
 1111 002a DA17     		asrs	r2, r3, #31
 1112 002c 9B18     		adds	r3, r3, r2
 1113 002e 5340     		eors	r3, r2
 1114 0030 9BB2     		uxth	r3, r3
 1115              		.loc 1 314 4 view .LVU273
 1116 0032 322B     		cmp	r3, #50
 1117 0034 49D9     		bls	.L43
 1118              	.LBB10:
 315:Src/motor.c   **** 		float ratio = ((float) abs(motorl_speed))/ ((float) abs(motorr_speed));
 1119              		.loc 1 315 3 is_stmt 1 view .LVU274
 1120              		.loc 1 315 26 is_stmt 0 view .LVU275
 1121 0036 5A4B     		ldr	r3, .L49+8
 1122 0038 1888     		ldrh	r0, [r3]
 1123 003a 00B2     		sxth	r0, r0
 1124 003c C317     		asrs	r3, r0, #31
 1125 003e C018     		adds	r0, r0, r3
 1126 0040 5840     		eors	r0, r3
 1127 0042 80B2     		uxth	r0, r0
 1128              		.loc 1 315 18 view .LVU276
 1129 0044 FFF7FEFF 		bl	__aeabi_i2f
 1130              	.LVL69:
 1131 0048 041C     		adds	r4, r0, #0
 1132              		.loc 1 315 55 view .LVU277
 1133 004a 584B     		ldr	r3, .L49+20
 1134 004c 1B88     		ldrh	r3, [r3]
 1135 004e 1BB2     		sxth	r3, r3
 1136 0050 DA17     		asrs	r2, r3, #31
 1137 0052 9B18     		adds	r3, r3, r2
 1138 0054 5340     		eors	r3, r2
 1139 0056 98B2     		uxth	r0, r3
ARM GAS  /tmp/ccCg0tSZ.s 			page 40


 1140              		.loc 1 315 47 view .LVU278
 1141 0058 FFF7FEFF 		bl	__aeabi_i2f
 1142              	.LVL70:
 1143 005c 011C     		adds	r1, r0, #0
 1144              		.loc 1 315 9 view .LVU279
 1145 005e 201C     		adds	r0, r4, #0
 1146 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1147              	.LVL71:
 1148 0064 041C     		adds	r4, r0, #0
 1149              	.LVL72:
 316:Src/motor.c   **** 		pwm_right = min((int)(pwm_right * ratio), 100);
 1150              		.loc 1 316 3 is_stmt 1 view .LVU280
 1151              		.loc 1 316 15 is_stmt 0 view .LVU281
 1152 0066 524B     		ldr	r3, .L49+24
 1153 0068 1878     		ldrb	r0, [r3]
 1154              	.LVL73:
 1155              		.loc 1 316 15 view .LVU282
 1156 006a C0B2     		uxtb	r0, r0
 1157 006c FFF7FEFF 		bl	__aeabi_i2f
 1158              	.LVL74:
 1159 0070 211C     		adds	r1, r4, #0
 1160 0072 FFF7FEFF 		bl	__aeabi_fmul
 1161              	.LVL75:
 1162 0076 FFF7FEFF 		bl	__aeabi_f2iz
 1163              	.LVL76:
 1164              		.loc 1 316 13 view .LVU283
 1165 007a 6428     		cmp	r0, #100
 1166 007c 0BDC     		bgt	.L47
 1167              		.loc 1 316 15 discriminator 1 view .LVU284
 1168 007e 4C4B     		ldr	r3, .L49+24
 1169 0080 1878     		ldrb	r0, [r3]
 1170 0082 C0B2     		uxtb	r0, r0
 1171 0084 FFF7FEFF 		bl	__aeabi_i2f
 1172              	.LVL77:
 1173 0088 211C     		adds	r1, r4, #0
 1174 008a FFF7FEFF 		bl	__aeabi_fmul
 1175              	.LVL78:
 1176 008e FFF7FEFF 		bl	__aeabi_f2iz
 1177              	.LVL79:
 1178              		.loc 1 316 13 discriminator 1 view .LVU285
 1179 0092 C0B2     		uxtb	r0, r0
 1180 0094 00E0     		b	.L44
 1181              	.L47:
 1182              		.loc 1 316 13 view .LVU286
 1183 0096 6420     		movs	r0, #100
 1184              	.L44:
 1185              		.loc 1 316 13 discriminator 4 view .LVU287
 1186 0098 454C     		ldr	r4, .L49+24
 1187              	.LVL80:
 1188              		.loc 1 316 13 discriminator 4 view .LVU288
 1189 009a 2070     		strb	r0, [r4]
 317:Src/motor.c   **** 		pwm_setDutyCycleR(pwm_right);
 1190              		.loc 1 317 3 is_stmt 1 discriminator 4 view .LVU289
 1191 009c 2078     		ldrb	r0, [r4]
 1192 009e C0B2     		uxtb	r0, r0
 1193 00a0 FFF7FEFF 		bl	pwm_setDutyCycleR
 1194              	.LVL81:
ARM GAS  /tmp/ccCg0tSZ.s 			page 41


 318:Src/motor.c   **** #if PRINT_DEBUG
 319:Src/motor.c   **** 		sprintf(usart_buffer, "pwm_right: %d\n", pwm_right);
 1195              		.loc 1 319 3 discriminator 4 view .LVU290
 1196 00a4 2278     		ldrb	r2, [r4]
 1197 00a6 D2B2     		uxtb	r2, r2
 1198 00a8 4249     		ldr	r1, .L49+28
 1199 00aa 6846     		mov	r0, sp
 1200 00ac FFF7FEFF 		bl	sprintf
 1201              	.LVL82:
 320:Src/motor.c   **** 		USART_SendString(usart_buffer);
 1202              		.loc 1 320 3 discriminator 4 view .LVU291
 1203 00b0 6846     		mov	r0, sp
 1204 00b2 FFF7FEFF 		bl	USART_SendString
 1205              	.LVL83:
 321:Src/motor.c   **** 		sprintf(usart_buffer, "motorr: %d\n", motorr_speed);
 1206              		.loc 1 321 3 discriminator 4 view .LVU292
 1207 00b6 3D4B     		ldr	r3, .L49+20
 1208 00b8 1A88     		ldrh	r2, [r3]
 1209 00ba 12B2     		sxth	r2, r2
 1210 00bc 3E49     		ldr	r1, .L49+32
 1211 00be 6846     		mov	r0, sp
 1212 00c0 FFF7FEFF 		bl	sprintf
 1213              	.LVL84:
 322:Src/motor.c   **** 		USART_SendString(usart_buffer);
 1214              		.loc 1 322 3 discriminator 4 view .LVU293
 1215 00c4 6846     		mov	r0, sp
 1216 00c6 FFF7FEFF 		bl	USART_SendString
 1217              	.LVL85:
 1218              	.L43:
 1219              		.loc 1 322 3 is_stmt 0 discriminator 4 view .LVU294
 1220              	.LBE10:
 323:Src/motor.c   **** #endif
 324:Src/motor.c   **** 	}
 325:Src/motor.c   **** 	
 326:Src/motor.c   **** 	if(target_dist > 0){
 1221              		.loc 1 326 2 is_stmt 1 view .LVU295
 1222              		.loc 1 326 17 is_stmt 0 view .LVU296
 1223 00ca 3C4B     		ldr	r3, .L49+36
 1224 00cc 1B78     		ldrb	r3, [r3]
 1225              		.loc 1 326 4 view .LVU297
 1226 00ce 002B     		cmp	r3, #0
 1227 00d0 06D1     		bne	.L48
 1228              	.L45:
 327:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/70;
 328:Src/motor.c   **** #if PRINT_DEBUG
 329:Src/motor.c   **** 		sprintf(usart_buffer, "current_dist: %d\n", (int)current_dist);
 330:Src/motor.c   **** 		USART_SendString(usart_buffer);
 331:Src/motor.c   **** #endif
 332:Src/motor.c   **** 		if ((uint8_t)current_dist >= target_dist){
 333:Src/motor.c   **** #if PRINT_DEBUG
 334:Src/motor.c   **** 			USART_SendString("Hit target\n");
 335:Src/motor.c   **** #endif
 336:Src/motor.c   **** 			motors_Off();
 337:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 338:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 339:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 340:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
ARM GAS  /tmp/ccCg0tSZ.s 			page 42


 341:Src/motor.c   **** 			pwm_right = 100;
 342:Src/motor.c   **** 			if(!turning){
 343:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 344:Src/motor.c   **** 			}
 345:Src/motor.c   **** 			target_dist = 0;
 346:Src/motor.c   **** 			current_dist = 0;
 347:Src/motor.c   **** 		}
 348:Src/motor.c   **** 	}
 349:Src/motor.c   ****     
 350:Src/motor.c   ****     // Call the PI update function
 351:Src/motor.c   ****     TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 1229              		.loc 1 351 5 is_stmt 1 view .LVU298
 1230              		.loc 1 351 9 is_stmt 0 view .LVU299
 1231 00d2 3B4A     		ldr	r2, .L49+40
 1232 00d4 1369     		ldr	r3, [r2, #16]
 1233              		.loc 1 351 14 view .LVU300
 1234 00d6 0121     		movs	r1, #1
 1235 00d8 8B43     		bics	r3, r1
 1236 00da 1361     		str	r3, [r2, #16]
 352:Src/motor.c   **** }
 1237              		.loc 1 352 1 view .LVU301
 1238 00dc 08B0     		add	sp, sp, #32
 1239              		@ sp needed
 1240 00de 10BD     		pop	{r4, pc}
 1241              	.L48:
 327:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/70;
 1242              		.loc 1 327 3 is_stmt 1 view .LVU302
 327:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/70;
 1243              		.loc 1 327 26 is_stmt 0 view .LVU303
 1244 00e0 2F4B     		ldr	r3, .L49+8
 1245 00e2 1888     		ldrh	r0, [r3]
 1246 00e4 00B2     		sxth	r0, r0
 1247 00e6 C317     		asrs	r3, r0, #31
 1248 00e8 C018     		adds	r0, r0, r3
 1249 00ea 5840     		eors	r0, r3
 1250 00ec 80B2     		uxth	r0, r0
 327:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/70;
 1251              		.loc 1 327 19 view .LVU304
 1252 00ee FFF7FEFF 		bl	__aeabi_i2f
 1253              	.LVL86:
 327:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/70;
 1254              		.loc 1 327 43 view .LVU305
 1255 00f2 3449     		ldr	r1, .L49+44
 1256 00f4 FFF7FEFF 		bl	__aeabi_fdiv
 1257              	.LVL87:
 1258 00f8 011C     		adds	r1, r0, #0
 327:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/70;
 1259              		.loc 1 327 16 view .LVU306
 1260 00fa 334C     		ldr	r4, .L49+48
 1261 00fc 2068     		ldr	r0, [r4]
 1262 00fe FFF7FEFF 		bl	__aeabi_fadd
 1263              	.LVL88:
 1264 0102 2060     		str	r0, [r4]
 329:Src/motor.c   **** 		USART_SendString(usart_buffer);
 1265              		.loc 1 329 3 is_stmt 1 view .LVU307
 1266 0104 2068     		ldr	r0, [r4]
 1267 0106 FFF7FEFF 		bl	__aeabi_f2iz
ARM GAS  /tmp/ccCg0tSZ.s 			page 43


 1268              	.LVL89:
 1269 010a 0200     		movs	r2, r0
 1270 010c 2F49     		ldr	r1, .L49+52
 1271 010e 6846     		mov	r0, sp
 1272 0110 FFF7FEFF 		bl	sprintf
 1273              	.LVL90:
 330:Src/motor.c   **** #endif
 1274              		.loc 1 330 3 view .LVU308
 1275 0114 6846     		mov	r0, sp
 1276 0116 FFF7FEFF 		bl	USART_SendString
 1277              	.LVL91:
 332:Src/motor.c   **** #if PRINT_DEBUG
 1278              		.loc 1 332 3 view .LVU309
 332:Src/motor.c   **** #if PRINT_DEBUG
 1279              		.loc 1 332 7 is_stmt 0 view .LVU310
 1280 011a 2068     		ldr	r0, [r4]
 1281 011c FFF7FEFF 		bl	__aeabi_f2uiz
 1282              	.LVL92:
 1283 0120 C0B2     		uxtb	r0, r0
 332:Src/motor.c   **** #if PRINT_DEBUG
 1284              		.loc 1 332 29 view .LVU311
 1285 0122 264B     		ldr	r3, .L49+36
 1286 0124 1B78     		ldrb	r3, [r3]
 1287 0126 DBB2     		uxtb	r3, r3
 332:Src/motor.c   **** #if PRINT_DEBUG
 1288              		.loc 1 332 6 view .LVU312
 1289 0128 9842     		cmp	r0, r3
 1290 012a D2D3     		bcc	.L45
 334:Src/motor.c   **** #endif
 1291              		.loc 1 334 4 is_stmt 1 view .LVU313
 1292 012c 2848     		ldr	r0, .L49+56
 1293 012e FFF7FEFF 		bl	USART_SendString
 1294              	.LVL93:
 336:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 1295              		.loc 1 336 4 view .LVU314
 1296 0132 FFF7FEFF 		bl	motors_Off
 1297              	.LVL94:
 337:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1298              		.loc 1 337 4 view .LVU315
 337:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1299              		.loc 1 337 24 is_stmt 0 view .LVU316
 1300 0136 184A     		ldr	r2, .L49
 1301 0138 536A     		ldr	r3, [r2, #36]
 337:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1302              		.loc 1 337 30 view .LVU317
 1303 013a 1849     		ldr	r1, .L49+4
 1304 013c 8C46     		mov	ip, r1
 1305 013e 6344     		add	r3, r3, ip
 1306 0140 1BB2     		sxth	r3, r3
 337:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1307              		.loc 1 337 17 view .LVU318
 1308 0142 1749     		ldr	r1, .L49+8
 1309 0144 0B80     		strh	r3, [r1]
 338:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1310              		.loc 1 338 4 is_stmt 1 view .LVU319
 338:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1311              		.loc 1 338 14 is_stmt 0 view .LVU320
ARM GAS  /tmp/ccCg0tSZ.s 			page 44


 1312 0146 1749     		ldr	r1, .L49+12
 1313 0148 5162     		str	r1, [r2, #36]
 339:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1314              		.loc 1 339 4 is_stmt 1 view .LVU321
 339:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1315              		.loc 1 339 24 is_stmt 0 view .LVU322
 1316 014a 174A     		ldr	r2, .L49+16
 1317 014c 536A     		ldr	r3, [r2, #36]
 339:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1318              		.loc 1 339 30 view .LVU323
 1319 014e 6344     		add	r3, r3, ip
 1320 0150 1BB2     		sxth	r3, r3
 339:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1321              		.loc 1 339 17 view .LVU324
 1322 0152 1648     		ldr	r0, .L49+20
 1323 0154 0380     		strh	r3, [r0]
 340:Src/motor.c   **** 			pwm_right = 100;
 1324              		.loc 1 340 4 is_stmt 1 view .LVU325
 340:Src/motor.c   **** 			pwm_right = 100;
 1325              		.loc 1 340 14 is_stmt 0 view .LVU326
 1326 0156 5162     		str	r1, [r2, #36]
 341:Src/motor.c   **** 			if(!turning){
 1327              		.loc 1 341 4 is_stmt 1 view .LVU327
 341:Src/motor.c   **** 			if(!turning){
 1328              		.loc 1 341 14 is_stmt 0 view .LVU328
 1329 0158 154B     		ldr	r3, .L49+24
 1330 015a 6422     		movs	r2, #100
 1331 015c 1A70     		strb	r2, [r3]
 342:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1332              		.loc 1 342 4 is_stmt 1 view .LVU329
 342:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1333              		.loc 1 342 7 is_stmt 0 view .LVU330
 1334 015e 1D4B     		ldr	r3, .L49+60
 1335 0160 1B78     		ldrb	r3, [r3]
 342:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1336              		.loc 1 342 6 view .LVU331
 1337 0162 002B     		cmp	r3, #0
 1338 0164 11D1     		bne	.L46
 343:Src/motor.c   **** 			}
 1339              		.loc 1 343 5 is_stmt 1 view .LVU332
 343:Src/motor.c   **** 			}
 1340              		.loc 1 343 44 is_stmt 0 view .LVU333
 1341 0166 1C4B     		ldr	r3, .L49+64
 1342 0168 1868     		ldr	r0, [r3]
 1343 016a FFF7FEFF 		bl	__aeabi_f2d
 1344              	.LVL95:
 1345 016e FFF7FEFF 		bl	cos
 1346              	.LVL96:
 343:Src/motor.c   **** 			}
 1347              		.loc 1 343 37 view .LVU334
 1348 0172 FFF7FEFF 		bl	__aeabi_d2f
 1349              	.LVL97:
 343:Src/motor.c   **** 			}
 1350              		.loc 1 343 35 view .LVU335
 1351 0176 144B     		ldr	r3, .L49+48
 1352 0178 1968     		ldr	r1, [r3]
 1353 017a FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/ccCg0tSZ.s 			page 45


 1354              	.LVL98:
 1355 017e 011C     		adds	r1, r0, #0
 343:Src/motor.c   **** 			}
 1356              		.loc 1 343 19 view .LVU336
 1357 0180 164C     		ldr	r4, .L49+68
 1358 0182 2068     		ldr	r0, [r4]
 1359 0184 FFF7FEFF 		bl	__aeabi_fadd
 1360              	.LVL99:
 1361 0188 2060     		str	r0, [r4]
 1362              	.L46:
 345:Src/motor.c   **** 			current_dist = 0;
 1363              		.loc 1 345 4 is_stmt 1 view .LVU337
 345:Src/motor.c   **** 			current_dist = 0;
 1364              		.loc 1 345 16 is_stmt 0 view .LVU338
 1365 018a 0C4B     		ldr	r3, .L49+36
 1366 018c 0022     		movs	r2, #0
 1367 018e 1A70     		strb	r2, [r3]
 346:Src/motor.c   **** 		}
 1368              		.loc 1 346 4 is_stmt 1 view .LVU339
 346:Src/motor.c   **** 		}
 1369              		.loc 1 346 17 is_stmt 0 view .LVU340
 1370 0190 0D4B     		ldr	r3, .L49+48
 1371 0192 0022     		movs	r2, #0
 1372 0194 1A60     		str	r2, [r3]
 1373 0196 9CE7     		b	.L45
 1374              	.L50:
 1375              		.align	2
 1376              	.L49:
 1377 0198 00040040 		.word	1073742848
 1378 019c 0180FFFF 		.word	-32767
 1379 01a0 00000000 		.word	motorl_speed
 1380 01a4 FF7F0000 		.word	32767
 1381 01a8 002C0140 		.word	1073818624
 1382 01ac 00000000 		.word	motorr_speed
 1383 01b0 00000000 		.word	pwm_right
 1384 01b4 00000000 		.word	.LC28
 1385 01b8 10000000 		.word	.LC30
 1386 01bc 00000000 		.word	target_dist
 1387 01c0 00100040 		.word	1073745920
 1388 01c4 00008C42 		.word	1116471296
 1389 01c8 00000000 		.word	current_dist
 1390 01cc 1C000000 		.word	.LC34
 1391 01d0 30000000 		.word	.LC36
 1392 01d4 00000000 		.word	turning
 1393 01d8 00000000 		.word	heading
 1394 01dc 00000000 		.word	absolute_dist
 1395              		.cfi_endproc
 1396              	.LFE55:
 1398              		.section	.text.get_distance,"ax",%progbits
 1399              		.align	1
 1400              		.global	get_distance
 1401              		.syntax unified
 1402              		.code	16
 1403              		.thumb_func
 1405              	get_distance:
 1406              	.LFB56:
 353:Src/motor.c   **** 
ARM GAS  /tmp/ccCg0tSZ.s 			page 46


 354:Src/motor.c   **** float get_distance(void){
 1407              		.loc 1 354 25 is_stmt 1 view -0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 355:Src/motor.c   **** 	return absolute_dist;
 1412              		.loc 1 355 2 view .LVU342
 1413              		.loc 1 355 9 is_stmt 0 view .LVU343
 1414 0000 014B     		ldr	r3, .L52
 1415 0002 1868     		ldr	r0, [r3]
 356:Src/motor.c   **** }
 1416              		.loc 1 356 1 view .LVU344
 1417              		@ sp needed
 1418 0004 7047     		bx	lr
 1419              	.L53:
 1420 0006 C046     		.align	2
 1421              	.L52:
 1422 0008 00000000 		.word	absolute_dist
 1423              		.cfi_endproc
 1424              	.LFE56:
 1426              		.global	pwm_left
 1427              		.section	.data.pwm_left,"aw"
 1430              	pwm_left:
 1431 0000 64       		.byte	100
 1432              		.global	pwm_right
 1433              		.section	.data.pwm_right,"aw"
 1436              	pwm_right:
 1437 0000 64       		.byte	100
 1438              		.global	turning
 1439              		.section	.bss.turning,"aw",%nobits
 1442              	turning:
 1443 0000 00       		.space	1
 1444              		.global	heading
 1445              		.section	.bss.heading,"aw",%nobits
 1446              		.align	2
 1449              	heading:
 1450 0000 00000000 		.space	4
 1451              		.global	absolute_dist
 1452              		.section	.bss.absolute_dist,"aw",%nobits
 1453              		.align	2
 1456              	absolute_dist:
 1457 0000 00000000 		.space	4
 1458              		.global	current_dist
 1459              		.section	.bss.current_dist,"aw",%nobits
 1460              		.align	2
 1463              	current_dist:
 1464 0000 00000000 		.space	4
 1465              		.global	target_dist
 1466              		.section	.bss.target_dist,"aw",%nobits
 1469              	target_dist:
 1470 0000 00       		.space	1
 1471              		.global	motorr_speed
 1472              		.section	.bss.motorr_speed,"aw",%nobits
 1473              		.align	1
 1476              	motorr_speed:
 1477 0000 0000     		.space	2
ARM GAS  /tmp/ccCg0tSZ.s 			page 47


 1478              		.global	motorl_speed
 1479              		.section	.bss.motorl_speed,"aw",%nobits
 1480              		.align	1
 1483              	motorl_speed:
 1484 0000 0000     		.space	2
 1485              		.text
 1486              	.Letext0:
 1487              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1488              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1489              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1490              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1491              		.file 7 "Inc/pins.h"
 1492              		.file 8 "Inc/motor.h"
 1493              		.file 9 "Inc/main.h"
 1494              		.file 10 "/usr/arm-none-eabi/include/math.h"
 1495              		.file 11 "/usr/arm-none-eabi/include/stdio.h"
ARM GAS  /tmp/ccCg0tSZ.s 			page 48


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/ccCg0tSZ.s:19     .text.pwm_init:00000000 $t
     /tmp/ccCg0tSZ.s:25     .text.pwm_init:00000000 pwm_init
     /tmp/ccCg0tSZ.s:172    .text.pwm_init:00000094 $d
     /tmp/ccCg0tSZ.s:181    .text.pwm_setDutyCycleL:00000000 $t
     /tmp/ccCg0tSZ.s:187    .text.pwm_setDutyCycleL:00000000 pwm_setDutyCycleL
     /tmp/ccCg0tSZ.s:224    .text.pwm_setDutyCycleL:00000018 $d
     /tmp/ccCg0tSZ.s:229    .text.pwm_setDutyCycleR:00000000 $t
     /tmp/ccCg0tSZ.s:235    .text.pwm_setDutyCycleR:00000000 pwm_setDutyCycleR
     /tmp/ccCg0tSZ.s:274    .text.set_Motor_Direction:00000000 $t
     /tmp/ccCg0tSZ.s:280    .text.set_Motor_Direction:00000000 set_Motor_Direction
     /tmp/ccCg0tSZ.s:352    .text.set_Forward:00000000 $t
     /tmp/ccCg0tSZ.s:358    .text.set_Forward:00000000 set_Forward
     /tmp/ccCg0tSZ.s:397    .text.set_Forward:00000028 $d
     /tmp/ccCg0tSZ.s:1436   .data.pwm_right:00000000 pwm_right
     /tmp/ccCg0tSZ.s:1430   .data.pwm_left:00000000 pwm_left
     /tmp/ccCg0tSZ.s:405    .text.set_Backward:00000000 $t
     /tmp/ccCg0tSZ.s:411    .text.set_Backward:00000000 set_Backward
     /tmp/ccCg0tSZ.s:450    .text.set_Backward:00000028 $d
     /tmp/ccCg0tSZ.s:458    .text.set_Right:00000000 $t
     /tmp/ccCg0tSZ.s:464    .text.set_Right:00000000 set_Right
     /tmp/ccCg0tSZ.s:503    .text.set_Right:00000028 $d
     /tmp/ccCg0tSZ.s:511    .text.set_Left:00000000 $t
     /tmp/ccCg0tSZ.s:517    .text.set_Left:00000000 set_Left
     /tmp/ccCg0tSZ.s:556    .text.set_Left:00000028 $d
     /tmp/ccCg0tSZ.s:564    .text.motors_Off:00000000 $t
     /tmp/ccCg0tSZ.s:570    .text.motors_Off:00000000 motors_Off
     /tmp/ccCg0tSZ.s:596    .rodata.MoveMotors.str1.4:00000000 $d
     /tmp/ccCg0tSZ.s:609    .text.MoveMotors:00000000 $t
     /tmp/ccCg0tSZ.s:615    .text.MoveMotors:00000000 MoveMotors
     /tmp/ccCg0tSZ.s:790    .text.MoveMotors:000000bc $d
     /tmp/ccCg0tSZ.s:1442   .bss.turning:00000000 turning
     /tmp/ccCg0tSZ.s:1469   .bss.target_dist:00000000 target_dist
     /tmp/ccCg0tSZ.s:1449   .bss.heading:00000000 heading
     /tmp/ccCg0tSZ.s:800    .text.encoder_init:00000000 $t
     /tmp/ccCg0tSZ.s:806    .text.encoder_init:00000000 encoder_init
     /tmp/ccCg0tSZ.s:995    .text.encoder_init:000000a4 $d
     /tmp/ccCg0tSZ.s:1008   .text.motor_init:00000000 $t
     /tmp/ccCg0tSZ.s:1014   .text.motor_init:00000000 motor_init
     /tmp/ccCg0tSZ.s:1041   .rodata.TIM6_DAC_IRQHandler.str1.4:00000000 $d
     /tmp/ccCg0tSZ.s:1057   .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/ccCg0tSZ.s:1063   .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/ccCg0tSZ.s:1377   .text.TIM6_DAC_IRQHandler:00000198 $d
     /tmp/ccCg0tSZ.s:1483   .bss.motorl_speed:00000000 motorl_speed
     /tmp/ccCg0tSZ.s:1476   .bss.motorr_speed:00000000 motorr_speed
     /tmp/ccCg0tSZ.s:1463   .bss.current_dist:00000000 current_dist
     /tmp/ccCg0tSZ.s:1456   .bss.absolute_dist:00000000 absolute_dist
     /tmp/ccCg0tSZ.s:1399   .text.get_distance:00000000 $t
     /tmp/ccCg0tSZ.s:1405   .text.get_distance:00000000 get_distance
     /tmp/ccCg0tSZ.s:1422   .text.get_distance:00000008 $d
     /tmp/ccCg0tSZ.s:1443   .bss.turning:00000000 $d
     /tmp/ccCg0tSZ.s:1446   .bss.heading:00000000 $d
     /tmp/ccCg0tSZ.s:1453   .bss.absolute_dist:00000000 $d
     /tmp/ccCg0tSZ.s:1460   .bss.current_dist:00000000 $d
     /tmp/ccCg0tSZ.s:1470   .bss.target_dist:00000000 $d
     /tmp/ccCg0tSZ.s:1473   .bss.motorr_speed:00000000 $d
ARM GAS  /tmp/ccCg0tSZ.s 			page 49


     /tmp/ccCg0tSZ.s:1480   .bss.motorl_speed:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
motor_left_pins
motor_right_pins
__aeabi_uidiv
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_i2f
__aeabi_fadd
__aeabi_fsub
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2iz
__aeabi_f2uiz
__aeabi_f2d
__aeabi_d2f
sprintf
USART_SendString
cos
