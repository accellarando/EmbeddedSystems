ARM GAS  /tmp/cc4bExhD.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** #include "main.h"
   7:Src/motor.c   **** #include <math.h>
   8:Src/motor.c   **** 
   9:Src/motor.c   **** volatile int16_t motorl_speed = 0;   	// Measured left motor speed
  10:Src/motor.c   **** volatile int16_t motorr_speed = 0;   	// Measured left motor speed
  11:Src/motor.c   **** volatile uint8_t target_dist = 0;
  12:Src/motor.c   **** volatile float current_dist = 0;
  13:Src/motor.c   **** volatile float absolute_dist = 0;
  14:Src/motor.c   **** volatile float heading = 0;
  15:Src/motor.c   **** volatile bool turning = false;
  16:Src/motor.c   **** 
  17:Src/motor.c   **** #define max(a,b) ((a>b) ? a : b)
  18:Src/motor.c   **** #define min(a,b) ((a>b) ? b : a)
  19:Src/motor.c   **** 
  20:Src/motor.c   **** #define PRINT_DEBUG 0
  21:Src/motor.c   **** #define STOP_ULTRASONIC 20 //cm
  22:Src/motor.c   **** 
  23:Src/motor.c   **** // Sets up the entire motor drive system
  24:Src/motor.c   **** void motor_init(void) {
  25:Src/motor.c   **** 	pwm_init();
  26:Src/motor.c   **** 	encoder_init();
  27:Src/motor.c   **** }
  28:Src/motor.c   **** 
  29:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  30:Src/motor.c   **** void pwm_init(void) {
  27              		.loc 1 30 21 view -0
  28              		.cfi_startproc
ARM GAS  /tmp/cc4bExhD.s 			page 2


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  31:Src/motor.c   **** 	//RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  32:Src/motor.c   **** 
  33:Src/motor.c   **** 	// Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  34:Src/motor.c   **** 	/*
  35:Src/motor.c   **** 	   GPIOA->MODER |= (1 << 9);
  36:Src/motor.c   **** 	   GPIOA->MODER &= ~(1 << 8);
  37:Src/motor.c   **** 
  38:Src/motor.c   **** 	// Set up pin PB3 for H-bridge PWM output (TIMER 2 CH2)
  39:Src/motor.c   **** 	GPIOB->MODER |= (1 << 7);
  40:Src/motor.c   **** 	GPIOB->MODER &= ~(1 << 6);
  41:Src/motor.c   **** 
  42:Src/motor.c   **** 	// Set PA4 to AF4,
  43:Src/motor.c   **** 	GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  44:Src/motor.c   **** 	GPIOA->AFR[0] |= (1 << 18);
  45:Src/motor.c   **** 
  46:Src/motor.c   **** 	// Set PB3 to AF2,
  47:Src/motor.c   **** 	GPIOB->AFR[0] &= 0xFFFF0FFF; // clear PB3 bits,
  48:Src/motor.c   **** 	GPIOB->AFR[0] |= (1 << 13);
  49:Src/motor.c   **** 
  50:Src/motor.c   **** 	// Set up a PA5, PA8 as GPIO output pins for motor direction control
  51:Src/motor.c   **** 	GPIOA->MODER &= 0xFFFCF3FF; // clear PA5, PA6 bits,
  52:Src/motor.c   **** 	GPIOA->MODER |= (1 << 10) | (1 << 16);
  53:Src/motor.c   **** 
  54:Src/motor.c   **** 	// Set up a PB2, PB10 as GPIO output pins for motor direction control
  55:Src/motor.c   **** 	GPIOB->MODER &= 0xFFCFFFCF; // clear PB2, PB10 bits,
  56:Src/motor.c   **** 	GPIOB->MODER |= (1 << 4) | (1 << 20);
  57:Src/motor.c   **** 	*/
  58:Src/motor.c   **** 
  59:Src/motor.c   **** 	//Initialize one direction pin to high, the other low
  60:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_a.gpio, motor_left_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  38              		.loc 1 60 2 view .LVU1
  39              		.loc 1 60 73 is_stmt 0 view .LVU2
  40 0002 244C     		ldr	r4, .L2
  41              		.loc 1 60 2 view .LVU3
  42 0004 A18B     		ldrh	r1, [r4, #28]
  43 0006 A069     		ldr	r0, [r4, #24]
  44 0008 0122     		movs	r2, #1
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL0:
  61:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_b.gpio, motor_left_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  47              		.loc 1 61 2 is_stmt 1 view .LVU4
  48 000e A18E     		ldrh	r1, [r4, #52]
  49 0010 206B     		ldr	r0, [r4, #48]
  50 0012 0022     		movs	r2, #0
  51 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  52              	.LVL1:
  62:Src/motor.c   **** 
  63:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_a.gpio, motor_right_pins.dir_a.pin.Pin, GPIO_PIN_SET);
ARM GAS  /tmp/cc4bExhD.s 			page 3


  53              		.loc 1 63 2 view .LVU5
  54              		.loc 1 63 75 is_stmt 0 view .LVU6
  55 0018 1F4C     		ldr	r4, .L2+4
  56              		.loc 1 63 2 view .LVU7
  57 001a A18B     		ldrh	r1, [r4, #28]
  58 001c A069     		ldr	r0, [r4, #24]
  59 001e 0122     		movs	r2, #1
  60 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL2:
  64:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_b.gpio, motor_right_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  62              		.loc 1 64 2 is_stmt 1 view .LVU8
  63 0024 A18E     		ldrh	r1, [r4, #52]
  64 0026 206B     		ldr	r0, [r4, #48]
  65 0028 0022     		movs	r2, #0
  66 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL3:
  65:Src/motor.c   **** 
  66:Src/motor.c   **** 	// Set up PWM timer
  67:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
  68              		.loc 1 67 2 view .LVU9
  69              		.loc 1 67 5 is_stmt 0 view .LVU10
  70 002e 1B4B     		ldr	r3, .L2+8
  71 0030 D969     		ldr	r1, [r3, #28]
  72              		.loc 1 67 15 view .LVU11
  73 0032 8022     		movs	r2, #128
  74 0034 5200     		lsls	r2, r2, #1
  75 0036 0A43     		orrs	r2, r1
  76 0038 DA61     		str	r2, [r3, #28]
  68:Src/motor.c   **** 	TIM14->CR1 = 0;                         // Clear control registers
  77              		.loc 1 68 2 is_stmt 1 view .LVU12
  78              		.loc 1 68 13 is_stmt 0 view .LVU13
  79 003a 194A     		ldr	r2, .L2+12
  80 003c 0021     		movs	r1, #0
  81 003e 1160     		str	r1, [r2]
  69:Src/motor.c   **** 	TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
  82              		.loc 1 69 2 is_stmt 1 view .LVU14
  83              		.loc 1 69 15 is_stmt 0 view .LVU15
  84 0040 9161     		str	r1, [r2, #24]
  70:Src/motor.c   **** 	TIM14->CCER = 0;
  85              		.loc 1 70 2 is_stmt 1 view .LVU16
  86              		.loc 1 70 14 is_stmt 0 view .LVU17
  87 0042 1162     		str	r1, [r2, #32]
  71:Src/motor.c   **** 
  72:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  88              		.loc 1 72 2 is_stmt 1 view .LVU18
  89              		.loc 1 72 5 is_stmt 0 view .LVU19
  90 0044 DC69     		ldr	r4, [r3, #28]
  91              		.loc 1 72 15 view .LVU20
  92 0046 0120     		movs	r0, #1
  93 0048 0443     		orrs	r4, r0
  94 004a DC61     		str	r4, [r3, #28]
  73:Src/motor.c   **** 	TIM2->CR1 = 0;                         // Clear control registers
  95              		.loc 1 73 2 is_stmt 1 view .LVU21
  96              		.loc 1 73 12 is_stmt 0 view .LVU22
  97 004c 8023     		movs	r3, #128
  98 004e DB05     		lsls	r3, r3, #23
  99 0050 1960     		str	r1, [r3]
ARM GAS  /tmp/cc4bExhD.s 			page 4


  74:Src/motor.c   **** 	TIM2->CCMR1 = 0;                       // (prevents having to manually clear bits)
 100              		.loc 1 74 2 is_stmt 1 view .LVU23
 101              		.loc 1 74 14 is_stmt 0 view .LVU24
 102 0052 9961     		str	r1, [r3, #24]
  75:Src/motor.c   **** 	TIM2->CCER = 0;
 103              		.loc 1 75 2 is_stmt 1 view .LVU25
 104              		.loc 1 75 13 is_stmt 0 view .LVU26
 105 0054 1962     		str	r1, [r3, #32]
  76:Src/motor.c   **** 
  77:Src/motor.c   **** 	// Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  78:Src/motor.c   **** 	TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 106              		.loc 1 78 2 is_stmt 1 view .LVU27
 107              		.loc 1 78 7 is_stmt 0 view .LVU28
 108 0056 9469     		ldr	r4, [r2, #24]
 109              		.loc 1 78 15 view .LVU29
 110 0058 6825     		movs	r5, #104
 111 005a 2C43     		orrs	r4, r5
 112 005c 9461     		str	r4, [r2, #24]
  79:Src/motor.c   **** 	TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 113              		.loc 1 79 2 is_stmt 1 view .LVU30
 114              		.loc 1 79 7 is_stmt 0 view .LVU31
 115 005e 146A     		ldr	r4, [r2, #32]
 116              		.loc 1 79 14 view .LVU32
 117 0060 0443     		orrs	r4, r0
 118 0062 1462     		str	r4, [r2, #32]
  80:Src/motor.c   **** 	TIM14->PSC = 1;                         // Run timer on 24Mhz
 119              		.loc 1 80 2 is_stmt 1 view .LVU33
 120              		.loc 1 80 13 is_stmt 0 view .LVU34
 121 0064 9062     		str	r0, [r2, #40]
  81:Src/motor.c   **** 	TIM14->ARR = 1200;                      // PWM at 20kHz
 122              		.loc 1 81 2 is_stmt 1 view .LVU35
 123              		.loc 1 81 13 is_stmt 0 view .LVU36
 124 0066 9625     		movs	r5, #150
 125 0068 ED00     		lsls	r5, r5, #3
 126 006a D562     		str	r5, [r2, #44]
  82:Src/motor.c   **** 	TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 127              		.loc 1 82 2 is_stmt 1 view .LVU37
 128              		.loc 1 82 14 is_stmt 0 view .LVU38
 129 006c 5163     		str	r1, [r2, #52]
  83:Src/motor.c   **** 
  84:Src/motor.c   **** 	TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 130              		.loc 1 84 2 is_stmt 1 view .LVU39
 131              		.loc 1 84 7 is_stmt 0 view .LVU40
 132 006e 1468     		ldr	r4, [r2]
 133              		.loc 1 84 13 view .LVU41
 134 0070 0443     		orrs	r4, r0
 135 0072 1460     		str	r4, [r2]
  85:Src/motor.c   **** 
  86:Src/motor.c   **** 	TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 136              		.loc 1 86 2 is_stmt 1 view .LVU42
 137              		.loc 1 86 6 is_stmt 0 view .LVU43
 138 0074 9C69     		ldr	r4, [r3, #24]
 139              		.loc 1 86 14 view .LVU44
 140 0076 D022     		movs	r2, #208
 141 0078 D201     		lsls	r2, r2, #7
 142 007a 2243     		orrs	r2, r4
 143 007c 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/cc4bExhD.s 			page 5


  87:Src/motor.c   **** 	TIM2->CCER |= TIM_CCER_CC2E;           // Enable capture-compare channel 2
 144              		.loc 1 87 2 is_stmt 1 view .LVU45
 145              		.loc 1 87 6 is_stmt 0 view .LVU46
 146 007e 1A6A     		ldr	r2, [r3, #32]
 147              		.loc 1 87 13 view .LVU47
 148 0080 1024     		movs	r4, #16
 149 0082 2243     		orrs	r2, r4
 150 0084 1A62     		str	r2, [r3, #32]
  88:Src/motor.c   **** 	TIM2->PSC = 1;                         // Run timer on 24Mhz
 151              		.loc 1 88 2 is_stmt 1 view .LVU48
 152              		.loc 1 88 12 is_stmt 0 view .LVU49
 153 0086 9862     		str	r0, [r3, #40]
  89:Src/motor.c   **** 	TIM2->ARR = 1200;                      // PWM at 20kHz
 154              		.loc 1 89 2 is_stmt 1 view .LVU50
 155              		.loc 1 89 12 is_stmt 0 view .LVU51
 156 0088 DD62     		str	r5, [r3, #44]
  90:Src/motor.c   **** 	TIM2->CCR2 = 0;                        // Start PWM at 0% duty cycle
 157              		.loc 1 90 2 is_stmt 1 view .LVU52
 158              		.loc 1 90 13 is_stmt 0 view .LVU53
 159 008a 9963     		str	r1, [r3, #56]
  91:Src/motor.c   **** 
  92:Src/motor.c   **** 	TIM2->CR1 |= TIM_CR1_CEN;              // Enable timer
 160              		.loc 1 92 2 is_stmt 1 view .LVU54
 161              		.loc 1 92 6 is_stmt 0 view .LVU55
 162 008c 1A68     		ldr	r2, [r3]
 163              		.loc 1 92 12 view .LVU56
 164 008e 0243     		orrs	r2, r0
 165 0090 1A60     		str	r2, [r3]
  93:Src/motor.c   **** }
 166              		.loc 1 93 1 view .LVU57
 167              		@ sp needed
 168 0092 70BD     		pop	{r4, r5, r6, pc}
 169              	.L3:
 170              		.align	2
 171              	.L2:
 172 0094 00000000 		.word	motor_left_pins
 173 0098 00000000 		.word	motor_right_pins
 174 009c 00100240 		.word	1073876992
 175 00a0 00200040 		.word	1073750016
 176              		.cfi_endproc
 177              	.LFE44:
 179              		.global	__aeabi_uidiv
 180              		.section	.text.pwm_setDutyCycleL,"ax",%progbits
 181              		.align	1
 182              		.global	pwm_setDutyCycleL
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 187              	pwm_setDutyCycleL:
 188              	.LVL4:
 189              	.LFB45:
  94:Src/motor.c   **** 
  95:Src/motor.c   **** // Set the duty cycle of the PWM Left, accepts (0-100)
  96:Src/motor.c   **** void pwm_setDutyCycleL(uint8_t duty) {
 190              		.loc 1 96 38 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc4bExhD.s 			page 6


 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 96 38 is_stmt 0 view .LVU59
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI1:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
  97:Src/motor.c   **** 	if(duty <= 100) {
 200              		.loc 1 97 2 is_stmt 1 view .LVU60
 201              		.loc 1 97 4 is_stmt 0 view .LVU61
 202 0002 6428     		cmp	r0, #100
 203 0004 06D8     		bhi	.L4
  98:Src/motor.c   **** 		TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 value
 204              		.loc 1 98 3 is_stmt 1 view .LVU62
 205              		.loc 1 98 38 is_stmt 0 view .LVU63
 206 0006 044C     		ldr	r4, .L6
 207 0008 E36A     		ldr	r3, [r4, #44]
 208              		.loc 1 98 32 view .LVU64
 209 000a 5843     		muls	r0, r3
 210              	.LVL5:
 211              		.loc 1 98 44 view .LVU65
 212 000c 6421     		movs	r1, #100
 213 000e FFF7FEFF 		bl	__aeabi_uidiv
 214              	.LVL6:
 215              		.loc 1 98 15 view .LVU66
 216 0012 6063     		str	r0, [r4, #52]
 217              	.L4:
  99:Src/motor.c   **** 														// (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
 100:Src/motor.c   **** 	}
 101:Src/motor.c   **** }
 218              		.loc 1 101 1 view .LVU67
 219              		@ sp needed
 220 0014 10BD     		pop	{r4, pc}
 221              	.L7:
 222 0016 C046     		.align	2
 223              	.L6:
 224 0018 00200040 		.word	1073750016
 225              		.cfi_endproc
 226              	.LFE45:
 228              		.section	.text.pwm_setDutyCycleR,"ax",%progbits
 229              		.align	1
 230              		.global	pwm_setDutyCycleR
 231              		.syntax unified
 232              		.code	16
 233              		.thumb_func
 235              	pwm_setDutyCycleR:
 236              	.LVL7:
 237              	.LFB46:
 102:Src/motor.c   **** 
 103:Src/motor.c   **** // Set the duty cycle of the PWM Right, accepts (0-100)
 104:Src/motor.c   **** void pwm_setDutyCycleR(uint8_t duty) {
 238              		.loc 1 104 38 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		.loc 1 104 38 is_stmt 0 view .LVU69
 243 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc4bExhD.s 			page 7


 244              	.LCFI2:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 4, -8
 247              		.cfi_offset 14, -4
 105:Src/motor.c   **** 	if(duty <= 100) {
 248              		.loc 1 105 2 is_stmt 1 view .LVU70
 249              		.loc 1 105 4 is_stmt 0 view .LVU71
 250 0002 6428     		cmp	r0, #100
 251 0004 07D8     		bhi	.L8
 106:Src/motor.c   **** 		TIM2->CCR2 = ((uint32_t)duty*TIM2->ARR)/100;  // Use linear transform to produce CCR1 value
 252              		.loc 1 106 3 is_stmt 1 view .LVU72
 253              		.loc 1 106 36 is_stmt 0 view .LVU73
 254 0006 8024     		movs	r4, #128
 255 0008 E405     		lsls	r4, r4, #23
 256 000a E36A     		ldr	r3, [r4, #44]
 257              		.loc 1 106 31 view .LVU74
 258 000c 5843     		muls	r0, r3
 259              	.LVL8:
 260              		.loc 1 106 42 view .LVU75
 261 000e 6421     		movs	r1, #100
 262 0010 FFF7FEFF 		bl	__aeabi_uidiv
 263              	.LVL9:
 264              		.loc 1 106 14 view .LVU76
 265 0014 A063     		str	r0, [r4, #56]
 266              	.L8:
 107:Src/motor.c   **** 													  // (CCR2 == "pulse" parameter in PWM struct used by peripheral library)
 108:Src/motor.c   **** 	}
 109:Src/motor.c   **** }
 267              		.loc 1 109 1 view .LVU77
 268              		@ sp needed
 269 0016 10BD     		pop	{r4, pc}
 270              		.cfi_endproc
 271              	.LFE46:
 273              		.section	.text.set_Motor_Direction,"ax",%progbits
 274              		.align	1
 275              		.global	set_Motor_Direction
 276              		.syntax unified
 277              		.code	16
 278              		.thumb_func
 280              	set_Motor_Direction:
 281              	.LVL10:
 282              	.LFB47:
 110:Src/motor.c   **** 
 111:Src/motor.c   **** /*
 112:Src/motor.c   ****  * This sets an individual motor's direction.
 113:Src/motor.c   ****  * Note: use MoveMotors to change multiple motor values, eg to turn.
 114:Src/motor.c   ****  */
 115:Src/motor.c   **** void set_Motor_Direction(Direction dir, motor_pins_t* pins){
 283              		.loc 1 115 60 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		.loc 1 115 60 is_stmt 0 view .LVU79
 288 0000 10B5     		push	{r4, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
ARM GAS  /tmp/cc4bExhD.s 			page 8


 292              		.cfi_offset 14, -4
 293 0002 0C00     		movs	r4, r1
 116:Src/motor.c   **** 	switch(dir){
 294              		.loc 1 116 2 is_stmt 1 view .LVU80
 295 0004 0028     		cmp	r0, #0
 296 0006 02D0     		beq	.L11
 297 0008 0328     		cmp	r0, #3
 298 000a 0BD0     		beq	.L12
 299              	.LVL11:
 300              	.L10:
 117:Src/motor.c   **** 		case FORWARD:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_SET);
 119:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 120:Src/motor.c   **** 			break;
 121:Src/motor.c   **** 		case BACKWARD:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_RESET);
 123:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 124:Src/motor.c   **** 			break;
 125:Src/motor.c   **** 		default:
 126:Src/motor.c   **** 			;
 127:Src/motor.c   **** 	}
 128:Src/motor.c   **** }
 301              		.loc 1 128 1 is_stmt 0 view .LVU81
 302              		@ sp needed
 303              	.LVL12:
 304              		.loc 1 128 1 view .LVU82
 305 000c 10BD     		pop	{r4, pc}
 306              	.LVL13:
 307              	.L11:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 308              		.loc 1 118 4 is_stmt 1 view .LVU83
 309 000e 898B     		ldrh	r1, [r1, #28]
 310              	.LVL14:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 311              		.loc 1 118 4 is_stmt 0 view .LVU84
 312 0010 A069     		ldr	r0, [r4, #24]
 313              	.LVL15:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 314              		.loc 1 118 4 view .LVU85
 315 0012 0122     		movs	r2, #1
 316 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL16:
 119:Src/motor.c   **** 			break;
 318              		.loc 1 119 4 is_stmt 1 view .LVU86
 319 0018 A18E     		ldrh	r1, [r4, #52]
 320 001a 206B     		ldr	r0, [r4, #48]
 321 001c 0022     		movs	r2, #0
 322 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 323              	.LVL17:
 120:Src/motor.c   **** 		case BACKWARD:
 324              		.loc 1 120 4 view .LVU87
 325 0022 F3E7     		b	.L10
 326              	.LVL18:
 327              	.L12:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 328              		.loc 1 122 4 view .LVU88
 329 0024 898B     		ldrh	r1, [r1, #28]
ARM GAS  /tmp/cc4bExhD.s 			page 9


 330              	.LVL19:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 331              		.loc 1 122 4 is_stmt 0 view .LVU89
 332 0026 A069     		ldr	r0, [r4, #24]
 333              	.LVL20:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 334              		.loc 1 122 4 view .LVU90
 335 0028 0022     		movs	r2, #0
 336 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 337              	.LVL21:
 123:Src/motor.c   **** 			break;
 338              		.loc 1 123 4 is_stmt 1 view .LVU91
 339 002e A18E     		ldrh	r1, [r4, #52]
 340 0030 206B     		ldr	r0, [r4, #48]
 341 0032 0122     		movs	r2, #1
 342 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 343              	.LVL22:
 124:Src/motor.c   **** 		default:
 344              		.loc 1 124 4 view .LVU92
 126:Src/motor.c   **** 	}
 345              		.loc 1 126 4 view .LVU93
 346              		.loc 1 128 1 is_stmt 0 view .LVU94
 347 0038 E8E7     		b	.L10
 348              		.cfi_endproc
 349              	.LFE47:
 351              		.section	.text.set_Forward,"ax",%progbits
 352              		.align	1
 353              		.global	set_Forward
 354              		.syntax unified
 355              		.code	16
 356              		.thumb_func
 358              	set_Forward:
 359              	.LFB48:
 129:Src/motor.c   **** 
 130:Src/motor.c   **** //Experimentation led to this 91 number for driving straight.
 131:Src/motor.c   **** volatile uint8_t pwm_right = 100;
 132:Src/motor.c   **** volatile uint8_t pwm_left = 100;
 133:Src/motor.c   **** 
 134:Src/motor.c   **** void set_Forward(){
 360              		.loc 1 134 19 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
 368              		.cfi_offset 14, -4
 135:Src/motor.c   **** 	//left go forward
 136:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 369              		.loc 1 136 2 view .LVU96
 370 0002 0949     		ldr	r1, .L15
 371 0004 0020     		movs	r0, #0
 372 0006 FFF7FEFF 		bl	set_Motor_Direction
 373              	.LVL23:
 137:Src/motor.c   **** 
 138:Src/motor.c   **** 	//right go forward
ARM GAS  /tmp/cc4bExhD.s 			page 10


 139:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 374              		.loc 1 139 2 view .LVU97
 375 000a 0849     		ldr	r1, .L15+4
 376 000c 0020     		movs	r0, #0
 377 000e FFF7FEFF 		bl	set_Motor_Direction
 378              	.LVL24:
 140:Src/motor.c   **** 
 141:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 379              		.loc 1 141 2 view .LVU98
 380 0012 074B     		ldr	r3, .L15+8
 381 0014 1878     		ldrb	r0, [r3]
 382 0016 C0B2     		uxtb	r0, r0
 383 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 384              	.LVL25:
 142:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 385              		.loc 1 142 2 view .LVU99
 386 001c 054B     		ldr	r3, .L15+12
 387 001e 1878     		ldrb	r0, [r3]
 388 0020 C0B2     		uxtb	r0, r0
 389 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 390              	.LVL26:
 143:Src/motor.c   **** 
 144:Src/motor.c   **** 
 145:Src/motor.c   **** 	/* the old way
 146:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 5);
 147:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 8);
 148:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 10);
 149:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 2);
 150:Src/motor.c   **** 	   */
 151:Src/motor.c   **** }
 391              		.loc 1 151 1 is_stmt 0 view .LVU100
 392              		@ sp needed
 393 0026 10BD     		pop	{r4, pc}
 394              	.L16:
 395              		.align	2
 396              	.L15:
 397 0028 00000000 		.word	motor_left_pins
 398 002c 00000000 		.word	motor_right_pins
 399 0030 00000000 		.word	pwm_right
 400 0034 00000000 		.word	pwm_left
 401              		.cfi_endproc
 402              	.LFE48:
 404              		.section	.text.set_Backward,"ax",%progbits
 405              		.align	1
 406              		.global	set_Backward
 407              		.syntax unified
 408              		.code	16
 409              		.thumb_func
 411              	set_Backward:
 412              	.LFB49:
 152:Src/motor.c   **** 
 153:Src/motor.c   **** void set_Backward(){
 413              		.loc 1 153 20 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc4bExhD.s 			page 11


 418              	.LCFI5:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 154:Src/motor.c   **** 	//left go backward
 155:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 422              		.loc 1 155 2 view .LVU102
 423 0002 0949     		ldr	r1, .L18
 424 0004 0320     		movs	r0, #3
 425 0006 FFF7FEFF 		bl	set_Motor_Direction
 426              	.LVL27:
 156:Src/motor.c   **** 
 157:Src/motor.c   **** 	//right go backward
 158:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 427              		.loc 1 158 2 view .LVU103
 428 000a 0849     		ldr	r1, .L18+4
 429 000c 0320     		movs	r0, #3
 430 000e FFF7FEFF 		bl	set_Motor_Direction
 431              	.LVL28:
 159:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 432              		.loc 1 159 2 view .LVU104
 433 0012 074B     		ldr	r3, .L18+8
 434 0014 1878     		ldrb	r0, [r3]
 435 0016 C0B2     		uxtb	r0, r0
 436 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 437              	.LVL29:
 160:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 438              		.loc 1 160 2 view .LVU105
 439 001c 054B     		ldr	r3, .L18+12
 440 001e 1878     		ldrb	r0, [r3]
 441 0020 C0B2     		uxtb	r0, r0
 442 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 443              	.LVL30:
 161:Src/motor.c   **** 	/* the old way
 162:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 8);
 163:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 5);
 164:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 2);
 165:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 10);
 166:Src/motor.c   **** 	   */
 167:Src/motor.c   **** }
 444              		.loc 1 167 1 is_stmt 0 view .LVU106
 445              		@ sp needed
 446 0026 10BD     		pop	{r4, pc}
 447              	.L19:
 448              		.align	2
 449              	.L18:
 450 0028 00000000 		.word	motor_left_pins
 451 002c 00000000 		.word	motor_right_pins
 452 0030 00000000 		.word	pwm_right
 453 0034 00000000 		.word	pwm_left
 454              		.cfi_endproc
 455              	.LFE49:
 457              		.section	.text.set_Right,"ax",%progbits
 458              		.align	1
 459              		.global	set_Right
 460              		.syntax unified
 461              		.code	16
ARM GAS  /tmp/cc4bExhD.s 			page 12


 462              		.thumb_func
 464              	set_Right:
 465              	.LFB50:
 168:Src/motor.c   **** 
 169:Src/motor.c   **** void set_Right(){
 466              		.loc 1 169 17 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 10B5     		push	{r4, lr}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 170:Src/motor.c   **** 	//left go forward
 171:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 475              		.loc 1 171 2 view .LVU108
 476 0002 0949     		ldr	r1, .L21
 477 0004 0020     		movs	r0, #0
 478 0006 FFF7FEFF 		bl	set_Motor_Direction
 479              	.LVL31:
 172:Src/motor.c   **** 
 173:Src/motor.c   **** 	//right go backward
 174:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 480              		.loc 1 174 2 view .LVU109
 481 000a 0849     		ldr	r1, .L21+4
 482 000c 0320     		movs	r0, #3
 483 000e FFF7FEFF 		bl	set_Motor_Direction
 484              	.LVL32:
 175:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 485              		.loc 1 175 2 view .LVU110
 486 0012 074B     		ldr	r3, .L21+8
 487 0014 1878     		ldrb	r0, [r3]
 488 0016 C0B2     		uxtb	r0, r0
 489 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 490              	.LVL33:
 176:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 491              		.loc 1 176 2 view .LVU111
 492 001c 054B     		ldr	r3, .L21+12
 493 001e 1878     		ldrb	r0, [r3]
 494 0020 C0B2     		uxtb	r0, r0
 495 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 496              	.LVL34:
 177:Src/motor.c   **** 	/* old way
 178:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 5);
 179:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 8);
 180:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 2);
 181:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 10);
 182:Src/motor.c   **** 	   */
 183:Src/motor.c   **** }
 497              		.loc 1 183 1 is_stmt 0 view .LVU112
 498              		@ sp needed
 499 0026 10BD     		pop	{r4, pc}
 500              	.L22:
 501              		.align	2
 502              	.L21:
 503 0028 00000000 		.word	motor_left_pins
ARM GAS  /tmp/cc4bExhD.s 			page 13


 504 002c 00000000 		.word	motor_right_pins
 505 0030 00000000 		.word	pwm_right
 506 0034 00000000 		.word	pwm_left
 507              		.cfi_endproc
 508              	.LFE50:
 510              		.section	.text.set_Left,"ax",%progbits
 511              		.align	1
 512              		.global	set_Left
 513              		.syntax unified
 514              		.code	16
 515              		.thumb_func
 517              	set_Left:
 518              	.LFB51:
 184:Src/motor.c   **** 
 185:Src/motor.c   **** void set_Left(){
 519              		.loc 1 185 16 is_stmt 1 view -0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523 0000 10B5     		push	{r4, lr}
 524              	.LCFI7:
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 4, -8
 527              		.cfi_offset 14, -4
 186:Src/motor.c   **** 	//left go backward
 187:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 528              		.loc 1 187 2 view .LVU114
 529 0002 0949     		ldr	r1, .L24
 530 0004 0320     		movs	r0, #3
 531 0006 FFF7FEFF 		bl	set_Motor_Direction
 532              	.LVL35:
 188:Src/motor.c   **** 
 189:Src/motor.c   **** 	//right go forward
 190:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 533              		.loc 1 190 2 view .LVU115
 534 000a 0849     		ldr	r1, .L24+4
 535 000c 0020     		movs	r0, #0
 536 000e FFF7FEFF 		bl	set_Motor_Direction
 537              	.LVL36:
 191:Src/motor.c   **** 
 192:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 538              		.loc 1 192 2 view .LVU116
 539 0012 074B     		ldr	r3, .L24+8
 540 0014 1878     		ldrb	r0, [r3]
 541 0016 C0B2     		uxtb	r0, r0
 542 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 543              	.LVL37:
 193:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 544              		.loc 1 193 2 view .LVU117
 545 001c 054B     		ldr	r3, .L24+12
 546 001e 1878     		ldrb	r0, [r3]
 547 0020 C0B2     		uxtb	r0, r0
 548 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 549              	.LVL38:
 194:Src/motor.c   **** 	/*
 195:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 8);
 196:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 5);
ARM GAS  /tmp/cc4bExhD.s 			page 14


 197:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 10);
 198:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 2);
 199:Src/motor.c   **** 	   */
 200:Src/motor.c   **** }
 550              		.loc 1 200 1 is_stmt 0 view .LVU118
 551              		@ sp needed
 552 0026 10BD     		pop	{r4, pc}
 553              	.L25:
 554              		.align	2
 555              	.L24:
 556 0028 00000000 		.word	motor_left_pins
 557 002c 00000000 		.word	motor_right_pins
 558 0030 00000000 		.word	pwm_right
 559 0034 00000000 		.word	pwm_left
 560              		.cfi_endproc
 561              	.LFE51:
 563              		.section	.text.motors_Off,"ax",%progbits
 564              		.align	1
 565              		.global	motors_Off
 566              		.syntax unified
 567              		.code	16
 568              		.thumb_func
 570              	motors_Off:
 571              	.LFB52:
 201:Src/motor.c   **** 
 202:Src/motor.c   **** void motors_Off(){
 572              		.loc 1 202 18 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576 0000 10B5     		push	{r4, lr}
 577              	.LCFI8:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 4, -8
 580              		.cfi_offset 14, -4
 203:Src/motor.c   **** 	pwm_setDutyCycleR(0);
 581              		.loc 1 203 2 view .LVU120
 582 0002 0020     		movs	r0, #0
 583 0004 FFF7FEFF 		bl	pwm_setDutyCycleR
 584              	.LVL39:
 204:Src/motor.c   **** 	pwm_setDutyCycleL(0);
 585              		.loc 1 204 2 view .LVU121
 586 0008 0020     		movs	r0, #0
 587 000a FFF7FEFF 		bl	pwm_setDutyCycleL
 588              	.LVL40:
 205:Src/motor.c   **** }
 589              		.loc 1 205 1 is_stmt 0 view .LVU122
 590              		@ sp needed
 591 000e 10BD     		pop	{r4, pc}
 592              		.cfi_endproc
 593              	.LFE52:
 595              		.section	.rodata.MoveMotors.str1.4,"aMS",%progbits,1
 596              		.align	2
 597              	.LC18:
 598 0000 4D6F7665 		.ascii	"MoveMotors executed!\012\000"
 598      4D6F746F 
 598      72732065 
ARM GAS  /tmp/cc4bExhD.s 			page 15


 598      78656375 
 598      74656421 
 599 0016 0000     		.align	2
 600              	.LC20:
 601 0018 496E7661 		.ascii	"Invalid command to MoveMotors!\012\000"
 601      6C696420 
 601      636F6D6D 
 601      616E6420 
 601      746F204D 
 602              		.global	__aeabi_i2d
 603              		.global	__aeabi_ddiv
 604              		.global	__aeabi_d2uiz
 605              		.global	__aeabi_dmul
 606              		.global	__aeabi_f2d
 607              		.global	__aeabi_dadd
 608              		.global	__aeabi_d2f
 609              		.global	__aeabi_dsub
 610              		.section	.text.MoveMotors,"ax",%progbits
 611              		.align	1
 612              		.global	MoveMotors
 613              		.syntax unified
 614              		.code	16
 615              		.thumb_func
 617              	MoveMotors:
 618              	.LVL41:
 619              	.LFB53:
 206:Src/motor.c   **** 
 207:Src/motor.c   **** static volatile uint8_t stopping = 0;
 208:Src/motor.c   **** 
 209:Src/motor.c   **** uint8_t* MoveMotors(MotorCommand* cmd){
 620              		.loc 1 209 39 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              		.loc 1 209 39 is_stmt 0 view .LVU124
 625 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 626              	.LCFI9:
 627              		.cfi_def_cfa_offset 24
 628              		.cfi_offset 3, -24
 629              		.cfi_offset 4, -20
 630              		.cfi_offset 5, -16
 631              		.cfi_offset 6, -12
 632              		.cfi_offset 7, -8
 633              		.cfi_offset 14, -4
 634 0002 0400     		movs	r4, r0
 210:Src/motor.c   **** 	motors_Off();
 635              		.loc 1 210 2 is_stmt 1 view .LVU125
 636 0004 FFF7FEFF 		bl	motors_Off
 637              	.LVL42:
 211:Src/motor.c   **** 	pwm_right = 100;
 638              		.loc 1 211 2 view .LVU126
 639              		.loc 1 211 12 is_stmt 0 view .LVU127
 640 0008 404B     		ldr	r3, .L38
 641 000a 6422     		movs	r2, #100
 642 000c 1A70     		strb	r2, [r3]
 212:Src/motor.c   **** 	uint8_t* err = "MoveMotors executed!\n";
 643              		.loc 1 212 2 is_stmt 1 view .LVU128
ARM GAS  /tmp/cc4bExhD.s 			page 16


 644              	.LVL43:
 213:Src/motor.c   **** 	switch(cmd->dir){
 645              		.loc 1 213 2 view .LVU129
 646              		.loc 1 213 12 is_stmt 0 view .LVU130
 647 000e 2378     		ldrb	r3, [r4]
 648              		.loc 1 213 2 view .LVU131
 649 0010 022B     		cmp	r3, #2
 650 0012 4FD0     		beq	.L28
 651 0014 31D8     		bhi	.L29
 652 0016 002B     		cmp	r3, #0
 653 0018 3AD0     		beq	.L30
 654 001a 012B     		cmp	r3, #1
 655 001c 2BD1     		bne	.L36
 214:Src/motor.c   **** 		case FORWARD:
 215:Src/motor.c   **** 			stopping = 0;
 216:Src/motor.c   **** 			turning = false;
 217:Src/motor.c   **** 			if(!cmd->amount)
 218:Src/motor.c   **** 				target_dist = -1;
 219:Src/motor.c   **** 			else
 220:Src/motor.c   **** 				target_dist = cmd->amount;
 221:Src/motor.c   **** 			set_Forward();
 222:Src/motor.c   **** 			break;
 223:Src/motor.c   **** 		case LEFT:
 224:Src/motor.c   **** 			stopping = 0;
 656              		.loc 1 224 4 is_stmt 1 view .LVU132
 657              		.loc 1 224 13 is_stmt 0 view .LVU133
 658 001e 3C4B     		ldr	r3, .L38+4
 659 0020 0022     		movs	r2, #0
 660 0022 1A70     		strb	r2, [r3]
 225:Src/motor.c   **** 			turning = true;
 661              		.loc 1 225 4 is_stmt 1 view .LVU134
 662              		.loc 1 225 12 is_stmt 0 view .LVU135
 663 0024 3B4B     		ldr	r3, .L38+8
 664 0026 0132     		adds	r2, r2, #1
 665 0028 1A70     		strb	r2, [r3]
 226:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 666              		.loc 1 226 4 is_stmt 1 view .LVU136
 667              		.loc 1 226 32 is_stmt 0 view .LVU137
 668 002a 6078     		ldrb	r0, [r4, #1]
 669              		.loc 1 226 41 view .LVU138
 670 002c FFF7FEFF 		bl	__aeabi_i2d
 671              	.LVL44:
 672 0030 0400     		movs	r4, r0
 673              	.LVL45:
 674              		.loc 1 226 41 view .LVU139
 675 0032 0D00     		movs	r5, r1
 676 0034 0022     		movs	r2, #0
 677 0036 384B     		ldr	r3, .L38+12
 678 0038 FFF7FEFF 		bl	__aeabi_ddiv
 679              	.LVL46:
 680              		.loc 1 226 18 view .LVU140
 681 003c FFF7FEFF 		bl	__aeabi_d2uiz
 682              	.LVL47:
 683 0040 C0B2     		uxtb	r0, r0
 684              		.loc 1 226 16 view .LVU141
 685 0042 364B     		ldr	r3, .L38+16
 686 0044 1870     		strb	r0, [r3]
ARM GAS  /tmp/cc4bExhD.s 			page 17


 227:Src/motor.c   **** 			heading += cmd->amount * 0.0174533; //convert to radians
 687              		.loc 1 227 4 is_stmt 1 view .LVU142
 688              		.loc 1 227 12 is_stmt 0 view .LVU143
 689 0046 364E     		ldr	r6, .L38+20
 690 0048 3768     		ldr	r7, [r6]
 691              		.loc 1 227 27 view .LVU144
 692 004a 364A     		ldr	r2, .L38+24
 693 004c 364B     		ldr	r3, .L38+28
 694 004e 2000     		movs	r0, r4
 695 0050 2900     		movs	r1, r5
 696 0052 FFF7FEFF 		bl	__aeabi_dmul
 697              	.LVL48:
 698 0056 0400     		movs	r4, r0
 699 0058 0D00     		movs	r5, r1
 700              		.loc 1 227 12 view .LVU145
 701 005a 381C     		adds	r0, r7, #0
 702 005c FFF7FEFF 		bl	__aeabi_f2d
 703              	.LVL49:
 704 0060 2200     		movs	r2, r4
 705 0062 2B00     		movs	r3, r5
 706 0064 FFF7FEFF 		bl	__aeabi_dadd
 707              	.LVL50:
 708 0068 FFF7FEFF 		bl	__aeabi_d2f
 709              	.LVL51:
 710 006c 3060     		str	r0, [r6]
 228:Src/motor.c   **** 			set_Left();
 711              		.loc 1 228 4 is_stmt 1 view .LVU146
 712 006e FFF7FEFF 		bl	set_Left
 713              	.LVL52:
 229:Src/motor.c   **** 			break;
 714              		.loc 1 229 4 view .LVU147
 212:Src/motor.c   **** 	switch(cmd->dir){
 715              		.loc 1 212 11 is_stmt 0 view .LVU148
 716 0072 2E48     		ldr	r0, .L38+32
 717              		.loc 1 229 4 view .LVU149
 718 0074 0BE0     		b	.L27
 719              	.LVL53:
 720              	.L36:
 213:Src/motor.c   **** 		case FORWARD:
 721              		.loc 1 213 2 view .LVU150
 722 0076 2E48     		ldr	r0, .L38+36
 723 0078 09E0     		b	.L27
 724              	.L29:
 725 007a 042B     		cmp	r3, #4
 726 007c 06D1     		bne	.L37
 230:Src/motor.c   **** 		case RIGHT:
 231:Src/motor.c   **** 			stopping = 0;
 232:Src/motor.c   **** 			turning = true;
 233:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 234:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 235:Src/motor.c   **** 			set_Right();
 236:Src/motor.c   **** 			break;
 237:Src/motor.c   **** 		case OFF:
 238:Src/motor.c   **** 			target_dist = 1;
 727              		.loc 1 238 4 is_stmt 1 view .LVU151
 728              		.loc 1 238 16 is_stmt 0 view .LVU152
 729 007e 274B     		ldr	r3, .L38+16
ARM GAS  /tmp/cc4bExhD.s 			page 18


 730 0080 0122     		movs	r2, #1
 731 0082 1A70     		strb	r2, [r3]
 239:Src/motor.c   **** 			motors_Off();
 732              		.loc 1 239 4 is_stmt 1 view .LVU153
 733 0084 FFF7FEFF 		bl	motors_Off
 734              	.LVL54:
 240:Src/motor.c   **** 			break;
 735              		.loc 1 240 4 view .LVU154
 212:Src/motor.c   **** 	switch(cmd->dir){
 736              		.loc 1 212 11 is_stmt 0 view .LVU155
 737 0088 2848     		ldr	r0, .L38+32
 738              	.LVL55:
 241:Src/motor.c   **** 		default:
 242:Src/motor.c   **** 			err = "Invalid command to MoveMotors!\n";
 243:Src/motor.c   **** 	}
 244:Src/motor.c   **** 	//THIS IS BAD. if you send an x it won't stop motors until this delay finishes!
 245:Src/motor.c   **** 	//Switch to a polling structure instead for final
 246:Src/motor.c   **** 	/* while(get_distance() < target_dist) */
 247:Src/motor.c   **** 	/* 	; */
 248:Src/motor.c   **** 	/* motors_Off(); */
 249:Src/motor.c   **** 	return err;
 739              		.loc 1 249 2 is_stmt 1 view .LVU156
 740              		.loc 1 249 9 is_stmt 0 view .LVU157
 741 008a 00E0     		b	.L27
 742              	.LVL56:
 743              	.L37:
 213:Src/motor.c   **** 		case FORWARD:
 744              		.loc 1 213 2 view .LVU158
 745 008c 2848     		ldr	r0, .L38+36
 746              	.LVL57:
 747              	.L27:
 250:Src/motor.c   **** }
 748              		.loc 1 250 1 view .LVU159
 749              		@ sp needed
 750 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 751              	.LVL58:
 752              	.L30:
 215:Src/motor.c   **** 			turning = false;
 753              		.loc 1 215 4 is_stmt 1 view .LVU160
 215:Src/motor.c   **** 			turning = false;
 754              		.loc 1 215 13 is_stmt 0 view .LVU161
 755 0090 1F4B     		ldr	r3, .L38+4
 756 0092 0022     		movs	r2, #0
 757 0094 1A70     		strb	r2, [r3]
 216:Src/motor.c   **** 			if(!cmd->amount)
 758              		.loc 1 216 4 is_stmt 1 view .LVU162
 216:Src/motor.c   **** 			if(!cmd->amount)
 759              		.loc 1 216 12 is_stmt 0 view .LVU163
 760 0096 1F4B     		ldr	r3, .L38+8
 761 0098 1A70     		strb	r2, [r3]
 217:Src/motor.c   **** 				target_dist = -1;
 762              		.loc 1 217 4 is_stmt 1 view .LVU164
 217:Src/motor.c   **** 				target_dist = -1;
 763              		.loc 1 217 11 is_stmt 0 view .LVU165
 764 009a 6378     		ldrb	r3, [r4, #1]
 217:Src/motor.c   **** 				target_dist = -1;
 765              		.loc 1 217 6 view .LVU166
ARM GAS  /tmp/cc4bExhD.s 			page 19


 766 009c 002B     		cmp	r3, #0
 767 009e 06D1     		bne	.L34
 218:Src/motor.c   **** 			else
 768              		.loc 1 218 5 is_stmt 1 view .LVU167
 218:Src/motor.c   **** 			else
 769              		.loc 1 218 17 is_stmt 0 view .LVU168
 770 00a0 1E4B     		ldr	r3, .L38+16
 771 00a2 FF32     		adds	r2, r2, #255
 772 00a4 1A70     		strb	r2, [r3]
 773              	.L35:
 221:Src/motor.c   **** 			break;
 774              		.loc 1 221 4 is_stmt 1 view .LVU169
 775 00a6 FFF7FEFF 		bl	set_Forward
 776              	.LVL59:
 222:Src/motor.c   **** 		case LEFT:
 777              		.loc 1 222 4 view .LVU170
 212:Src/motor.c   **** 	switch(cmd->dir){
 778              		.loc 1 212 11 is_stmt 0 view .LVU171
 779 00aa 2048     		ldr	r0, .L38+32
 222:Src/motor.c   **** 		case LEFT:
 780              		.loc 1 222 4 view .LVU172
 781 00ac EFE7     		b	.L27
 782              	.L34:
 220:Src/motor.c   **** 			set_Forward();
 783              		.loc 1 220 5 is_stmt 1 view .LVU173
 220:Src/motor.c   **** 			set_Forward();
 784              		.loc 1 220 17 is_stmt 0 view .LVU174
 785 00ae 1B4A     		ldr	r2, .L38+16
 786 00b0 1370     		strb	r3, [r2]
 787 00b2 F8E7     		b	.L35
 788              	.L28:
 231:Src/motor.c   **** 			turning = true;
 789              		.loc 1 231 4 is_stmt 1 view .LVU175
 231:Src/motor.c   **** 			turning = true;
 790              		.loc 1 231 13 is_stmt 0 view .LVU176
 791 00b4 164B     		ldr	r3, .L38+4
 792 00b6 0022     		movs	r2, #0
 793 00b8 1A70     		strb	r2, [r3]
 232:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 794              		.loc 1 232 4 is_stmt 1 view .LVU177
 232:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 795              		.loc 1 232 12 is_stmt 0 view .LVU178
 796 00ba 164B     		ldr	r3, .L38+8
 797 00bc 0132     		adds	r2, r2, #1
 798 00be 1A70     		strb	r2, [r3]
 233:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 799              		.loc 1 233 4 is_stmt 1 view .LVU179
 233:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 800              		.loc 1 233 32 is_stmt 0 view .LVU180
 801 00c0 6078     		ldrb	r0, [r4, #1]
 233:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 802              		.loc 1 233 41 view .LVU181
 803 00c2 FFF7FEFF 		bl	__aeabi_i2d
 804              	.LVL60:
 805 00c6 0400     		movs	r4, r0
 806              	.LVL61:
 233:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
ARM GAS  /tmp/cc4bExhD.s 			page 20


 807              		.loc 1 233 41 view .LVU182
 808 00c8 0D00     		movs	r5, r1
 809 00ca 0022     		movs	r2, #0
 810 00cc 124B     		ldr	r3, .L38+12
 811 00ce FFF7FEFF 		bl	__aeabi_ddiv
 812              	.LVL62:
 233:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 813              		.loc 1 233 18 view .LVU183
 814 00d2 FFF7FEFF 		bl	__aeabi_d2uiz
 815              	.LVL63:
 816 00d6 C0B2     		uxtb	r0, r0
 233:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 817              		.loc 1 233 16 view .LVU184
 818 00d8 104B     		ldr	r3, .L38+16
 819 00da 1870     		strb	r0, [r3]
 234:Src/motor.c   **** 			set_Right();
 820              		.loc 1 234 4 is_stmt 1 view .LVU185
 234:Src/motor.c   **** 			set_Right();
 821              		.loc 1 234 12 is_stmt 0 view .LVU186
 822 00dc 104E     		ldr	r6, .L38+20
 823 00de 3768     		ldr	r7, [r6]
 234:Src/motor.c   **** 			set_Right();
 824              		.loc 1 234 27 view .LVU187
 825 00e0 104A     		ldr	r2, .L38+24
 826 00e2 114B     		ldr	r3, .L38+28
 827 00e4 2000     		movs	r0, r4
 828 00e6 2900     		movs	r1, r5
 829 00e8 FFF7FEFF 		bl	__aeabi_dmul
 830              	.LVL64:
 831 00ec 0400     		movs	r4, r0
 832 00ee 0D00     		movs	r5, r1
 234:Src/motor.c   **** 			set_Right();
 833              		.loc 1 234 12 view .LVU188
 834 00f0 381C     		adds	r0, r7, #0
 835 00f2 FFF7FEFF 		bl	__aeabi_f2d
 836              	.LVL65:
 837 00f6 2200     		movs	r2, r4
 838 00f8 2B00     		movs	r3, r5
 839 00fa FFF7FEFF 		bl	__aeabi_dsub
 840              	.LVL66:
 841 00fe FFF7FEFF 		bl	__aeabi_d2f
 842              	.LVL67:
 843 0102 3060     		str	r0, [r6]
 235:Src/motor.c   **** 			break;
 844              		.loc 1 235 4 is_stmt 1 view .LVU189
 845 0104 FFF7FEFF 		bl	set_Right
 846              	.LVL68:
 236:Src/motor.c   **** 		case OFF:
 847              		.loc 1 236 4 view .LVU190
 212:Src/motor.c   **** 	switch(cmd->dir){
 848              		.loc 1 212 11 is_stmt 0 view .LVU191
 849 0108 0848     		ldr	r0, .L38+32
 236:Src/motor.c   **** 		case OFF:
 850              		.loc 1 236 4 view .LVU192
 851 010a C0E7     		b	.L27
 852              	.L39:
 853              		.align	2
ARM GAS  /tmp/cc4bExhD.s 			page 21


 854              	.L38:
 855 010c 00000000 		.word	pwm_right
 856 0110 00000000 		.word	stopping
 857 0114 00000000 		.word	turning
 858 0118 00002740 		.word	1076297728
 859 011c 00000000 		.word	target_dist
 860 0120 00000000 		.word	heading
 861 0124 5F40D422 		.word	584335455
 862 0128 47DF913F 		.word	1066524487
 863 012c 00000000 		.word	.LC18
 864 0130 18000000 		.word	.LC20
 865              		.cfi_endproc
 866              	.LFE53:
 868              		.section	.text.encoder_init,"ax",%progbits
 869              		.align	1
 870              		.global	encoder_init
 871              		.syntax unified
 872              		.code	16
 873              		.thumb_func
 875              	encoder_init:
 876              	.LFB54:
 251:Src/motor.c   **** 
 252:Src/motor.c   **** // Sets up encoder interface to read motor speed
 253:Src/motor.c   **** void encoder_init(void) {
 877              		.loc 1 253 25 is_stmt 1 view -0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 882              	.LCFI10:
 883              		.cfi_def_cfa_offset 20
 884              		.cfi_offset 4, -20
 885              		.cfi_offset 5, -16
 886              		.cfi_offset 6, -12
 887              		.cfi_offset 7, -8
 888              		.cfi_offset 14, -4
 254:Src/motor.c   **** 
 255:Src/motor.c   **** 	// Set up encoder input pins (TIMER 3 CH1 and CH2)
 256:Src/motor.c   **** 	/*
 257:Src/motor.c   **** 	   GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 258:Src/motor.c   **** 	   GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 259:Src/motor.c   **** 	   GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 260:Src/motor.c   **** 
 261:Src/motor.c   **** 	// Set up encoder input pins (TIMER 15 CH1 and CH2)
 262:Src/motor.c   **** 	GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 263:Src/motor.c   **** 	GPIOB->MODER |= (GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 264:Src/motor.c   **** 	GPIOB->AFR[1] |= ( (1 << 24) | (1 << 28) );
 265:Src/motor.c   **** 	*/
 266:Src/motor.c   **** 
 267:Src/motor.c   **** 	// Set up encoder interface (TIM3 encoder input mode)
 268:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 889              		.loc 1 268 2 view .LVU194
 890              		.loc 1 268 5 is_stmt 0 view .LVU195
 891 0002 2849     		ldr	r1, .L41
 892 0004 CB69     		ldr	r3, [r1, #28]
 893              		.loc 1 268 15 view .LVU196
 894 0006 0222     		movs	r2, #2
ARM GAS  /tmp/cc4bExhD.s 			page 22


 895 0008 1343     		orrs	r3, r2
 896 000a CB61     		str	r3, [r1, #28]
 269:Src/motor.c   **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 897              		.loc 1 269 2 is_stmt 1 view .LVU197
 898              		.loc 1 269 5 is_stmt 0 view .LVU198
 899 000c 8A69     		ldr	r2, [r1, #24]
 900              		.loc 1 269 15 view .LVU199
 901 000e 8023     		movs	r3, #128
 902 0010 1B01     		lsls	r3, r3, #4
 903 0012 1343     		orrs	r3, r2
 904 0014 8B61     		str	r3, [r1, #24]
 270:Src/motor.c   **** 	TIM3->CCMR1 = 0;
 905              		.loc 1 270 2 is_stmt 1 view .LVU200
 906              		.loc 1 270 14 is_stmt 0 view .LVU201
 907 0016 244B     		ldr	r3, .L41+4
 908 0018 0022     		movs	r2, #0
 909 001a 9A61     		str	r2, [r3, #24]
 271:Src/motor.c   **** 	TIM3->CCER = 0;
 910              		.loc 1 271 2 is_stmt 1 view .LVU202
 911              		.loc 1 271 13 is_stmt 0 view .LVU203
 912 001c 1A62     		str	r2, [r3, #32]
 272:Src/motor.c   **** 	TIM3->SMCR = 0;
 913              		.loc 1 272 2 is_stmt 1 view .LVU204
 914              		.loc 1 272 13 is_stmt 0 view .LVU205
 915 001e 9A60     		str	r2, [r3, #8]
 273:Src/motor.c   **** 	TIM3->CR1 = 0;
 916              		.loc 1 273 2 is_stmt 1 view .LVU206
 917              		.loc 1 273 12 is_stmt 0 view .LVU207
 918 0020 1A60     		str	r2, [r3]
 274:Src/motor.c   **** 
 275:Src/motor.c   **** 	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected to 
 919              		.loc 1 275 2 is_stmt 1 view .LVU208
 920              		.loc 1 275 6 is_stmt 0 view .LVU209
 921 0022 9869     		ldr	r0, [r3, #24]
 922              		.loc 1 275 14 view .LVU210
 923 0024 0224     		movs	r4, #2
 924 0026 FF34     		adds	r4, r4, #255
 925 0028 2043     		orrs	r0, r4
 926 002a 9861     		str	r0, [r3, #24]
 276:Src/motor.c   **** 	TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and fall
 927              		.loc 1 276 2 is_stmt 1 view .LVU211
 928              		.loc 1 276 6 is_stmt 0 view .LVU212
 929 002c 9868     		ldr	r0, [r3, #8]
 930              		.loc 1 276 13 view .LVU213
 931 002e 0325     		movs	r5, #3
 932 0030 AC46     		mov	ip, r5
 933 0032 2843     		orrs	r0, r5
 934 0034 9860     		str	r0, [r3, #8]
 277:Src/motor.c   **** 	TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest possib
 935              		.loc 1 277 2 is_stmt 1 view .LVU214
 936              		.loc 1 277 12 is_stmt 0 view .LVU215
 937 0036 1D4F     		ldr	r7, .L41+8
 938 0038 DF62     		str	r7, [r3, #44]
 278:Src/motor.c   **** 	TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negative 
 939              		.loc 1 278 2 is_stmt 1 view .LVU216
 940              		.loc 1 278 12 is_stmt 0 view .LVU217
 941 003a 1D4E     		ldr	r6, .L41+12
ARM GAS  /tmp/cc4bExhD.s 			page 23


 942 003c 5E62     		str	r6, [r3, #36]
 279:Src/motor.c   **** 															// (Could also cast unsigned register to signed number to get negative numbers if it
 280:Src/motor.c   **** 															//  just another option, the mid-bias is a bit simpler to understand though.)
 281:Src/motor.c   **** 	TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 943              		.loc 1 281 2 is_stmt 1 view .LVU218
 944              		.loc 1 281 6 is_stmt 0 view .LVU219
 945 003e 1D68     		ldr	r5, [r3]
 946              		.loc 1 281 12 view .LVU220
 947 0040 0120     		movs	r0, #1
 948 0042 0543     		orrs	r5, r0
 949 0044 1D60     		str	r5, [r3]
 282:Src/motor.c   **** 
 283:Src/motor.c   **** 	TIM1->CCMR1 = 0;
 950              		.loc 1 283 2 is_stmt 1 view .LVU221
 951              		.loc 1 283 14 is_stmt 0 view .LVU222
 952 0046 1B4B     		ldr	r3, .L41+16
 953 0048 9A61     		str	r2, [r3, #24]
 284:Src/motor.c   **** 	TIM1->CCER = 0;
 954              		.loc 1 284 2 is_stmt 1 view .LVU223
 955              		.loc 1 284 13 is_stmt 0 view .LVU224
 956 004a 1A62     		str	r2, [r3, #32]
 285:Src/motor.c   **** 	TIM1->SMCR = 0;
 957              		.loc 1 285 2 is_stmt 1 view .LVU225
 958              		.loc 1 285 13 is_stmt 0 view .LVU226
 959 004c 9A60     		str	r2, [r3, #8]
 286:Src/motor.c   **** 	TIM1->CR1 = 0;
 960              		.loc 1 286 2 is_stmt 1 view .LVU227
 961              		.loc 1 286 12 is_stmt 0 view .LVU228
 962 004e 1A60     		str	r2, [r3]
 287:Src/motor.c   **** 	TIM1->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected to 
 963              		.loc 1 287 2 is_stmt 1 view .LVU229
 964              		.loc 1 287 6 is_stmt 0 view .LVU230
 965 0050 9A69     		ldr	r2, [r3, #24]
 966              		.loc 1 287 14 view .LVU231
 967 0052 1443     		orrs	r4, r2
 968 0054 9C61     		str	r4, [r3, #24]
 288:Src/motor.c   **** 	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and fall
 969              		.loc 1 288 2 is_stmt 1 view .LVU232
 970              		.loc 1 288 6 is_stmt 0 view .LVU233
 971 0056 9A68     		ldr	r2, [r3, #8]
 972              		.loc 1 288 13 view .LVU234
 973 0058 6446     		mov	r4, ip
 974 005a 2243     		orrs	r2, r4
 975 005c 9A60     		str	r2, [r3, #8]
 289:Src/motor.c   **** 	TIM1->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest possib
 976              		.loc 1 289 2 is_stmt 1 view .LVU235
 977              		.loc 1 289 12 is_stmt 0 view .LVU236
 978 005e DF62     		str	r7, [r3, #44]
 290:Src/motor.c   **** 	TIM1->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negative 
 979              		.loc 1 290 2 is_stmt 1 view .LVU237
 980              		.loc 1 290 12 is_stmt 0 view .LVU238
 981 0060 5E62     		str	r6, [r3, #36]
 291:Src/motor.c   **** 															// (Could also cast unsigned register to signed number to get negative numbers if it
 292:Src/motor.c   **** 															//  just another option, the mid-bias is a bit simpler to understand though.)
 293:Src/motor.c   **** 	TIM1->CR1 |= TIM_CR1_CEN;     
 982              		.loc 1 293 2 is_stmt 1 view .LVU239
 983              		.loc 1 293 6 is_stmt 0 view .LVU240
ARM GAS  /tmp/cc4bExhD.s 			page 24


 984 0062 1A68     		ldr	r2, [r3]
 985              		.loc 1 293 12 view .LVU241
 986 0064 0243     		orrs	r2, r0
 987 0066 1A60     		str	r2, [r3]
 294:Src/motor.c   **** 
 295:Src/motor.c   **** 	// Configure a second timer (TIM6) to fire an ISR on update event
 296:Src/motor.c   **** 	// Used to periodically check and update speed variable
 297:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 988              		.loc 1 297 2 is_stmt 1 view .LVU242
 989              		.loc 1 297 5 is_stmt 0 view .LVU243
 990 0068 CB69     		ldr	r3, [r1, #28]
 991              		.loc 1 297 15 view .LVU244
 992 006a 1022     		movs	r2, #16
 993 006c 1343     		orrs	r3, r2
 994 006e CB61     		str	r3, [r1, #28]
 298:Src/motor.c   **** 
 299:Src/motor.c   **** 	// Select PSC and ARR values that give an appropriate interrupt rate
 300:Src/motor.c   **** 	TIM6->PSC = 11;
 995              		.loc 1 300 2 is_stmt 1 view .LVU245
 996              		.loc 1 300 12 is_stmt 0 view .LVU246
 997 0070 114B     		ldr	r3, .L41+20
 998 0072 053A     		subs	r2, r2, #5
 999 0074 9A62     		str	r2, [r3, #40]
 301:Src/motor.c   **** 	TIM6->ARR = 30000;
 1000              		.loc 1 301 2 is_stmt 1 view .LVU247
 1001              		.loc 1 301 12 is_stmt 0 view .LVU248
 1002 0076 114A     		ldr	r2, .L41+24
 1003 0078 DA62     		str	r2, [r3, #44]
 302:Src/motor.c   **** 
 303:Src/motor.c   **** 	TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 1004              		.loc 1 303 2 is_stmt 1 view .LVU249
 1005              		.loc 1 303 6 is_stmt 0 view .LVU250
 1006 007a DA68     		ldr	r2, [r3, #12]
 1007              		.loc 1 303 13 view .LVU251
 1008 007c 0243     		orrs	r2, r0
 1009 007e DA60     		str	r2, [r3, #12]
 304:Src/motor.c   **** 	TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 1010              		.loc 1 304 2 is_stmt 1 view .LVU252
 1011              		.loc 1 304 6 is_stmt 0 view .LVU253
 1012 0080 1A68     		ldr	r2, [r3]
 1013              		.loc 1 304 12 view .LVU254
 1014 0082 0243     		orrs	r2, r0
 1015 0084 1A60     		str	r2, [r3]
 305:Src/motor.c   **** 
 306:Src/motor.c   **** 	NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 1016              		.loc 1 306 2 is_stmt 1 view .LVU255
 1017              	.LVL69:
 1018              	.LBB6:
 1019              	.LBI6:
 1020              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
ARM GAS  /tmp/cc4bExhD.s 			page 25


   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
ARM GAS  /tmp/cc4bExhD.s 			page 26


  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4bExhD.s 			page 27


 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
ARM GAS  /tmp/cc4bExhD.s 			page 28


 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/cc4bExhD.s 			page 29


 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
ARM GAS  /tmp/cc4bExhD.s 			page 30


 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
ARM GAS  /tmp/cc4bExhD.s 			page 31


 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
ARM GAS  /tmp/cc4bExhD.s 			page 32


 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
ARM GAS  /tmp/cc4bExhD.s 			page 33


 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
ARM GAS  /tmp/cc4bExhD.s 			page 34


 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
ARM GAS  /tmp/cc4bExhD.s 			page 35


 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1021              		.loc 2 623 22 view .LVU256
 1022              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1023              		.loc 2 625 3 view .LVU257
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1024              		.loc 2 627 5 view .LVU258
 1025              		.loc 2 627 20 is_stmt 0 view .LVU259
 1026 0086 0E4B     		ldr	r3, .L41+28
 1027 0088 8022     		movs	r2, #128
ARM GAS  /tmp/cc4bExhD.s 			page 36


 1028 008a 9202     		lsls	r2, r2, #10
 1029 008c 1A60     		str	r2, [r3]
 1030              	.LVL70:
 1031              		.loc 2 627 20 view .LVU260
 1032              	.LBE7:
 1033              	.LBE6:
 307:Src/motor.c   **** 	NVIC_SetPriority(TIM6_DAC_IRQn,3);
 1034              		.loc 1 307 2 is_stmt 1 view .LVU261
 1035              	.LBB8:
 1036              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
ARM GAS  /tmp/cc4bExhD.s 			page 37


 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1037              		.loc 2 730 22 view .LVU262
ARM GAS  /tmp/cc4bExhD.s 			page 38


 1038              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1039              		.loc 2 732 3 view .LVU263
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1040              		.loc 2 734 5 view .LVU264
 1041              		.loc 2 734 52 is_stmt 0 view .LVU265
 1042 008e C420     		movs	r0, #196
 1043 0090 8000     		lsls	r0, r0, #2
 1044 0092 1958     		ldr	r1, [r3, r0]
 1045              		.loc 2 734 33 view .LVU266
 1046 0094 0B4A     		ldr	r2, .L41+32
 1047 0096 1140     		ands	r1, r2
 1048              		.loc 2 734 102 view .LVU267
 1049 0098 C022     		movs	r2, #192
 1050 009a 1202     		lsls	r2, r2, #8
 1051 009c 0A43     		orrs	r2, r1
 1052              		.loc 2 734 30 view .LVU268
 1053 009e 1A50     		str	r2, [r3, r0]
 1054              	.LVL71:
 1055              		.loc 2 734 30 view .LVU269
 1056              	.LBE9:
 1057              	.LBE8:
 308:Src/motor.c   **** }
 1058              		.loc 1 308 1 view .LVU270
 1059              		@ sp needed
 1060 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1061              	.L42:
 1062 00a2 C046     		.align	2
 1063              	.L41:
 1064 00a4 00100240 		.word	1073876992
 1065 00a8 00040040 		.word	1073742848
 1066 00ac FFFF0000 		.word	65535
 1067 00b0 FF7F0000 		.word	32767
 1068 00b4 002C0140 		.word	1073818624
 1069 00b8 00100040 		.word	1073745920
 1070 00bc 30750000 		.word	30000
 1071 00c0 00E100E0 		.word	-536813312
 1072 00c4 FF00FFFF 		.word	-65281
 1073              		.cfi_endproc
 1074              	.LFE54:
 1076              		.section	.text.motor_init,"ax",%progbits
 1077              		.align	1
 1078              		.global	motor_init
 1079              		.syntax unified
 1080              		.code	16
 1081              		.thumb_func
 1083              	motor_init:
 1084              	.LFB43:
  24:Src/motor.c   **** 	pwm_init();
 1085              		.loc 1 24 23 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089 0000 10B5     		push	{r4, lr}
 1090              	.LCFI11:
ARM GAS  /tmp/cc4bExhD.s 			page 39


 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 4, -8
 1093              		.cfi_offset 14, -4
  25:Src/motor.c   **** 	encoder_init();
 1094              		.loc 1 25 2 view .LVU272
 1095 0002 FFF7FEFF 		bl	pwm_init
 1096              	.LVL72:
  26:Src/motor.c   **** }
 1097              		.loc 1 26 2 view .LVU273
 1098 0006 FFF7FEFF 		bl	encoder_init
 1099              	.LVL73:
  27:Src/motor.c   **** 
 1100              		.loc 1 27 1 is_stmt 0 view .LVU274
 1101              		@ sp needed
 1102 000a 10BD     		pop	{r4, pc}
 1103              		.cfi_endproc
 1104              	.LFE43:
 1106              		.section	.text.ObjectDetected,"ax",%progbits
 1107              		.align	1
 1108              		.global	ObjectDetected
 1109              		.syntax unified
 1110              		.code	16
 1111              		.thumb_func
 1113              	ObjectDetected:
 1114              	.LFB55:
 309:Src/motor.c   **** 
 310:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 311:Src/motor.c   **** #define ULTRASONIC_SAMPLES 4
 312:Src/motor.c   **** 
 313:Src/motor.c   **** uint8_t ObjectDetected(){
 1115              		.loc 1 313 25 is_stmt 1 view -0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119 0000 70B5     		push	{r4, r5, r6, lr}
 1120              	.LCFI12:
 1121              		.cfi_def_cfa_offset 16
 1122              		.cfi_offset 4, -16
 1123              		.cfi_offset 5, -12
 1124              		.cfi_offset 6, -8
 1125              		.cfi_offset 14, -4
 314:Src/motor.c   **** 	uint32_t us_left_sum = 0;
 1126              		.loc 1 314 2 view .LVU276
 1127              	.LVL74:
 315:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1128              		.loc 1 315 2 view .LVU277
 316:Src/motor.c   **** 
 317:Src/motor.c   **** 	for(uint8_t i=0;i<ULTRASONIC_SAMPLES;i++){
 1129              		.loc 1 317 2 view .LVU278
 1130              	.LBB10:
 1131              		.loc 1 317 6 view .LVU279
 1132              		.loc 1 317 14 is_stmt 0 view .LVU280
 1133 0002 0024     		movs	r4, #0
 1134              	.LBE10:
 315:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1135              		.loc 1 315 11 view .LVU281
 1136 0004 0025     		movs	r5, #0
ARM GAS  /tmp/cc4bExhD.s 			page 40


 314:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1137              		.loc 1 314 11 view .LVU282
 1138 0006 0026     		movs	r6, #0
 1139              	.LBB11:
 1140              		.loc 1 317 2 view .LVU283
 1141 0008 09E0     		b	.L45
 1142              	.LVL75:
 1143              	.L46:
 318:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1144              		.loc 1 318 3 is_stmt 1 discriminator 3 view .LVU284
 1145              		.loc 1 318 18 is_stmt 0 discriminator 3 view .LVU285
 1146 000a 0C48     		ldr	r0, .L50
 1147 000c FFF7FEFF 		bl	GetUltrasonic
 1148              	.LVL76:
 1149              		.loc 1 318 15 discriminator 3 view .LVU286
 1150 0010 3618     		adds	r6, r6, r0
 1151              	.LVL77:
 319:Src/motor.c   **** 		us_right_sum += GetUltrasonic(&ultrasonic_right_pins);
 1152              		.loc 1 319 3 is_stmt 1 discriminator 3 view .LVU287
 1153              		.loc 1 319 19 is_stmt 0 discriminator 3 view .LVU288
 1154 0012 0B48     		ldr	r0, .L50+4
 1155 0014 FFF7FEFF 		bl	GetUltrasonic
 1156              	.LVL78:
 1157              		.loc 1 319 16 discriminator 3 view .LVU289
 1158 0018 2D18     		adds	r5, r5, r0
 1159              	.LVL79:
 317:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1160              		.loc 1 317 40 is_stmt 1 discriminator 3 view .LVU290
 1161 001a 0134     		adds	r4, r4, #1
 1162              	.LVL80:
 317:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1163              		.loc 1 317 40 is_stmt 0 discriminator 3 view .LVU291
 1164 001c E4B2     		uxtb	r4, r4
 1165              	.LVL81:
 1166              	.L45:
 317:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1167              		.loc 1 317 19 is_stmt 1 discriminator 1 view .LVU292
 1168 001e 032C     		cmp	r4, #3
 1169 0020 F3D9     		bls	.L46
 1170              	.LBE11:
 320:Src/motor.c   **** 	}
 321:Src/motor.c   **** 
 322:Src/motor.c   **** 	us_left_sum >>= 2; //div by 4
 1171              		.loc 1 322 2 view .LVU293
 1172              	.LVL82:
 323:Src/motor.c   **** 	us_right_sum >>= 2;
 1173              		.loc 1 323 2 view .LVU294
 1174              		.loc 1 323 15 is_stmt 0 view .LVU295
 1175 0022 AD08     		lsrs	r5, r5, #2
 1176              	.LVL83:
 324:Src/motor.c   **** 
 325:Src/motor.c   **** 	return (us_left_sum < STOP_ULTRASONIC) || (us_right_sum < STOP_ULTRASONIC);
 1177              		.loc 1 325 2 is_stmt 1 view .LVU296
 1178              		.loc 1 325 41 is_stmt 0 view .LVU297
 1179 0024 4F2E     		cmp	r6, #79
 1180 0026 03D9     		bls	.L48
 1181              		.loc 1 325 41 discriminator 2 view .LVU298
ARM GAS  /tmp/cc4bExhD.s 			page 41


 1182 0028 132D     		cmp	r5, #19
 1183 002a 04D8     		bhi	.L49
 1184              		.loc 1 325 41 view .LVU299
 1185 002c 0120     		movs	r0, #1
 1186 002e 00E0     		b	.L47
 1187              	.L48:
 1188 0030 0120     		movs	r0, #1
 1189              	.L47:
 1190              		.loc 1 325 41 discriminator 6 view .LVU300
 1191 0032 C0B2     		uxtb	r0, r0
 326:Src/motor.c   **** }
 1192              		.loc 1 326 1 discriminator 6 view .LVU301
 1193              		@ sp needed
 1194              	.LVL84:
 1195              	.LVL85:
 1196              	.LVL86:
 1197              		.loc 1 326 1 discriminator 6 view .LVU302
 1198 0034 70BD     		pop	{r4, r5, r6, pc}
 1199              	.LVL87:
 1200              	.L49:
 325:Src/motor.c   **** }
 1201              		.loc 1 325 41 view .LVU303
 1202 0036 0020     		movs	r0, #0
 1203 0038 FBE7     		b	.L47
 1204              	.L51:
 1205 003a C046     		.align	2
 1206              	.L50:
 1207 003c 00000000 		.word	ultrasonic_left_pins
 1208 0040 00000000 		.word	ultrasonic_right_pins
 1209              		.cfi_endproc
 1210              	.LFE55:
 1212              		.global	__aeabi_i2f
 1213              		.global	__aeabi_fdiv
 1214              		.global	__aeabi_fmul
 1215              		.global	__aeabi_f2iz
 1216              		.global	__aeabi_fadd
 1217              		.global	__aeabi_f2uiz
 1218              		.section	.rodata.TIM6_DAC_IRQHandler.str1.4,"aMS",%progbits,1
 1219              		.align	2
 1220              	.LC34:
 1221 0000 48697420 		.ascii	"Hit distance target\012\000"
 1221      64697374 
 1221      616E6365 
 1221      20746172 
 1221      6765740A 
 1222 0015 000000   		.align	2
 1223              	.LC37:
 1224 0018 4F626A65 		.ascii	"Object detected\012\000"
 1224      63742064 
 1224      65746563 
 1224      7465640A 
 1224      00
 1225 0029 000000   		.align	2
 1226              	.LC41:
 1227 002c 68656164 		.ascii	"heading: %d\012\000"
 1227      696E673A 
 1227      2025640A 
ARM GAS  /tmp/cc4bExhD.s 			page 42


 1227      00
 1228              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 1229              		.align	1
 1230              		.global	TIM6_DAC_IRQHandler
 1231              		.syntax unified
 1232              		.code	16
 1233              		.thumb_func
 1235              	TIM6_DAC_IRQHandler:
 1236              	.LFB56:
 327:Src/motor.c   **** 
 328:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 1237              		.loc 1 328 32 is_stmt 1 view -0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 32
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241 0000 30B5     		push	{r4, r5, lr}
 1242              	.LCFI13:
 1243              		.cfi_def_cfa_offset 12
 1244              		.cfi_offset 4, -12
 1245              		.cfi_offset 5, -8
 1246              		.cfi_offset 14, -4
 1247 0002 89B0     		sub	sp, sp, #36
 1248              	.LCFI14:
 1249              		.cfi_def_cfa_offset 48
 329:Src/motor.c   **** 	/* Calculate the motor speed in raw encoder counts
 330:Src/motor.c   **** 	 * Note the motor speed is signed! Motor can be run in reverse.
 331:Src/motor.c   **** 	 * Speed is measured by how far the counter moved from center point
 332:Src/motor.c   **** 	 */
 333:Src/motor.c   **** 	uint8_t usart_buffer[32];
 1250              		.loc 1 333 2 view .LVU305
 334:Src/motor.c   **** 
 335:Src/motor.c   **** 
 336:Src/motor.c   **** 	motorl_speed = (TIM3->CNT - 0x7FFF);
 1251              		.loc 1 336 2 view .LVU306
 1252              		.loc 1 336 22 is_stmt 0 view .LVU307
 1253 0004 6149     		ldr	r1, .L63
 1254 0006 4B6A     		ldr	r3, [r1, #36]
 1255              		.loc 1 336 28 view .LVU308
 1256 0008 614A     		ldr	r2, .L63+4
 1257 000a 9446     		mov	ip, r2
 1258 000c 6344     		add	r3, r3, ip
 1259 000e 1BB2     		sxth	r3, r3
 1260              		.loc 1 336 15 view .LVU309
 1261 0010 604A     		ldr	r2, .L63+8
 1262 0012 1380     		strh	r3, [r2]
 337:Src/motor.c   **** 	/* sprintf(usart_buffer, "motorl: %d\n", motorl_speed); */
 338:Src/motor.c   **** 	/* USART_SendString(usart_buffer); */
 339:Src/motor.c   **** 	TIM3->CNT = 0x7FFF; // Reset back to center point
 1263              		.loc 1 339 2 is_stmt 1 view .LVU310
 1264              		.loc 1 339 12 is_stmt 0 view .LVU311
 1265 0014 6048     		ldr	r0, .L63+12
 1266 0016 4862     		str	r0, [r1, #36]
 340:Src/motor.c   **** 	motorr_speed = (TIM1->CNT - 0x7FFF);
 1267              		.loc 1 340 2 is_stmt 1 view .LVU312
 1268              		.loc 1 340 22 is_stmt 0 view .LVU313
 1269 0018 6049     		ldr	r1, .L63+16
 1270 001a 4B6A     		ldr	r3, [r1, #36]
ARM GAS  /tmp/cc4bExhD.s 			page 43


 1271              		.loc 1 340 28 view .LVU314
 1272 001c 6344     		add	r3, r3, ip
 1273 001e 1BB2     		sxth	r3, r3
 1274              		.loc 1 340 15 view .LVU315
 1275 0020 5F4C     		ldr	r4, .L63+20
 1276 0022 2380     		strh	r3, [r4]
 341:Src/motor.c   **** 	TIM1->CNT = 0x7FFF; // Reset back to center point
 1277              		.loc 1 341 2 is_stmt 1 view .LVU316
 1278              		.loc 1 341 12 is_stmt 0 view .LVU317
 1279 0024 4862     		str	r0, [r1, #36]
 342:Src/motor.c   **** 
 343:Src/motor.c   **** 	if(abs(motorl_speed)>50){
 1280              		.loc 1 343 2 is_stmt 1 view .LVU318
 1281              		.loc 1 343 5 is_stmt 0 view .LVU319
 1282 0026 1388     		ldrh	r3, [r2]
 1283 0028 1BB2     		sxth	r3, r3
 1284 002a DA17     		asrs	r2, r3, #31
 1285 002c 9B18     		adds	r3, r3, r2
 1286 002e 5340     		eors	r3, r2
 1287 0030 9BB2     		uxth	r3, r3
 1288              		.loc 1 343 4 view .LVU320
 1289 0032 322B     		cmp	r3, #50
 1290 0034 36D9     		bls	.L53
 1291              	.LBB12:
 344:Src/motor.c   **** 		float ratio = ((float) abs(motorl_speed))/ ((float) abs(motorr_speed));
 1292              		.loc 1 344 3 is_stmt 1 view .LVU321
 1293              		.loc 1 344 26 is_stmt 0 view .LVU322
 1294 0036 574B     		ldr	r3, .L63+8
 1295 0038 1888     		ldrh	r0, [r3]
 1296 003a 00B2     		sxth	r0, r0
 1297 003c C317     		asrs	r3, r0, #31
 1298 003e C018     		adds	r0, r0, r3
 1299 0040 5840     		eors	r0, r3
 1300 0042 80B2     		uxth	r0, r0
 1301              		.loc 1 344 18 view .LVU323
 1302 0044 FFF7FEFF 		bl	__aeabi_i2f
 1303              	.LVL88:
 1304 0048 041C     		adds	r4, r0, #0
 1305              		.loc 1 344 55 view .LVU324
 1306 004a 554B     		ldr	r3, .L63+20
 1307 004c 1B88     		ldrh	r3, [r3]
 1308 004e 1BB2     		sxth	r3, r3
 1309 0050 DA17     		asrs	r2, r3, #31
 1310 0052 9B18     		adds	r3, r3, r2
 1311 0054 5340     		eors	r3, r2
 1312 0056 98B2     		uxth	r0, r3
 1313              		.loc 1 344 47 view .LVU325
 1314 0058 FFF7FEFF 		bl	__aeabi_i2f
 1315              	.LVL89:
 1316 005c 011C     		adds	r1, r0, #0
 1317              		.loc 1 344 9 view .LVU326
 1318 005e 201C     		adds	r0, r4, #0
 1319 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1320              	.LVL90:
 1321 0064 041C     		adds	r4, r0, #0
 1322              	.LVL91:
 345:Src/motor.c   **** 		pwm_right = min((int)(pwm_right * ratio), 100);
ARM GAS  /tmp/cc4bExhD.s 			page 44


 1323              		.loc 1 345 3 is_stmt 1 view .LVU327
 1324              		.loc 1 345 15 is_stmt 0 view .LVU328
 1325 0066 4F4B     		ldr	r3, .L63+24
 1326 0068 1878     		ldrb	r0, [r3]
 1327              	.LVL92:
 1328              		.loc 1 345 15 view .LVU329
 1329 006a C0B2     		uxtb	r0, r0
 1330 006c FFF7FEFF 		bl	__aeabi_i2f
 1331              	.LVL93:
 1332 0070 211C     		adds	r1, r4, #0
 1333 0072 FFF7FEFF 		bl	__aeabi_fmul
 1334              	.LVL94:
 1335 0076 FFF7FEFF 		bl	__aeabi_f2iz
 1336              	.LVL95:
 1337              		.loc 1 345 13 view .LVU330
 1338 007a 6428     		cmp	r0, #100
 1339 007c 0BDC     		bgt	.L59
 1340              		.loc 1 345 15 discriminator 1 view .LVU331
 1341 007e 494B     		ldr	r3, .L63+24
 1342 0080 1878     		ldrb	r0, [r3]
 1343 0082 C0B2     		uxtb	r0, r0
 1344 0084 FFF7FEFF 		bl	__aeabi_i2f
 1345              	.LVL96:
 1346 0088 211C     		adds	r1, r4, #0
 1347 008a FFF7FEFF 		bl	__aeabi_fmul
 1348              	.LVL97:
 1349 008e FFF7FEFF 		bl	__aeabi_f2iz
 1350              	.LVL98:
 1351              		.loc 1 345 13 discriminator 1 view .LVU332
 1352 0092 C0B2     		uxtb	r0, r0
 1353 0094 00E0     		b	.L54
 1354              	.L59:
 1355              		.loc 1 345 13 view .LVU333
 1356 0096 6420     		movs	r0, #100
 1357              	.L54:
 1358              		.loc 1 345 13 discriminator 4 view .LVU334
 1359 0098 424B     		ldr	r3, .L63+24
 1360 009a 1870     		strb	r0, [r3]
 346:Src/motor.c   **** 		pwm_setDutyCycleR(pwm_right);
 1361              		.loc 1 346 3 is_stmt 1 discriminator 4 view .LVU335
 1362 009c 1878     		ldrb	r0, [r3]
 1363 009e C0B2     		uxtb	r0, r0
 1364 00a0 FFF7FEFF 		bl	pwm_setDutyCycleR
 1365              	.LVL99:
 1366              	.L53:
 1367              		.loc 1 346 3 is_stmt 0 discriminator 4 view .LVU336
 1368              	.LBE12:
 347:Src/motor.c   **** #if PRINT_DEBUG
 348:Src/motor.c   **** 		sprintf(usart_buffer, "pwm_right: %d\n", pwm_right);
 349:Src/motor.c   **** 		USART_SendString(usart_buffer);
 350:Src/motor.c   **** 		sprintf(usart_buffer, "motorr: %d\n", motorr_speed);
 351:Src/motor.c   **** 		USART_SendString(usart_buffer);
 352:Src/motor.c   **** #endif
 353:Src/motor.c   **** 	}
 354:Src/motor.c   **** 
 355:Src/motor.c   **** 	if(target_dist > 0){
 1369              		.loc 1 355 2 is_stmt 1 view .LVU337
ARM GAS  /tmp/cc4bExhD.s 			page 45


 1370              		.loc 1 355 17 is_stmt 0 view .LVU338
 1371 00a4 404B     		ldr	r3, .L63+28
 1372 00a6 1B78     		ldrb	r3, [r3]
 1373              		.loc 1 355 4 view .LVU339
 1374 00a8 002B     		cmp	r3, #0
 1375 00aa 1ED0     		beq	.L55
 1376              	.LBB13:
 356:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/132;
 1377              		.loc 1 356 3 is_stmt 1 view .LVU340
 1378              		.loc 1 356 26 is_stmt 0 view .LVU341
 1379 00ac 394B     		ldr	r3, .L63+8
 1380 00ae 1888     		ldrh	r0, [r3]
 1381 00b0 00B2     		sxth	r0, r0
 1382 00b2 C317     		asrs	r3, r0, #31
 1383 00b4 C018     		adds	r0, r0, r3
 1384 00b6 5840     		eors	r0, r3
 1385 00b8 80B2     		uxth	r0, r0
 1386              		.loc 1 356 19 view .LVU342
 1387 00ba FFF7FEFF 		bl	__aeabi_i2f
 1388              	.LVL100:
 1389              		.loc 1 356 43 view .LVU343
 1390 00be 3B49     		ldr	r1, .L63+32
 1391 00c0 FFF7FEFF 		bl	__aeabi_fdiv
 1392              	.LVL101:
 1393 00c4 011C     		adds	r1, r0, #0
 1394              		.loc 1 356 16 view .LVU344
 1395 00c6 3A4C     		ldr	r4, .L63+36
 1396 00c8 2068     		ldr	r0, [r4]
 1397 00ca FFF7FEFF 		bl	__aeabi_fadd
 1398              	.LVL102:
 1399 00ce 2060     		str	r0, [r4]
 357:Src/motor.c   **** #if PRINT_DEBUG
 358:Src/motor.c   **** 		sprintf(usart_buffer, "current_dist: %d\n", (int)current_dist);
 359:Src/motor.c   **** 		USART_SendString(usart_buffer);
 360:Src/motor.c   **** #endif
 361:Src/motor.c   **** 		uint8_t obj = 0;
 1400              		.loc 1 361 3 is_stmt 1 view .LVU345
 1401              	.LVL103:
 362:Src/motor.c   **** 		if (((uint8_t)current_dist >= target_dist) || (!turning && (obj = ObjectDetected()))){
 1402              		.loc 1 362 3 view .LVU346
 1403              		.loc 1 362 8 is_stmt 0 view .LVU347
 1404 00d0 2068     		ldr	r0, [r4]
 1405 00d2 FFF7FEFF 		bl	__aeabi_f2uiz
 1406              	.LVL104:
 1407 00d6 C0B2     		uxtb	r0, r0
 1408              		.loc 1 362 30 view .LVU348
 1409 00d8 334B     		ldr	r3, .L63+28
 1410 00da 1B78     		ldrb	r3, [r3]
 1411 00dc DBB2     		uxtb	r3, r3
 1412              		.loc 1 362 6 view .LVU349
 1413 00de 9842     		cmp	r0, r3
 1414 00e0 0AD2     		bcs	.L60
 1415              		.loc 1 362 50 discriminator 1 view .LVU350
 1416 00e2 344B     		ldr	r3, .L63+40
 1417 00e4 1B78     		ldrb	r3, [r3]
 1418              		.loc 1 362 46 discriminator 1 view .LVU351
 1419 00e6 002B     		cmp	r3, #0
ARM GAS  /tmp/cc4bExhD.s 			page 46


 1420 00e8 2AD0     		beq	.L61
 1421              	.LVL105:
 1422              	.L55:
 1423              		.loc 1 362 46 discriminator 1 view .LVU352
 1424              	.LBE13:
 363:Src/motor.c   **** 			if(obj)
 364:Src/motor.c   **** 				USART_SendString("Object detected\n");
 365:Src/motor.c   **** 			else
 366:Src/motor.c   **** 				USART_SendString("Hit distance target\n");
 367:Src/motor.c   **** 			motors_Off();
 368:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 369:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 370:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 371:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 372:Src/motor.c   **** 			pwm_right = 0;
 373:Src/motor.c   **** 			if(!turning){
 374:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 375:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 376:Src/motor.c   **** 				USART_SendString(usart_buffer);
 377:Src/motor.c   **** 			}
 378:Src/motor.c   **** 			target_dist = 0;
 379:Src/motor.c   **** 			current_dist = 0;
 380:Src/motor.c   **** 		}
 381:Src/motor.c   **** 	}
 382:Src/motor.c   **** 
 383:Src/motor.c   **** 	// Call the PI update function
 384:Src/motor.c   **** 	TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 1425              		.loc 1 384 2 is_stmt 1 view .LVU353
 1426              		.loc 1 384 6 is_stmt 0 view .LVU354
 1427 00ea 334A     		ldr	r2, .L63+44
 1428 00ec 1369     		ldr	r3, [r2, #16]
 1429              		.loc 1 384 11 view .LVU355
 1430 00ee 0121     		movs	r1, #1
 1431 00f0 8B43     		bics	r3, r1
 1432 00f2 1361     		str	r3, [r2, #16]
 385:Src/motor.c   **** }
 1433              		.loc 1 385 1 view .LVU356
 1434 00f4 09B0     		add	sp, sp, #36
 1435              		@ sp needed
 1436 00f6 30BD     		pop	{r4, r5, pc}
 1437              	.LVL106:
 1438              	.L60:
 1439              	.LBB14:
 363:Src/motor.c   **** 			if(obj)
 1440              		.loc 1 363 4 is_stmt 1 view .LVU357
 366:Src/motor.c   **** 			motors_Off();
 1441              		.loc 1 366 5 view .LVU358
 1442 00f8 3048     		ldr	r0, .L63+48
 1443 00fa FFF7FEFF 		bl	USART_SendString
 1444              	.LVL107:
 1445              	.L57:
 367:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 1446              		.loc 1 367 4 view .LVU359
 1447 00fe FFF7FEFF 		bl	motors_Off
 1448              	.LVL108:
 368:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1449              		.loc 1 368 4 view .LVU360
ARM GAS  /tmp/cc4bExhD.s 			page 47


 368:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1450              		.loc 1 368 24 is_stmt 0 view .LVU361
 1451 0102 224A     		ldr	r2, .L63
 1452 0104 536A     		ldr	r3, [r2, #36]
 368:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1453              		.loc 1 368 30 view .LVU362
 1454 0106 2249     		ldr	r1, .L63+4
 1455 0108 8C46     		mov	ip, r1
 1456 010a 6344     		add	r3, r3, ip
 1457 010c 1BB2     		sxth	r3, r3
 368:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1458              		.loc 1 368 17 view .LVU363
 1459 010e 2149     		ldr	r1, .L63+8
 1460 0110 0B80     		strh	r3, [r1]
 369:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1461              		.loc 1 369 4 is_stmt 1 view .LVU364
 369:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1462              		.loc 1 369 14 is_stmt 0 view .LVU365
 1463 0112 2149     		ldr	r1, .L63+12
 1464 0114 5162     		str	r1, [r2, #36]
 370:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1465              		.loc 1 370 4 is_stmt 1 view .LVU366
 370:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1466              		.loc 1 370 24 is_stmt 0 view .LVU367
 1467 0116 214A     		ldr	r2, .L63+16
 1468 0118 536A     		ldr	r3, [r2, #36]
 370:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1469              		.loc 1 370 30 view .LVU368
 1470 011a 6344     		add	r3, r3, ip
 1471 011c 1BB2     		sxth	r3, r3
 370:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1472              		.loc 1 370 17 view .LVU369
 1473 011e 2048     		ldr	r0, .L63+20
 1474 0120 0380     		strh	r3, [r0]
 371:Src/motor.c   **** 			pwm_right = 0;
 1475              		.loc 1 371 4 is_stmt 1 view .LVU370
 371:Src/motor.c   **** 			pwm_right = 0;
 1476              		.loc 1 371 14 is_stmt 0 view .LVU371
 1477 0122 5162     		str	r1, [r2, #36]
 372:Src/motor.c   **** 			if(!turning){
 1478              		.loc 1 372 4 is_stmt 1 view .LVU372
 372:Src/motor.c   **** 			if(!turning){
 1479              		.loc 1 372 14 is_stmt 0 view .LVU373
 1480 0124 1F4B     		ldr	r3, .L63+24
 1481 0126 0022     		movs	r2, #0
 1482 0128 1A70     		strb	r2, [r3]
 373:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1483              		.loc 1 373 4 is_stmt 1 view .LVU374
 373:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1484              		.loc 1 373 7 is_stmt 0 view .LVU375
 1485 012a 224B     		ldr	r3, .L63+40
 1486 012c 1B78     		ldrb	r3, [r3]
 373:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1487              		.loc 1 373 6 view .LVU376
 1488 012e 002B     		cmp	r3, #0
 1489 0130 0ED0     		beq	.L62
 1490              	.L58:
ARM GAS  /tmp/cc4bExhD.s 			page 48


 378:Src/motor.c   **** 			current_dist = 0;
 1491              		.loc 1 378 4 is_stmt 1 view .LVU377
 378:Src/motor.c   **** 			current_dist = 0;
 1492              		.loc 1 378 16 is_stmt 0 view .LVU378
 1493 0132 1D4B     		ldr	r3, .L63+28
 1494 0134 0022     		movs	r2, #0
 1495 0136 1A70     		strb	r2, [r3]
 379:Src/motor.c   **** 		}
 1496              		.loc 1 379 4 is_stmt 1 view .LVU379
 379:Src/motor.c   **** 		}
 1497              		.loc 1 379 17 is_stmt 0 view .LVU380
 1498 0138 1D4B     		ldr	r3, .L63+36
 1499 013a 0022     		movs	r2, #0
 1500 013c 1A60     		str	r2, [r3]
 1501 013e D4E7     		b	.L55
 1502              	.LVL109:
 1503              	.L61:
 362:Src/motor.c   **** 			if(obj)
 1504              		.loc 1 362 69 discriminator 2 view .LVU381
 1505 0140 FFF7FEFF 		bl	ObjectDetected
 1506              	.LVL110:
 362:Src/motor.c   **** 			if(obj)
 1507              		.loc 1 362 59 discriminator 2 view .LVU382
 1508 0144 0028     		cmp	r0, #0
 1509 0146 D0D0     		beq	.L55
 363:Src/motor.c   **** 				USART_SendString("Object detected\n");
 1510              		.loc 1 363 4 is_stmt 1 view .LVU383
 364:Src/motor.c   **** 			else
 1511              		.loc 1 364 5 view .LVU384
 1512 0148 1D48     		ldr	r0, .L63+52
 1513              	.LVL111:
 364:Src/motor.c   **** 			else
 1514              		.loc 1 364 5 is_stmt 0 view .LVU385
 1515 014a FFF7FEFF 		bl	USART_SendString
 1516              	.LVL112:
 1517 014e D6E7     		b	.L57
 1518              	.LVL113:
 1519              	.L62:
 374:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1520              		.loc 1 374 5 is_stmt 1 view .LVU386
 374:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1521              		.loc 1 374 44 is_stmt 0 view .LVU387
 1522 0150 1C4C     		ldr	r4, .L63+56
 1523 0152 2068     		ldr	r0, [r4]
 1524 0154 FFF7FEFF 		bl	__aeabi_f2d
 1525              	.LVL114:
 1526 0158 FFF7FEFF 		bl	cos
 1527              	.LVL115:
 374:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1528              		.loc 1 374 37 view .LVU388
 1529 015c FFF7FEFF 		bl	__aeabi_d2f
 1530              	.LVL116:
 374:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1531              		.loc 1 374 35 view .LVU389
 1532 0160 134B     		ldr	r3, .L63+36
 1533 0162 1968     		ldr	r1, [r3]
 1534 0164 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/cc4bExhD.s 			page 49


 1535              	.LVL117:
 1536 0168 011C     		adds	r1, r0, #0
 374:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1537              		.loc 1 374 19 view .LVU390
 1538 016a 174D     		ldr	r5, .L63+60
 1539 016c 2868     		ldr	r0, [r5]
 1540 016e FFF7FEFF 		bl	__aeabi_fadd
 1541              	.LVL118:
 1542 0172 2860     		str	r0, [r5]
 375:Src/motor.c   **** 				USART_SendString(usart_buffer);
 1543              		.loc 1 375 5 is_stmt 1 view .LVU391
 1544 0174 2068     		ldr	r0, [r4]
 1545 0176 FFF7FEFF 		bl	__aeabi_f2iz
 1546              	.LVL119:
 1547 017a 0200     		movs	r2, r0
 1548 017c 1349     		ldr	r1, .L63+64
 1549 017e 6846     		mov	r0, sp
 1550 0180 FFF7FEFF 		bl	sprintf
 1551              	.LVL120:
 376:Src/motor.c   **** 			}
 1552              		.loc 1 376 5 view .LVU392
 1553 0184 6846     		mov	r0, sp
 1554 0186 FFF7FEFF 		bl	USART_SendString
 1555              	.LVL121:
 1556 018a D2E7     		b	.L58
 1557              	.L64:
 1558              		.align	2
 1559              	.L63:
 1560 018c 00040040 		.word	1073742848
 1561 0190 0180FFFF 		.word	-32767
 1562 0194 00000000 		.word	motorl_speed
 1563 0198 FF7F0000 		.word	32767
 1564 019c 002C0140 		.word	1073818624
 1565 01a0 00000000 		.word	motorr_speed
 1566 01a4 00000000 		.word	pwm_right
 1567 01a8 00000000 		.word	target_dist
 1568 01ac 00000443 		.word	1124335616
 1569 01b0 00000000 		.word	current_dist
 1570 01b4 00000000 		.word	turning
 1571 01b8 00100040 		.word	1073745920
 1572 01bc 00000000 		.word	.LC34
 1573 01c0 18000000 		.word	.LC37
 1574 01c4 00000000 		.word	heading
 1575 01c8 00000000 		.word	absolute_dist
 1576 01cc 2C000000 		.word	.LC41
 1577              	.LBE14:
 1578              		.cfi_endproc
 1579              	.LFE56:
 1581              		.section	.text.get_distance,"ax",%progbits
 1582              		.align	1
 1583              		.global	get_distance
 1584              		.syntax unified
 1585              		.code	16
 1586              		.thumb_func
 1588              	get_distance:
 1589              	.LFB57:
 386:Src/motor.c   **** 
ARM GAS  /tmp/cc4bExhD.s 			page 50


 387:Src/motor.c   **** float get_distance(void){
 1590              		.loc 1 387 25 view -0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 388:Src/motor.c   **** 	return absolute_dist;
 1595              		.loc 1 388 2 view .LVU394
 1596              		.loc 1 388 9 is_stmt 0 view .LVU395
 1597 0000 014B     		ldr	r3, .L66
 1598 0002 1868     		ldr	r0, [r3]
 389:Src/motor.c   **** }
 1599              		.loc 1 389 1 view .LVU396
 1600              		@ sp needed
 1601 0004 7047     		bx	lr
 1602              	.L67:
 1603 0006 C046     		.align	2
 1604              	.L66:
 1605 0008 00000000 		.word	absolute_dist
 1606              		.cfi_endproc
 1607              	.LFE57:
 1609              		.global	__aeabi_d2iz
 1610              		.global	__aeabi_idivmod
 1611              		.section	.text.get_heading,"ax",%progbits
 1612              		.align	1
 1613              		.global	get_heading
 1614              		.syntax unified
 1615              		.code	16
 1616              		.thumb_func
 1618              	get_heading:
 1619              	.LFB58:
 390:Src/motor.c   **** 
 391:Src/motor.c   **** int32_t get_heading(){
 1620              		.loc 1 391 22 is_stmt 1 view -0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624 0000 10B5     		push	{r4, lr}
 1625              	.LCFI15:
 1626              		.cfi_def_cfa_offset 8
 1627              		.cfi_offset 4, -8
 1628              		.cfi_offset 14, -4
 392:Src/motor.c   **** 	return (int32_t)(heading * 57.3) % 360;
 1629              		.loc 1 392 2 view .LVU398
 1630              		.loc 1 392 27 is_stmt 0 view .LVU399
 1631 0002 084B     		ldr	r3, .L69
 1632 0004 1868     		ldr	r0, [r3]
 1633 0006 FFF7FEFF 		bl	__aeabi_f2d
 1634              	.LVL122:
 1635 000a 074A     		ldr	r2, .L69+4
 1636 000c 074B     		ldr	r3, .L69+8
 1637 000e FFF7FEFF 		bl	__aeabi_dmul
 1638              	.LVL123:
 1639              		.loc 1 392 9 view .LVU400
 1640 0012 FFF7FEFF 		bl	__aeabi_d2iz
 1641              	.LVL124:
 1642              		.loc 1 392 35 view .LVU401
ARM GAS  /tmp/cc4bExhD.s 			page 51


 1643 0016 B421     		movs	r1, #180
 1644 0018 4900     		lsls	r1, r1, #1
 1645 001a FFF7FEFF 		bl	__aeabi_idivmod
 1646              	.LVL125:
 1647 001e 0800     		movs	r0, r1
 393:Src/motor.c   **** }
 1648              		.loc 1 393 1 view .LVU402
 1649              		@ sp needed
 1650 0020 10BD     		pop	{r4, pc}
 1651              	.L70:
 1652 0022 C046     		.align	2
 1653              	.L69:
 1654 0024 00000000 		.word	heading
 1655 0028 66666666 		.word	1717986918
 1656 002c 66A64C40 		.word	1078765158
 1657              		.cfi_endproc
 1658              	.LFE58:
 1660              		.section	.bss.stopping,"aw",%nobits
 1663              	stopping:
 1664 0000 00       		.space	1
 1665              		.global	pwm_left
 1666              		.section	.data.pwm_left,"aw"
 1669              	pwm_left:
 1670 0000 64       		.byte	100
 1671              		.global	pwm_right
 1672              		.section	.data.pwm_right,"aw"
 1675              	pwm_right:
 1676 0000 64       		.byte	100
 1677              		.global	turning
 1678              		.section	.bss.turning,"aw",%nobits
 1681              	turning:
 1682 0000 00       		.space	1
 1683              		.global	heading
 1684              		.section	.bss.heading,"aw",%nobits
 1685              		.align	2
 1688              	heading:
 1689 0000 00000000 		.space	4
 1690              		.global	absolute_dist
 1691              		.section	.bss.absolute_dist,"aw",%nobits
 1692              		.align	2
 1695              	absolute_dist:
 1696 0000 00000000 		.space	4
 1697              		.global	current_dist
 1698              		.section	.bss.current_dist,"aw",%nobits
 1699              		.align	2
 1702              	current_dist:
 1703 0000 00000000 		.space	4
 1704              		.global	target_dist
 1705              		.section	.bss.target_dist,"aw",%nobits
 1708              	target_dist:
 1709 0000 00       		.space	1
 1710              		.global	motorr_speed
 1711              		.section	.bss.motorr_speed,"aw",%nobits
 1712              		.align	1
 1715              	motorr_speed:
 1716 0000 0000     		.space	2
 1717              		.global	motorl_speed
ARM GAS  /tmp/cc4bExhD.s 			page 52


 1718              		.section	.bss.motorl_speed,"aw",%nobits
 1719              		.align	1
 1722              	motorl_speed:
 1723 0000 0000     		.space	2
 1724              		.text
 1725              	.Letext0:
 1726              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1727              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1728              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1729              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1730              		.file 7 "Inc/pins.h"
 1731              		.file 8 "Inc/motor.h"
 1732              		.file 9 "/usr/arm-none-eabi/include/stdio.h"
 1733              		.file 10 "Inc/main.h"
 1734              		.file 11 "/usr/arm-none-eabi/include/math.h"
ARM GAS  /tmp/cc4bExhD.s 			page 53


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/cc4bExhD.s:19     .text.pwm_init:00000000 $t
     /tmp/cc4bExhD.s:25     .text.pwm_init:00000000 pwm_init
     /tmp/cc4bExhD.s:172    .text.pwm_init:00000094 $d
     /tmp/cc4bExhD.s:181    .text.pwm_setDutyCycleL:00000000 $t
     /tmp/cc4bExhD.s:187    .text.pwm_setDutyCycleL:00000000 pwm_setDutyCycleL
     /tmp/cc4bExhD.s:224    .text.pwm_setDutyCycleL:00000018 $d
     /tmp/cc4bExhD.s:229    .text.pwm_setDutyCycleR:00000000 $t
     /tmp/cc4bExhD.s:235    .text.pwm_setDutyCycleR:00000000 pwm_setDutyCycleR
     /tmp/cc4bExhD.s:274    .text.set_Motor_Direction:00000000 $t
     /tmp/cc4bExhD.s:280    .text.set_Motor_Direction:00000000 set_Motor_Direction
     /tmp/cc4bExhD.s:352    .text.set_Forward:00000000 $t
     /tmp/cc4bExhD.s:358    .text.set_Forward:00000000 set_Forward
     /tmp/cc4bExhD.s:397    .text.set_Forward:00000028 $d
     /tmp/cc4bExhD.s:1675   .data.pwm_right:00000000 pwm_right
     /tmp/cc4bExhD.s:1669   .data.pwm_left:00000000 pwm_left
     /tmp/cc4bExhD.s:405    .text.set_Backward:00000000 $t
     /tmp/cc4bExhD.s:411    .text.set_Backward:00000000 set_Backward
     /tmp/cc4bExhD.s:450    .text.set_Backward:00000028 $d
     /tmp/cc4bExhD.s:458    .text.set_Right:00000000 $t
     /tmp/cc4bExhD.s:464    .text.set_Right:00000000 set_Right
     /tmp/cc4bExhD.s:503    .text.set_Right:00000028 $d
     /tmp/cc4bExhD.s:511    .text.set_Left:00000000 $t
     /tmp/cc4bExhD.s:517    .text.set_Left:00000000 set_Left
     /tmp/cc4bExhD.s:556    .text.set_Left:00000028 $d
     /tmp/cc4bExhD.s:564    .text.motors_Off:00000000 $t
     /tmp/cc4bExhD.s:570    .text.motors_Off:00000000 motors_Off
     /tmp/cc4bExhD.s:596    .rodata.MoveMotors.str1.4:00000000 $d
     /tmp/cc4bExhD.s:611    .text.MoveMotors:00000000 $t
     /tmp/cc4bExhD.s:617    .text.MoveMotors:00000000 MoveMotors
     /tmp/cc4bExhD.s:855    .text.MoveMotors:0000010c $d
     /tmp/cc4bExhD.s:1663   .bss.stopping:00000000 stopping
     /tmp/cc4bExhD.s:1681   .bss.turning:00000000 turning
     /tmp/cc4bExhD.s:1708   .bss.target_dist:00000000 target_dist
     /tmp/cc4bExhD.s:1688   .bss.heading:00000000 heading
     /tmp/cc4bExhD.s:869    .text.encoder_init:00000000 $t
     /tmp/cc4bExhD.s:875    .text.encoder_init:00000000 encoder_init
     /tmp/cc4bExhD.s:1064   .text.encoder_init:000000a4 $d
     /tmp/cc4bExhD.s:1077   .text.motor_init:00000000 $t
     /tmp/cc4bExhD.s:1083   .text.motor_init:00000000 motor_init
     /tmp/cc4bExhD.s:1107   .text.ObjectDetected:00000000 $t
     /tmp/cc4bExhD.s:1113   .text.ObjectDetected:00000000 ObjectDetected
     /tmp/cc4bExhD.s:1207   .text.ObjectDetected:0000003c $d
     /tmp/cc4bExhD.s:1219   .rodata.TIM6_DAC_IRQHandler.str1.4:00000000 $d
     /tmp/cc4bExhD.s:1229   .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/cc4bExhD.s:1235   .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/cc4bExhD.s:1560   .text.TIM6_DAC_IRQHandler:0000018c $d
     /tmp/cc4bExhD.s:1722   .bss.motorl_speed:00000000 motorl_speed
     /tmp/cc4bExhD.s:1715   .bss.motorr_speed:00000000 motorr_speed
     /tmp/cc4bExhD.s:1702   .bss.current_dist:00000000 current_dist
     /tmp/cc4bExhD.s:1695   .bss.absolute_dist:00000000 absolute_dist
     /tmp/cc4bExhD.s:1582   .text.get_distance:00000000 $t
     /tmp/cc4bExhD.s:1588   .text.get_distance:00000000 get_distance
     /tmp/cc4bExhD.s:1605   .text.get_distance:00000008 $d
     /tmp/cc4bExhD.s:1612   .text.get_heading:00000000 $t
     /tmp/cc4bExhD.s:1618   .text.get_heading:00000000 get_heading
ARM GAS  /tmp/cc4bExhD.s 			page 54


     /tmp/cc4bExhD.s:1654   .text.get_heading:00000024 $d
     /tmp/cc4bExhD.s:1664   .bss.stopping:00000000 $d
     /tmp/cc4bExhD.s:1682   .bss.turning:00000000 $d
     /tmp/cc4bExhD.s:1685   .bss.heading:00000000 $d
     /tmp/cc4bExhD.s:1692   .bss.absolute_dist:00000000 $d
     /tmp/cc4bExhD.s:1699   .bss.current_dist:00000000 $d
     /tmp/cc4bExhD.s:1709   .bss.target_dist:00000000 $d
     /tmp/cc4bExhD.s:1712   .bss.motorr_speed:00000000 $d
     /tmp/cc4bExhD.s:1719   .bss.motorl_speed:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
motor_left_pins
motor_right_pins
__aeabi_uidiv
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_dmul
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_dsub
GetUltrasonic
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_i2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2iz
__aeabi_fadd
__aeabi_f2uiz
USART_SendString
cos
sprintf
__aeabi_d2iz
__aeabi_idivmod
