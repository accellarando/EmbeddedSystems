ARM GAS  /tmp/ccrUhjPV.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** 
   7:Src/motor.c   **** volatile int16_t error_integral = 0;    // Integrated error signal
   8:Src/motor.c   **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
   9:Src/motor.c   **** volatile int16_t target_rpm = 0;    	// Desired speed target
  10:Src/motor.c   **** volatile int16_t motorl_speed = 0;   	// Measured left motor speed
  11:Src/motor.c   **** volatile int16_t motorr_speed = 0;   	// Measured left motor speed
  12:Src/motor.c   **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  13:Src/motor.c   **** volatile int16_t error = 0;         	// Speed error signal
  14:Src/motor.c   **** volatile uint8_t Kp = 1;            	// Proportional gain
  15:Src/motor.c   **** volatile uint8_t Ki = 1;            	// Integral gain
  16:Src/motor.c   **** 
  17:Src/motor.c   **** // Sets up the entire motor drive system
  18:Src/motor.c   **** void motor_init(void) {
  19:Src/motor.c   ****     pwm_init();
  20:Src/motor.c   ****     encoder_init();
  21:Src/motor.c   ****     ADC_init();
  22:Src/motor.c   **** }
  23:Src/motor.c   **** 
  24:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  25:Src/motor.c   **** void pwm_init(void) {
  27              		.loc 1 25 21 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccrUhjPV.s 			page 2


  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  26:Src/motor.c   **** 	//RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  27:Src/motor.c   **** 	
  28:Src/motor.c   ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  29:Src/motor.c   **** 	/*
  30:Src/motor.c   ****     GPIOA->MODER |= (1 << 9);
  31:Src/motor.c   ****     GPIOA->MODER &= ~(1 << 8);
  32:Src/motor.c   **** 	
  33:Src/motor.c   **** 	  // Set up pin PB3 for H-bridge PWM output (TIMER 2 CH2)
  34:Src/motor.c   ****     GPIOB->MODER |= (1 << 7);
  35:Src/motor.c   ****     GPIOB->MODER &= ~(1 << 6);
  36:Src/motor.c   **** 
  37:Src/motor.c   ****     // Set PA4 to AF4,
  38:Src/motor.c   ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  39:Src/motor.c   ****     GPIOA->AFR[0] |= (1 << 18);
  40:Src/motor.c   **** 	
  41:Src/motor.c   **** 		// Set PB3 to AF2,
  42:Src/motor.c   ****     GPIOB->AFR[0] &= 0xFFFF0FFF; // clear PB3 bits,
  43:Src/motor.c   ****     GPIOB->AFR[0] |= (1 << 13);
  44:Src/motor.c   **** 
  45:Src/motor.c   ****     // Set up a PA5, PA8 as GPIO output pins for motor direction control
  46:Src/motor.c   ****     GPIOA->MODER &= 0xFFFCF3FF; // clear PA5, PA6 bits,
  47:Src/motor.c   ****     GPIOA->MODER |= (1 << 10) | (1 << 16);
  48:Src/motor.c   **** 	
  49:Src/motor.c   **** 		// Set up a PB2, PB10 as GPIO output pins for motor direction control
  50:Src/motor.c   ****     GPIOB->MODER &= 0xFFCFFFCF; // clear PB2, PB10 bits,
  51:Src/motor.c   ****     GPIOB->MODER |= (1 << 4) | (1 << 20);
  52:Src/motor.c   **** 	*/
  53:Src/motor.c   ****    
  54:Src/motor.c   ****     //Initialize one direction pin to high, the other low
  55:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_a.gpio, motor_left_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  38              		.loc 1 55 2 view .LVU1
  39              		.loc 1 55 73 is_stmt 0 view .LVU2
  40 0002 244C     		ldr	r4, .L2
  41              		.loc 1 55 2 view .LVU3
  42 0004 A18B     		ldrh	r1, [r4, #28]
  43 0006 A069     		ldr	r0, [r4, #24]
  44 0008 0122     		movs	r2, #1
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL0:
  56:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_b.gpio, motor_left_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  47              		.loc 1 56 2 is_stmt 1 view .LVU4
  48 000e A18E     		ldrh	r1, [r4, #52]
  49 0010 206B     		ldr	r0, [r4, #48]
  50 0012 0022     		movs	r2, #0
  51 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  52              	.LVL1:
  57:Src/motor.c   **** 
  58:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_a.gpio, motor_right_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  53              		.loc 1 58 2 view .LVU5
  54              		.loc 1 58 75 is_stmt 0 view .LVU6
  55 0018 1F4C     		ldr	r4, .L2+4
  56              		.loc 1 58 2 view .LVU7
  57 001a A18B     		ldrh	r1, [r4, #28]
ARM GAS  /tmp/ccrUhjPV.s 			page 3


  58 001c A069     		ldr	r0, [r4, #24]
  59 001e 0122     		movs	r2, #1
  60 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL2:
  59:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_b.gpio, motor_right_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  62              		.loc 1 59 2 is_stmt 1 view .LVU8
  63 0024 A18E     		ldrh	r1, [r4, #52]
  64 0026 206B     		ldr	r0, [r4, #48]
  65 0028 0022     		movs	r2, #0
  66 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL3:
  60:Src/motor.c   **** 
  61:Src/motor.c   ****     // Set up PWM timer
  62:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
  68              		.loc 1 62 5 view .LVU9
  69              		.loc 1 62 8 is_stmt 0 view .LVU10
  70 002e 1B4B     		ldr	r3, .L2+8
  71 0030 D969     		ldr	r1, [r3, #28]
  72              		.loc 1 62 18 view .LVU11
  73 0032 8022     		movs	r2, #128
  74 0034 5200     		lsls	r2, r2, #1
  75 0036 0A43     		orrs	r2, r1
  76 0038 DA61     		str	r2, [r3, #28]
  63:Src/motor.c   ****     TIM14->CR1 = 0;                         // Clear control registers
  77              		.loc 1 63 5 is_stmt 1 view .LVU12
  78              		.loc 1 63 16 is_stmt 0 view .LVU13
  79 003a 194A     		ldr	r2, .L2+12
  80 003c 0021     		movs	r1, #0
  81 003e 1160     		str	r1, [r2]
  64:Src/motor.c   ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
  82              		.loc 1 64 5 is_stmt 1 view .LVU14
  83              		.loc 1 64 18 is_stmt 0 view .LVU15
  84 0040 9161     		str	r1, [r2, #24]
  65:Src/motor.c   ****     TIM14->CCER = 0;
  85              		.loc 1 65 5 is_stmt 1 view .LVU16
  86              		.loc 1 65 17 is_stmt 0 view .LVU17
  87 0042 1162     		str	r1, [r2, #32]
  66:Src/motor.c   **** 		
  67:Src/motor.c   **** 		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  88              		.loc 1 67 3 is_stmt 1 view .LVU18
  89              		.loc 1 67 6 is_stmt 0 view .LVU19
  90 0044 DC69     		ldr	r4, [r3, #28]
  91              		.loc 1 67 16 view .LVU20
  92 0046 0120     		movs	r0, #1
  93 0048 0443     		orrs	r4, r0
  94 004a DC61     		str	r4, [r3, #28]
  68:Src/motor.c   ****     TIM2->CR1 = 0;                         // Clear control registers
  95              		.loc 1 68 5 is_stmt 1 view .LVU21
  96              		.loc 1 68 15 is_stmt 0 view .LVU22
  97 004c 8023     		movs	r3, #128
  98 004e DB05     		lsls	r3, r3, #23
  99 0050 1960     		str	r1, [r3]
  69:Src/motor.c   ****     TIM2->CCMR1 = 0;                       // (prevents having to manually clear bits)
 100              		.loc 1 69 5 is_stmt 1 view .LVU23
 101              		.loc 1 69 17 is_stmt 0 view .LVU24
 102 0052 9961     		str	r1, [r3, #24]
  70:Src/motor.c   ****     TIM2->CCER = 0;
ARM GAS  /tmp/ccrUhjPV.s 			page 4


 103              		.loc 1 70 5 is_stmt 1 view .LVU25
 104              		.loc 1 70 16 is_stmt 0 view .LVU26
 105 0054 1962     		str	r1, [r3, #32]
  71:Src/motor.c   **** 
  72:Src/motor.c   ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  73:Src/motor.c   ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 106              		.loc 1 73 5 is_stmt 1 view .LVU27
 107              		.loc 1 73 10 is_stmt 0 view .LVU28
 108 0056 9469     		ldr	r4, [r2, #24]
 109              		.loc 1 73 18 view .LVU29
 110 0058 6825     		movs	r5, #104
 111 005a 2C43     		orrs	r4, r5
 112 005c 9461     		str	r4, [r2, #24]
  74:Src/motor.c   ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 113              		.loc 1 74 5 is_stmt 1 view .LVU30
 114              		.loc 1 74 10 is_stmt 0 view .LVU31
 115 005e 146A     		ldr	r4, [r2, #32]
 116              		.loc 1 74 17 view .LVU32
 117 0060 0443     		orrs	r4, r0
 118 0062 1462     		str	r4, [r2, #32]
  75:Src/motor.c   ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 119              		.loc 1 75 5 is_stmt 1 view .LVU33
 120              		.loc 1 75 16 is_stmt 0 view .LVU34
 121 0064 9062     		str	r0, [r2, #40]
  76:Src/motor.c   ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 122              		.loc 1 76 5 is_stmt 1 view .LVU35
 123              		.loc 1 76 16 is_stmt 0 view .LVU36
 124 0066 9625     		movs	r5, #150
 125 0068 ED00     		lsls	r5, r5, #3
 126 006a D562     		str	r5, [r2, #44]
  77:Src/motor.c   ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 127              		.loc 1 77 5 is_stmt 1 view .LVU37
 128              		.loc 1 77 17 is_stmt 0 view .LVU38
 129 006c 5163     		str	r1, [r2, #52]
  78:Src/motor.c   ****     
  79:Src/motor.c   ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 130              		.loc 1 79 5 is_stmt 1 view .LVU39
 131              		.loc 1 79 10 is_stmt 0 view .LVU40
 132 006e 1468     		ldr	r4, [r2]
 133              		.loc 1 79 16 view .LVU41
 134 0070 0443     		orrs	r4, r0
 135 0072 1460     		str	r4, [r2]
  80:Src/motor.c   **** 		
  81:Src/motor.c   **** 		TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 136              		.loc 1 81 3 is_stmt 1 view .LVU42
 137              		.loc 1 81 7 is_stmt 0 view .LVU43
 138 0074 9C69     		ldr	r4, [r3, #24]
 139              		.loc 1 81 15 view .LVU44
 140 0076 D022     		movs	r2, #208
 141 0078 D201     		lsls	r2, r2, #7
 142 007a 2243     		orrs	r2, r4
 143 007c 9A61     		str	r2, [r3, #24]
  82:Src/motor.c   ****     TIM2->CCER |= TIM_CCER_CC2E;           // Enable capture-compare channel 2
 144              		.loc 1 82 5 is_stmt 1 view .LVU45
 145              		.loc 1 82 9 is_stmt 0 view .LVU46
 146 007e 1A6A     		ldr	r2, [r3, #32]
 147              		.loc 1 82 16 view .LVU47
ARM GAS  /tmp/ccrUhjPV.s 			page 5


 148 0080 1024     		movs	r4, #16
 149 0082 2243     		orrs	r2, r4
 150 0084 1A62     		str	r2, [r3, #32]
  83:Src/motor.c   ****     TIM2->PSC = 1;                         // Run timer on 24Mhz
 151              		.loc 1 83 5 is_stmt 1 view .LVU48
 152              		.loc 1 83 15 is_stmt 0 view .LVU49
 153 0086 9862     		str	r0, [r3, #40]
  84:Src/motor.c   ****     TIM2->ARR = 1200;                      // PWM at 20kHz
 154              		.loc 1 84 5 is_stmt 1 view .LVU50
 155              		.loc 1 84 15 is_stmt 0 view .LVU51
 156 0088 DD62     		str	r5, [r3, #44]
  85:Src/motor.c   ****     TIM2->CCR2 = 0;                        // Start PWM at 0% duty cycle
 157              		.loc 1 85 5 is_stmt 1 view .LVU52
 158              		.loc 1 85 16 is_stmt 0 view .LVU53
 159 008a 9963     		str	r1, [r3, #56]
  86:Src/motor.c   ****     
  87:Src/motor.c   ****     TIM2->CR1 |= TIM_CR1_CEN;              // Enable timer
 160              		.loc 1 87 5 is_stmt 1 view .LVU54
 161              		.loc 1 87 9 is_stmt 0 view .LVU55
 162 008c 1A68     		ldr	r2, [r3]
 163              		.loc 1 87 15 view .LVU56
 164 008e 0243     		orrs	r2, r0
 165 0090 1A60     		str	r2, [r3]
  88:Src/motor.c   **** }
 166              		.loc 1 88 1 view .LVU57
 167              		@ sp needed
 168 0092 70BD     		pop	{r4, r5, r6, pc}
 169              	.L3:
 170              		.align	2
 171              	.L2:
 172 0094 00000000 		.word	motor_left_pins
 173 0098 00000000 		.word	motor_right_pins
 174 009c 00100240 		.word	1073876992
 175 00a0 00200040 		.word	1073750016
 176              		.cfi_endproc
 177              	.LFE44:
 179              		.global	__aeabi_uidiv
 180              		.section	.text.pwm_setDutyCycleL,"ax",%progbits
 181              		.align	1
 182              		.global	pwm_setDutyCycleL
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 187              	pwm_setDutyCycleL:
 188              	.LVL4:
 189              	.LFB45:
  89:Src/motor.c   **** 
  90:Src/motor.c   **** // Set the duty cycle of the PWM Left, accepts (0-100)
  91:Src/motor.c   **** void pwm_setDutyCycleL(uint8_t duty) {
 190              		.loc 1 91 38 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 91 38 is_stmt 0 view .LVU59
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI1:
 197              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrUhjPV.s 			page 6


 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
  92:Src/motor.c   ****     if(duty <= 100) {
 200              		.loc 1 92 5 is_stmt 1 view .LVU60
 201              		.loc 1 92 7 is_stmt 0 view .LVU61
 202 0002 6428     		cmp	r0, #100
 203 0004 06D8     		bhi	.L4
  93:Src/motor.c   ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 204              		.loc 1 93 9 is_stmt 1 view .LVU62
 205              		.loc 1 93 44 is_stmt 0 view .LVU63
 206 0006 044C     		ldr	r4, .L6
 207 0008 E36A     		ldr	r3, [r4, #44]
 208              		.loc 1 93 38 view .LVU64
 209 000a 5843     		muls	r0, r3
 210              	.LVL5:
 211              		.loc 1 93 50 view .LVU65
 212 000c 6421     		movs	r1, #100
 213 000e FFF7FEFF 		bl	__aeabi_uidiv
 214              	.LVL6:
 215              		.loc 1 93 21 view .LVU66
 216 0012 6063     		str	r0, [r4, #52]
 217              	.L4:
  94:Src/motor.c   ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  95:Src/motor.c   ****     }
  96:Src/motor.c   **** }
 218              		.loc 1 96 1 view .LVU67
 219              		@ sp needed
 220 0014 10BD     		pop	{r4, pc}
 221              	.L7:
 222 0016 C046     		.align	2
 223              	.L6:
 224 0018 00200040 		.word	1073750016
 225              		.cfi_endproc
 226              	.LFE45:
 228              		.section	.text.pwm_setDutyCycleR,"ax",%progbits
 229              		.align	1
 230              		.global	pwm_setDutyCycleR
 231              		.syntax unified
 232              		.code	16
 233              		.thumb_func
 235              	pwm_setDutyCycleR:
 236              	.LVL7:
 237              	.LFB46:
  97:Src/motor.c   **** 
  98:Src/motor.c   **** // Set the duty cycle of the PWM Right, accepts (0-100)
  99:Src/motor.c   **** void pwm_setDutyCycleR(uint8_t duty) {
 238              		.loc 1 99 38 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		.loc 1 99 38 is_stmt 0 view .LVU69
 243 0000 10B5     		push	{r4, lr}
 244              	.LCFI2:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 4, -8
 247              		.cfi_offset 14, -4
 100:Src/motor.c   ****     if(duty <= 100) {
ARM GAS  /tmp/ccrUhjPV.s 			page 7


 248              		.loc 1 100 5 is_stmt 1 view .LVU70
 249              		.loc 1 100 7 is_stmt 0 view .LVU71
 250 0002 6428     		cmp	r0, #100
 251 0004 07D8     		bhi	.L8
 101:Src/motor.c   ****         TIM2->CCR2 = ((uint32_t)duty*TIM2->ARR)/100;  // Use linear transform to produce CCR1 value
 252              		.loc 1 101 9 is_stmt 1 view .LVU72
 253              		.loc 1 101 42 is_stmt 0 view .LVU73
 254 0006 8024     		movs	r4, #128
 255 0008 E405     		lsls	r4, r4, #23
 256 000a E36A     		ldr	r3, [r4, #44]
 257              		.loc 1 101 37 view .LVU74
 258 000c 5843     		muls	r0, r3
 259              	.LVL8:
 260              		.loc 1 101 48 view .LVU75
 261 000e 6421     		movs	r1, #100
 262 0010 FFF7FEFF 		bl	__aeabi_uidiv
 263              	.LVL9:
 264              		.loc 1 101 20 view .LVU76
 265 0014 A063     		str	r0, [r4, #56]
 266              	.L8:
 102:Src/motor.c   ****         // (CCR2 == "pulse" parameter in PWM struct used by peripheral library)
 103:Src/motor.c   ****     }
 104:Src/motor.c   **** }
 267              		.loc 1 104 1 view .LVU77
 268              		@ sp needed
 269 0016 10BD     		pop	{r4, pc}
 270              		.cfi_endproc
 271              	.LFE46:
 273              		.section	.text.set_Motor_Direction,"ax",%progbits
 274              		.align	1
 275              		.global	set_Motor_Direction
 276              		.syntax unified
 277              		.code	16
 278              		.thumb_func
 280              	set_Motor_Direction:
 281              	.LVL10:
 282              	.LFB47:
 105:Src/motor.c   **** 
 106:Src/motor.c   **** /*
 107:Src/motor.c   ****  * This sets an individual motor's direction.
 108:Src/motor.c   ****  * Note: use MoveMotors to change multiple motor values, eg to turn.
 109:Src/motor.c   ****  */
 110:Src/motor.c   **** void set_Motor_Direction(Direction dir, motor_pins_t* pins){
 283              		.loc 1 110 60 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		.loc 1 110 60 is_stmt 0 view .LVU79
 288 0000 10B5     		push	{r4, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
 293 0002 0C00     		movs	r4, r1
 111:Src/motor.c   **** 	switch(dir){
 294              		.loc 1 111 2 is_stmt 1 view .LVU80
 295 0004 0028     		cmp	r0, #0
ARM GAS  /tmp/ccrUhjPV.s 			page 8


 296 0006 02D0     		beq	.L11
 297 0008 0328     		cmp	r0, #3
 298 000a 0BD0     		beq	.L12
 299              	.LVL11:
 300              	.L10:
 112:Src/motor.c   **** 		case FORWARD:
 113:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_SET);
 114:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 115:Src/motor.c   **** 			break;
 116:Src/motor.c   **** 		case BACKWARD:
 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_RESET);
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 119:Src/motor.c   **** 			break;
 120:Src/motor.c   **** 		default:
 121:Src/motor.c   **** 			;
 122:Src/motor.c   **** 	}
 123:Src/motor.c   **** }
 301              		.loc 1 123 1 is_stmt 0 view .LVU81
 302              		@ sp needed
 303              	.LVL12:
 304              		.loc 1 123 1 view .LVU82
 305 000c 10BD     		pop	{r4, pc}
 306              	.LVL13:
 307              	.L11:
 113:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 308              		.loc 1 113 4 is_stmt 1 view .LVU83
 309 000e 898B     		ldrh	r1, [r1, #28]
 310              	.LVL14:
 113:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 311              		.loc 1 113 4 is_stmt 0 view .LVU84
 312 0010 A069     		ldr	r0, [r4, #24]
 313              	.LVL15:
 113:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 314              		.loc 1 113 4 view .LVU85
 315 0012 0122     		movs	r2, #1
 316 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL16:
 114:Src/motor.c   **** 			break;
 318              		.loc 1 114 4 is_stmt 1 view .LVU86
 319 0018 A18E     		ldrh	r1, [r4, #52]
 320 001a 206B     		ldr	r0, [r4, #48]
 321 001c 0022     		movs	r2, #0
 322 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 323              	.LVL17:
 115:Src/motor.c   **** 		case BACKWARD:
 324              		.loc 1 115 4 view .LVU87
 325 0022 F3E7     		b	.L10
 326              	.LVL18:
 327              	.L12:
 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 328              		.loc 1 117 4 view .LVU88
 329 0024 898B     		ldrh	r1, [r1, #28]
 330              	.LVL19:
 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 331              		.loc 1 117 4 is_stmt 0 view .LVU89
 332 0026 A069     		ldr	r0, [r4, #24]
 333              	.LVL20:
ARM GAS  /tmp/ccrUhjPV.s 			page 9


 117:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 334              		.loc 1 117 4 view .LVU90
 335 0028 0022     		movs	r2, #0
 336 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 337              	.LVL21:
 118:Src/motor.c   **** 			break;
 338              		.loc 1 118 4 is_stmt 1 view .LVU91
 339 002e A18E     		ldrh	r1, [r4, #52]
 340 0030 206B     		ldr	r0, [r4, #48]
 341 0032 0122     		movs	r2, #1
 342 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 343              	.LVL22:
 119:Src/motor.c   **** 		default:
 344              		.loc 1 119 4 view .LVU92
 121:Src/motor.c   **** 	}
 345              		.loc 1 121 4 view .LVU93
 346              		.loc 1 123 1 is_stmt 0 view .LVU94
 347 0038 E8E7     		b	.L10
 348              		.cfi_endproc
 349              	.LFE47:
 351              		.section	.text.set_Forward,"ax",%progbits
 352              		.align	1
 353              		.global	set_Forward
 354              		.syntax unified
 355              		.code	16
 356              		.thumb_func
 358              	set_Forward:
 359              	.LFB48:
 124:Src/motor.c   **** 
 125:Src/motor.c   **** //Experimentation led to this 91 number for driving straight.
 126:Src/motor.c   **** volatile uint8_t pwm_right = 92;
 127:Src/motor.c   **** volatile uint8_t pwm_left = 100;
 128:Src/motor.c   **** 
 129:Src/motor.c   **** void set_Forward(){
 360              		.loc 1 129 19 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
 368              		.cfi_offset 14, -4
 130:Src/motor.c   **** 	//left go forward
 131:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 369              		.loc 1 131 2 view .LVU96
 370 0002 0949     		ldr	r1, .L15
 371 0004 0020     		movs	r0, #0
 372 0006 FFF7FEFF 		bl	set_Motor_Direction
 373              	.LVL23:
 132:Src/motor.c   **** 
 133:Src/motor.c   **** 	//right go forward
 134:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 374              		.loc 1 134 2 view .LVU97
 375 000a 0849     		ldr	r1, .L15+4
 376 000c 0020     		movs	r0, #0
 377 000e FFF7FEFF 		bl	set_Motor_Direction
ARM GAS  /tmp/ccrUhjPV.s 			page 10


 378              	.LVL24:
 135:Src/motor.c   **** 
 136:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 379              		.loc 1 136 2 view .LVU98
 380 0012 074B     		ldr	r3, .L15+8
 381 0014 1878     		ldrb	r0, [r3]
 382 0016 C0B2     		uxtb	r0, r0
 383 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 384              	.LVL25:
 137:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 385              		.loc 1 137 2 view .LVU99
 386 001c 054B     		ldr	r3, .L15+12
 387 001e 1878     		ldrb	r0, [r3]
 388 0020 C0B2     		uxtb	r0, r0
 389 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 390              	.LVL26:
 138:Src/motor.c   **** 
 139:Src/motor.c   **** 
 140:Src/motor.c   **** 	/* the old way
 141:Src/motor.c   **** 		GPIOA->ODR |= (1 << 5);
 142:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 8);
 143:Src/motor.c   **** 		GPIOB->ODR |= (1 << 10);
 144:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 2);
 145:Src/motor.c   **** 	*/
 146:Src/motor.c   **** }
 391              		.loc 1 146 1 is_stmt 0 view .LVU100
 392              		@ sp needed
 393 0026 10BD     		pop	{r4, pc}
 394              	.L16:
 395              		.align	2
 396              	.L15:
 397 0028 00000000 		.word	motor_left_pins
 398 002c 00000000 		.word	motor_right_pins
 399 0030 00000000 		.word	pwm_right
 400 0034 00000000 		.word	pwm_left
 401              		.cfi_endproc
 402              	.LFE48:
 404              		.section	.text.set_Backward,"ax",%progbits
 405              		.align	1
 406              		.global	set_Backward
 407              		.syntax unified
 408              		.code	16
 409              		.thumb_func
 411              	set_Backward:
 412              	.LFB49:
 147:Src/motor.c   **** 
 148:Src/motor.c   **** void set_Backward(){
 413              		.loc 1 148 20 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 10B5     		push	{r4, lr}
 418              	.LCFI5:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 149:Src/motor.c   **** 	//left go backward
ARM GAS  /tmp/ccrUhjPV.s 			page 11


 150:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 422              		.loc 1 150 2 view .LVU102
 423 0002 0949     		ldr	r1, .L18
 424 0004 0320     		movs	r0, #3
 425 0006 FFF7FEFF 		bl	set_Motor_Direction
 426              	.LVL27:
 151:Src/motor.c   **** 
 152:Src/motor.c   **** 	//right go backward
 153:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 427              		.loc 1 153 2 view .LVU103
 428 000a 0849     		ldr	r1, .L18+4
 429 000c 0320     		movs	r0, #3
 430 000e FFF7FEFF 		bl	set_Motor_Direction
 431              	.LVL28:
 154:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 432              		.loc 1 154 2 view .LVU104
 433 0012 074B     		ldr	r3, .L18+8
 434 0014 1878     		ldrb	r0, [r3]
 435 0016 C0B2     		uxtb	r0, r0
 436 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 437              	.LVL29:
 155:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 438              		.loc 1 155 2 view .LVU105
 439 001c 054B     		ldr	r3, .L18+12
 440 001e 1878     		ldrb	r0, [r3]
 441 0020 C0B2     		uxtb	r0, r0
 442 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 443              	.LVL30:
 156:Src/motor.c   **** 	/* the old way
 157:Src/motor.c   **** 		GPIOA->ODR |= (1 << 8);
 158:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 5);
 159:Src/motor.c   **** 		GPIOB->ODR |= (1 << 2);
 160:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 10);
 161:Src/motor.c   **** 	*/
 162:Src/motor.c   **** }
 444              		.loc 1 162 1 is_stmt 0 view .LVU106
 445              		@ sp needed
 446 0026 10BD     		pop	{r4, pc}
 447              	.L19:
 448              		.align	2
 449              	.L18:
 450 0028 00000000 		.word	motor_left_pins
 451 002c 00000000 		.word	motor_right_pins
 452 0030 00000000 		.word	pwm_right
 453 0034 00000000 		.word	pwm_left
 454              		.cfi_endproc
 455              	.LFE49:
 457              		.section	.text.set_Right,"ax",%progbits
 458              		.align	1
 459              		.global	set_Right
 460              		.syntax unified
 461              		.code	16
 462              		.thumb_func
 464              	set_Right:
 465              	.LFB50:
 163:Src/motor.c   **** 
 164:Src/motor.c   **** void set_Right(){
ARM GAS  /tmp/ccrUhjPV.s 			page 12


 466              		.loc 1 164 17 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 10B5     		push	{r4, lr}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 165:Src/motor.c   **** 	//left go forward
 166:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 475              		.loc 1 166 2 view .LVU108
 476 0002 0949     		ldr	r1, .L21
 477 0004 0020     		movs	r0, #0
 478 0006 FFF7FEFF 		bl	set_Motor_Direction
 479              	.LVL31:
 167:Src/motor.c   **** 
 168:Src/motor.c   **** 	//right go backward
 169:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 480              		.loc 1 169 2 view .LVU109
 481 000a 0849     		ldr	r1, .L21+4
 482 000c 0320     		movs	r0, #3
 483 000e FFF7FEFF 		bl	set_Motor_Direction
 484              	.LVL32:
 170:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 485              		.loc 1 170 2 view .LVU110
 486 0012 074B     		ldr	r3, .L21+8
 487 0014 1878     		ldrb	r0, [r3]
 488 0016 C0B2     		uxtb	r0, r0
 489 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 490              	.LVL33:
 171:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 491              		.loc 1 171 2 view .LVU111
 492 001c 054B     		ldr	r3, .L21+12
 493 001e 1878     		ldrb	r0, [r3]
 494 0020 C0B2     		uxtb	r0, r0
 495 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 496              	.LVL34:
 172:Src/motor.c   **** 	/* old way
 173:Src/motor.c   **** 		GPIOA->ODR |= (1 << 5);
 174:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 8);
 175:Src/motor.c   **** 		GPIOB->ODR |= (1 << 2);
 176:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 10);
 177:Src/motor.c   **** 	*/
 178:Src/motor.c   **** }
 497              		.loc 1 178 1 is_stmt 0 view .LVU112
 498              		@ sp needed
 499 0026 10BD     		pop	{r4, pc}
 500              	.L22:
 501              		.align	2
 502              	.L21:
 503 0028 00000000 		.word	motor_left_pins
 504 002c 00000000 		.word	motor_right_pins
 505 0030 00000000 		.word	pwm_right
 506 0034 00000000 		.word	pwm_left
 507              		.cfi_endproc
 508              	.LFE50:
ARM GAS  /tmp/ccrUhjPV.s 			page 13


 510              		.section	.text.set_Left,"ax",%progbits
 511              		.align	1
 512              		.global	set_Left
 513              		.syntax unified
 514              		.code	16
 515              		.thumb_func
 517              	set_Left:
 518              	.LFB51:
 179:Src/motor.c   **** 
 180:Src/motor.c   **** void set_Left(){
 519              		.loc 1 180 16 is_stmt 1 view -0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523 0000 10B5     		push	{r4, lr}
 524              	.LCFI7:
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 4, -8
 527              		.cfi_offset 14, -4
 181:Src/motor.c   **** 	//left go backward
 182:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 528              		.loc 1 182 2 view .LVU114
 529 0002 0949     		ldr	r1, .L24
 530 0004 0320     		movs	r0, #3
 531 0006 FFF7FEFF 		bl	set_Motor_Direction
 532              	.LVL35:
 183:Src/motor.c   **** 	
 184:Src/motor.c   **** 	//right go forward
 185:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 533              		.loc 1 185 2 view .LVU115
 534 000a 0849     		ldr	r1, .L24+4
 535 000c 0020     		movs	r0, #0
 536 000e FFF7FEFF 		bl	set_Motor_Direction
 537              	.LVL36:
 186:Src/motor.c   **** 
 187:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 538              		.loc 1 187 2 view .LVU116
 539 0012 074B     		ldr	r3, .L24+8
 540 0014 1878     		ldrb	r0, [r3]
 541 0016 C0B2     		uxtb	r0, r0
 542 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 543              	.LVL37:
 188:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 544              		.loc 1 188 2 view .LVU117
 545 001c 054B     		ldr	r3, .L24+12
 546 001e 1878     		ldrb	r0, [r3]
 547 0020 C0B2     		uxtb	r0, r0
 548 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 549              	.LVL38:
 189:Src/motor.c   **** 	/*
 190:Src/motor.c   **** 		GPIOA->ODR |= (1 << 8);
 191:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 5);
 192:Src/motor.c   **** 		GPIOB->ODR |= (1 << 10);
 193:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 2);
 194:Src/motor.c   **** 	*/
 195:Src/motor.c   **** }
 550              		.loc 1 195 1 is_stmt 0 view .LVU118
ARM GAS  /tmp/ccrUhjPV.s 			page 14


 551              		@ sp needed
 552 0026 10BD     		pop	{r4, pc}
 553              	.L25:
 554              		.align	2
 555              	.L24:
 556 0028 00000000 		.word	motor_left_pins
 557 002c 00000000 		.word	motor_right_pins
 558 0030 00000000 		.word	pwm_right
 559 0034 00000000 		.word	pwm_left
 560              		.cfi_endproc
 561              	.LFE51:
 563              		.section	.text.motors_Off,"ax",%progbits
 564              		.align	1
 565              		.global	motors_Off
 566              		.syntax unified
 567              		.code	16
 568              		.thumb_func
 570              	motors_Off:
 571              	.LFB52:
 196:Src/motor.c   **** 
 197:Src/motor.c   **** void motors_Off(){
 572              		.loc 1 197 18 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576 0000 10B5     		push	{r4, lr}
 577              	.LCFI8:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 4, -8
 580              		.cfi_offset 14, -4
 198:Src/motor.c   **** 	pwm_setDutyCycleR(0);
 581              		.loc 1 198 2 view .LVU120
 582 0002 0020     		movs	r0, #0
 583 0004 FFF7FEFF 		bl	pwm_setDutyCycleR
 584              	.LVL39:
 199:Src/motor.c   **** 	pwm_setDutyCycleL(0);
 585              		.loc 1 199 2 view .LVU121
 586 0008 0020     		movs	r0, #0
 587 000a FFF7FEFF 		bl	pwm_setDutyCycleL
 588              	.LVL40:
 200:Src/motor.c   **** }
 589              		.loc 1 200 1 is_stmt 0 view .LVU122
 590              		@ sp needed
 591 000e 10BD     		pop	{r4, pc}
 592              		.cfi_endproc
 593              	.LFE52:
 595              		.section	.rodata.MoveMotors.str1.4,"aMS",%progbits,1
 596              		.align	2
 597              	.LC18:
 598 0000 4D6F7665 		.ascii	"MoveMotors executed!\012\000"
 598      4D6F746F 
 598      72732065 
 598      78656375 
 598      74656421 
 599 0016 0000     		.align	2
 600              	.LC20:
 601 0018 496E7661 		.ascii	"Invalid command to MoveMotors!\012\000"
ARM GAS  /tmp/ccrUhjPV.s 			page 15


 601      6C696420 
 601      636F6D6D 
 601      616E6420 
 601      746F204D 
 602              		.section	.text.MoveMotors,"ax",%progbits
 603              		.align	1
 604              		.global	MoveMotors
 605              		.syntax unified
 606              		.code	16
 607              		.thumb_func
 609              	MoveMotors:
 610              	.LVL41:
 611              	.LFB53:
 201:Src/motor.c   **** 
 202:Src/motor.c   **** uint8_t* MoveMotors(MotorCommand* cmd){
 612              		.loc 1 202 39 is_stmt 1 view -0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              		.loc 1 202 39 is_stmt 0 view .LVU124
 617 0000 70B5     		push	{r4, r5, r6, lr}
 618              	.LCFI9:
 619              		.cfi_def_cfa_offset 16
 620              		.cfi_offset 4, -16
 621              		.cfi_offset 5, -12
 622              		.cfi_offset 6, -8
 623              		.cfi_offset 14, -4
 624 0002 0400     		movs	r4, r0
 203:Src/motor.c   **** 	motors_Off();
 625              		.loc 1 203 2 is_stmt 1 view .LVU125
 626 0004 FFF7FEFF 		bl	motors_Off
 627              	.LVL42:
 204:Src/motor.c   **** 	uint8_t* err = "MoveMotors executed!\n";
 628              		.loc 1 204 2 view .LVU126
 205:Src/motor.c   **** 	switch(cmd->dir){
 629              		.loc 1 205 2 view .LVU127
 630              		.loc 1 205 12 is_stmt 0 view .LVU128
 631 0008 2378     		ldrb	r3, [r4]
 632              		.loc 1 205 2 view .LVU129
 633 000a 022B     		cmp	r3, #2
 634 000c 1FD0     		beq	.L28
 635 000e 09D8     		bhi	.L29
 636 0010 002B     		cmp	r3, #0
 637 0012 18D0     		beq	.L30
 638 0014 012B     		cmp	r3, #1
 639 0016 03D1     		bne	.L34
 206:Src/motor.c   **** 		case FORWARD:
 207:Src/motor.c   **** 			set_Forward();
 208:Src/motor.c   **** 			break;
 209:Src/motor.c   **** 		case LEFT:
 210:Src/motor.c   **** 			set_Left();
 640              		.loc 1 210 4 is_stmt 1 view .LVU130
 641 0018 FFF7FEFF 		bl	set_Left
 642              	.LVL43:
 211:Src/motor.c   **** 			break;
 643              		.loc 1 211 4 view .LVU131
 204:Src/motor.c   **** 	switch(cmd->dir){
ARM GAS  /tmp/ccrUhjPV.s 			page 16


 644              		.loc 1 204 11 is_stmt 0 view .LVU132
 645 001c 0E4D     		ldr	r5, .L36
 646              		.loc 1 211 4 view .LVU133
 647 001e 08E0     		b	.L32
 648              	.L34:
 205:Src/motor.c   **** 		case FORWARD:
 649              		.loc 1 205 2 view .LVU134
 650 0020 0E4D     		ldr	r5, .L36+4
 651 0022 06E0     		b	.L32
 652              	.L29:
 653 0024 042B     		cmp	r3, #4
 654 0026 03D1     		bne	.L35
 212:Src/motor.c   **** 		case RIGHT:
 213:Src/motor.c   **** 			set_Right();
 214:Src/motor.c   **** 			break;
 215:Src/motor.c   **** 		case OFF:
 216:Src/motor.c   **** 			motors_Off();
 655              		.loc 1 216 4 is_stmt 1 view .LVU135
 656 0028 FFF7FEFF 		bl	motors_Off
 657              	.LVL44:
 217:Src/motor.c   **** 			break;
 658              		.loc 1 217 4 view .LVU136
 204:Src/motor.c   **** 	switch(cmd->dir){
 659              		.loc 1 204 11 is_stmt 0 view .LVU137
 660 002c 0A4D     		ldr	r5, .L36
 661              		.loc 1 217 4 view .LVU138
 662 002e 00E0     		b	.L32
 663              	.L35:
 205:Src/motor.c   **** 		case FORWARD:
 664              		.loc 1 205 2 view .LVU139
 665 0030 0A4D     		ldr	r5, .L36+4
 666              	.L32:
 667              	.LVL45:
 218:Src/motor.c   **** 		default:
 219:Src/motor.c   **** 			err = "Invalid command to MoveMotors!\n";
 220:Src/motor.c   **** 	}
 221:Src/motor.c   **** 	//THIS IS BAD. if you send an x it won't stop motors until this delay finishes!
 222:Src/motor.c   **** 	//Switch to a polling structure instead for final
 223:Src/motor.c   **** 	HAL_Delay(10*cmd->amount); 
 668              		.loc 1 223 2 is_stmt 1 view .LVU140
 669              		.loc 1 223 18 is_stmt 0 view .LVU141
 670 0032 6378     		ldrb	r3, [r4, #1]
 671              		.loc 1 223 14 view .LVU142
 672 0034 9800     		lsls	r0, r3, #2
 673 0036 C018     		adds	r0, r0, r3
 674 0038 4000     		lsls	r0, r0, #1
 675              		.loc 1 223 2 view .LVU143
 676 003a FFF7FEFF 		bl	HAL_Delay
 677              	.LVL46:
 224:Src/motor.c   **** 	motors_Off();
 678              		.loc 1 224 2 is_stmt 1 view .LVU144
 679 003e FFF7FEFF 		bl	motors_Off
 680              	.LVL47:
 225:Src/motor.c   **** 	return err;
 681              		.loc 1 225 2 view .LVU145
 226:Src/motor.c   **** }
 682              		.loc 1 226 1 is_stmt 0 view .LVU146
ARM GAS  /tmp/ccrUhjPV.s 			page 17


 683 0042 2800     		movs	r0, r5
 684              		@ sp needed
 685              	.LVL48:
 686              	.LVL49:
 687              		.loc 1 226 1 view .LVU147
 688 0044 70BD     		pop	{r4, r5, r6, pc}
 689              	.LVL50:
 690              	.L30:
 207:Src/motor.c   **** 			break;
 691              		.loc 1 207 4 is_stmt 1 view .LVU148
 692 0046 FFF7FEFF 		bl	set_Forward
 693              	.LVL51:
 208:Src/motor.c   **** 		case LEFT:
 694              		.loc 1 208 4 view .LVU149
 204:Src/motor.c   **** 	switch(cmd->dir){
 695              		.loc 1 204 11 is_stmt 0 view .LVU150
 696 004a 034D     		ldr	r5, .L36
 208:Src/motor.c   **** 		case LEFT:
 697              		.loc 1 208 4 view .LVU151
 698 004c F1E7     		b	.L32
 699              	.L28:
 213:Src/motor.c   **** 			break;
 700              		.loc 1 213 4 is_stmt 1 view .LVU152
 701 004e FFF7FEFF 		bl	set_Right
 702              	.LVL52:
 214:Src/motor.c   **** 		case OFF:
 703              		.loc 1 214 4 view .LVU153
 204:Src/motor.c   **** 	switch(cmd->dir){
 704              		.loc 1 204 11 is_stmt 0 view .LVU154
 705 0052 014D     		ldr	r5, .L36
 214:Src/motor.c   **** 		case OFF:
 706              		.loc 1 214 4 view .LVU155
 707 0054 EDE7     		b	.L32
 708              	.L37:
 709 0056 C046     		.align	2
 710              	.L36:
 711 0058 00000000 		.word	.LC18
 712 005c 18000000 		.word	.LC20
 713              		.cfi_endproc
 714              	.LFE53:
 716              		.section	.text.encoder_init,"ax",%progbits
 717              		.align	1
 718              		.global	encoder_init
 719              		.syntax unified
 720              		.code	16
 721              		.thumb_func
 723              	encoder_init:
 724              	.LFB54:
 227:Src/motor.c   **** 
 228:Src/motor.c   **** // Sets up encoder interface to read motor speed
 229:Src/motor.c   **** void encoder_init(void) {
 725              		.loc 1 229 25 is_stmt 1 view -0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 730              	.LCFI10:
ARM GAS  /tmp/ccrUhjPV.s 			page 18


 731              		.cfi_def_cfa_offset 20
 732              		.cfi_offset 4, -20
 733              		.cfi_offset 5, -16
 734              		.cfi_offset 6, -12
 735              		.cfi_offset 7, -8
 736              		.cfi_offset 14, -4
 737 0002 C646     		mov	lr, r8
 738 0004 00B5     		push	{lr}
 739              	.LCFI11:
 740              		.cfi_def_cfa_offset 24
 741              		.cfi_offset 8, -24
 230:Src/motor.c   ****     
 231:Src/motor.c   ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
 232:Src/motor.c   ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 742              		.loc 1 232 5 view .LVU157
 743              		.loc 1 232 10 is_stmt 0 view .LVU158
 744 0006 394B     		ldr	r3, .L39
 745 0008 1A68     		ldr	r2, [r3]
 746              		.loc 1 232 18 view .LVU159
 747 000a 3949     		ldr	r1, .L39+4
 748 000c 0A40     		ands	r2, r1
 749 000e 1A60     		str	r2, [r3]
 233:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 750              		.loc 1 233 5 is_stmt 1 view .LVU160
 751              		.loc 1 233 10 is_stmt 0 view .LVU161
 752 0010 1968     		ldr	r1, [r3]
 753              		.loc 1 233 18 view .LVU162
 754 0012 A022     		movs	r2, #160
 755 0014 1201     		lsls	r2, r2, #4
 756 0016 0A43     		orrs	r2, r1
 757 0018 1A60     		str	r2, [r3]
 234:Src/motor.c   ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 758              		.loc 1 234 5 is_stmt 1 view .LVU163
 759              		.loc 1 234 15 is_stmt 0 view .LVU164
 760 001a 196A     		ldr	r1, [r3, #32]
 761              		.loc 1 234 19 view .LVU165
 762 001c 8822     		movs	r2, #136
 763 001e 5203     		lsls	r2, r2, #13
 764 0020 0A43     		orrs	r2, r1
 765 0022 1A62     		str	r2, [r3, #32]
 235:Src/motor.c   **** 		
 236:Src/motor.c   **** 		// Set up encoder input pins (TIMER 15 CH1 and CH2)
 237:Src/motor.c   **** 		GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 766              		.loc 1 237 3 is_stmt 1 view .LVU166
 767              		.loc 1 237 8 is_stmt 0 view .LVU167
 768 0024 1A68     		ldr	r2, [r3]
 769              		.loc 1 237 16 view .LVU168
 770 0026 3349     		ldr	r1, .L39+8
 771 0028 0A40     		ands	r2, r1
 772 002a 1A60     		str	r2, [r3]
 238:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 773              		.loc 1 238 5 is_stmt 1 view .LVU169
 774              		.loc 1 238 10 is_stmt 0 view .LVU170
 775 002c 1968     		ldr	r1, [r3]
 776              		.loc 1 238 18 view .LVU171
 777 002e A022     		movs	r2, #160
 778 0030 1206     		lsls	r2, r2, #24
ARM GAS  /tmp/ccrUhjPV.s 			page 19


 779 0032 0A43     		orrs	r2, r1
 780 0034 1A60     		str	r2, [r3]
 239:Src/motor.c   ****     GPIOB->AFR[1] |= ( (1 << 24) | (1 << 28) );
 781              		.loc 1 239 5 is_stmt 1 view .LVU172
 782              		.loc 1 239 15 is_stmt 0 view .LVU173
 783 0036 596A     		ldr	r1, [r3, #36]
 784              		.loc 1 239 19 view .LVU174
 785 0038 8822     		movs	r2, #136
 786 003a 5205     		lsls	r2, r2, #21
 787 003c 0A43     		orrs	r2, r1
 788 003e 5A62     		str	r2, [r3, #36]
 240:Src/motor.c   **** 
 241:Src/motor.c   ****     // Set up encoder interface (TIM3 encoder input mode)
 242:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 789              		.loc 1 242 5 is_stmt 1 view .LVU175
 790              		.loc 1 242 8 is_stmt 0 view .LVU176
 791 0040 2D49     		ldr	r1, .L39+12
 792 0042 CB69     		ldr	r3, [r1, #28]
 793              		.loc 1 242 18 view .LVU177
 794 0044 0222     		movs	r2, #2
 795 0046 1343     		orrs	r3, r2
 796 0048 CB61     		str	r3, [r1, #28]
 243:Src/motor.c   ****     TIM3->CCMR1 = 0;
 797              		.loc 1 243 5 is_stmt 1 view .LVU178
 798              		.loc 1 243 17 is_stmt 0 view .LVU179
 799 004a 2C4B     		ldr	r3, .L39+16
 800 004c 0022     		movs	r2, #0
 801 004e 9A61     		str	r2, [r3, #24]
 244:Src/motor.c   ****     TIM3->CCER = 0;
 802              		.loc 1 244 5 is_stmt 1 view .LVU180
 803              		.loc 1 244 16 is_stmt 0 view .LVU181
 804 0050 1A62     		str	r2, [r3, #32]
 245:Src/motor.c   ****     TIM3->SMCR = 0;
 805              		.loc 1 245 5 is_stmt 1 view .LVU182
 806              		.loc 1 245 16 is_stmt 0 view .LVU183
 807 0052 9A60     		str	r2, [r3, #8]
 246:Src/motor.c   ****     TIM3->CR1 = 0;
 808              		.loc 1 246 5 is_stmt 1 view .LVU184
 809              		.loc 1 246 15 is_stmt 0 view .LVU185
 810 0054 1A60     		str	r2, [r3]
 247:Src/motor.c   **** 
 248:Src/motor.c   ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 811              		.loc 1 248 5 is_stmt 1 view .LVU186
 812              		.loc 1 248 9 is_stmt 0 view .LVU187
 813 0056 9869     		ldr	r0, [r3, #24]
 814              		.loc 1 248 17 view .LVU188
 815 0058 0224     		movs	r4, #2
 816 005a FF34     		adds	r4, r4, #255
 817 005c A046     		mov	r8, r4
 818 005e 2043     		orrs	r0, r4
 819 0060 9861     		str	r0, [r3, #24]
 249:Src/motor.c   ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 820              		.loc 1 249 5 is_stmt 1 view .LVU189
 821              		.loc 1 249 9 is_stmt 0 view .LVU190
 822 0062 9868     		ldr	r0, [r3, #8]
 823              		.loc 1 249 16 view .LVU191
 824 0064 0327     		movs	r7, #3
ARM GAS  /tmp/ccrUhjPV.s 			page 20


 825 0066 3843     		orrs	r0, r7
 826 0068 9860     		str	r0, [r3, #8]
 250:Src/motor.c   ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 827              		.loc 1 250 5 is_stmt 1 view .LVU192
 828              		.loc 1 250 15 is_stmt 0 view .LVU193
 829 006a 254E     		ldr	r6, .L39+20
 830 006c DE62     		str	r6, [r3, #44]
 251:Src/motor.c   ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 831              		.loc 1 251 5 is_stmt 1 view .LVU194
 832              		.loc 1 251 15 is_stmt 0 view .LVU195
 833 006e 254D     		ldr	r5, .L39+24
 834 0070 5D62     		str	r5, [r3, #36]
 252:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 253:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 254:Src/motor.c   ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 835              		.loc 1 254 5 is_stmt 1 view .LVU196
 836              		.loc 1 254 9 is_stmt 0 view .LVU197
 837 0072 1868     		ldr	r0, [r3]
 838 0074 8446     		mov	ip, r0
 839              		.loc 1 254 15 view .LVU198
 840 0076 0120     		movs	r0, #1
 841 0078 6446     		mov	r4, ip
 842 007a 0443     		orrs	r4, r0
 843 007c 1C60     		str	r4, [r3]
 255:Src/motor.c   **** 		
 256:Src/motor.c   **** 		RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 844              		.loc 1 256 3 is_stmt 1 view .LVU199
 845              		.loc 1 256 6 is_stmt 0 view .LVU200
 846 007e 8B69     		ldr	r3, [r1, #24]
 847 0080 9C46     		mov	ip, r3
 848              		.loc 1 256 16 view .LVU201
 849 0082 8023     		movs	r3, #128
 850 0084 5B02     		lsls	r3, r3, #9
 851 0086 6446     		mov	r4, ip
 852 0088 2343     		orrs	r3, r4
 853 008a 8B61     		str	r3, [r1, #24]
 257:Src/motor.c   ****     TIM15->CCMR1 = 0;
 854              		.loc 1 257 5 is_stmt 1 view .LVU202
 855              		.loc 1 257 18 is_stmt 0 view .LVU203
 856 008c 1E4B     		ldr	r3, .L39+28
 857 008e 9A61     		str	r2, [r3, #24]
 258:Src/motor.c   ****     TIM15->CCER = 0;
 858              		.loc 1 258 5 is_stmt 1 view .LVU204
 859              		.loc 1 258 17 is_stmt 0 view .LVU205
 860 0090 1A62     		str	r2, [r3, #32]
 259:Src/motor.c   ****     TIM15->SMCR = 0;
 861              		.loc 1 259 5 is_stmt 1 view .LVU206
 862              		.loc 1 259 17 is_stmt 0 view .LVU207
 863 0092 9A60     		str	r2, [r3, #8]
 260:Src/motor.c   ****     TIM15->CR1 = 0;
 864              		.loc 1 260 5 is_stmt 1 view .LVU208
 865              		.loc 1 260 16 is_stmt 0 view .LVU209
 866 0094 1A60     		str	r2, [r3]
 261:Src/motor.c   **** 
 262:Src/motor.c   ****     TIM15->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected
 867              		.loc 1 262 5 is_stmt 1 view .LVU210
 868              		.loc 1 262 10 is_stmt 0 view .LVU211
ARM GAS  /tmp/ccrUhjPV.s 			page 21


 869 0096 9A69     		ldr	r2, [r3, #24]
 870              		.loc 1 262 18 view .LVU212
 871 0098 4446     		mov	r4, r8
 872 009a 1443     		orrs	r4, r2
 873 009c 9C61     		str	r4, [r3, #24]
 263:Src/motor.c   ****     TIM15->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and 
 874              		.loc 1 263 5 is_stmt 1 view .LVU213
 875              		.loc 1 263 10 is_stmt 0 view .LVU214
 876 009e 9A68     		ldr	r2, [r3, #8]
 877              		.loc 1 263 17 view .LVU215
 878 00a0 3A43     		orrs	r2, r7
 879 00a2 9A60     		str	r2, [r3, #8]
 264:Src/motor.c   ****     TIM15->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest po
 880              		.loc 1 264 5 is_stmt 1 view .LVU216
 881              		.loc 1 264 16 is_stmt 0 view .LVU217
 882 00a4 DE62     		str	r6, [r3, #44]
 265:Src/motor.c   ****     TIM15->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negat
 883              		.loc 1 265 5 is_stmt 1 view .LVU218
 884              		.loc 1 265 16 is_stmt 0 view .LVU219
 885 00a6 5D62     		str	r5, [r3, #36]
 266:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 267:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 268:Src/motor.c   ****     TIM15->CR1 |= TIM_CR1_CEN;     
 886              		.loc 1 268 5 is_stmt 1 view .LVU220
 887              		.loc 1 268 10 is_stmt 0 view .LVU221
 888 00a8 1A68     		ldr	r2, [r3]
 889              		.loc 1 268 16 view .LVU222
 890 00aa 0243     		orrs	r2, r0
 891 00ac 1A60     		str	r2, [r3]
 269:Src/motor.c   **** 
 270:Src/motor.c   ****     // Configure a second timer (TIM6) to fire an ISR on update event
 271:Src/motor.c   ****     // Used to periodically check and update speed variable
 272:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 892              		.loc 1 272 5 is_stmt 1 view .LVU223
 893              		.loc 1 272 8 is_stmt 0 view .LVU224
 894 00ae CB69     		ldr	r3, [r1, #28]
 895              		.loc 1 272 18 view .LVU225
 896 00b0 1022     		movs	r2, #16
 897 00b2 1343     		orrs	r3, r2
 898 00b4 CB61     		str	r3, [r1, #28]
 273:Src/motor.c   ****     
 274:Src/motor.c   ****     // Select PSC and ARR values that give an appropriate interrupt rate
 275:Src/motor.c   ****     TIM6->PSC = 11;
 899              		.loc 1 275 5 is_stmt 1 view .LVU226
 900              		.loc 1 275 15 is_stmt 0 view .LVU227
 901 00b6 154B     		ldr	r3, .L39+32
 902 00b8 053A     		subs	r2, r2, #5
 903 00ba 9A62     		str	r2, [r3, #40]
 276:Src/motor.c   ****     TIM6->ARR = 30000;
 904              		.loc 1 276 5 is_stmt 1 view .LVU228
 905              		.loc 1 276 15 is_stmt 0 view .LVU229
 906 00bc 144A     		ldr	r2, .L39+36
 907 00be DA62     		str	r2, [r3, #44]
 277:Src/motor.c   ****     
 278:Src/motor.c   ****     TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 908              		.loc 1 278 5 is_stmt 1 view .LVU230
 909              		.loc 1 278 9 is_stmt 0 view .LVU231
ARM GAS  /tmp/ccrUhjPV.s 			page 22


 910 00c0 DA68     		ldr	r2, [r3, #12]
 911              		.loc 1 278 16 view .LVU232
 912 00c2 0243     		orrs	r2, r0
 913 00c4 DA60     		str	r2, [r3, #12]
 279:Src/motor.c   ****     TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 914              		.loc 1 279 5 is_stmt 1 view .LVU233
 915              		.loc 1 279 9 is_stmt 0 view .LVU234
 916 00c6 1A68     		ldr	r2, [r3]
 917              		.loc 1 279 15 view .LVU235
 918 00c8 0243     		orrs	r2, r0
 919 00ca 1A60     		str	r2, [r3]
 280:Src/motor.c   **** 
 281:Src/motor.c   ****     NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 920              		.loc 1 281 5 is_stmt 1 view .LVU236
 921              	.LVL53:
 922              	.LBB6:
 923              	.LBI6:
 924              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrUhjPV.s 			page 23


  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccrUhjPV.s 			page 24


  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
ARM GAS  /tmp/ccrUhjPV.s 			page 25


 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
ARM GAS  /tmp/ccrUhjPV.s 			page 26


 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
ARM GAS  /tmp/ccrUhjPV.s 			page 27


 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
ARM GAS  /tmp/ccrUhjPV.s 			page 28


 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
ARM GAS  /tmp/ccrUhjPV.s 			page 29


 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccrUhjPV.s 			page 30


 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /tmp/ccrUhjPV.s 			page 31


 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
ARM GAS  /tmp/ccrUhjPV.s 			page 32


 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
ARM GAS  /tmp/ccrUhjPV.s 			page 33


 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 925              		.loc 2 623 22 view .LVU237
 926              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 927              		.loc 2 625 3 view .LVU238
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 928              		.loc 2 627 5 view .LVU239
 929              		.loc 2 627 20 is_stmt 0 view .LVU240
 930 00cc 114B     		ldr	r3, .L39+40
 931 00ce 8022     		movs	r2, #128
 932 00d0 9202     		lsls	r2, r2, #10
 933 00d2 1A60     		str	r2, [r3]
 934              	.LVL54:
 935              		.loc 2 627 20 view .LVU241
 936              	.LBE7:
 937              	.LBE6:
 282:Src/motor.c   ****     NVIC_SetPriority(TIM6_DAC_IRQn,2);
 938              		.loc 1 282 5 is_stmt 1 view .LVU242
 939              	.LBB8:
 940              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/ccrUhjPV.s 			page 34


 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccrUhjPV.s 			page 35


 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 941              		.loc 2 730 22 view .LVU243
 942              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 943              		.loc 2 732 3 view .LVU244
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 944              		.loc 2 734 5 view .LVU245
 945              		.loc 2 734 52 is_stmt 0 view .LVU246
 946 00d4 C420     		movs	r0, #196
 947 00d6 8000     		lsls	r0, r0, #2
 948 00d8 1958     		ldr	r1, [r3, r0]
 949              		.loc 2 734 33 view .LVU247
 950 00da 0F4A     		ldr	r2, .L39+44
 951 00dc 1140     		ands	r1, r2
 952              		.loc 2 734 102 view .LVU248
 953 00de 8022     		movs	r2, #128
 954 00e0 1202     		lsls	r2, r2, #8
 955 00e2 0A43     		orrs	r2, r1
 956              		.loc 2 734 30 view .LVU249
 957 00e4 1A50     		str	r2, [r3, r0]
 958              	.LVL55:
 959              		.loc 2 734 30 view .LVU250
 960              	.LBE9:
 961              	.LBE8:
 283:Src/motor.c   **** }
 962              		.loc 1 283 1 view .LVU251
 963              		@ sp needed
 964 00e6 80BC     		pop	{r7}
 965 00e8 B846     		mov	r8, r7
 966 00ea F0BD     		pop	{r4, r5, r6, r7, pc}
 967              	.L40:
 968              		.align	2
ARM GAS  /tmp/ccrUhjPV.s 			page 36


 969              	.L39:
 970 00ec 00040048 		.word	1207960576
 971 00f0 FFFAFFFF 		.word	-1281
 972 00f4 FFFFFFAF 		.word	-1342177281
 973 00f8 00100240 		.word	1073876992
 974 00fc 00040040 		.word	1073742848
 975 0100 FFFF0000 		.word	65535
 976 0104 FF7F0000 		.word	32767
 977 0108 00400140 		.word	1073823744
 978 010c 00100040 		.word	1073745920
 979 0110 30750000 		.word	30000
 980 0114 00E100E0 		.word	-536813312
 981 0118 FF00FFFF 		.word	-65281
 982              		.cfi_endproc
 983              	.LFE54:
 985              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 986              		.align	1
 987              		.global	TIM6_DAC_IRQHandler
 988              		.syntax unified
 989              		.code	16
 990              		.thumb_func
 992              	TIM6_DAC_IRQHandler:
 993              	.LFB55:
 284:Src/motor.c   **** 
 285:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 286:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 994              		.loc 1 286 32 is_stmt 1 view -0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 287:Src/motor.c   ****     /* Calculate the motor speed in raw encoder counts
 288:Src/motor.c   ****      * Note the motor speed is signed! Motor can be run in reverse.
 289:Src/motor.c   ****      * Speed is measured by how far the counter moved from center point
 290:Src/motor.c   ****      */
 291:Src/motor.c   ****     motorl_speed = (TIM3->CNT - 0x7FFF);
 999              		.loc 1 291 5 view .LVU253
 1000              		.loc 1 291 25 is_stmt 0 view .LVU254
 1001 0000 0B4A     		ldr	r2, .L42
 1002 0002 536A     		ldr	r3, [r2, #36]
 1003              		.loc 1 291 31 view .LVU255
 1004 0004 0B49     		ldr	r1, .L42+4
 1005 0006 8C46     		mov	ip, r1
 1006 0008 6344     		add	r3, r3, ip
 1007 000a 1BB2     		sxth	r3, r3
 1008              		.loc 1 291 18 view .LVU256
 1009 000c 0A49     		ldr	r1, .L42+8
 1010 000e 0B80     		strh	r3, [r1]
 292:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1011              		.loc 1 292 5 is_stmt 1 view .LVU257
 1012              		.loc 1 292 15 is_stmt 0 view .LVU258
 1013 0010 0A49     		ldr	r1, .L42+12
 1014 0012 5162     		str	r1, [r2, #36]
 293:Src/motor.c   **** 	  motorr_speed = (TIM15->CNT - 0x7FFF);
 1015              		.loc 1 293 4 is_stmt 1 view .LVU259
 1016              		.loc 1 293 25 is_stmt 0 view .LVU260
 1017 0014 0A4A     		ldr	r2, .L42+16
ARM GAS  /tmp/ccrUhjPV.s 			page 37


 1018 0016 536A     		ldr	r3, [r2, #36]
 1019              		.loc 1 293 31 view .LVU261
 1020 0018 6344     		add	r3, r3, ip
 1021 001a 1BB2     		sxth	r3, r3
 1022              		.loc 1 293 17 view .LVU262
 1023 001c 0948     		ldr	r0, .L42+20
 1024 001e 0380     		strh	r3, [r0]
 294:Src/motor.c   ****     TIM15->CNT = 0x7FFF; // Reset back to center point
 1025              		.loc 1 294 5 is_stmt 1 view .LVU263
 1026              		.loc 1 294 16 is_stmt 0 view .LVU264
 1027 0020 5162     		str	r1, [r2, #36]
 295:Src/motor.c   ****     
 296:Src/motor.c   ****     // Call the PI update function
 297:Src/motor.c   ****     TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 1028              		.loc 1 297 5 is_stmt 1 view .LVU265
 1029              		.loc 1 297 9 is_stmt 0 view .LVU266
 1030 0022 094A     		ldr	r2, .L42+24
 1031 0024 1369     		ldr	r3, [r2, #16]
 1032              		.loc 1 297 14 view .LVU267
 1033 0026 0121     		movs	r1, #1
 1034 0028 8B43     		bics	r3, r1
 1035 002a 1361     		str	r3, [r2, #16]
 298:Src/motor.c   **** }
 1036              		.loc 1 298 1 view .LVU268
 1037              		@ sp needed
 1038 002c 7047     		bx	lr
 1039              	.L43:
 1040 002e C046     		.align	2
 1041              	.L42:
 1042 0030 00040040 		.word	1073742848
 1043 0034 0180FFFF 		.word	-32767
 1044 0038 00000000 		.word	motorl_speed
 1045 003c FF7F0000 		.word	32767
 1046 0040 00400140 		.word	1073823744
 1047 0044 00000000 		.word	motorr_speed
 1048 0048 00100040 		.word	1073745920
 1049              		.cfi_endproc
 1050              	.LFE55:
 1052              		.section	.text.ADC_init,"ax",%progbits
 1053              		.align	1
 1054              		.global	ADC_init
 1055              		.syntax unified
 1056              		.code	16
 1057              		.thumb_func
 1059              	ADC_init:
 1060              	.LFB56:
 299:Src/motor.c   **** 
 300:Src/motor.c   **** void ADC_init(void) {
 1061              		.loc 1 300 21 is_stmt 1 view -0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 301:Src/motor.c   **** 
 302:Src/motor.c   ****     // Configure PA1 for ADC input (used for current monitoring)
 303:Src/motor.c   ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 1066              		.loc 1 303 5 view .LVU270
ARM GAS  /tmp/ccrUhjPV.s 			page 38


 1067              		.loc 1 303 10 is_stmt 0 view .LVU271
 1068 0000 9022     		movs	r2, #144
 1069 0002 D205     		lsls	r2, r2, #23
 1070 0004 1368     		ldr	r3, [r2]
 1071              		.loc 1 303 18 view .LVU272
 1072 0006 0C21     		movs	r1, #12
 1073 0008 0B43     		orrs	r3, r1
 1074 000a 1360     		str	r3, [r2]
 304:Src/motor.c   **** 
 305:Src/motor.c   ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 306:Src/motor.c   ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 1075              		.loc 1 306 5 is_stmt 1 view .LVU273
 1076              		.loc 1 306 8 is_stmt 0 view .LVU274
 1077 000c 154A     		ldr	r2, .L48
 1078 000e 9169     		ldr	r1, [r2, #24]
 1079              		.loc 1 306 18 view .LVU275
 1080 0010 8023     		movs	r3, #128
 1081 0012 9B00     		lsls	r3, r3, #2
 1082 0014 0B43     		orrs	r3, r1
 1083 0016 9361     		str	r3, [r2, #24]
 307:Src/motor.c   **** 
 308:Src/motor.c   ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 1084              		.loc 1 308 5 is_stmt 1 view .LVU276
 1085              		.loc 1 308 17 is_stmt 0 view .LVU277
 1086 0018 134B     		ldr	r3, .L48+4
 1087 001a 0021     		movs	r1, #0
 1088 001c D960     		str	r1, [r3, #12]
 309:Src/motor.c   ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 1089              		.loc 1 309 5 is_stmt 1 view .LVU278
 1090              		.loc 1 309 9 is_stmt 0 view .LVU279
 1091 001e D868     		ldr	r0, [r3, #12]
 1092              		.loc 1 309 17 view .LVU280
 1093 0020 8022     		movs	r2, #128
 1094 0022 9201     		lsls	r2, r2, #6
 1095 0024 0243     		orrs	r2, r0
 1096 0026 DA60     		str	r2, [r3, #12]
 310:Src/motor.c   ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 1097              		.loc 1 310 5 is_stmt 1 view .LVU281
 1098              		.loc 1 310 9 is_stmt 0 view .LVU282
 1099 0028 9A6A     		ldr	r2, [r3, #40]
 1100              		.loc 1 310 18 view .LVU283
 1101 002a 0220     		movs	r0, #2
 1102 002c 0243     		orrs	r2, r0
 1103 002e 9A62     		str	r2, [r3, #40]
 311:Src/motor.c   **** 
 312:Src/motor.c   ****     ADC1->CR = 0;
 1104              		.loc 1 312 5 is_stmt 1 view .LVU284
 1105              		.loc 1 312 14 is_stmt 0 view .LVU285
 1106 0030 9960     		str	r1, [r3, #8]
 313:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 1107              		.loc 1 313 5 is_stmt 1 view .LVU286
 1108              		.loc 1 313 9 is_stmt 0 view .LVU287
 1109 0032 9968     		ldr	r1, [r3, #8]
 1110              		.loc 1 313 14 view .LVU288
 1111 0034 8022     		movs	r2, #128
 1112 0036 1206     		lsls	r2, r2, #24
 1113 0038 0A43     		orrs	r2, r1
ARM GAS  /tmp/ccrUhjPV.s 			page 39


 1114 003a 9A60     		str	r2, [r3, #8]
 314:Src/motor.c   ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 1115              		.loc 1 314 5 is_stmt 1 view .LVU289
 1116              	.L45:
 1117              		.loc 1 314 11 discriminator 1 view .LVU290
 1118              		.loc 1 314 15 is_stmt 0 discriminator 1 view .LVU291
 1119 003c 0A4B     		ldr	r3, .L48+4
 1120 003e 9B68     		ldr	r3, [r3, #8]
 1121              		.loc 1 314 11 discriminator 1 view .LVU292
 1122 0040 002B     		cmp	r3, #0
 1123 0042 FBDB     		blt	.L45
 315:Src/motor.c   **** 
 316:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 1124              		.loc 1 316 5 is_stmt 1 view .LVU293
 1125              		.loc 1 316 9 is_stmt 0 view .LVU294
 1126 0044 084A     		ldr	r2, .L48+4
 1127 0046 9368     		ldr	r3, [r2, #8]
 1128              		.loc 1 316 14 view .LVU295
 1129 0048 0121     		movs	r1, #1
 1130 004a 0B43     		orrs	r3, r1
 1131 004c 9360     		str	r3, [r2, #8]
 317:Src/motor.c   ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 1132              		.loc 1 317 5 is_stmt 1 view .LVU296
 1133              	.L46:
 1134              		.loc 1 317 11 discriminator 1 view .LVU297
 1135              		.loc 1 317 17 is_stmt 0 discriminator 1 view .LVU298
 1136 004e 064B     		ldr	r3, .L48+4
 1137 0050 1B68     		ldr	r3, [r3]
 1138              		.loc 1 317 11 discriminator 1 view .LVU299
 1139 0052 DB07     		lsls	r3, r3, #31
 1140 0054 FBD5     		bpl	.L46
 318:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 1141              		.loc 1 318 5 is_stmt 1 view .LVU300
 1142              		.loc 1 318 9 is_stmt 0 view .LVU301
 1143 0056 044A     		ldr	r2, .L48+4
 1144 0058 9368     		ldr	r3, [r2, #8]
 1145              		.loc 1 318 14 view .LVU302
 1146 005a 0421     		movs	r1, #4
 1147 005c 0B43     		orrs	r3, r1
 1148 005e 9360     		str	r3, [r2, #8]
 319:Src/motor.c   **** }
 1149              		.loc 1 319 1 view .LVU303
 1150              		@ sp needed
 1151 0060 7047     		bx	lr
 1152              	.L49:
 1153 0062 C046     		.align	2
 1154              	.L48:
 1155 0064 00100240 		.word	1073876992
 1156 0068 00240140 		.word	1073816576
 1157              		.cfi_endproc
 1158              	.LFE56:
 1160              		.section	.text.motor_init,"ax",%progbits
 1161              		.align	1
 1162              		.global	motor_init
 1163              		.syntax unified
 1164              		.code	16
 1165              		.thumb_func
ARM GAS  /tmp/ccrUhjPV.s 			page 40


 1167              	motor_init:
 1168              	.LFB43:
  18:Src/motor.c   ****     pwm_init();
 1169              		.loc 1 18 23 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 0
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 1173 0000 10B5     		push	{r4, lr}
 1174              	.LCFI12:
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 4, -8
 1177              		.cfi_offset 14, -4
  19:Src/motor.c   ****     encoder_init();
 1178              		.loc 1 19 5 view .LVU305
 1179 0002 FFF7FEFF 		bl	pwm_init
 1180              	.LVL56:
  20:Src/motor.c   ****     ADC_init();
 1181              		.loc 1 20 5 view .LVU306
 1182 0006 FFF7FEFF 		bl	encoder_init
 1183              	.LVL57:
  21:Src/motor.c   **** }
 1184              		.loc 1 21 5 view .LVU307
 1185 000a FFF7FEFF 		bl	ADC_init
 1186              	.LVL58:
  22:Src/motor.c   **** 
 1187              		.loc 1 22 1 is_stmt 0 view .LVU308
 1188              		@ sp needed
 1189 000e 10BD     		pop	{r4, pc}
 1190              		.cfi_endproc
 1191              	.LFE43:
 1193              		.global	pwm_left
 1194              		.section	.data.pwm_left,"aw"
 1197              	pwm_left:
 1198 0000 64       		.byte	100
 1199              		.global	pwm_right
 1200              		.section	.data.pwm_right,"aw"
 1203              	pwm_right:
 1204 0000 5C       		.byte	92
 1205              		.global	Ki
 1206              		.section	.data.Ki,"aw"
 1209              	Ki:
 1210 0000 01       		.byte	1
 1211              		.global	Kp
 1212              		.section	.data.Kp,"aw"
 1215              	Kp:
 1216 0000 01       		.byte	1
 1217              		.global	error
 1218              		.section	.bss.error,"aw",%nobits
 1219              		.align	1
 1222              	error:
 1223 0000 0000     		.space	2
 1224              		.global	adc_value
 1225              		.section	.bss.adc_value,"aw",%nobits
 1228              	adc_value:
 1229 0000 00       		.space	1
 1230              		.global	motorr_speed
 1231              		.section	.bss.motorr_speed,"aw",%nobits
ARM GAS  /tmp/ccrUhjPV.s 			page 41


 1232              		.align	1
 1235              	motorr_speed:
 1236 0000 0000     		.space	2
 1237              		.global	motorl_speed
 1238              		.section	.bss.motorl_speed,"aw",%nobits
 1239              		.align	1
 1242              	motorl_speed:
 1243 0000 0000     		.space	2
 1244              		.global	target_rpm
 1245              		.section	.bss.target_rpm,"aw",%nobits
 1246              		.align	1
 1249              	target_rpm:
 1250 0000 0000     		.space	2
 1251              		.global	duty_cycle
 1252              		.section	.bss.duty_cycle,"aw",%nobits
 1255              	duty_cycle:
 1256 0000 00       		.space	1
 1257              		.global	error_integral
 1258              		.section	.bss.error_integral,"aw",%nobits
 1259              		.align	1
 1262              	error_integral:
 1263 0000 0000     		.space	2
 1264              		.text
 1265              	.Letext0:
 1266              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1267              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1268              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1269              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1270              		.file 7 "Inc/pins.h"
 1271              		.file 8 "Inc/motor.h"
 1272              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccrUhjPV.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/ccrUhjPV.s:19     .text.pwm_init:00000000 $t
     /tmp/ccrUhjPV.s:25     .text.pwm_init:00000000 pwm_init
     /tmp/ccrUhjPV.s:172    .text.pwm_init:00000094 $d
     /tmp/ccrUhjPV.s:181    .text.pwm_setDutyCycleL:00000000 $t
     /tmp/ccrUhjPV.s:187    .text.pwm_setDutyCycleL:00000000 pwm_setDutyCycleL
     /tmp/ccrUhjPV.s:224    .text.pwm_setDutyCycleL:00000018 $d
     /tmp/ccrUhjPV.s:229    .text.pwm_setDutyCycleR:00000000 $t
     /tmp/ccrUhjPV.s:235    .text.pwm_setDutyCycleR:00000000 pwm_setDutyCycleR
     /tmp/ccrUhjPV.s:274    .text.set_Motor_Direction:00000000 $t
     /tmp/ccrUhjPV.s:280    .text.set_Motor_Direction:00000000 set_Motor_Direction
     /tmp/ccrUhjPV.s:352    .text.set_Forward:00000000 $t
     /tmp/ccrUhjPV.s:358    .text.set_Forward:00000000 set_Forward
     /tmp/ccrUhjPV.s:397    .text.set_Forward:00000028 $d
     /tmp/ccrUhjPV.s:1203   .data.pwm_right:00000000 pwm_right
     /tmp/ccrUhjPV.s:1197   .data.pwm_left:00000000 pwm_left
     /tmp/ccrUhjPV.s:405    .text.set_Backward:00000000 $t
     /tmp/ccrUhjPV.s:411    .text.set_Backward:00000000 set_Backward
     /tmp/ccrUhjPV.s:450    .text.set_Backward:00000028 $d
     /tmp/ccrUhjPV.s:458    .text.set_Right:00000000 $t
     /tmp/ccrUhjPV.s:464    .text.set_Right:00000000 set_Right
     /tmp/ccrUhjPV.s:503    .text.set_Right:00000028 $d
     /tmp/ccrUhjPV.s:511    .text.set_Left:00000000 $t
     /tmp/ccrUhjPV.s:517    .text.set_Left:00000000 set_Left
     /tmp/ccrUhjPV.s:556    .text.set_Left:00000028 $d
     /tmp/ccrUhjPV.s:564    .text.motors_Off:00000000 $t
     /tmp/ccrUhjPV.s:570    .text.motors_Off:00000000 motors_Off
     /tmp/ccrUhjPV.s:596    .rodata.MoveMotors.str1.4:00000000 $d
     /tmp/ccrUhjPV.s:603    .text.MoveMotors:00000000 $t
     /tmp/ccrUhjPV.s:609    .text.MoveMotors:00000000 MoveMotors
     /tmp/ccrUhjPV.s:711    .text.MoveMotors:00000058 $d
     /tmp/ccrUhjPV.s:717    .text.encoder_init:00000000 $t
     /tmp/ccrUhjPV.s:723    .text.encoder_init:00000000 encoder_init
     /tmp/ccrUhjPV.s:970    .text.encoder_init:000000ec $d
     /tmp/ccrUhjPV.s:986    .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/ccrUhjPV.s:992    .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/ccrUhjPV.s:1042   .text.TIM6_DAC_IRQHandler:00000030 $d
     /tmp/ccrUhjPV.s:1242   .bss.motorl_speed:00000000 motorl_speed
     /tmp/ccrUhjPV.s:1235   .bss.motorr_speed:00000000 motorr_speed
     /tmp/ccrUhjPV.s:1053   .text.ADC_init:00000000 $t
     /tmp/ccrUhjPV.s:1059   .text.ADC_init:00000000 ADC_init
     /tmp/ccrUhjPV.s:1155   .text.ADC_init:00000064 $d
     /tmp/ccrUhjPV.s:1161   .text.motor_init:00000000 $t
     /tmp/ccrUhjPV.s:1167   .text.motor_init:00000000 motor_init
     /tmp/ccrUhjPV.s:1209   .data.Ki:00000000 Ki
     /tmp/ccrUhjPV.s:1215   .data.Kp:00000000 Kp
     /tmp/ccrUhjPV.s:1222   .bss.error:00000000 error
     /tmp/ccrUhjPV.s:1219   .bss.error:00000000 $d
     /tmp/ccrUhjPV.s:1228   .bss.adc_value:00000000 adc_value
     /tmp/ccrUhjPV.s:1229   .bss.adc_value:00000000 $d
     /tmp/ccrUhjPV.s:1232   .bss.motorr_speed:00000000 $d
     /tmp/ccrUhjPV.s:1239   .bss.motorl_speed:00000000 $d
     /tmp/ccrUhjPV.s:1249   .bss.target_rpm:00000000 target_rpm
     /tmp/ccrUhjPV.s:1246   .bss.target_rpm:00000000 $d
     /tmp/ccrUhjPV.s:1255   .bss.duty_cycle:00000000 duty_cycle
     /tmp/ccrUhjPV.s:1256   .bss.duty_cycle:00000000 $d
ARM GAS  /tmp/ccrUhjPV.s 			page 43


     /tmp/ccrUhjPV.s:1262   .bss.error_integral:00000000 error_integral
     /tmp/ccrUhjPV.s:1259   .bss.error_integral:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
motor_left_pins
motor_right_pins
__aeabi_uidiv
HAL_Delay
