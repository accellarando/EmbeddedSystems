ARM GAS  /tmp/ccAGE7Go.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** 
   7:Src/motor.c   **** volatile int16_t error_integral = 0;    // Integrated error signal
   8:Src/motor.c   **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
   9:Src/motor.c   **** volatile int16_t target_rpm = 0;    	// Desired speed target
  10:Src/motor.c   **** volatile int16_t motorl_speed = 0;   	// Measured left motor speed
  11:Src/motor.c   **** volatile int16_t motorr_speed = 0;   	// Measured left motor speed
  12:Src/motor.c   **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  13:Src/motor.c   **** volatile int16_t error = 0;         	// Speed error signal
  14:Src/motor.c   **** volatile uint8_t Kp = 1;            	// Proportional gain
  15:Src/motor.c   **** volatile uint8_t Ki = 1;            	// Integral gain
  16:Src/motor.c   **** 
  17:Src/motor.c   **** // Sets up the entire motor drive system
  18:Src/motor.c   **** void motor_init(void) {
  19:Src/motor.c   ****     pwm_init();
  20:Src/motor.c   ****     encoder_init();
  21:Src/motor.c   ****     ADC_init();
  22:Src/motor.c   **** }
  23:Src/motor.c   **** 
  24:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  25:Src/motor.c   **** void pwm_init(void) {
  27              		.loc 1 25 21 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccAGE7Go.s 			page 2


  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  26:Src/motor.c   **** 	//RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  27:Src/motor.c   **** 	
  28:Src/motor.c   ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  29:Src/motor.c   ****     GPIOA->MODER |= (1 << 9);
  38              		.loc 1 29 5 view .LVU1
  39              		.loc 1 29 10 is_stmt 0 view .LVU2
  40 0002 9022     		movs	r2, #144
  41 0004 D205     		lsls	r2, r2, #23
  42 0006 1168     		ldr	r1, [r2]
  43              		.loc 1 29 18 view .LVU3
  44 0008 8023     		movs	r3, #128
  45 000a 9B00     		lsls	r3, r3, #2
  46 000c 0B43     		orrs	r3, r1
  47 000e 1360     		str	r3, [r2]
  30:Src/motor.c   ****     GPIOA->MODER &= ~(1 << 8);
  48              		.loc 1 30 5 is_stmt 1 view .LVU4
  49              		.loc 1 30 10 is_stmt 0 view .LVU5
  50 0010 1368     		ldr	r3, [r2]
  51              		.loc 1 30 18 view .LVU6
  52 0012 3C49     		ldr	r1, .L2
  53 0014 0B40     		ands	r3, r1
  54 0016 1360     		str	r3, [r2]
  31:Src/motor.c   **** 	
  32:Src/motor.c   **** 	  // Set up pin PB3 for H-bridge PWM output (TIMER 2 CH2)
  33:Src/motor.c   ****     GPIOB->MODER |= (1 << 7);
  55              		.loc 1 33 5 is_stmt 1 view .LVU7
  56              		.loc 1 33 10 is_stmt 0 view .LVU8
  57 0018 3B4B     		ldr	r3, .L2+4
  58 001a 1968     		ldr	r1, [r3]
  59              		.loc 1 33 18 view .LVU9
  60 001c 8020     		movs	r0, #128
  61 001e 0143     		orrs	r1, r0
  62 0020 1960     		str	r1, [r3]
  34:Src/motor.c   ****     GPIOB->MODER &= ~(1 << 6);
  63              		.loc 1 34 5 is_stmt 1 view .LVU10
  64              		.loc 1 34 10 is_stmt 0 view .LVU11
  65 0022 1968     		ldr	r1, [r3]
  66              		.loc 1 34 18 view .LVU12
  67 0024 4038     		subs	r0, r0, #64
  68 0026 8143     		bics	r1, r0
  69 0028 1960     		str	r1, [r3]
  35:Src/motor.c   **** 
  36:Src/motor.c   ****     // Set PA4 to AF4,
  37:Src/motor.c   ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  70              		.loc 1 37 5 is_stmt 1 view .LVU13
  71              		.loc 1 37 15 is_stmt 0 view .LVU14
  72 002a 116A     		ldr	r1, [r2, #32]
  73              		.loc 1 37 19 view .LVU15
  74 002c 3748     		ldr	r0, .L2+8
  75 002e 0140     		ands	r1, r0
  76 0030 1162     		str	r1, [r2, #32]
  38:Src/motor.c   ****     GPIOA->AFR[0] |= (1 << 18);
  77              		.loc 1 38 5 is_stmt 1 view .LVU16
ARM GAS  /tmp/ccAGE7Go.s 			page 3


  78              		.loc 1 38 15 is_stmt 0 view .LVU17
  79 0032 106A     		ldr	r0, [r2, #32]
  80              		.loc 1 38 19 view .LVU18
  81 0034 8021     		movs	r1, #128
  82 0036 C902     		lsls	r1, r1, #11
  83 0038 0143     		orrs	r1, r0
  84 003a 1162     		str	r1, [r2, #32]
  39:Src/motor.c   **** 	
  40:Src/motor.c   **** 		// Set PB3 to AF2,
  41:Src/motor.c   ****     GPIOB->AFR[0] &= 0xFFFF0FFF; // clear PB3 bits,
  85              		.loc 1 41 5 is_stmt 1 view .LVU19
  86              		.loc 1 41 15 is_stmt 0 view .LVU20
  87 003c 196A     		ldr	r1, [r3, #32]
  88              		.loc 1 41 19 view .LVU21
  89 003e 3448     		ldr	r0, .L2+12
  90 0040 0140     		ands	r1, r0
  91 0042 1962     		str	r1, [r3, #32]
  42:Src/motor.c   ****     GPIOB->AFR[0] |= (1 << 13);
  92              		.loc 1 42 5 is_stmt 1 view .LVU22
  93              		.loc 1 42 15 is_stmt 0 view .LVU23
  94 0044 186A     		ldr	r0, [r3, #32]
  95              		.loc 1 42 19 view .LVU24
  96 0046 8021     		movs	r1, #128
  97 0048 8901     		lsls	r1, r1, #6
  98 004a 0143     		orrs	r1, r0
  99 004c 1962     		str	r1, [r3, #32]
  43:Src/motor.c   **** 
  44:Src/motor.c   ****     // Set up a PA5, PA8 as GPIO output pins for motor direction control
  45:Src/motor.c   ****     GPIOA->MODER &= 0xFFFCF3FF; // clear PA5, PA6 bits,
 100              		.loc 1 45 5 is_stmt 1 view .LVU25
 101              		.loc 1 45 10 is_stmt 0 view .LVU26
 102 004e 1168     		ldr	r1, [r2]
 103              		.loc 1 45 18 view .LVU27
 104 0050 3048     		ldr	r0, .L2+16
 105 0052 0140     		ands	r1, r0
 106 0054 1160     		str	r1, [r2]
  46:Src/motor.c   ****     GPIOA->MODER |= (1 << 10) | (1 << 16);
 107              		.loc 1 46 5 is_stmt 1 view .LVU28
 108              		.loc 1 46 10 is_stmt 0 view .LVU29
 109 0056 1068     		ldr	r0, [r2]
 110              		.loc 1 46 18 view .LVU30
 111 0058 8221     		movs	r1, #130
 112 005a 4902     		lsls	r1, r1, #9
 113 005c 0143     		orrs	r1, r0
 114 005e 1160     		str	r1, [r2]
  47:Src/motor.c   **** 	
  48:Src/motor.c   **** 		// Set up a PB2, PB10 as GPIO output pins for motor direction control
  49:Src/motor.c   ****     GPIOB->MODER &= 0xFFCFFFCF; // clear PB2, PB10 bits,
 115              		.loc 1 49 5 is_stmt 1 view .LVU31
 116              		.loc 1 49 10 is_stmt 0 view .LVU32
 117 0060 1A68     		ldr	r2, [r3]
 118              		.loc 1 49 18 view .LVU33
 119 0062 2D49     		ldr	r1, .L2+20
 120 0064 0A40     		ands	r2, r1
 121 0066 1A60     		str	r2, [r3]
  50:Src/motor.c   ****     GPIOB->MODER |= (1 << 4) | (1 << 20);
 122              		.loc 1 50 5 is_stmt 1 view .LVU34
ARM GAS  /tmp/ccAGE7Go.s 			page 4


 123              		.loc 1 50 10 is_stmt 0 view .LVU35
 124 0068 1968     		ldr	r1, [r3]
 125              		.loc 1 50 18 view .LVU36
 126 006a 2C4A     		ldr	r2, .L2+24
 127 006c 0A43     		orrs	r2, r1
 128 006e 1A60     		str	r2, [r3]
  51:Src/motor.c   ****    
  52:Src/motor.c   ****     //Initialize one direction pin to high, the other low
  53:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_a.gpio, motor_left_pins.dir_a.pin.Pin, GPIO_PIN_SET);
 129              		.loc 1 53 2 is_stmt 1 view .LVU37
 130              		.loc 1 53 73 is_stmt 0 view .LVU38
 131 0070 2B4C     		ldr	r4, .L2+28
 132              		.loc 1 53 2 view .LVU39
 133 0072 A18B     		ldrh	r1, [r4, #28]
 134 0074 A069     		ldr	r0, [r4, #24]
 135 0076 0122     		movs	r2, #1
 136 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 137              	.LVL0:
  54:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_b.gpio, motor_left_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
 138              		.loc 1 54 2 is_stmt 1 view .LVU40
 139 007c A18E     		ldrh	r1, [r4, #52]
 140 007e 206B     		ldr	r0, [r4, #48]
 141 0080 0022     		movs	r2, #0
 142 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL1:
  55:Src/motor.c   **** 
  56:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_a.gpio, motor_right_pins.dir_a.pin.Pin, GPIO_PIN_SET);
 144              		.loc 1 56 2 view .LVU41
 145              		.loc 1 56 75 is_stmt 0 view .LVU42
 146 0086 274C     		ldr	r4, .L2+32
 147              		.loc 1 56 2 view .LVU43
 148 0088 A18B     		ldrh	r1, [r4, #28]
 149 008a A069     		ldr	r0, [r4, #24]
 150 008c 0122     		movs	r2, #1
 151 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 152              	.LVL2:
  57:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_b.gpio, motor_right_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
 153              		.loc 1 57 2 is_stmt 1 view .LVU44
 154 0092 A18E     		ldrh	r1, [r4, #52]
 155 0094 206B     		ldr	r0, [r4, #48]
 156 0096 0022     		movs	r2, #0
 157 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 158              	.LVL3:
  58:Src/motor.c   **** 
  59:Src/motor.c   ****     // Set up PWM timer
  60:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 159              		.loc 1 60 5 view .LVU45
 160              		.loc 1 60 8 is_stmt 0 view .LVU46
 161 009c 224B     		ldr	r3, .L2+36
 162 009e D969     		ldr	r1, [r3, #28]
 163              		.loc 1 60 18 view .LVU47
 164 00a0 8022     		movs	r2, #128
 165 00a2 5200     		lsls	r2, r2, #1
 166 00a4 0A43     		orrs	r2, r1
 167 00a6 DA61     		str	r2, [r3, #28]
  61:Src/motor.c   ****     TIM14->CR1 = 0;                         // Clear control registers
 168              		.loc 1 61 5 is_stmt 1 view .LVU48
ARM GAS  /tmp/ccAGE7Go.s 			page 5


 169              		.loc 1 61 16 is_stmt 0 view .LVU49
 170 00a8 204A     		ldr	r2, .L2+40
 171 00aa 0021     		movs	r1, #0
 172 00ac 1160     		str	r1, [r2]
  62:Src/motor.c   ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 173              		.loc 1 62 5 is_stmt 1 view .LVU50
 174              		.loc 1 62 18 is_stmt 0 view .LVU51
 175 00ae 9161     		str	r1, [r2, #24]
  63:Src/motor.c   ****     TIM14->CCER = 0;
 176              		.loc 1 63 5 is_stmt 1 view .LVU52
 177              		.loc 1 63 17 is_stmt 0 view .LVU53
 178 00b0 1162     		str	r1, [r2, #32]
  64:Src/motor.c   **** 		
  65:Src/motor.c   **** 		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 179              		.loc 1 65 3 is_stmt 1 view .LVU54
 180              		.loc 1 65 6 is_stmt 0 view .LVU55
 181 00b2 DC69     		ldr	r4, [r3, #28]
 182              		.loc 1 65 16 view .LVU56
 183 00b4 0120     		movs	r0, #1
 184 00b6 0443     		orrs	r4, r0
 185 00b8 DC61     		str	r4, [r3, #28]
  66:Src/motor.c   ****     TIM2->CR1 = 0;                         // Clear control registers
 186              		.loc 1 66 5 is_stmt 1 view .LVU57
 187              		.loc 1 66 15 is_stmt 0 view .LVU58
 188 00ba 8023     		movs	r3, #128
 189 00bc DB05     		lsls	r3, r3, #23
 190 00be 1960     		str	r1, [r3]
  67:Src/motor.c   ****     TIM2->CCMR1 = 0;                       // (prevents having to manually clear bits)
 191              		.loc 1 67 5 is_stmt 1 view .LVU59
 192              		.loc 1 67 17 is_stmt 0 view .LVU60
 193 00c0 9961     		str	r1, [r3, #24]
  68:Src/motor.c   ****     TIM2->CCER = 0;
 194              		.loc 1 68 5 is_stmt 1 view .LVU61
 195              		.loc 1 68 16 is_stmt 0 view .LVU62
 196 00c2 1962     		str	r1, [r3, #32]
  69:Src/motor.c   **** 
  70:Src/motor.c   ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  71:Src/motor.c   ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 197              		.loc 1 71 5 is_stmt 1 view .LVU63
 198              		.loc 1 71 10 is_stmt 0 view .LVU64
 199 00c4 9469     		ldr	r4, [r2, #24]
 200              		.loc 1 71 18 view .LVU65
 201 00c6 6825     		movs	r5, #104
 202 00c8 2C43     		orrs	r4, r5
 203 00ca 9461     		str	r4, [r2, #24]
  72:Src/motor.c   ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 204              		.loc 1 72 5 is_stmt 1 view .LVU66
 205              		.loc 1 72 10 is_stmt 0 view .LVU67
 206 00cc 146A     		ldr	r4, [r2, #32]
 207              		.loc 1 72 17 view .LVU68
 208 00ce 0443     		orrs	r4, r0
 209 00d0 1462     		str	r4, [r2, #32]
  73:Src/motor.c   ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 210              		.loc 1 73 5 is_stmt 1 view .LVU69
 211              		.loc 1 73 16 is_stmt 0 view .LVU70
 212 00d2 9062     		str	r0, [r2, #40]
  74:Src/motor.c   ****     TIM14->ARR = 1200;                      // PWM at 20kHz
ARM GAS  /tmp/ccAGE7Go.s 			page 6


 213              		.loc 1 74 5 is_stmt 1 view .LVU71
 214              		.loc 1 74 16 is_stmt 0 view .LVU72
 215 00d4 9625     		movs	r5, #150
 216 00d6 ED00     		lsls	r5, r5, #3
 217 00d8 D562     		str	r5, [r2, #44]
  75:Src/motor.c   ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 218              		.loc 1 75 5 is_stmt 1 view .LVU73
 219              		.loc 1 75 17 is_stmt 0 view .LVU74
 220 00da 5163     		str	r1, [r2, #52]
  76:Src/motor.c   ****     
  77:Src/motor.c   ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 221              		.loc 1 77 5 is_stmt 1 view .LVU75
 222              		.loc 1 77 10 is_stmt 0 view .LVU76
 223 00dc 1468     		ldr	r4, [r2]
 224              		.loc 1 77 16 view .LVU77
 225 00de 0443     		orrs	r4, r0
 226 00e0 1460     		str	r4, [r2]
  78:Src/motor.c   **** 		
  79:Src/motor.c   **** 		TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 227              		.loc 1 79 3 is_stmt 1 view .LVU78
 228              		.loc 1 79 7 is_stmt 0 view .LVU79
 229 00e2 9C69     		ldr	r4, [r3, #24]
 230              		.loc 1 79 15 view .LVU80
 231 00e4 D022     		movs	r2, #208
 232 00e6 D201     		lsls	r2, r2, #7
 233 00e8 2243     		orrs	r2, r4
 234 00ea 9A61     		str	r2, [r3, #24]
  80:Src/motor.c   ****     TIM2->CCER |= TIM_CCER_CC2E;           // Enable capture-compare channel 2
 235              		.loc 1 80 5 is_stmt 1 view .LVU81
 236              		.loc 1 80 9 is_stmt 0 view .LVU82
 237 00ec 1A6A     		ldr	r2, [r3, #32]
 238              		.loc 1 80 16 view .LVU83
 239 00ee 1024     		movs	r4, #16
 240 00f0 2243     		orrs	r2, r4
 241 00f2 1A62     		str	r2, [r3, #32]
  81:Src/motor.c   ****     TIM2->PSC = 1;                         // Run timer on 24Mhz
 242              		.loc 1 81 5 is_stmt 1 view .LVU84
 243              		.loc 1 81 15 is_stmt 0 view .LVU85
 244 00f4 9862     		str	r0, [r3, #40]
  82:Src/motor.c   ****     TIM2->ARR = 1200;                      // PWM at 20kHz
 245              		.loc 1 82 5 is_stmt 1 view .LVU86
 246              		.loc 1 82 15 is_stmt 0 view .LVU87
 247 00f6 DD62     		str	r5, [r3, #44]
  83:Src/motor.c   ****     TIM2->CCR2 = 0;                        // Start PWM at 0% duty cycle
 248              		.loc 1 83 5 is_stmt 1 view .LVU88
 249              		.loc 1 83 16 is_stmt 0 view .LVU89
 250 00f8 9963     		str	r1, [r3, #56]
  84:Src/motor.c   ****     
  85:Src/motor.c   ****     TIM2->CR1 |= TIM_CR1_CEN;              // Enable timer
 251              		.loc 1 85 5 is_stmt 1 view .LVU90
 252              		.loc 1 85 9 is_stmt 0 view .LVU91
 253 00fa 1A68     		ldr	r2, [r3]
 254              		.loc 1 85 15 view .LVU92
 255 00fc 0243     		orrs	r2, r0
 256 00fe 1A60     		str	r2, [r3]
  86:Src/motor.c   **** }
 257              		.loc 1 86 1 view .LVU93
ARM GAS  /tmp/ccAGE7Go.s 			page 7


 258              		@ sp needed
 259 0100 70BD     		pop	{r4, r5, r6, pc}
 260              	.L3:
 261 0102 C046     		.align	2
 262              	.L2:
 263 0104 FFFEFFFF 		.word	-257
 264 0108 00040048 		.word	1207960576
 265 010c FFFFF0FF 		.word	-983041
 266 0110 FF0FFFFF 		.word	-61441
 267 0114 FFF3FCFF 		.word	-199681
 268 0118 CFFFCFFF 		.word	-3145777
 269 011c 10001000 		.word	1048592
 270 0120 00000000 		.word	motor_left_pins
 271 0124 00000000 		.word	motor_right_pins
 272 0128 00100240 		.word	1073876992
 273 012c 00200040 		.word	1073750016
 274              		.cfi_endproc
 275              	.LFE44:
 277              		.global	__aeabi_uidiv
 278              		.section	.text.pwm_setDutyCycleL,"ax",%progbits
 279              		.align	1
 280              		.global	pwm_setDutyCycleL
 281              		.syntax unified
 282              		.code	16
 283              		.thumb_func
 285              	pwm_setDutyCycleL:
 286              	.LVL4:
 287              	.LFB45:
  87:Src/motor.c   **** 
  88:Src/motor.c   **** // Set the duty cycle of the PWM Left, accepts (0-100)
  89:Src/motor.c   **** void pwm_setDutyCycleL(uint8_t duty) {
 288              		.loc 1 89 38 is_stmt 1 view -0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		.loc 1 89 38 is_stmt 0 view .LVU95
 293 0000 10B5     		push	{r4, lr}
 294              	.LCFI1:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 4, -8
 297              		.cfi_offset 14, -4
  90:Src/motor.c   ****     if(duty <= 100) {
 298              		.loc 1 90 5 is_stmt 1 view .LVU96
 299              		.loc 1 90 7 is_stmt 0 view .LVU97
 300 0002 6428     		cmp	r0, #100
 301 0004 06D8     		bhi	.L4
  91:Src/motor.c   ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 302              		.loc 1 91 9 is_stmt 1 view .LVU98
 303              		.loc 1 91 44 is_stmt 0 view .LVU99
 304 0006 044C     		ldr	r4, .L6
 305 0008 E36A     		ldr	r3, [r4, #44]
 306              		.loc 1 91 38 view .LVU100
 307 000a 5843     		muls	r0, r3
 308              	.LVL5:
 309              		.loc 1 91 50 view .LVU101
 310 000c 6421     		movs	r1, #100
 311 000e FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  /tmp/ccAGE7Go.s 			page 8


 312              	.LVL6:
 313              		.loc 1 91 21 view .LVU102
 314 0012 6063     		str	r0, [r4, #52]
 315              	.L4:
  92:Src/motor.c   ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  93:Src/motor.c   ****     }
  94:Src/motor.c   **** }
 316              		.loc 1 94 1 view .LVU103
 317              		@ sp needed
 318 0014 10BD     		pop	{r4, pc}
 319              	.L7:
 320 0016 C046     		.align	2
 321              	.L6:
 322 0018 00200040 		.word	1073750016
 323              		.cfi_endproc
 324              	.LFE45:
 326              		.section	.text.pwm_setDutyCycleR,"ax",%progbits
 327              		.align	1
 328              		.global	pwm_setDutyCycleR
 329              		.syntax unified
 330              		.code	16
 331              		.thumb_func
 333              	pwm_setDutyCycleR:
 334              	.LVL7:
 335              	.LFB46:
  95:Src/motor.c   **** 
  96:Src/motor.c   **** // Set the duty cycle of the PWM Right, accepts (0-100)
  97:Src/motor.c   **** void pwm_setDutyCycleR(uint8_t duty) {
 336              		.loc 1 97 38 is_stmt 1 view -0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		.loc 1 97 38 is_stmt 0 view .LVU105
 341 0000 10B5     		push	{r4, lr}
 342              	.LCFI2:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 4, -8
 345              		.cfi_offset 14, -4
  98:Src/motor.c   ****     if(duty <= 100) {
 346              		.loc 1 98 5 is_stmt 1 view .LVU106
 347              		.loc 1 98 7 is_stmt 0 view .LVU107
 348 0002 6428     		cmp	r0, #100
 349 0004 07D8     		bhi	.L8
  99:Src/motor.c   ****         TIM2->CCR2 = ((uint32_t)duty*TIM2->ARR)/100;  // Use linear transform to produce CCR1 value
 350              		.loc 1 99 9 is_stmt 1 view .LVU108
 351              		.loc 1 99 42 is_stmt 0 view .LVU109
 352 0006 8024     		movs	r4, #128
 353 0008 E405     		lsls	r4, r4, #23
 354 000a E36A     		ldr	r3, [r4, #44]
 355              		.loc 1 99 37 view .LVU110
 356 000c 5843     		muls	r0, r3
 357              	.LVL8:
 358              		.loc 1 99 48 view .LVU111
 359 000e 6421     		movs	r1, #100
 360 0010 FFF7FEFF 		bl	__aeabi_uidiv
 361              	.LVL9:
 362              		.loc 1 99 20 view .LVU112
ARM GAS  /tmp/ccAGE7Go.s 			page 9


 363 0014 A063     		str	r0, [r4, #56]
 364              	.L8:
 100:Src/motor.c   ****         // (CCR2 == "pulse" parameter in PWM struct used by peripheral library)
 101:Src/motor.c   ****     }
 102:Src/motor.c   **** }
 365              		.loc 1 102 1 view .LVU113
 366              		@ sp needed
 367 0016 10BD     		pop	{r4, pc}
 368              		.cfi_endproc
 369              	.LFE46:
 371              		.section	.text.set_Motor_Direction,"ax",%progbits
 372              		.align	1
 373              		.global	set_Motor_Direction
 374              		.syntax unified
 375              		.code	16
 376              		.thumb_func
 378              	set_Motor_Direction:
 379              	.LVL10:
 380              	.LFB47:
 103:Src/motor.c   **** 
 104:Src/motor.c   **** /*
 105:Src/motor.c   ****  * This sets an individual motor's direction.
 106:Src/motor.c   ****  * Note: use MoveMotors to change multiple motor values, eg to turn.
 107:Src/motor.c   ****  */
 108:Src/motor.c   **** void set_Motor_Direction(Direction dir, motor_pins_t* pins){
 381              		.loc 1 108 60 is_stmt 1 view -0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		.loc 1 108 60 is_stmt 0 view .LVU115
 386 0000 10B5     		push	{r4, lr}
 387              	.LCFI3:
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 4, -8
 390              		.cfi_offset 14, -4
 391 0002 0C00     		movs	r4, r1
 109:Src/motor.c   **** 	switch(dir){
 392              		.loc 1 109 2 is_stmt 1 view .LVU116
 393 0004 0028     		cmp	r0, #0
 394 0006 02D0     		beq	.L11
 395 0008 0328     		cmp	r0, #3
 396 000a 0BD0     		beq	.L12
 397              	.LVL11:
 398              	.L10:
 110:Src/motor.c   **** 		case FORWARD:
 111:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_SET);
 112:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 113:Src/motor.c   **** 			break;
 114:Src/motor.c   **** 		case BACKWARD:
 115:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_SET);
 116:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 117:Src/motor.c   **** 			break;
 118:Src/motor.c   **** 		default:
 119:Src/motor.c   **** 			;
 120:Src/motor.c   **** 	}
 121:Src/motor.c   **** }
 399              		.loc 1 121 1 is_stmt 0 view .LVU117
ARM GAS  /tmp/ccAGE7Go.s 			page 10


 400              		@ sp needed
 401              	.LVL12:
 402              		.loc 1 121 1 view .LVU118
 403 000c 10BD     		pop	{r4, pc}
 404              	.LVL13:
 405              	.L11:
 111:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 406              		.loc 1 111 4 is_stmt 1 view .LVU119
 407 000e 898B     		ldrh	r1, [r1, #28]
 408              	.LVL14:
 111:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 409              		.loc 1 111 4 is_stmt 0 view .LVU120
 410 0010 A069     		ldr	r0, [r4, #24]
 411              	.LVL15:
 111:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 412              		.loc 1 111 4 view .LVU121
 413 0012 0122     		movs	r2, #1
 414 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 415              	.LVL16:
 112:Src/motor.c   **** 			break;
 416              		.loc 1 112 4 is_stmt 1 view .LVU122
 417 0018 A18E     		ldrh	r1, [r4, #52]
 418 001a 206B     		ldr	r0, [r4, #48]
 419 001c 0022     		movs	r2, #0
 420 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 421              	.LVL17:
 113:Src/motor.c   **** 		case BACKWARD:
 422              		.loc 1 113 4 view .LVU123
 423 0022 F3E7     		b	.L10
 424              	.LVL18:
 425              	.L12:
 115:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 426              		.loc 1 115 4 view .LVU124
 427 0024 898B     		ldrh	r1, [r1, #28]
 428              	.LVL19:
 115:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 429              		.loc 1 115 4 is_stmt 0 view .LVU125
 430 0026 A069     		ldr	r0, [r4, #24]
 431              	.LVL20:
 115:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 432              		.loc 1 115 4 view .LVU126
 433 0028 0122     		movs	r2, #1
 434 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 435              	.LVL21:
 116:Src/motor.c   **** 			break;
 436              		.loc 1 116 4 is_stmt 1 view .LVU127
 437 002e A18E     		ldrh	r1, [r4, #52]
 438 0030 206B     		ldr	r0, [r4, #48]
 439 0032 0022     		movs	r2, #0
 440 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 441              	.LVL22:
 117:Src/motor.c   **** 		default:
 442              		.loc 1 117 4 view .LVU128
 119:Src/motor.c   **** 	}
 443              		.loc 1 119 4 view .LVU129
 444              		.loc 1 121 1 is_stmt 0 view .LVU130
 445 0038 E8E7     		b	.L10
ARM GAS  /tmp/ccAGE7Go.s 			page 11


 446              		.cfi_endproc
 447              	.LFE47:
 449              		.section	.text.set_Forward,"ax",%progbits
 450              		.align	1
 451              		.global	set_Forward
 452              		.syntax unified
 453              		.code	16
 454              		.thumb_func
 456              	set_Forward:
 457              	.LFB48:
 122:Src/motor.c   **** 
 123:Src/motor.c   **** void set_Forward(){
 458              		.loc 1 123 19 is_stmt 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462 0000 10B5     		push	{r4, lr}
 463              	.LCFI4:
 464              		.cfi_def_cfa_offset 8
 465              		.cfi_offset 4, -8
 466              		.cfi_offset 14, -4
 124:Src/motor.c   **** 	//left go forward
 125:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 467              		.loc 1 125 2 view .LVU132
 468 0002 0449     		ldr	r1, .L15
 469 0004 0020     		movs	r0, #0
 470 0006 FFF7FEFF 		bl	set_Motor_Direction
 471              	.LVL23:
 126:Src/motor.c   **** 
 127:Src/motor.c   **** 	//right go forward
 128:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 472              		.loc 1 128 2 view .LVU133
 473 000a 0349     		ldr	r1, .L15+4
 474 000c 0020     		movs	r0, #0
 475 000e FFF7FEFF 		bl	set_Motor_Direction
 476              	.LVL24:
 129:Src/motor.c   **** 
 130:Src/motor.c   **** 	/* the old way
 131:Src/motor.c   **** 		GPIOA->ODR |= (1 << 5);
 132:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 8);
 133:Src/motor.c   **** 		GPIOB->ODR |= (1 << 10);
 134:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 2);
 135:Src/motor.c   **** 	*/
 136:Src/motor.c   **** }
 477              		.loc 1 136 1 is_stmt 0 view .LVU134
 478              		@ sp needed
 479 0012 10BD     		pop	{r4, pc}
 480              	.L16:
 481              		.align	2
 482              	.L15:
 483 0014 00000000 		.word	motor_left_pins
 484 0018 00000000 		.word	motor_right_pins
 485              		.cfi_endproc
 486              	.LFE48:
 488              		.section	.text.set_Backward,"ax",%progbits
 489              		.align	1
 490              		.global	set_Backward
ARM GAS  /tmp/ccAGE7Go.s 			page 12


 491              		.syntax unified
 492              		.code	16
 493              		.thumb_func
 495              	set_Backward:
 496              	.LFB49:
 137:Src/motor.c   **** 
 138:Src/motor.c   **** void set_Backward(){
 497              		.loc 1 138 20 is_stmt 1 view -0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501 0000 10B5     		push	{r4, lr}
 502              	.LCFI5:
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 4, -8
 505              		.cfi_offset 14, -4
 139:Src/motor.c   **** 	//left go backward
 140:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 506              		.loc 1 140 2 view .LVU136
 507 0002 0449     		ldr	r1, .L18
 508 0004 0320     		movs	r0, #3
 509 0006 FFF7FEFF 		bl	set_Motor_Direction
 510              	.LVL25:
 141:Src/motor.c   **** 
 142:Src/motor.c   **** 	//right go backward
 143:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 511              		.loc 1 143 2 view .LVU137
 512 000a 0349     		ldr	r1, .L18+4
 513 000c 0320     		movs	r0, #3
 514 000e FFF7FEFF 		bl	set_Motor_Direction
 515              	.LVL26:
 144:Src/motor.c   **** 
 145:Src/motor.c   **** 	/* the old way
 146:Src/motor.c   **** 		GPIOA->ODR |= (1 << 8);
 147:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 5);
 148:Src/motor.c   **** 		GPIOB->ODR |= (1 << 2);
 149:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 10);
 150:Src/motor.c   **** 	*/
 151:Src/motor.c   **** }
 516              		.loc 1 151 1 is_stmt 0 view .LVU138
 517              		@ sp needed
 518 0012 10BD     		pop	{r4, pc}
 519              	.L19:
 520              		.align	2
 521              	.L18:
 522 0014 00000000 		.word	motor_left_pins
 523 0018 00000000 		.word	motor_right_pins
 524              		.cfi_endproc
 525              	.LFE49:
 527              		.section	.text.set_Right,"ax",%progbits
 528              		.align	1
 529              		.global	set_Right
 530              		.syntax unified
 531              		.code	16
 532              		.thumb_func
 534              	set_Right:
 535              	.LFB50:
ARM GAS  /tmp/ccAGE7Go.s 			page 13


 152:Src/motor.c   **** 
 153:Src/motor.c   **** void set_Right(){
 536              		.loc 1 153 17 is_stmt 1 view -0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540 0000 10B5     		push	{r4, lr}
 541              	.LCFI6:
 542              		.cfi_def_cfa_offset 8
 543              		.cfi_offset 4, -8
 544              		.cfi_offset 14, -4
 154:Src/motor.c   **** 	//left go forward
 155:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 545              		.loc 1 155 2 view .LVU140
 546 0002 0449     		ldr	r1, .L21
 547 0004 0020     		movs	r0, #0
 548 0006 FFF7FEFF 		bl	set_Motor_Direction
 549              	.LVL27:
 156:Src/motor.c   **** 
 157:Src/motor.c   **** 	//right go backward
 158:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 550              		.loc 1 158 2 view .LVU141
 551 000a 0349     		ldr	r1, .L21+4
 552 000c 0320     		movs	r0, #3
 553 000e FFF7FEFF 		bl	set_Motor_Direction
 554              	.LVL28:
 159:Src/motor.c   **** 
 160:Src/motor.c   **** 	/* old way
 161:Src/motor.c   **** 		GPIOA->ODR |= (1 << 5);
 162:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 8);
 163:Src/motor.c   **** 		GPIOB->ODR |= (1 << 2);
 164:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 10);
 165:Src/motor.c   **** 	*/
 166:Src/motor.c   **** }
 555              		.loc 1 166 1 is_stmt 0 view .LVU142
 556              		@ sp needed
 557 0012 10BD     		pop	{r4, pc}
 558              	.L22:
 559              		.align	2
 560              	.L21:
 561 0014 00000000 		.word	motor_left_pins
 562 0018 00000000 		.word	motor_right_pins
 563              		.cfi_endproc
 564              	.LFE50:
 566              		.section	.text.set_Left,"ax",%progbits
 567              		.align	1
 568              		.global	set_Left
 569              		.syntax unified
 570              		.code	16
 571              		.thumb_func
 573              	set_Left:
 574              	.LFB51:
 167:Src/motor.c   **** 
 168:Src/motor.c   **** void set_Left(){
 575              		.loc 1 168 16 is_stmt 1 view -0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccAGE7Go.s 			page 14


 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579 0000 10B5     		push	{r4, lr}
 580              	.LCFI7:
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 4, -8
 583              		.cfi_offset 14, -4
 169:Src/motor.c   **** 	//left go backward
 170:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 584              		.loc 1 170 2 view .LVU144
 585 0002 0449     		ldr	r1, .L24
 586 0004 0320     		movs	r0, #3
 587 0006 FFF7FEFF 		bl	set_Motor_Direction
 588              	.LVL29:
 171:Src/motor.c   **** 	
 172:Src/motor.c   **** 	//right go forward
 173:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 589              		.loc 1 173 2 view .LVU145
 590 000a 0349     		ldr	r1, .L24+4
 591 000c 0020     		movs	r0, #0
 592 000e FFF7FEFF 		bl	set_Motor_Direction
 593              	.LVL30:
 174:Src/motor.c   **** 	
 175:Src/motor.c   **** 	/*
 176:Src/motor.c   **** 		GPIOA->ODR |= (1 << 8);
 177:Src/motor.c   **** 		GPIOA->ODR &= ~(1 << 5);
 178:Src/motor.c   **** 		GPIOB->ODR |= (1 << 10);
 179:Src/motor.c   **** 		GPIOB->ODR &= ~(1 << 2);
 180:Src/motor.c   **** 	*/
 181:Src/motor.c   **** }
 594              		.loc 1 181 1 is_stmt 0 view .LVU146
 595              		@ sp needed
 596 0012 10BD     		pop	{r4, pc}
 597              	.L25:
 598              		.align	2
 599              	.L24:
 600 0014 00000000 		.word	motor_left_pins
 601 0018 00000000 		.word	motor_right_pins
 602              		.cfi_endproc
 603              	.LFE51:
 605              		.section	.text.set_Off,"ax",%progbits
 606              		.align	1
 607              		.global	set_Off
 608              		.syntax unified
 609              		.code	16
 610              		.thumb_func
 612              	set_Off:
 613              	.LFB52:
 182:Src/motor.c   **** 
 183:Src/motor.c   **** void set_Off(){
 614              		.loc 1 183 15 is_stmt 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618 0000 10B5     		push	{r4, lr}
 619              	.LCFI8:
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 4, -8
ARM GAS  /tmp/ccAGE7Go.s 			page 15


 622              		.cfi_offset 14, -4
 184:Src/motor.c   **** 	set_Motor_Direction(OFF, &motor_left_pins);
 623              		.loc 1 184 2 view .LVU148
 624 0002 0449     		ldr	r1, .L27
 625 0004 0420     		movs	r0, #4
 626 0006 FFF7FEFF 		bl	set_Motor_Direction
 627              	.LVL31:
 185:Src/motor.c   **** 	set_Motor_Direction(OFF, &motor_right_pins);
 628              		.loc 1 185 2 view .LVU149
 629 000a 0349     		ldr	r1, .L27+4
 630 000c 0420     		movs	r0, #4
 631 000e FFF7FEFF 		bl	set_Motor_Direction
 632              	.LVL32:
 186:Src/motor.c   **** }
 633              		.loc 1 186 1 is_stmt 0 view .LVU150
 634              		@ sp needed
 635 0012 10BD     		pop	{r4, pc}
 636              	.L28:
 637              		.align	2
 638              	.L27:
 639 0014 00000000 		.word	motor_left_pins
 640 0018 00000000 		.word	motor_right_pins
 641              		.cfi_endproc
 642              	.LFE52:
 644              		.section	.rodata.MoveMotors.str1.4,"aMS",%progbits,1
 645              		.align	2
 646              	.LC12:
 647 0000 4D6F7665 		.ascii	"MoveMotors executed!\012\000"
 647      4D6F746F 
 647      72732065 
 647      78656375 
 647      74656421 
 648 0016 0000     		.align	2
 649              	.LC14:
 650 0018 496E7661 		.ascii	"Invalid command to MoveMotors!\012\000"
 650      6C696420 
 650      636F6D6D 
 650      616E6420 
 650      746F204D 
 651              		.section	.text.MoveMotors,"ax",%progbits
 652              		.align	1
 653              		.global	MoveMotors
 654              		.syntax unified
 655              		.code	16
 656              		.thumb_func
 658              	MoveMotors:
 659              	.LVL33:
 660              	.LFB53:
 187:Src/motor.c   **** 
 188:Src/motor.c   **** uint8_t* MoveMotors(MotorCommand* cmd){
 661              		.loc 1 188 39 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              		.loc 1 188 39 is_stmt 0 view .LVU152
 666 0000 10B5     		push	{r4, lr}
 667              	.LCFI9:
ARM GAS  /tmp/ccAGE7Go.s 			page 16


 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 4, -8
 670              		.cfi_offset 14, -4
 671 0002 0400     		movs	r4, r0
 189:Src/motor.c   **** 	set_Off();
 672              		.loc 1 189 2 is_stmt 1 view .LVU153
 673 0004 FFF7FEFF 		bl	set_Off
 674              	.LVL34:
 190:Src/motor.c   **** 	uint8_t* err = "MoveMotors executed!\n";
 675              		.loc 1 190 2 view .LVU154
 191:Src/motor.c   **** 	switch(cmd->dir){
 676              		.loc 1 191 2 view .LVU155
 677              		.loc 1 191 12 is_stmt 0 view .LVU156
 678 0008 2378     		ldrb	r3, [r4]
 679              		.loc 1 191 2 view .LVU157
 680 000a 012B     		cmp	r3, #1
 681 000c 09D0     		beq	.L30
 682 000e 022B     		cmp	r3, #2
 683 0010 0BD0     		beq	.L31
 684 0012 002B     		cmp	r3, #0
 685 0014 01D0     		beq	.L34
 686 0016 0748     		ldr	r0, .L35
 687              	.LVL35:
 192:Src/motor.c   **** 		case FORWARD:
 193:Src/motor.c   **** 			set_Forward();
 194:Src/motor.c   **** 			break;
 195:Src/motor.c   **** 		case LEFT:
 196:Src/motor.c   **** 			set_Left();
 197:Src/motor.c   **** 			break;
 198:Src/motor.c   **** 		case RIGHT:
 199:Src/motor.c   **** 			set_Right();
 200:Src/motor.c   **** 			break;
 201:Src/motor.c   **** 		default:
 202:Src/motor.c   **** 			err = "Invalid command to MoveMotors!\n";
 203:Src/motor.c   **** 	}
 204:Src/motor.c   **** 	return err;
 688              		.loc 1 204 2 is_stmt 1 view .LVU158
 689              	.L29:
 205:Src/motor.c   **** }
 690              		.loc 1 205 1 is_stmt 0 view .LVU159
 691              		@ sp needed
 692              	.LVL36:
 693              		.loc 1 205 1 view .LVU160
 694 0018 10BD     		pop	{r4, pc}
 695              	.LVL37:
 696              	.L34:
 193:Src/motor.c   **** 			break;
 697              		.loc 1 193 4 is_stmt 1 view .LVU161
 698 001a FFF7FEFF 		bl	set_Forward
 699              	.LVL38:
 194:Src/motor.c   **** 		case LEFT:
 700              		.loc 1 194 4 view .LVU162
 190:Src/motor.c   **** 	switch(cmd->dir){
 701              		.loc 1 190 11 is_stmt 0 view .LVU163
 702 001e 0648     		ldr	r0, .L35+4
 194:Src/motor.c   **** 		case LEFT:
 703              		.loc 1 194 4 view .LVU164
ARM GAS  /tmp/ccAGE7Go.s 			page 17


 704 0020 FAE7     		b	.L29
 705              	.L30:
 196:Src/motor.c   **** 			break;
 706              		.loc 1 196 4 is_stmt 1 view .LVU165
 707 0022 FFF7FEFF 		bl	set_Left
 708              	.LVL39:
 197:Src/motor.c   **** 		case RIGHT:
 709              		.loc 1 197 4 view .LVU166
 190:Src/motor.c   **** 	switch(cmd->dir){
 710              		.loc 1 190 11 is_stmt 0 view .LVU167
 711 0026 0448     		ldr	r0, .L35+4
 197:Src/motor.c   **** 		case RIGHT:
 712              		.loc 1 197 4 view .LVU168
 713 0028 F6E7     		b	.L29
 714              	.L31:
 199:Src/motor.c   **** 			break;
 715              		.loc 1 199 4 is_stmt 1 view .LVU169
 716 002a FFF7FEFF 		bl	set_Right
 717              	.LVL40:
 200:Src/motor.c   **** 		default:
 718              		.loc 1 200 4 view .LVU170
 190:Src/motor.c   **** 	switch(cmd->dir){
 719              		.loc 1 190 11 is_stmt 0 view .LVU171
 720 002e 0248     		ldr	r0, .L35+4
 200:Src/motor.c   **** 		default:
 721              		.loc 1 200 4 view .LVU172
 722 0030 F2E7     		b	.L29
 723              	.L36:
 724 0032 C046     		.align	2
 725              	.L35:
 726 0034 18000000 		.word	.LC14
 727 0038 00000000 		.word	.LC12
 728              		.cfi_endproc
 729              	.LFE53:
 731              		.section	.text.encoder_init,"ax",%progbits
 732              		.align	1
 733              		.global	encoder_init
 734              		.syntax unified
 735              		.code	16
 736              		.thumb_func
 738              	encoder_init:
 739              	.LFB54:
 206:Src/motor.c   **** 
 207:Src/motor.c   **** // Sets up encoder interface to read motor speed
 208:Src/motor.c   **** void encoder_init(void) {
 740              		.loc 1 208 25 is_stmt 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 745              	.LCFI10:
 746              		.cfi_def_cfa_offset 20
 747              		.cfi_offset 4, -20
 748              		.cfi_offset 5, -16
 749              		.cfi_offset 6, -12
 750              		.cfi_offset 7, -8
 751              		.cfi_offset 14, -4
ARM GAS  /tmp/ccAGE7Go.s 			page 18


 752 0002 C646     		mov	lr, r8
 753 0004 00B5     		push	{lr}
 754              	.LCFI11:
 755              		.cfi_def_cfa_offset 24
 756              		.cfi_offset 8, -24
 209:Src/motor.c   ****     
 210:Src/motor.c   ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
 211:Src/motor.c   ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 757              		.loc 1 211 5 view .LVU174
 758              		.loc 1 211 10 is_stmt 0 view .LVU175
 759 0006 394B     		ldr	r3, .L38
 760 0008 1A68     		ldr	r2, [r3]
 761              		.loc 1 211 18 view .LVU176
 762 000a 3949     		ldr	r1, .L38+4
 763 000c 0A40     		ands	r2, r1
 764 000e 1A60     		str	r2, [r3]
 212:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 765              		.loc 1 212 5 is_stmt 1 view .LVU177
 766              		.loc 1 212 10 is_stmt 0 view .LVU178
 767 0010 1968     		ldr	r1, [r3]
 768              		.loc 1 212 18 view .LVU179
 769 0012 A022     		movs	r2, #160
 770 0014 1201     		lsls	r2, r2, #4
 771 0016 0A43     		orrs	r2, r1
 772 0018 1A60     		str	r2, [r3]
 213:Src/motor.c   ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 773              		.loc 1 213 5 is_stmt 1 view .LVU180
 774              		.loc 1 213 15 is_stmt 0 view .LVU181
 775 001a 196A     		ldr	r1, [r3, #32]
 776              		.loc 1 213 19 view .LVU182
 777 001c 8822     		movs	r2, #136
 778 001e 5203     		lsls	r2, r2, #13
 779 0020 0A43     		orrs	r2, r1
 780 0022 1A62     		str	r2, [r3, #32]
 214:Src/motor.c   **** 		
 215:Src/motor.c   **** 		// Set up encoder input pins (TIMER 15 CH1 and CH2)
 216:Src/motor.c   **** 		GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 781              		.loc 1 216 3 is_stmt 1 view .LVU183
 782              		.loc 1 216 8 is_stmt 0 view .LVU184
 783 0024 1A68     		ldr	r2, [r3]
 784              		.loc 1 216 16 view .LVU185
 785 0026 3349     		ldr	r1, .L38+8
 786 0028 0A40     		ands	r2, r1
 787 002a 1A60     		str	r2, [r3]
 217:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 788              		.loc 1 217 5 is_stmt 1 view .LVU186
 789              		.loc 1 217 10 is_stmt 0 view .LVU187
 790 002c 1968     		ldr	r1, [r3]
 791              		.loc 1 217 18 view .LVU188
 792 002e A022     		movs	r2, #160
 793 0030 1206     		lsls	r2, r2, #24
 794 0032 0A43     		orrs	r2, r1
 795 0034 1A60     		str	r2, [r3]
 218:Src/motor.c   ****     GPIOB->AFR[1] |= ( (1 << 24) | (1 << 28) );
 796              		.loc 1 218 5 is_stmt 1 view .LVU189
 797              		.loc 1 218 15 is_stmt 0 view .LVU190
 798 0036 596A     		ldr	r1, [r3, #36]
ARM GAS  /tmp/ccAGE7Go.s 			page 19


 799              		.loc 1 218 19 view .LVU191
 800 0038 8822     		movs	r2, #136
 801 003a 5205     		lsls	r2, r2, #21
 802 003c 0A43     		orrs	r2, r1
 803 003e 5A62     		str	r2, [r3, #36]
 219:Src/motor.c   **** 
 220:Src/motor.c   ****     // Set up encoder interface (TIM3 encoder input mode)
 221:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 804              		.loc 1 221 5 is_stmt 1 view .LVU192
 805              		.loc 1 221 8 is_stmt 0 view .LVU193
 806 0040 2D49     		ldr	r1, .L38+12
 807 0042 CB69     		ldr	r3, [r1, #28]
 808              		.loc 1 221 18 view .LVU194
 809 0044 0222     		movs	r2, #2
 810 0046 1343     		orrs	r3, r2
 811 0048 CB61     		str	r3, [r1, #28]
 222:Src/motor.c   ****     TIM3->CCMR1 = 0;
 812              		.loc 1 222 5 is_stmt 1 view .LVU195
 813              		.loc 1 222 17 is_stmt 0 view .LVU196
 814 004a 2C4B     		ldr	r3, .L38+16
 815 004c 0022     		movs	r2, #0
 816 004e 9A61     		str	r2, [r3, #24]
 223:Src/motor.c   ****     TIM3->CCER = 0;
 817              		.loc 1 223 5 is_stmt 1 view .LVU197
 818              		.loc 1 223 16 is_stmt 0 view .LVU198
 819 0050 1A62     		str	r2, [r3, #32]
 224:Src/motor.c   ****     TIM3->SMCR = 0;
 820              		.loc 1 224 5 is_stmt 1 view .LVU199
 821              		.loc 1 224 16 is_stmt 0 view .LVU200
 822 0052 9A60     		str	r2, [r3, #8]
 225:Src/motor.c   ****     TIM3->CR1 = 0;
 823              		.loc 1 225 5 is_stmt 1 view .LVU201
 824              		.loc 1 225 15 is_stmt 0 view .LVU202
 825 0054 1A60     		str	r2, [r3]
 226:Src/motor.c   **** 
 227:Src/motor.c   ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 826              		.loc 1 227 5 is_stmt 1 view .LVU203
 827              		.loc 1 227 9 is_stmt 0 view .LVU204
 828 0056 9869     		ldr	r0, [r3, #24]
 829              		.loc 1 227 17 view .LVU205
 830 0058 0224     		movs	r4, #2
 831 005a FF34     		adds	r4, r4, #255
 832 005c A046     		mov	r8, r4
 833 005e 2043     		orrs	r0, r4
 834 0060 9861     		str	r0, [r3, #24]
 228:Src/motor.c   ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 835              		.loc 1 228 5 is_stmt 1 view .LVU206
 836              		.loc 1 228 9 is_stmt 0 view .LVU207
 837 0062 9868     		ldr	r0, [r3, #8]
 838              		.loc 1 228 16 view .LVU208
 839 0064 0327     		movs	r7, #3
 840 0066 3843     		orrs	r0, r7
 841 0068 9860     		str	r0, [r3, #8]
 229:Src/motor.c   ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 842              		.loc 1 229 5 is_stmt 1 view .LVU209
 843              		.loc 1 229 15 is_stmt 0 view .LVU210
 844 006a 254E     		ldr	r6, .L38+20
ARM GAS  /tmp/ccAGE7Go.s 			page 20


 845 006c DE62     		str	r6, [r3, #44]
 230:Src/motor.c   ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 846              		.loc 1 230 5 is_stmt 1 view .LVU211
 847              		.loc 1 230 15 is_stmt 0 view .LVU212
 848 006e 254D     		ldr	r5, .L38+24
 849 0070 5D62     		str	r5, [r3, #36]
 231:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 232:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 233:Src/motor.c   ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 850              		.loc 1 233 5 is_stmt 1 view .LVU213
 851              		.loc 1 233 9 is_stmt 0 view .LVU214
 852 0072 1868     		ldr	r0, [r3]
 853 0074 8446     		mov	ip, r0
 854              		.loc 1 233 15 view .LVU215
 855 0076 0120     		movs	r0, #1
 856 0078 6446     		mov	r4, ip
 857 007a 0443     		orrs	r4, r0
 858 007c 1C60     		str	r4, [r3]
 234:Src/motor.c   **** 		
 235:Src/motor.c   **** 		RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 859              		.loc 1 235 3 is_stmt 1 view .LVU216
 860              		.loc 1 235 6 is_stmt 0 view .LVU217
 861 007e 8B69     		ldr	r3, [r1, #24]
 862 0080 9C46     		mov	ip, r3
 863              		.loc 1 235 16 view .LVU218
 864 0082 8023     		movs	r3, #128
 865 0084 5B02     		lsls	r3, r3, #9
 866 0086 6446     		mov	r4, ip
 867 0088 2343     		orrs	r3, r4
 868 008a 8B61     		str	r3, [r1, #24]
 236:Src/motor.c   ****     TIM15->CCMR1 = 0;
 869              		.loc 1 236 5 is_stmt 1 view .LVU219
 870              		.loc 1 236 18 is_stmt 0 view .LVU220
 871 008c 1E4B     		ldr	r3, .L38+28
 872 008e 9A61     		str	r2, [r3, #24]
 237:Src/motor.c   ****     TIM15->CCER = 0;
 873              		.loc 1 237 5 is_stmt 1 view .LVU221
 874              		.loc 1 237 17 is_stmt 0 view .LVU222
 875 0090 1A62     		str	r2, [r3, #32]
 238:Src/motor.c   ****     TIM15->SMCR = 0;
 876              		.loc 1 238 5 is_stmt 1 view .LVU223
 877              		.loc 1 238 17 is_stmt 0 view .LVU224
 878 0092 9A60     		str	r2, [r3, #8]
 239:Src/motor.c   ****     TIM15->CR1 = 0;
 879              		.loc 1 239 5 is_stmt 1 view .LVU225
 880              		.loc 1 239 16 is_stmt 0 view .LVU226
 881 0094 1A60     		str	r2, [r3]
 240:Src/motor.c   **** 
 241:Src/motor.c   ****     TIM15->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected
 882              		.loc 1 241 5 is_stmt 1 view .LVU227
 883              		.loc 1 241 10 is_stmt 0 view .LVU228
 884 0096 9A69     		ldr	r2, [r3, #24]
 885              		.loc 1 241 18 view .LVU229
 886 0098 4446     		mov	r4, r8
 887 009a 1443     		orrs	r4, r2
 888 009c 9C61     		str	r4, [r3, #24]
 242:Src/motor.c   ****     TIM15->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and 
ARM GAS  /tmp/ccAGE7Go.s 			page 21


 889              		.loc 1 242 5 is_stmt 1 view .LVU230
 890              		.loc 1 242 10 is_stmt 0 view .LVU231
 891 009e 9A68     		ldr	r2, [r3, #8]
 892              		.loc 1 242 17 view .LVU232
 893 00a0 3A43     		orrs	r2, r7
 894 00a2 9A60     		str	r2, [r3, #8]
 243:Src/motor.c   ****     TIM15->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest po
 895              		.loc 1 243 5 is_stmt 1 view .LVU233
 896              		.loc 1 243 16 is_stmt 0 view .LVU234
 897 00a4 DE62     		str	r6, [r3, #44]
 244:Src/motor.c   ****     TIM15->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negat
 898              		.loc 1 244 5 is_stmt 1 view .LVU235
 899              		.loc 1 244 16 is_stmt 0 view .LVU236
 900 00a6 5D62     		str	r5, [r3, #36]
 245:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
 246:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
 247:Src/motor.c   ****     TIM15->CR1 |= TIM_CR1_CEN;     
 901              		.loc 1 247 5 is_stmt 1 view .LVU237
 902              		.loc 1 247 10 is_stmt 0 view .LVU238
 903 00a8 1A68     		ldr	r2, [r3]
 904              		.loc 1 247 16 view .LVU239
 905 00aa 0243     		orrs	r2, r0
 906 00ac 1A60     		str	r2, [r3]
 248:Src/motor.c   **** 
 249:Src/motor.c   ****     // Configure a second timer (TIM6) to fire an ISR on update event
 250:Src/motor.c   ****     // Used to periodically check and update speed variable
 251:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 907              		.loc 1 251 5 is_stmt 1 view .LVU240
 908              		.loc 1 251 8 is_stmt 0 view .LVU241
 909 00ae CB69     		ldr	r3, [r1, #28]
 910              		.loc 1 251 18 view .LVU242
 911 00b0 1022     		movs	r2, #16
 912 00b2 1343     		orrs	r3, r2
 913 00b4 CB61     		str	r3, [r1, #28]
 252:Src/motor.c   ****     
 253:Src/motor.c   ****     // Select PSC and ARR values that give an appropriate interrupt rate
 254:Src/motor.c   ****     TIM6->PSC = 11;
 914              		.loc 1 254 5 is_stmt 1 view .LVU243
 915              		.loc 1 254 15 is_stmt 0 view .LVU244
 916 00b6 154B     		ldr	r3, .L38+32
 917 00b8 053A     		subs	r2, r2, #5
 918 00ba 9A62     		str	r2, [r3, #40]
 255:Src/motor.c   ****     TIM6->ARR = 30000;
 919              		.loc 1 255 5 is_stmt 1 view .LVU245
 920              		.loc 1 255 15 is_stmt 0 view .LVU246
 921 00bc 144A     		ldr	r2, .L38+36
 922 00be DA62     		str	r2, [r3, #44]
 256:Src/motor.c   ****     
 257:Src/motor.c   ****     TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 923              		.loc 1 257 5 is_stmt 1 view .LVU247
 924              		.loc 1 257 9 is_stmt 0 view .LVU248
 925 00c0 DA68     		ldr	r2, [r3, #12]
 926              		.loc 1 257 16 view .LVU249
 927 00c2 0243     		orrs	r2, r0
 928 00c4 DA60     		str	r2, [r3, #12]
 258:Src/motor.c   ****     TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 929              		.loc 1 258 5 is_stmt 1 view .LVU250
ARM GAS  /tmp/ccAGE7Go.s 			page 22


 930              		.loc 1 258 9 is_stmt 0 view .LVU251
 931 00c6 1A68     		ldr	r2, [r3]
 932              		.loc 1 258 15 view .LVU252
 933 00c8 0243     		orrs	r2, r0
 934 00ca 1A60     		str	r2, [r3]
 259:Src/motor.c   **** 
 260:Src/motor.c   ****     NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 935              		.loc 1 260 5 is_stmt 1 view .LVU253
 936              	.LVL41:
 937              	.LBB6:
 938              	.LBI6:
 939              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
ARM GAS  /tmp/ccAGE7Go.s 			page 23


  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccAGE7Go.s 			page 24


 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
ARM GAS  /tmp/ccAGE7Go.s 			page 25


 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
ARM GAS  /tmp/ccAGE7Go.s 			page 26


 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
ARM GAS  /tmp/ccAGE7Go.s 			page 27


 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccAGE7Go.s 			page 28


 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
ARM GAS  /tmp/ccAGE7Go.s 			page 29


 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccAGE7Go.s 			page 30


 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
ARM GAS  /tmp/ccAGE7Go.s 			page 31


 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccAGE7Go.s 			page 32


 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
ARM GAS  /tmp/ccAGE7Go.s 			page 33


 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 940              		.loc 2 623 22 view .LVU254
 941              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 942              		.loc 2 625 3 view .LVU255
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 943              		.loc 2 627 5 view .LVU256
 944              		.loc 2 627 20 is_stmt 0 view .LVU257
 945 00cc 114B     		ldr	r3, .L38+40
 946 00ce 8022     		movs	r2, #128
 947 00d0 9202     		lsls	r2, r2, #10
 948 00d2 1A60     		str	r2, [r3]
 949              	.LVL42:
 950              		.loc 2 627 20 view .LVU258
 951              	.LBE7:
 952              	.LBE6:
 261:Src/motor.c   ****     NVIC_SetPriority(TIM6_DAC_IRQn,2);
 953              		.loc 1 261 5 is_stmt 1 view .LVU259
 954              	.LBB8:
 955              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
ARM GAS  /tmp/ccAGE7Go.s 			page 34


 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccAGE7Go.s 			page 35


 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 956              		.loc 2 730 22 view .LVU260
 957              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 958              		.loc 2 732 3 view .LVU261
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 959              		.loc 2 734 5 view .LVU262
 960              		.loc 2 734 52 is_stmt 0 view .LVU263
 961 00d4 C420     		movs	r0, #196
 962 00d6 8000     		lsls	r0, r0, #2
 963 00d8 1958     		ldr	r1, [r3, r0]
 964              		.loc 2 734 33 view .LVU264
 965 00da 0F4A     		ldr	r2, .L38+44
 966 00dc 1140     		ands	r1, r2
 967              		.loc 2 734 102 view .LVU265
 968 00de 8022     		movs	r2, #128
 969 00e0 1202     		lsls	r2, r2, #8
 970 00e2 0A43     		orrs	r2, r1
 971              		.loc 2 734 30 view .LVU266
 972 00e4 1A50     		str	r2, [r3, r0]
 973              	.LVL43:
 974              		.loc 2 734 30 view .LVU267
 975              	.LBE9:
 976              	.LBE8:
 262:Src/motor.c   **** }
 977              		.loc 1 262 1 view .LVU268
 978              		@ sp needed
 979 00e6 80BC     		pop	{r7}
 980 00e8 B846     		mov	r8, r7
 981 00ea F0BD     		pop	{r4, r5, r6, r7, pc}
 982              	.L39:
 983              		.align	2
 984              	.L38:
 985 00ec 00040048 		.word	1207960576
 986 00f0 FFFAFFFF 		.word	-1281
 987 00f4 FFFFFFAF 		.word	-1342177281
 988 00f8 00100240 		.word	1073876992
 989 00fc 00040040 		.word	1073742848
ARM GAS  /tmp/ccAGE7Go.s 			page 36


 990 0100 FFFF0000 		.word	65535
 991 0104 FF7F0000 		.word	32767
 992 0108 00400140 		.word	1073823744
 993 010c 00100040 		.word	1073745920
 994 0110 30750000 		.word	30000
 995 0114 00E100E0 		.word	-536813312
 996 0118 FF00FFFF 		.word	-65281
 997              		.cfi_endproc
 998              	.LFE54:
 1000              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 1001              		.align	1
 1002              		.global	TIM6_DAC_IRQHandler
 1003              		.syntax unified
 1004              		.code	16
 1005              		.thumb_func
 1007              	TIM6_DAC_IRQHandler:
 1008              	.LFB55:
 263:Src/motor.c   **** 
 264:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 265:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 1009              		.loc 1 265 32 is_stmt 1 view -0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 0, uses_anonymous_args = 0
 1013              		@ link register save eliminated.
 266:Src/motor.c   ****     /* Calculate the motor speed in raw encoder counts
 267:Src/motor.c   ****      * Note the motor speed is signed! Motor can be run in reverse.
 268:Src/motor.c   ****      * Speed is measured by how far the counter moved from center point
 269:Src/motor.c   ****      */
 270:Src/motor.c   ****     motorl_speed = (TIM3->CNT - 0x7FFF);
 1014              		.loc 1 270 5 view .LVU270
 1015              		.loc 1 270 25 is_stmt 0 view .LVU271
 1016 0000 0B4A     		ldr	r2, .L41
 1017 0002 536A     		ldr	r3, [r2, #36]
 1018              		.loc 1 270 31 view .LVU272
 1019 0004 0B49     		ldr	r1, .L41+4
 1020 0006 8C46     		mov	ip, r1
 1021 0008 6344     		add	r3, r3, ip
 1022 000a 1BB2     		sxth	r3, r3
 1023              		.loc 1 270 18 view .LVU273
 1024 000c 0A49     		ldr	r1, .L41+8
 1025 000e 0B80     		strh	r3, [r1]
 271:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1026              		.loc 1 271 5 is_stmt 1 view .LVU274
 1027              		.loc 1 271 15 is_stmt 0 view .LVU275
 1028 0010 0A49     		ldr	r1, .L41+12
 1029 0012 5162     		str	r1, [r2, #36]
 272:Src/motor.c   **** 	  motorr_speed = (TIM15->CNT - 0x7FFF);
 1030              		.loc 1 272 4 is_stmt 1 view .LVU276
 1031              		.loc 1 272 25 is_stmt 0 view .LVU277
 1032 0014 0A4A     		ldr	r2, .L41+16
 1033 0016 536A     		ldr	r3, [r2, #36]
 1034              		.loc 1 272 31 view .LVU278
 1035 0018 6344     		add	r3, r3, ip
 1036 001a 1BB2     		sxth	r3, r3
 1037              		.loc 1 272 17 view .LVU279
 1038 001c 0948     		ldr	r0, .L41+20
ARM GAS  /tmp/ccAGE7Go.s 			page 37


 1039 001e 0380     		strh	r3, [r0]
 273:Src/motor.c   ****     TIM15->CNT = 0x7FFF; // Reset back to center point
 1040              		.loc 1 273 5 is_stmt 1 view .LVU280
 1041              		.loc 1 273 16 is_stmt 0 view .LVU281
 1042 0020 5162     		str	r1, [r2, #36]
 274:Src/motor.c   ****     
 275:Src/motor.c   ****     // Call the PI update function
 276:Src/motor.c   ****     TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 1043              		.loc 1 276 5 is_stmt 1 view .LVU282
 1044              		.loc 1 276 9 is_stmt 0 view .LVU283
 1045 0022 094A     		ldr	r2, .L41+24
 1046 0024 1369     		ldr	r3, [r2, #16]
 1047              		.loc 1 276 14 view .LVU284
 1048 0026 0121     		movs	r1, #1
 1049 0028 8B43     		bics	r3, r1
 1050 002a 1361     		str	r3, [r2, #16]
 277:Src/motor.c   **** }
 1051              		.loc 1 277 1 view .LVU285
 1052              		@ sp needed
 1053 002c 7047     		bx	lr
 1054              	.L42:
 1055 002e C046     		.align	2
 1056              	.L41:
 1057 0030 00040040 		.word	1073742848
 1058 0034 0180FFFF 		.word	-32767
 1059 0038 00000000 		.word	motorl_speed
 1060 003c FF7F0000 		.word	32767
 1061 0040 00400140 		.word	1073823744
 1062 0044 00000000 		.word	motorr_speed
 1063 0048 00100040 		.word	1073745920
 1064              		.cfi_endproc
 1065              	.LFE55:
 1067              		.section	.text.ADC_init,"ax",%progbits
 1068              		.align	1
 1069              		.global	ADC_init
 1070              		.syntax unified
 1071              		.code	16
 1072              		.thumb_func
 1074              	ADC_init:
 1075              	.LFB56:
 278:Src/motor.c   **** 
 279:Src/motor.c   **** void ADC_init(void) {
 1076              		.loc 1 279 21 is_stmt 1 view -0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 0
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 1080              		@ link register save eliminated.
 280:Src/motor.c   **** 
 281:Src/motor.c   ****     // Configure PA1 for ADC input (used for current monitoring)
 282:Src/motor.c   ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 1081              		.loc 1 282 5 view .LVU287
 1082              		.loc 1 282 10 is_stmt 0 view .LVU288
 1083 0000 9022     		movs	r2, #144
 1084 0002 D205     		lsls	r2, r2, #23
 1085 0004 1368     		ldr	r3, [r2]
 1086              		.loc 1 282 18 view .LVU289
 1087 0006 0C21     		movs	r1, #12
ARM GAS  /tmp/ccAGE7Go.s 			page 38


 1088 0008 0B43     		orrs	r3, r1
 1089 000a 1360     		str	r3, [r2]
 283:Src/motor.c   **** 
 284:Src/motor.c   ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 285:Src/motor.c   ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 1090              		.loc 1 285 5 is_stmt 1 view .LVU290
 1091              		.loc 1 285 8 is_stmt 0 view .LVU291
 1092 000c 154A     		ldr	r2, .L47
 1093 000e 9169     		ldr	r1, [r2, #24]
 1094              		.loc 1 285 18 view .LVU292
 1095 0010 8023     		movs	r3, #128
 1096 0012 9B00     		lsls	r3, r3, #2
 1097 0014 0B43     		orrs	r3, r1
 1098 0016 9361     		str	r3, [r2, #24]
 286:Src/motor.c   **** 
 287:Src/motor.c   ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 1099              		.loc 1 287 5 is_stmt 1 view .LVU293
 1100              		.loc 1 287 17 is_stmt 0 view .LVU294
 1101 0018 134B     		ldr	r3, .L47+4
 1102 001a 0021     		movs	r1, #0
 1103 001c D960     		str	r1, [r3, #12]
 288:Src/motor.c   ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 1104              		.loc 1 288 5 is_stmt 1 view .LVU295
 1105              		.loc 1 288 9 is_stmt 0 view .LVU296
 1106 001e D868     		ldr	r0, [r3, #12]
 1107              		.loc 1 288 17 view .LVU297
 1108 0020 8022     		movs	r2, #128
 1109 0022 9201     		lsls	r2, r2, #6
 1110 0024 0243     		orrs	r2, r0
 1111 0026 DA60     		str	r2, [r3, #12]
 289:Src/motor.c   ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 1112              		.loc 1 289 5 is_stmt 1 view .LVU298
 1113              		.loc 1 289 9 is_stmt 0 view .LVU299
 1114 0028 9A6A     		ldr	r2, [r3, #40]
 1115              		.loc 1 289 18 view .LVU300
 1116 002a 0220     		movs	r0, #2
 1117 002c 0243     		orrs	r2, r0
 1118 002e 9A62     		str	r2, [r3, #40]
 290:Src/motor.c   **** 
 291:Src/motor.c   ****     ADC1->CR = 0;
 1119              		.loc 1 291 5 is_stmt 1 view .LVU301
 1120              		.loc 1 291 14 is_stmt 0 view .LVU302
 1121 0030 9960     		str	r1, [r3, #8]
 292:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 1122              		.loc 1 292 5 is_stmt 1 view .LVU303
 1123              		.loc 1 292 9 is_stmt 0 view .LVU304
 1124 0032 9968     		ldr	r1, [r3, #8]
 1125              		.loc 1 292 14 view .LVU305
 1126 0034 8022     		movs	r2, #128
 1127 0036 1206     		lsls	r2, r2, #24
 1128 0038 0A43     		orrs	r2, r1
 1129 003a 9A60     		str	r2, [r3, #8]
 293:Src/motor.c   ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 1130              		.loc 1 293 5 is_stmt 1 view .LVU306
 1131              	.L44:
 1132              		.loc 1 293 11 discriminator 1 view .LVU307
 1133              		.loc 1 293 15 is_stmt 0 discriminator 1 view .LVU308
ARM GAS  /tmp/ccAGE7Go.s 			page 39


 1134 003c 0A4B     		ldr	r3, .L47+4
 1135 003e 9B68     		ldr	r3, [r3, #8]
 1136              		.loc 1 293 11 discriminator 1 view .LVU309
 1137 0040 002B     		cmp	r3, #0
 1138 0042 FBDB     		blt	.L44
 294:Src/motor.c   **** 
 295:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 1139              		.loc 1 295 5 is_stmt 1 view .LVU310
 1140              		.loc 1 295 9 is_stmt 0 view .LVU311
 1141 0044 084A     		ldr	r2, .L47+4
 1142 0046 9368     		ldr	r3, [r2, #8]
 1143              		.loc 1 295 14 view .LVU312
 1144 0048 0121     		movs	r1, #1
 1145 004a 0B43     		orrs	r3, r1
 1146 004c 9360     		str	r3, [r2, #8]
 296:Src/motor.c   ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 1147              		.loc 1 296 5 is_stmt 1 view .LVU313
 1148              	.L45:
 1149              		.loc 1 296 11 discriminator 1 view .LVU314
 1150              		.loc 1 296 17 is_stmt 0 discriminator 1 view .LVU315
 1151 004e 064B     		ldr	r3, .L47+4
 1152 0050 1B68     		ldr	r3, [r3]
 1153              		.loc 1 296 11 discriminator 1 view .LVU316
 1154 0052 DB07     		lsls	r3, r3, #31
 1155 0054 FBD5     		bpl	.L45
 297:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 1156              		.loc 1 297 5 is_stmt 1 view .LVU317
 1157              		.loc 1 297 9 is_stmt 0 view .LVU318
 1158 0056 044A     		ldr	r2, .L47+4
 1159 0058 9368     		ldr	r3, [r2, #8]
 1160              		.loc 1 297 14 view .LVU319
 1161 005a 0421     		movs	r1, #4
 1162 005c 0B43     		orrs	r3, r1
 1163 005e 9360     		str	r3, [r2, #8]
 298:Src/motor.c   **** }
 1164              		.loc 1 298 1 view .LVU320
 1165              		@ sp needed
 1166 0060 7047     		bx	lr
 1167              	.L48:
 1168 0062 C046     		.align	2
 1169              	.L47:
 1170 0064 00100240 		.word	1073876992
 1171 0068 00240140 		.word	1073816576
 1172              		.cfi_endproc
 1173              	.LFE56:
 1175              		.section	.text.motor_init,"ax",%progbits
 1176              		.align	1
 1177              		.global	motor_init
 1178              		.syntax unified
 1179              		.code	16
 1180              		.thumb_func
 1182              	motor_init:
 1183              	.LFB43:
  18:Src/motor.c   ****     pwm_init();
 1184              		.loc 1 18 23 is_stmt 1 view -0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccAGE7Go.s 			page 40


 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188 0000 10B5     		push	{r4, lr}
 1189              	.LCFI12:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 4, -8
 1192              		.cfi_offset 14, -4
  19:Src/motor.c   ****     encoder_init();
 1193              		.loc 1 19 5 view .LVU322
 1194 0002 FFF7FEFF 		bl	pwm_init
 1195              	.LVL44:
  20:Src/motor.c   ****     ADC_init();
 1196              		.loc 1 20 5 view .LVU323
 1197 0006 FFF7FEFF 		bl	encoder_init
 1198              	.LVL45:
  21:Src/motor.c   **** }
 1199              		.loc 1 21 5 view .LVU324
 1200 000a FFF7FEFF 		bl	ADC_init
 1201              	.LVL46:
  22:Src/motor.c   **** 
 1202              		.loc 1 22 1 is_stmt 0 view .LVU325
 1203              		@ sp needed
 1204 000e 10BD     		pop	{r4, pc}
 1205              		.cfi_endproc
 1206              	.LFE43:
 1208              		.global	Ki
 1209              		.section	.data.Ki,"aw"
 1212              	Ki:
 1213 0000 01       		.byte	1
 1214              		.global	Kp
 1215              		.section	.data.Kp,"aw"
 1218              	Kp:
 1219 0000 01       		.byte	1
 1220              		.global	error
 1221              		.section	.bss.error,"aw",%nobits
 1222              		.align	1
 1225              	error:
 1226 0000 0000     		.space	2
 1227              		.global	adc_value
 1228              		.section	.bss.adc_value,"aw",%nobits
 1231              	adc_value:
 1232 0000 00       		.space	1
 1233              		.global	motorr_speed
 1234              		.section	.bss.motorr_speed,"aw",%nobits
 1235              		.align	1
 1238              	motorr_speed:
 1239 0000 0000     		.space	2
 1240              		.global	motorl_speed
 1241              		.section	.bss.motorl_speed,"aw",%nobits
 1242              		.align	1
 1245              	motorl_speed:
 1246 0000 0000     		.space	2
 1247              		.global	target_rpm
 1248              		.section	.bss.target_rpm,"aw",%nobits
 1249              		.align	1
 1252              	target_rpm:
 1253 0000 0000     		.space	2
 1254              		.global	duty_cycle
ARM GAS  /tmp/ccAGE7Go.s 			page 41


 1255              		.section	.bss.duty_cycle,"aw",%nobits
 1258              	duty_cycle:
 1259 0000 00       		.space	1
 1260              		.global	error_integral
 1261              		.section	.bss.error_integral,"aw",%nobits
 1262              		.align	1
 1265              	error_integral:
 1266 0000 0000     		.space	2
 1267              		.text
 1268              	.Letext0:
 1269              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1270              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1271              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1272              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1273              		.file 7 "Inc/pins.h"
 1274              		.file 8 "Inc/motor.h"
ARM GAS  /tmp/ccAGE7Go.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/ccAGE7Go.s:19     .text.pwm_init:00000000 $t
     /tmp/ccAGE7Go.s:25     .text.pwm_init:00000000 pwm_init
     /tmp/ccAGE7Go.s:263    .text.pwm_init:00000104 $d
     /tmp/ccAGE7Go.s:279    .text.pwm_setDutyCycleL:00000000 $t
     /tmp/ccAGE7Go.s:285    .text.pwm_setDutyCycleL:00000000 pwm_setDutyCycleL
     /tmp/ccAGE7Go.s:322    .text.pwm_setDutyCycleL:00000018 $d
     /tmp/ccAGE7Go.s:327    .text.pwm_setDutyCycleR:00000000 $t
     /tmp/ccAGE7Go.s:333    .text.pwm_setDutyCycleR:00000000 pwm_setDutyCycleR
     /tmp/ccAGE7Go.s:372    .text.set_Motor_Direction:00000000 $t
     /tmp/ccAGE7Go.s:378    .text.set_Motor_Direction:00000000 set_Motor_Direction
     /tmp/ccAGE7Go.s:450    .text.set_Forward:00000000 $t
     /tmp/ccAGE7Go.s:456    .text.set_Forward:00000000 set_Forward
     /tmp/ccAGE7Go.s:483    .text.set_Forward:00000014 $d
     /tmp/ccAGE7Go.s:489    .text.set_Backward:00000000 $t
     /tmp/ccAGE7Go.s:495    .text.set_Backward:00000000 set_Backward
     /tmp/ccAGE7Go.s:522    .text.set_Backward:00000014 $d
     /tmp/ccAGE7Go.s:528    .text.set_Right:00000000 $t
     /tmp/ccAGE7Go.s:534    .text.set_Right:00000000 set_Right
     /tmp/ccAGE7Go.s:561    .text.set_Right:00000014 $d
     /tmp/ccAGE7Go.s:567    .text.set_Left:00000000 $t
     /tmp/ccAGE7Go.s:573    .text.set_Left:00000000 set_Left
     /tmp/ccAGE7Go.s:600    .text.set_Left:00000014 $d
     /tmp/ccAGE7Go.s:606    .text.set_Off:00000000 $t
     /tmp/ccAGE7Go.s:612    .text.set_Off:00000000 set_Off
     /tmp/ccAGE7Go.s:639    .text.set_Off:00000014 $d
     /tmp/ccAGE7Go.s:645    .rodata.MoveMotors.str1.4:00000000 $d
     /tmp/ccAGE7Go.s:652    .text.MoveMotors:00000000 $t
     /tmp/ccAGE7Go.s:658    .text.MoveMotors:00000000 MoveMotors
     /tmp/ccAGE7Go.s:726    .text.MoveMotors:00000034 $d
     /tmp/ccAGE7Go.s:732    .text.encoder_init:00000000 $t
     /tmp/ccAGE7Go.s:738    .text.encoder_init:00000000 encoder_init
     /tmp/ccAGE7Go.s:985    .text.encoder_init:000000ec $d
     /tmp/ccAGE7Go.s:1001   .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/ccAGE7Go.s:1007   .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/ccAGE7Go.s:1057   .text.TIM6_DAC_IRQHandler:00000030 $d
     /tmp/ccAGE7Go.s:1245   .bss.motorl_speed:00000000 motorl_speed
     /tmp/ccAGE7Go.s:1238   .bss.motorr_speed:00000000 motorr_speed
     /tmp/ccAGE7Go.s:1068   .text.ADC_init:00000000 $t
     /tmp/ccAGE7Go.s:1074   .text.ADC_init:00000000 ADC_init
     /tmp/ccAGE7Go.s:1170   .text.ADC_init:00000064 $d
     /tmp/ccAGE7Go.s:1176   .text.motor_init:00000000 $t
     /tmp/ccAGE7Go.s:1182   .text.motor_init:00000000 motor_init
     /tmp/ccAGE7Go.s:1212   .data.Ki:00000000 Ki
     /tmp/ccAGE7Go.s:1218   .data.Kp:00000000 Kp
     /tmp/ccAGE7Go.s:1225   .bss.error:00000000 error
     /tmp/ccAGE7Go.s:1222   .bss.error:00000000 $d
     /tmp/ccAGE7Go.s:1231   .bss.adc_value:00000000 adc_value
     /tmp/ccAGE7Go.s:1232   .bss.adc_value:00000000 $d
     /tmp/ccAGE7Go.s:1235   .bss.motorr_speed:00000000 $d
     /tmp/ccAGE7Go.s:1242   .bss.motorl_speed:00000000 $d
     /tmp/ccAGE7Go.s:1252   .bss.target_rpm:00000000 target_rpm
     /tmp/ccAGE7Go.s:1249   .bss.target_rpm:00000000 $d
     /tmp/ccAGE7Go.s:1258   .bss.duty_cycle:00000000 duty_cycle
     /tmp/ccAGE7Go.s:1259   .bss.duty_cycle:00000000 $d
     /tmp/ccAGE7Go.s:1265   .bss.error_integral:00000000 error_integral
ARM GAS  /tmp/ccAGE7Go.s 			page 43


     /tmp/ccAGE7Go.s:1262   .bss.error_integral:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
motor_left_pins
motor_right_pins
__aeabi_uidiv
