ARM GAS  /tmp/cc4d88PT.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** #include "main.h"
   7:Src/motor.c   **** #include <math.h>
   8:Src/motor.c   **** 
   9:Src/motor.c   **** volatile int16_t motorl_speed = 0;   	// Measured left motor speed
  10:Src/motor.c   **** volatile int16_t motorr_speed = 0;   	// Measured left motor speed
  11:Src/motor.c   **** volatile uint8_t target_dist = 0;
  12:Src/motor.c   **** volatile float current_dist = 0;
  13:Src/motor.c   **** volatile float absolute_dist = 0;
  14:Src/motor.c   **** volatile float heading = 0;
  15:Src/motor.c   **** volatile bool turning = false;
  16:Src/motor.c   **** 
  17:Src/motor.c   **** #define max(a,b) ((a>b) ? a : b)
  18:Src/motor.c   **** #define min(a,b) ((a>b) ? b : a)
  19:Src/motor.c   **** 
  20:Src/motor.c   **** #define PRINT_DEBUG 0
  21:Src/motor.c   **** #define STOP_ULTRASONIC 20 //cm
  22:Src/motor.c   **** 
  23:Src/motor.c   **** // Sets up the entire motor drive system
  24:Src/motor.c   **** void motor_init(void) {
  25:Src/motor.c   **** 	pwm_init();
  26:Src/motor.c   **** 	encoder_init();
  27:Src/motor.c   **** }
  28:Src/motor.c   **** 
  29:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  30:Src/motor.c   **** void pwm_init(void) {
  27              		.loc 1 30 21 view -0
  28              		.cfi_startproc
ARM GAS  /tmp/cc4d88PT.s 			page 2


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  31:Src/motor.c   **** 	//RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  32:Src/motor.c   **** 
  33:Src/motor.c   **** 	// Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  34:Src/motor.c   **** 	/*
  35:Src/motor.c   **** 	   GPIOA->MODER |= (1 << 9);
  36:Src/motor.c   **** 	   GPIOA->MODER &= ~(1 << 8);
  37:Src/motor.c   **** 
  38:Src/motor.c   **** 	// Set up pin PB3 for H-bridge PWM output (TIMER 2 CH2)
  39:Src/motor.c   **** 	GPIOB->MODER |= (1 << 7);
  40:Src/motor.c   **** 	GPIOB->MODER &= ~(1 << 6);
  41:Src/motor.c   **** 
  42:Src/motor.c   **** 	// Set PA4 to AF4,
  43:Src/motor.c   **** 	GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  44:Src/motor.c   **** 	GPIOA->AFR[0] |= (1 << 18);
  45:Src/motor.c   **** 
  46:Src/motor.c   **** 	// Set PB3 to AF2,
  47:Src/motor.c   **** 	GPIOB->AFR[0] &= 0xFFFF0FFF; // clear PB3 bits,
  48:Src/motor.c   **** 	GPIOB->AFR[0] |= (1 << 13);
  49:Src/motor.c   **** 
  50:Src/motor.c   **** 	// Set up a PA5, PA8 as GPIO output pins for motor direction control
  51:Src/motor.c   **** 	GPIOA->MODER &= 0xFFFCF3FF; // clear PA5, PA6 bits,
  52:Src/motor.c   **** 	GPIOA->MODER |= (1 << 10) | (1 << 16);
  53:Src/motor.c   **** 
  54:Src/motor.c   **** 	// Set up a PB2, PB10 as GPIO output pins for motor direction control
  55:Src/motor.c   **** 	GPIOB->MODER &= 0xFFCFFFCF; // clear PB2, PB10 bits,
  56:Src/motor.c   **** 	GPIOB->MODER |= (1 << 4) | (1 << 20);
  57:Src/motor.c   **** 	*/
  58:Src/motor.c   **** 
  59:Src/motor.c   **** 	//Initialize one direction pin to high, the other low
  60:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_a.gpio, motor_left_pins.dir_a.pin.Pin, GPIO_PIN_SET);
  38              		.loc 1 60 2 view .LVU1
  39              		.loc 1 60 73 is_stmt 0 view .LVU2
  40 0002 244C     		ldr	r4, .L2
  41              		.loc 1 60 2 view .LVU3
  42 0004 A18B     		ldrh	r1, [r4, #28]
  43 0006 A069     		ldr	r0, [r4, #24]
  44 0008 0122     		movs	r2, #1
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL0:
  61:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_left_pins.dir_b.gpio, motor_left_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  47              		.loc 1 61 2 is_stmt 1 view .LVU4
  48 000e A18E     		ldrh	r1, [r4, #52]
  49 0010 206B     		ldr	r0, [r4, #48]
  50 0012 0022     		movs	r2, #0
  51 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  52              	.LVL1:
  62:Src/motor.c   **** 
  63:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_a.gpio, motor_right_pins.dir_a.pin.Pin, GPIO_PIN_SET);
ARM GAS  /tmp/cc4d88PT.s 			page 3


  53              		.loc 1 63 2 view .LVU5
  54              		.loc 1 63 75 is_stmt 0 view .LVU6
  55 0018 1F4C     		ldr	r4, .L2+4
  56              		.loc 1 63 2 view .LVU7
  57 001a A18B     		ldrh	r1, [r4, #28]
  58 001c A069     		ldr	r0, [r4, #24]
  59 001e 0122     		movs	r2, #1
  60 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL2:
  64:Src/motor.c   **** 	HAL_GPIO_WritePin(motor_right_pins.dir_b.gpio, motor_right_pins.dir_b.pin.Pin, GPIO_PIN_RESET);
  62              		.loc 1 64 2 is_stmt 1 view .LVU8
  63 0024 A18E     		ldrh	r1, [r4, #52]
  64 0026 206B     		ldr	r0, [r4, #48]
  65 0028 0022     		movs	r2, #0
  66 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL3:
  65:Src/motor.c   **** 
  66:Src/motor.c   **** 	// Set up PWM timer
  67:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
  68              		.loc 1 67 2 view .LVU9
  69              		.loc 1 67 5 is_stmt 0 view .LVU10
  70 002e 1B4B     		ldr	r3, .L2+8
  71 0030 D969     		ldr	r1, [r3, #28]
  72              		.loc 1 67 15 view .LVU11
  73 0032 8022     		movs	r2, #128
  74 0034 5200     		lsls	r2, r2, #1
  75 0036 0A43     		orrs	r2, r1
  76 0038 DA61     		str	r2, [r3, #28]
  68:Src/motor.c   **** 	TIM14->CR1 = 0;                         // Clear control registers
  77              		.loc 1 68 2 is_stmt 1 view .LVU12
  78              		.loc 1 68 13 is_stmt 0 view .LVU13
  79 003a 194A     		ldr	r2, .L2+12
  80 003c 0021     		movs	r1, #0
  81 003e 1160     		str	r1, [r2]
  69:Src/motor.c   **** 	TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
  82              		.loc 1 69 2 is_stmt 1 view .LVU14
  83              		.loc 1 69 15 is_stmt 0 view .LVU15
  84 0040 9161     		str	r1, [r2, #24]
  70:Src/motor.c   **** 	TIM14->CCER = 0;
  85              		.loc 1 70 2 is_stmt 1 view .LVU16
  86              		.loc 1 70 14 is_stmt 0 view .LVU17
  87 0042 1162     		str	r1, [r2, #32]
  71:Src/motor.c   **** 
  72:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  88              		.loc 1 72 2 is_stmt 1 view .LVU18
  89              		.loc 1 72 5 is_stmt 0 view .LVU19
  90 0044 DC69     		ldr	r4, [r3, #28]
  91              		.loc 1 72 15 view .LVU20
  92 0046 0120     		movs	r0, #1
  93 0048 0443     		orrs	r4, r0
  94 004a DC61     		str	r4, [r3, #28]
  73:Src/motor.c   **** 	TIM2->CR1 = 0;                         // Clear control registers
  95              		.loc 1 73 2 is_stmt 1 view .LVU21
  96              		.loc 1 73 12 is_stmt 0 view .LVU22
  97 004c 8023     		movs	r3, #128
  98 004e DB05     		lsls	r3, r3, #23
  99 0050 1960     		str	r1, [r3]
ARM GAS  /tmp/cc4d88PT.s 			page 4


  74:Src/motor.c   **** 	TIM2->CCMR1 = 0;                       // (prevents having to manually clear bits)
 100              		.loc 1 74 2 is_stmt 1 view .LVU23
 101              		.loc 1 74 14 is_stmt 0 view .LVU24
 102 0052 9961     		str	r1, [r3, #24]
  75:Src/motor.c   **** 	TIM2->CCER = 0;
 103              		.loc 1 75 2 is_stmt 1 view .LVU25
 104              		.loc 1 75 13 is_stmt 0 view .LVU26
 105 0054 1962     		str	r1, [r3, #32]
  76:Src/motor.c   **** 
  77:Src/motor.c   **** 	// Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  78:Src/motor.c   **** 	TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 106              		.loc 1 78 2 is_stmt 1 view .LVU27
 107              		.loc 1 78 7 is_stmt 0 view .LVU28
 108 0056 9469     		ldr	r4, [r2, #24]
 109              		.loc 1 78 15 view .LVU29
 110 0058 6825     		movs	r5, #104
 111 005a 2C43     		orrs	r4, r5
 112 005c 9461     		str	r4, [r2, #24]
  79:Src/motor.c   **** 	TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 113              		.loc 1 79 2 is_stmt 1 view .LVU30
 114              		.loc 1 79 7 is_stmt 0 view .LVU31
 115 005e 146A     		ldr	r4, [r2, #32]
 116              		.loc 1 79 14 view .LVU32
 117 0060 0443     		orrs	r4, r0
 118 0062 1462     		str	r4, [r2, #32]
  80:Src/motor.c   **** 	TIM14->PSC = 1;                         // Run timer on 24Mhz
 119              		.loc 1 80 2 is_stmt 1 view .LVU33
 120              		.loc 1 80 13 is_stmt 0 view .LVU34
 121 0064 9062     		str	r0, [r2, #40]
  81:Src/motor.c   **** 	TIM14->ARR = 1200;                      // PWM at 20kHz
 122              		.loc 1 81 2 is_stmt 1 view .LVU35
 123              		.loc 1 81 13 is_stmt 0 view .LVU36
 124 0066 9625     		movs	r5, #150
 125 0068 ED00     		lsls	r5, r5, #3
 126 006a D562     		str	r5, [r2, #44]
  82:Src/motor.c   **** 	TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 127              		.loc 1 82 2 is_stmt 1 view .LVU37
 128              		.loc 1 82 14 is_stmt 0 view .LVU38
 129 006c 5163     		str	r1, [r2, #52]
  83:Src/motor.c   **** 
  84:Src/motor.c   **** 	TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 130              		.loc 1 84 2 is_stmt 1 view .LVU39
 131              		.loc 1 84 7 is_stmt 0 view .LVU40
 132 006e 1468     		ldr	r4, [r2]
 133              		.loc 1 84 13 view .LVU41
 134 0070 0443     		orrs	r4, r0
 135 0072 1460     		str	r4, [r2]
  85:Src/motor.c   **** 
  86:Src/motor.c   **** 	TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 136              		.loc 1 86 2 is_stmt 1 view .LVU42
 137              		.loc 1 86 6 is_stmt 0 view .LVU43
 138 0074 9C69     		ldr	r4, [r3, #24]
 139              		.loc 1 86 14 view .LVU44
 140 0076 D022     		movs	r2, #208
 141 0078 D201     		lsls	r2, r2, #7
 142 007a 2243     		orrs	r2, r4
 143 007c 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/cc4d88PT.s 			page 5


  87:Src/motor.c   **** 	TIM2->CCER |= TIM_CCER_CC2E;           // Enable capture-compare channel 2
 144              		.loc 1 87 2 is_stmt 1 view .LVU45
 145              		.loc 1 87 6 is_stmt 0 view .LVU46
 146 007e 1A6A     		ldr	r2, [r3, #32]
 147              		.loc 1 87 13 view .LVU47
 148 0080 1024     		movs	r4, #16
 149 0082 2243     		orrs	r2, r4
 150 0084 1A62     		str	r2, [r3, #32]
  88:Src/motor.c   **** 	TIM2->PSC = 1;                         // Run timer on 24Mhz
 151              		.loc 1 88 2 is_stmt 1 view .LVU48
 152              		.loc 1 88 12 is_stmt 0 view .LVU49
 153 0086 9862     		str	r0, [r3, #40]
  89:Src/motor.c   **** 	TIM2->ARR = 1200;                      // PWM at 20kHz
 154              		.loc 1 89 2 is_stmt 1 view .LVU50
 155              		.loc 1 89 12 is_stmt 0 view .LVU51
 156 0088 DD62     		str	r5, [r3, #44]
  90:Src/motor.c   **** 	TIM2->CCR2 = 0;                        // Start PWM at 0% duty cycle
 157              		.loc 1 90 2 is_stmt 1 view .LVU52
 158              		.loc 1 90 13 is_stmt 0 view .LVU53
 159 008a 9963     		str	r1, [r3, #56]
  91:Src/motor.c   **** 
  92:Src/motor.c   **** 	TIM2->CR1 |= TIM_CR1_CEN;              // Enable timer
 160              		.loc 1 92 2 is_stmt 1 view .LVU54
 161              		.loc 1 92 6 is_stmt 0 view .LVU55
 162 008c 1A68     		ldr	r2, [r3]
 163              		.loc 1 92 12 view .LVU56
 164 008e 0243     		orrs	r2, r0
 165 0090 1A60     		str	r2, [r3]
  93:Src/motor.c   **** }
 166              		.loc 1 93 1 view .LVU57
 167              		@ sp needed
 168 0092 70BD     		pop	{r4, r5, r6, pc}
 169              	.L3:
 170              		.align	2
 171              	.L2:
 172 0094 00000000 		.word	motor_left_pins
 173 0098 00000000 		.word	motor_right_pins
 174 009c 00100240 		.word	1073876992
 175 00a0 00200040 		.word	1073750016
 176              		.cfi_endproc
 177              	.LFE44:
 179              		.global	__aeabi_uidiv
 180              		.section	.text.pwm_setDutyCycleL,"ax",%progbits
 181              		.align	1
 182              		.global	pwm_setDutyCycleL
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 187              	pwm_setDutyCycleL:
 188              	.LVL4:
 189              	.LFB45:
  94:Src/motor.c   **** 
  95:Src/motor.c   **** // Set the duty cycle of the PWM Left, accepts (0-100)
  96:Src/motor.c   **** void pwm_setDutyCycleL(uint8_t duty) {
 190              		.loc 1 96 38 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc4d88PT.s 			page 6


 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 96 38 is_stmt 0 view .LVU59
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI1:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
  97:Src/motor.c   **** 	if(duty <= 100) {
 200              		.loc 1 97 2 is_stmt 1 view .LVU60
 201              		.loc 1 97 4 is_stmt 0 view .LVU61
 202 0002 6428     		cmp	r0, #100
 203 0004 06D8     		bhi	.L4
  98:Src/motor.c   **** 		TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 value
 204              		.loc 1 98 3 is_stmt 1 view .LVU62
 205              		.loc 1 98 38 is_stmt 0 view .LVU63
 206 0006 044C     		ldr	r4, .L6
 207 0008 E36A     		ldr	r3, [r4, #44]
 208              		.loc 1 98 32 view .LVU64
 209 000a 5843     		muls	r0, r3
 210              	.LVL5:
 211              		.loc 1 98 44 view .LVU65
 212 000c 6421     		movs	r1, #100
 213 000e FFF7FEFF 		bl	__aeabi_uidiv
 214              	.LVL6:
 215              		.loc 1 98 15 view .LVU66
 216 0012 6063     		str	r0, [r4, #52]
 217              	.L4:
  99:Src/motor.c   **** 														// (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
 100:Src/motor.c   **** 	}
 101:Src/motor.c   **** }
 218              		.loc 1 101 1 view .LVU67
 219              		@ sp needed
 220 0014 10BD     		pop	{r4, pc}
 221              	.L7:
 222 0016 C046     		.align	2
 223              	.L6:
 224 0018 00200040 		.word	1073750016
 225              		.cfi_endproc
 226              	.LFE45:
 228              		.section	.text.pwm_setDutyCycleR,"ax",%progbits
 229              		.align	1
 230              		.global	pwm_setDutyCycleR
 231              		.syntax unified
 232              		.code	16
 233              		.thumb_func
 235              	pwm_setDutyCycleR:
 236              	.LVL7:
 237              	.LFB46:
 102:Src/motor.c   **** 
 103:Src/motor.c   **** // Set the duty cycle of the PWM Right, accepts (0-100)
 104:Src/motor.c   **** void pwm_setDutyCycleR(uint8_t duty) {
 238              		.loc 1 104 38 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		.loc 1 104 38 is_stmt 0 view .LVU69
 243 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc4d88PT.s 			page 7


 244              	.LCFI2:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 4, -8
 247              		.cfi_offset 14, -4
 105:Src/motor.c   **** 	if(duty <= 100) {
 248              		.loc 1 105 2 is_stmt 1 view .LVU70
 249              		.loc 1 105 4 is_stmt 0 view .LVU71
 250 0002 6428     		cmp	r0, #100
 251 0004 07D8     		bhi	.L8
 106:Src/motor.c   **** 		TIM2->CCR2 = ((uint32_t)duty*TIM2->ARR)/100;  // Use linear transform to produce CCR1 value
 252              		.loc 1 106 3 is_stmt 1 view .LVU72
 253              		.loc 1 106 36 is_stmt 0 view .LVU73
 254 0006 8024     		movs	r4, #128
 255 0008 E405     		lsls	r4, r4, #23
 256 000a E36A     		ldr	r3, [r4, #44]
 257              		.loc 1 106 31 view .LVU74
 258 000c 5843     		muls	r0, r3
 259              	.LVL8:
 260              		.loc 1 106 42 view .LVU75
 261 000e 6421     		movs	r1, #100
 262 0010 FFF7FEFF 		bl	__aeabi_uidiv
 263              	.LVL9:
 264              		.loc 1 106 14 view .LVU76
 265 0014 A063     		str	r0, [r4, #56]
 266              	.L8:
 107:Src/motor.c   **** 													  // (CCR2 == "pulse" parameter in PWM struct used by peripheral library)
 108:Src/motor.c   **** 	}
 109:Src/motor.c   **** }
 267              		.loc 1 109 1 view .LVU77
 268              		@ sp needed
 269 0016 10BD     		pop	{r4, pc}
 270              		.cfi_endproc
 271              	.LFE46:
 273              		.section	.text.set_Motor_Direction,"ax",%progbits
 274              		.align	1
 275              		.global	set_Motor_Direction
 276              		.syntax unified
 277              		.code	16
 278              		.thumb_func
 280              	set_Motor_Direction:
 281              	.LVL10:
 282              	.LFB47:
 110:Src/motor.c   **** 
 111:Src/motor.c   **** /*
 112:Src/motor.c   ****  * This sets an individual motor's direction.
 113:Src/motor.c   ****  * Note: use MoveMotors to change multiple motor values, eg to turn.
 114:Src/motor.c   ****  */
 115:Src/motor.c   **** void set_Motor_Direction(Direction dir, motor_pins_t* pins){
 283              		.loc 1 115 60 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		.loc 1 115 60 is_stmt 0 view .LVU79
 288 0000 10B5     		push	{r4, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
ARM GAS  /tmp/cc4d88PT.s 			page 8


 292              		.cfi_offset 14, -4
 293 0002 0C00     		movs	r4, r1
 116:Src/motor.c   **** 	switch(dir){
 294              		.loc 1 116 2 is_stmt 1 view .LVU80
 295 0004 0028     		cmp	r0, #0
 296 0006 02D0     		beq	.L11
 297 0008 0328     		cmp	r0, #3
 298 000a 0BD0     		beq	.L12
 299              	.LVL11:
 300              	.L10:
 117:Src/motor.c   **** 		case FORWARD:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_SET);
 119:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 120:Src/motor.c   **** 			break;
 121:Src/motor.c   **** 		case BACKWARD:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_a.gpio, pins->dir_a.pin.Pin, GPIO_PIN_RESET);
 123:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 124:Src/motor.c   **** 			break;
 125:Src/motor.c   **** 		default:
 126:Src/motor.c   **** 			;
 127:Src/motor.c   **** 	}
 128:Src/motor.c   **** }
 301              		.loc 1 128 1 is_stmt 0 view .LVU81
 302              		@ sp needed
 303              	.LVL12:
 304              		.loc 1 128 1 view .LVU82
 305 000c 10BD     		pop	{r4, pc}
 306              	.LVL13:
 307              	.L11:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 308              		.loc 1 118 4 is_stmt 1 view .LVU83
 309 000e 898B     		ldrh	r1, [r1, #28]
 310              	.LVL14:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 311              		.loc 1 118 4 is_stmt 0 view .LVU84
 312 0010 A069     		ldr	r0, [r4, #24]
 313              	.LVL15:
 118:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_RESET);
 314              		.loc 1 118 4 view .LVU85
 315 0012 0122     		movs	r2, #1
 316 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL16:
 119:Src/motor.c   **** 			break;
 318              		.loc 1 119 4 is_stmt 1 view .LVU86
 319 0018 A18E     		ldrh	r1, [r4, #52]
 320 001a 206B     		ldr	r0, [r4, #48]
 321 001c 0022     		movs	r2, #0
 322 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 323              	.LVL17:
 120:Src/motor.c   **** 		case BACKWARD:
 324              		.loc 1 120 4 view .LVU87
 325 0022 F3E7     		b	.L10
 326              	.LVL18:
 327              	.L12:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 328              		.loc 1 122 4 view .LVU88
 329 0024 898B     		ldrh	r1, [r1, #28]
ARM GAS  /tmp/cc4d88PT.s 			page 9


 330              	.LVL19:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 331              		.loc 1 122 4 is_stmt 0 view .LVU89
 332 0026 A069     		ldr	r0, [r4, #24]
 333              	.LVL20:
 122:Src/motor.c   **** 			HAL_GPIO_WritePin(pins->dir_b.gpio, pins->dir_b.pin.Pin, GPIO_PIN_SET);
 334              		.loc 1 122 4 view .LVU90
 335 0028 0022     		movs	r2, #0
 336 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 337              	.LVL21:
 123:Src/motor.c   **** 			break;
 338              		.loc 1 123 4 is_stmt 1 view .LVU91
 339 002e A18E     		ldrh	r1, [r4, #52]
 340 0030 206B     		ldr	r0, [r4, #48]
 341 0032 0122     		movs	r2, #1
 342 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 343              	.LVL22:
 124:Src/motor.c   **** 		default:
 344              		.loc 1 124 4 view .LVU92
 126:Src/motor.c   **** 	}
 345              		.loc 1 126 4 view .LVU93
 346              		.loc 1 128 1 is_stmt 0 view .LVU94
 347 0038 E8E7     		b	.L10
 348              		.cfi_endproc
 349              	.LFE47:
 351              		.section	.text.set_Forward,"ax",%progbits
 352              		.align	1
 353              		.global	set_Forward
 354              		.syntax unified
 355              		.code	16
 356              		.thumb_func
 358              	set_Forward:
 359              	.LFB48:
 129:Src/motor.c   **** 
 130:Src/motor.c   **** //Experimentation led to this 91 number for driving straight.
 131:Src/motor.c   **** volatile uint8_t pwm_right = 100;
 132:Src/motor.c   **** volatile uint8_t pwm_left = 100;
 133:Src/motor.c   **** 
 134:Src/motor.c   **** void set_Forward(){
 360              		.loc 1 134 19 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
 368              		.cfi_offset 14, -4
 135:Src/motor.c   **** 	//left go forward
 136:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 369              		.loc 1 136 2 view .LVU96
 370 0002 0949     		ldr	r1, .L15
 371 0004 0020     		movs	r0, #0
 372 0006 FFF7FEFF 		bl	set_Motor_Direction
 373              	.LVL23:
 137:Src/motor.c   **** 
 138:Src/motor.c   **** 	//right go forward
ARM GAS  /tmp/cc4d88PT.s 			page 10


 139:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 374              		.loc 1 139 2 view .LVU97
 375 000a 0849     		ldr	r1, .L15+4
 376 000c 0020     		movs	r0, #0
 377 000e FFF7FEFF 		bl	set_Motor_Direction
 378              	.LVL24:
 140:Src/motor.c   **** 
 141:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 379              		.loc 1 141 2 view .LVU98
 380 0012 074B     		ldr	r3, .L15+8
 381 0014 1878     		ldrb	r0, [r3]
 382 0016 C0B2     		uxtb	r0, r0
 383 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 384              	.LVL25:
 142:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 385              		.loc 1 142 2 view .LVU99
 386 001c 054B     		ldr	r3, .L15+12
 387 001e 1878     		ldrb	r0, [r3]
 388 0020 C0B2     		uxtb	r0, r0
 389 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 390              	.LVL26:
 143:Src/motor.c   **** 
 144:Src/motor.c   **** 
 145:Src/motor.c   **** 	/* the old way
 146:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 5);
 147:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 8);
 148:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 10);
 149:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 2);
 150:Src/motor.c   **** 	   */
 151:Src/motor.c   **** }
 391              		.loc 1 151 1 is_stmt 0 view .LVU100
 392              		@ sp needed
 393 0026 10BD     		pop	{r4, pc}
 394              	.L16:
 395              		.align	2
 396              	.L15:
 397 0028 00000000 		.word	motor_left_pins
 398 002c 00000000 		.word	motor_right_pins
 399 0030 00000000 		.word	pwm_right
 400 0034 00000000 		.word	pwm_left
 401              		.cfi_endproc
 402              	.LFE48:
 404              		.section	.text.set_Backward,"ax",%progbits
 405              		.align	1
 406              		.global	set_Backward
 407              		.syntax unified
 408              		.code	16
 409              		.thumb_func
 411              	set_Backward:
 412              	.LFB49:
 152:Src/motor.c   **** 
 153:Src/motor.c   **** void set_Backward(){
 413              		.loc 1 153 20 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc4d88PT.s 			page 11


 418              	.LCFI5:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 154:Src/motor.c   **** 	//left go backward
 155:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 422              		.loc 1 155 2 view .LVU102
 423 0002 0949     		ldr	r1, .L18
 424 0004 0320     		movs	r0, #3
 425 0006 FFF7FEFF 		bl	set_Motor_Direction
 426              	.LVL27:
 156:Src/motor.c   **** 
 157:Src/motor.c   **** 	//right go backward
 158:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 427              		.loc 1 158 2 view .LVU103
 428 000a 0849     		ldr	r1, .L18+4
 429 000c 0320     		movs	r0, #3
 430 000e FFF7FEFF 		bl	set_Motor_Direction
 431              	.LVL28:
 159:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 432              		.loc 1 159 2 view .LVU104
 433 0012 074B     		ldr	r3, .L18+8
 434 0014 1878     		ldrb	r0, [r3]
 435 0016 C0B2     		uxtb	r0, r0
 436 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 437              	.LVL29:
 160:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 438              		.loc 1 160 2 view .LVU105
 439 001c 054B     		ldr	r3, .L18+12
 440 001e 1878     		ldrb	r0, [r3]
 441 0020 C0B2     		uxtb	r0, r0
 442 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 443              	.LVL30:
 161:Src/motor.c   **** 	/* the old way
 162:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 8);
 163:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 5);
 164:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 2);
 165:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 10);
 166:Src/motor.c   **** 	   */
 167:Src/motor.c   **** }
 444              		.loc 1 167 1 is_stmt 0 view .LVU106
 445              		@ sp needed
 446 0026 10BD     		pop	{r4, pc}
 447              	.L19:
 448              		.align	2
 449              	.L18:
 450 0028 00000000 		.word	motor_left_pins
 451 002c 00000000 		.word	motor_right_pins
 452 0030 00000000 		.word	pwm_right
 453 0034 00000000 		.word	pwm_left
 454              		.cfi_endproc
 455              	.LFE49:
 457              		.section	.text.set_Right,"ax",%progbits
 458              		.align	1
 459              		.global	set_Right
 460              		.syntax unified
 461              		.code	16
ARM GAS  /tmp/cc4d88PT.s 			page 12


 462              		.thumb_func
 464              	set_Right:
 465              	.LFB50:
 168:Src/motor.c   **** 
 169:Src/motor.c   **** void set_Right(){
 466              		.loc 1 169 17 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 10B5     		push	{r4, lr}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 170:Src/motor.c   **** 	//left go forward
 171:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_left_pins);
 475              		.loc 1 171 2 view .LVU108
 476 0002 0949     		ldr	r1, .L21
 477 0004 0020     		movs	r0, #0
 478 0006 FFF7FEFF 		bl	set_Motor_Direction
 479              	.LVL31:
 172:Src/motor.c   **** 
 173:Src/motor.c   **** 	//right go backward
 174:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_right_pins);
 480              		.loc 1 174 2 view .LVU109
 481 000a 0849     		ldr	r1, .L21+4
 482 000c 0320     		movs	r0, #3
 483 000e FFF7FEFF 		bl	set_Motor_Direction
 484              	.LVL32:
 175:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 485              		.loc 1 175 2 view .LVU110
 486 0012 074B     		ldr	r3, .L21+8
 487 0014 1878     		ldrb	r0, [r3]
 488 0016 C0B2     		uxtb	r0, r0
 489 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 490              	.LVL33:
 176:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 491              		.loc 1 176 2 view .LVU111
 492 001c 054B     		ldr	r3, .L21+12
 493 001e 1878     		ldrb	r0, [r3]
 494 0020 C0B2     		uxtb	r0, r0
 495 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 496              	.LVL34:
 177:Src/motor.c   **** 	/* old way
 178:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 5);
 179:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 8);
 180:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 2);
 181:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 10);
 182:Src/motor.c   **** 	   */
 183:Src/motor.c   **** }
 497              		.loc 1 183 1 is_stmt 0 view .LVU112
 498              		@ sp needed
 499 0026 10BD     		pop	{r4, pc}
 500              	.L22:
 501              		.align	2
 502              	.L21:
 503 0028 00000000 		.word	motor_left_pins
ARM GAS  /tmp/cc4d88PT.s 			page 13


 504 002c 00000000 		.word	motor_right_pins
 505 0030 00000000 		.word	pwm_right
 506 0034 00000000 		.word	pwm_left
 507              		.cfi_endproc
 508              	.LFE50:
 510              		.section	.text.set_Left,"ax",%progbits
 511              		.align	1
 512              		.global	set_Left
 513              		.syntax unified
 514              		.code	16
 515              		.thumb_func
 517              	set_Left:
 518              	.LFB51:
 184:Src/motor.c   **** 
 185:Src/motor.c   **** void set_Left(){
 519              		.loc 1 185 16 is_stmt 1 view -0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523 0000 10B5     		push	{r4, lr}
 524              	.LCFI7:
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 4, -8
 527              		.cfi_offset 14, -4
 186:Src/motor.c   **** 	//left go backward
 187:Src/motor.c   **** 	set_Motor_Direction(BACKWARD, &motor_left_pins);
 528              		.loc 1 187 2 view .LVU114
 529 0002 0949     		ldr	r1, .L24
 530 0004 0320     		movs	r0, #3
 531 0006 FFF7FEFF 		bl	set_Motor_Direction
 532              	.LVL35:
 188:Src/motor.c   **** 
 189:Src/motor.c   **** 	//right go forward
 190:Src/motor.c   **** 	set_Motor_Direction(FORWARD, &motor_right_pins);
 533              		.loc 1 190 2 view .LVU115
 534 000a 0849     		ldr	r1, .L24+4
 535 000c 0020     		movs	r0, #0
 536 000e FFF7FEFF 		bl	set_Motor_Direction
 537              	.LVL36:
 191:Src/motor.c   **** 
 192:Src/motor.c   **** 	pwm_setDutyCycleR(pwm_right);
 538              		.loc 1 192 2 view .LVU116
 539 0012 074B     		ldr	r3, .L24+8
 540 0014 1878     		ldrb	r0, [r3]
 541 0016 C0B2     		uxtb	r0, r0
 542 0018 FFF7FEFF 		bl	pwm_setDutyCycleR
 543              	.LVL37:
 193:Src/motor.c   **** 	pwm_setDutyCycleL(pwm_left);
 544              		.loc 1 193 2 view .LVU117
 545 001c 054B     		ldr	r3, .L24+12
 546 001e 1878     		ldrb	r0, [r3]
 547 0020 C0B2     		uxtb	r0, r0
 548 0022 FFF7FEFF 		bl	pwm_setDutyCycleL
 549              	.LVL38:
 194:Src/motor.c   **** 	/*
 195:Src/motor.c   **** 	   GPIOA->ODR |= (1 << 8);
 196:Src/motor.c   **** 	   GPIOA->ODR &= ~(1 << 5);
ARM GAS  /tmp/cc4d88PT.s 			page 14


 197:Src/motor.c   **** 	   GPIOB->ODR |= (1 << 10);
 198:Src/motor.c   **** 	   GPIOB->ODR &= ~(1 << 2);
 199:Src/motor.c   **** 	   */
 200:Src/motor.c   **** }
 550              		.loc 1 200 1 is_stmt 0 view .LVU118
 551              		@ sp needed
 552 0026 10BD     		pop	{r4, pc}
 553              	.L25:
 554              		.align	2
 555              	.L24:
 556 0028 00000000 		.word	motor_left_pins
 557 002c 00000000 		.word	motor_right_pins
 558 0030 00000000 		.word	pwm_right
 559 0034 00000000 		.word	pwm_left
 560              		.cfi_endproc
 561              	.LFE51:
 563              		.section	.text.motors_Off,"ax",%progbits
 564              		.align	1
 565              		.global	motors_Off
 566              		.syntax unified
 567              		.code	16
 568              		.thumb_func
 570              	motors_Off:
 571              	.LFB52:
 201:Src/motor.c   **** 
 202:Src/motor.c   **** void motors_Off(){
 572              		.loc 1 202 18 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576 0000 10B5     		push	{r4, lr}
 577              	.LCFI8:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 4, -8
 580              		.cfi_offset 14, -4
 203:Src/motor.c   **** 	pwm_setDutyCycleR(0);
 581              		.loc 1 203 2 view .LVU120
 582 0002 0020     		movs	r0, #0
 583 0004 FFF7FEFF 		bl	pwm_setDutyCycleR
 584              	.LVL39:
 204:Src/motor.c   **** 	pwm_setDutyCycleL(0);
 585              		.loc 1 204 2 view .LVU121
 586 0008 0020     		movs	r0, #0
 587 000a FFF7FEFF 		bl	pwm_setDutyCycleL
 588              	.LVL40:
 205:Src/motor.c   **** }
 589              		.loc 1 205 1 is_stmt 0 view .LVU122
 590              		@ sp needed
 591 000e 10BD     		pop	{r4, pc}
 592              		.cfi_endproc
 593              	.LFE52:
 595              		.section	.rodata.MoveMotors.str1.4,"aMS",%progbits,1
 596              		.align	2
 597              	.LC18:
 598 0000 4D6F7665 		.ascii	"MoveMotors executed!\012\000"
 598      4D6F746F 
 598      72732065 
ARM GAS  /tmp/cc4d88PT.s 			page 15


 598      78656375 
 598      74656421 
 599 0016 0000     		.align	2
 600              	.LC20:
 601 0018 496E7661 		.ascii	"Invalid command to MoveMotors!\012\000"
 601      6C696420 
 601      636F6D6D 
 601      616E6420 
 601      746F204D 
 602              		.global	__aeabi_i2d
 603              		.global	__aeabi_ddiv
 604              		.global	__aeabi_d2uiz
 605              		.global	__aeabi_dmul
 606              		.global	__aeabi_f2d
 607              		.global	__aeabi_dadd
 608              		.global	__aeabi_d2f
 609              		.global	__aeabi_dsub
 610              		.section	.text.MoveMotors,"ax",%progbits
 611              		.align	1
 612              		.global	MoveMotors
 613              		.syntax unified
 614              		.code	16
 615              		.thumb_func
 617              	MoveMotors:
 618              	.LVL41:
 619              	.LFB53:
 206:Src/motor.c   **** 
 207:Src/motor.c   **** uint8_t* MoveMotors(MotorCommand* cmd){
 620              		.loc 1 207 39 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              		.loc 1 207 39 is_stmt 0 view .LVU124
 625 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 626              	.LCFI9:
 627              		.cfi_def_cfa_offset 24
 628              		.cfi_offset 3, -24
 629              		.cfi_offset 4, -20
 630              		.cfi_offset 5, -16
 631              		.cfi_offset 6, -12
 632              		.cfi_offset 7, -8
 633              		.cfi_offset 14, -4
 634 0002 0400     		movs	r4, r0
 208:Src/motor.c   **** 	motors_Off();
 635              		.loc 1 208 2 is_stmt 1 view .LVU125
 636 0004 FFF7FEFF 		bl	motors_Off
 637              	.LVL42:
 209:Src/motor.c   **** 	pwm_right = 100;
 638              		.loc 1 209 2 view .LVU126
 639              		.loc 1 209 12 is_stmt 0 view .LVU127
 640 0008 394B     		ldr	r3, .L36
 641 000a 6422     		movs	r2, #100
 642 000c 1A70     		strb	r2, [r3]
 210:Src/motor.c   **** 	uint8_t* err = "MoveMotors executed!\n";
 643              		.loc 1 210 2 is_stmt 1 view .LVU128
 644              	.LVL43:
 211:Src/motor.c   **** 	switch(cmd->dir){
ARM GAS  /tmp/cc4d88PT.s 			page 16


 645              		.loc 1 211 2 view .LVU129
 646              		.loc 1 211 12 is_stmt 0 view .LVU130
 647 000e 2378     		ldrb	r3, [r4]
 648              		.loc 1 211 2 view .LVU131
 649 0010 022B     		cmp	r3, #2
 650 0012 44D0     		beq	.L28
 651 0014 2ED8     		bhi	.L29
 652 0016 002B     		cmp	r3, #0
 653 0018 37D0     		beq	.L30
 654 001a 012B     		cmp	r3, #1
 655 001c 28D1     		bne	.L34
 212:Src/motor.c   **** 		case FORWARD:
 213:Src/motor.c   **** 			turning = false;
 214:Src/motor.c   **** 			target_dist = cmd->amount;
 215:Src/motor.c   **** 			set_Forward();
 216:Src/motor.c   **** 			break;
 217:Src/motor.c   **** 		case LEFT:
 218:Src/motor.c   **** 			turning = true;
 656              		.loc 1 218 4 is_stmt 1 view .LVU132
 657              		.loc 1 218 12 is_stmt 0 view .LVU133
 658 001e 354B     		ldr	r3, .L36+4
 659 0020 0122     		movs	r2, #1
 660 0022 1A70     		strb	r2, [r3]
 219:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 661              		.loc 1 219 4 is_stmt 1 view .LVU134
 662              		.loc 1 219 32 is_stmt 0 view .LVU135
 663 0024 6078     		ldrb	r0, [r4, #1]
 664              		.loc 1 219 41 view .LVU136
 665 0026 FFF7FEFF 		bl	__aeabi_i2d
 666              	.LVL44:
 667 002a 0400     		movs	r4, r0
 668              	.LVL45:
 669              		.loc 1 219 41 view .LVU137
 670 002c 0D00     		movs	r5, r1
 671 002e 0022     		movs	r2, #0
 672 0030 314B     		ldr	r3, .L36+8
 673 0032 FFF7FEFF 		bl	__aeabi_ddiv
 674              	.LVL46:
 675              		.loc 1 219 18 view .LVU138
 676 0036 FFF7FEFF 		bl	__aeabi_d2uiz
 677              	.LVL47:
 678 003a C0B2     		uxtb	r0, r0
 679              		.loc 1 219 16 view .LVU139
 680 003c 2F4B     		ldr	r3, .L36+12
 681 003e 1870     		strb	r0, [r3]
 220:Src/motor.c   **** 			heading += cmd->amount * 0.0174533; //convert to radians
 682              		.loc 1 220 4 is_stmt 1 view .LVU140
 683              		.loc 1 220 12 is_stmt 0 view .LVU141
 684 0040 2F4E     		ldr	r6, .L36+16
 685 0042 3768     		ldr	r7, [r6]
 686              		.loc 1 220 27 view .LVU142
 687 0044 2F4A     		ldr	r2, .L36+20
 688 0046 304B     		ldr	r3, .L36+24
 689 0048 2000     		movs	r0, r4
 690 004a 2900     		movs	r1, r5
 691 004c FFF7FEFF 		bl	__aeabi_dmul
 692              	.LVL48:
ARM GAS  /tmp/cc4d88PT.s 			page 17


 693 0050 0400     		movs	r4, r0
 694 0052 0D00     		movs	r5, r1
 695              		.loc 1 220 12 view .LVU143
 696 0054 381C     		adds	r0, r7, #0
 697 0056 FFF7FEFF 		bl	__aeabi_f2d
 698              	.LVL49:
 699 005a 2200     		movs	r2, r4
 700 005c 2B00     		movs	r3, r5
 701 005e FFF7FEFF 		bl	__aeabi_dadd
 702              	.LVL50:
 703 0062 FFF7FEFF 		bl	__aeabi_d2f
 704              	.LVL51:
 705 0066 3060     		str	r0, [r6]
 221:Src/motor.c   **** 			set_Left();
 706              		.loc 1 221 4 is_stmt 1 view .LVU144
 707 0068 FFF7FEFF 		bl	set_Left
 708              	.LVL52:
 222:Src/motor.c   **** 			break;
 709              		.loc 1 222 4 view .LVU145
 210:Src/motor.c   **** 	switch(cmd->dir){
 710              		.loc 1 210 11 is_stmt 0 view .LVU146
 711 006c 2748     		ldr	r0, .L36+28
 712              		.loc 1 222 4 view .LVU147
 713 006e 0BE0     		b	.L27
 714              	.LVL53:
 715              	.L34:
 211:Src/motor.c   **** 		case FORWARD:
 716              		.loc 1 211 2 view .LVU148
 717 0070 2748     		ldr	r0, .L36+32
 718 0072 09E0     		b	.L27
 719              	.L29:
 720 0074 042B     		cmp	r3, #4
 721 0076 06D1     		bne	.L35
 223:Src/motor.c   **** 		case RIGHT:
 224:Src/motor.c   **** 			turning = true;
 225:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 226:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 227:Src/motor.c   **** 			set_Right();
 228:Src/motor.c   **** 			break;
 229:Src/motor.c   **** 		case OFF:
 230:Src/motor.c   **** 			target_dist = 1;
 722              		.loc 1 230 4 is_stmt 1 view .LVU149
 723              		.loc 1 230 16 is_stmt 0 view .LVU150
 724 0078 204B     		ldr	r3, .L36+12
 725 007a 0122     		movs	r2, #1
 726 007c 1A70     		strb	r2, [r3]
 231:Src/motor.c   **** 			motors_Off();
 727              		.loc 1 231 4 is_stmt 1 view .LVU151
 728 007e FFF7FEFF 		bl	motors_Off
 729              	.LVL54:
 232:Src/motor.c   **** 			break;
 730              		.loc 1 232 4 view .LVU152
 210:Src/motor.c   **** 	switch(cmd->dir){
 731              		.loc 1 210 11 is_stmt 0 view .LVU153
 732 0082 2248     		ldr	r0, .L36+28
 733              	.LVL55:
 233:Src/motor.c   **** 		default:
ARM GAS  /tmp/cc4d88PT.s 			page 18


 234:Src/motor.c   **** 			err = "Invalid command to MoveMotors!\n";
 235:Src/motor.c   **** 	}
 236:Src/motor.c   **** 	//THIS IS BAD. if you send an x it won't stop motors until this delay finishes!
 237:Src/motor.c   **** 	//Switch to a polling structure instead for final
 238:Src/motor.c   **** 	/* while(get_distance() < target_dist) */
 239:Src/motor.c   **** 	/* 	; */
 240:Src/motor.c   **** 	/* motors_Off(); */
 241:Src/motor.c   **** 	return err;
 734              		.loc 1 241 2 is_stmt 1 view .LVU154
 735              		.loc 1 241 9 is_stmt 0 view .LVU155
 736 0084 00E0     		b	.L27
 737              	.LVL56:
 738              	.L35:
 211:Src/motor.c   **** 		case FORWARD:
 739              		.loc 1 211 2 view .LVU156
 740 0086 2248     		ldr	r0, .L36+32
 741              	.LVL57:
 742              	.L27:
 242:Src/motor.c   **** }
 743              		.loc 1 242 1 view .LVU157
 744              		@ sp needed
 745 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 746              	.LVL58:
 747              	.L30:
 213:Src/motor.c   **** 			target_dist = cmd->amount;
 748              		.loc 1 213 4 is_stmt 1 view .LVU158
 213:Src/motor.c   **** 			target_dist = cmd->amount;
 749              		.loc 1 213 12 is_stmt 0 view .LVU159
 750 008a 1A4B     		ldr	r3, .L36+4
 751 008c 0022     		movs	r2, #0
 752 008e 1A70     		strb	r2, [r3]
 214:Src/motor.c   **** 			set_Forward();
 753              		.loc 1 214 4 is_stmt 1 view .LVU160
 214:Src/motor.c   **** 			set_Forward();
 754              		.loc 1 214 21 is_stmt 0 view .LVU161
 755 0090 6278     		ldrb	r2, [r4, #1]
 214:Src/motor.c   **** 			set_Forward();
 756              		.loc 1 214 16 view .LVU162
 757 0092 1A4B     		ldr	r3, .L36+12
 758 0094 1A70     		strb	r2, [r3]
 215:Src/motor.c   **** 			break;
 759              		.loc 1 215 4 is_stmt 1 view .LVU163
 760 0096 FFF7FEFF 		bl	set_Forward
 761              	.LVL59:
 216:Src/motor.c   **** 		case LEFT:
 762              		.loc 1 216 4 view .LVU164
 210:Src/motor.c   **** 	switch(cmd->dir){
 763              		.loc 1 210 11 is_stmt 0 view .LVU165
 764 009a 1C48     		ldr	r0, .L36+28
 216:Src/motor.c   **** 		case LEFT:
 765              		.loc 1 216 4 view .LVU166
 766 009c F4E7     		b	.L27
 767              	.L28:
 224:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 768              		.loc 1 224 4 is_stmt 1 view .LVU167
 224:Src/motor.c   **** 			target_dist = (uint8_t) (cmd->amount / 11.5);
 769              		.loc 1 224 12 is_stmt 0 view .LVU168
ARM GAS  /tmp/cc4d88PT.s 			page 19


 770 009e 154B     		ldr	r3, .L36+4
 771 00a0 0122     		movs	r2, #1
 772 00a2 1A70     		strb	r2, [r3]
 225:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 773              		.loc 1 225 4 is_stmt 1 view .LVU169
 225:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 774              		.loc 1 225 32 is_stmt 0 view .LVU170
 775 00a4 6078     		ldrb	r0, [r4, #1]
 225:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 776              		.loc 1 225 41 view .LVU171
 777 00a6 FFF7FEFF 		bl	__aeabi_i2d
 778              	.LVL60:
 779 00aa 0400     		movs	r4, r0
 780              	.LVL61:
 225:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 781              		.loc 1 225 41 view .LVU172
 782 00ac 0D00     		movs	r5, r1
 783 00ae 0022     		movs	r2, #0
 784 00b0 114B     		ldr	r3, .L36+8
 785 00b2 FFF7FEFF 		bl	__aeabi_ddiv
 786              	.LVL62:
 225:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 787              		.loc 1 225 18 view .LVU173
 788 00b6 FFF7FEFF 		bl	__aeabi_d2uiz
 789              	.LVL63:
 790 00ba C0B2     		uxtb	r0, r0
 225:Src/motor.c   **** 			heading -= cmd->amount * 0.0174533; //convert to radians
 791              		.loc 1 225 16 view .LVU174
 792 00bc 0F4B     		ldr	r3, .L36+12
 793 00be 1870     		strb	r0, [r3]
 226:Src/motor.c   **** 			set_Right();
 794              		.loc 1 226 4 is_stmt 1 view .LVU175
 226:Src/motor.c   **** 			set_Right();
 795              		.loc 1 226 12 is_stmt 0 view .LVU176
 796 00c0 0F4E     		ldr	r6, .L36+16
 797 00c2 3768     		ldr	r7, [r6]
 226:Src/motor.c   **** 			set_Right();
 798              		.loc 1 226 27 view .LVU177
 799 00c4 0F4A     		ldr	r2, .L36+20
 800 00c6 104B     		ldr	r3, .L36+24
 801 00c8 2000     		movs	r0, r4
 802 00ca 2900     		movs	r1, r5
 803 00cc FFF7FEFF 		bl	__aeabi_dmul
 804              	.LVL64:
 805 00d0 0400     		movs	r4, r0
 806 00d2 0D00     		movs	r5, r1
 226:Src/motor.c   **** 			set_Right();
 807              		.loc 1 226 12 view .LVU178
 808 00d4 381C     		adds	r0, r7, #0
 809 00d6 FFF7FEFF 		bl	__aeabi_f2d
 810              	.LVL65:
 811 00da 2200     		movs	r2, r4
 812 00dc 2B00     		movs	r3, r5
 813 00de FFF7FEFF 		bl	__aeabi_dsub
 814              	.LVL66:
 815 00e2 FFF7FEFF 		bl	__aeabi_d2f
 816              	.LVL67:
ARM GAS  /tmp/cc4d88PT.s 			page 20


 817 00e6 3060     		str	r0, [r6]
 227:Src/motor.c   **** 			break;
 818              		.loc 1 227 4 is_stmt 1 view .LVU179
 819 00e8 FFF7FEFF 		bl	set_Right
 820              	.LVL68:
 228:Src/motor.c   **** 		case OFF:
 821              		.loc 1 228 4 view .LVU180
 210:Src/motor.c   **** 	switch(cmd->dir){
 822              		.loc 1 210 11 is_stmt 0 view .LVU181
 823 00ec 0748     		ldr	r0, .L36+28
 228:Src/motor.c   **** 		case OFF:
 824              		.loc 1 228 4 view .LVU182
 825 00ee CBE7     		b	.L27
 826              	.L37:
 827              		.align	2
 828              	.L36:
 829 00f0 00000000 		.word	pwm_right
 830 00f4 00000000 		.word	turning
 831 00f8 00002740 		.word	1076297728
 832 00fc 00000000 		.word	target_dist
 833 0100 00000000 		.word	heading
 834 0104 5F40D422 		.word	584335455
 835 0108 47DF913F 		.word	1066524487
 836 010c 00000000 		.word	.LC18
 837 0110 18000000 		.word	.LC20
 838              		.cfi_endproc
 839              	.LFE53:
 841              		.section	.text.encoder_init,"ax",%progbits
 842              		.align	1
 843              		.global	encoder_init
 844              		.syntax unified
 845              		.code	16
 846              		.thumb_func
 848              	encoder_init:
 849              	.LFB54:
 243:Src/motor.c   **** 
 244:Src/motor.c   **** // Sets up encoder interface to read motor speed
 245:Src/motor.c   **** void encoder_init(void) {
 850              		.loc 1 245 25 is_stmt 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 855              	.LCFI10:
 856              		.cfi_def_cfa_offset 20
 857              		.cfi_offset 4, -20
 858              		.cfi_offset 5, -16
 859              		.cfi_offset 6, -12
 860              		.cfi_offset 7, -8
 861              		.cfi_offset 14, -4
 246:Src/motor.c   **** 
 247:Src/motor.c   **** 	// Set up encoder input pins (TIMER 3 CH1 and CH2)
 248:Src/motor.c   **** 	/*
 249:Src/motor.c   **** 	   GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 250:Src/motor.c   **** 	   GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 251:Src/motor.c   **** 	   GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 252:Src/motor.c   **** 
ARM GAS  /tmp/cc4d88PT.s 			page 21


 253:Src/motor.c   **** 	// Set up encoder input pins (TIMER 15 CH1 and CH2)
 254:Src/motor.c   **** 	GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 255:Src/motor.c   **** 	GPIOB->MODER |= (GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 256:Src/motor.c   **** 	GPIOB->AFR[1] |= ( (1 << 24) | (1 << 28) );
 257:Src/motor.c   **** 	*/
 258:Src/motor.c   **** 
 259:Src/motor.c   **** 	// Set up encoder interface (TIM3 encoder input mode)
 260:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 862              		.loc 1 260 2 view .LVU184
 863              		.loc 1 260 5 is_stmt 0 view .LVU185
 864 0002 2849     		ldr	r1, .L39
 865 0004 CB69     		ldr	r3, [r1, #28]
 866              		.loc 1 260 15 view .LVU186
 867 0006 0222     		movs	r2, #2
 868 0008 1343     		orrs	r3, r2
 869 000a CB61     		str	r3, [r1, #28]
 261:Src/motor.c   **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 870              		.loc 1 261 2 is_stmt 1 view .LVU187
 871              		.loc 1 261 5 is_stmt 0 view .LVU188
 872 000c 8A69     		ldr	r2, [r1, #24]
 873              		.loc 1 261 15 view .LVU189
 874 000e 8023     		movs	r3, #128
 875 0010 1B01     		lsls	r3, r3, #4
 876 0012 1343     		orrs	r3, r2
 877 0014 8B61     		str	r3, [r1, #24]
 262:Src/motor.c   **** 	TIM3->CCMR1 = 0;
 878              		.loc 1 262 2 is_stmt 1 view .LVU190
 879              		.loc 1 262 14 is_stmt 0 view .LVU191
 880 0016 244B     		ldr	r3, .L39+4
 881 0018 0022     		movs	r2, #0
 882 001a 9A61     		str	r2, [r3, #24]
 263:Src/motor.c   **** 	TIM3->CCER = 0;
 883              		.loc 1 263 2 is_stmt 1 view .LVU192
 884              		.loc 1 263 13 is_stmt 0 view .LVU193
 885 001c 1A62     		str	r2, [r3, #32]
 264:Src/motor.c   **** 	TIM3->SMCR = 0;
 886              		.loc 1 264 2 is_stmt 1 view .LVU194
 887              		.loc 1 264 13 is_stmt 0 view .LVU195
 888 001e 9A60     		str	r2, [r3, #8]
 265:Src/motor.c   **** 	TIM3->CR1 = 0;
 889              		.loc 1 265 2 is_stmt 1 view .LVU196
 890              		.loc 1 265 12 is_stmt 0 view .LVU197
 891 0020 1A60     		str	r2, [r3]
 266:Src/motor.c   **** 
 267:Src/motor.c   **** 	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected to 
 892              		.loc 1 267 2 is_stmt 1 view .LVU198
 893              		.loc 1 267 6 is_stmt 0 view .LVU199
 894 0022 9869     		ldr	r0, [r3, #24]
 895              		.loc 1 267 14 view .LVU200
 896 0024 0224     		movs	r4, #2
 897 0026 FF34     		adds	r4, r4, #255
 898 0028 2043     		orrs	r0, r4
 899 002a 9861     		str	r0, [r3, #24]
 268:Src/motor.c   **** 	TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and fall
 900              		.loc 1 268 2 is_stmt 1 view .LVU201
 901              		.loc 1 268 6 is_stmt 0 view .LVU202
 902 002c 9868     		ldr	r0, [r3, #8]
ARM GAS  /tmp/cc4d88PT.s 			page 22


 903              		.loc 1 268 13 view .LVU203
 904 002e 0325     		movs	r5, #3
 905 0030 AC46     		mov	ip, r5
 906 0032 2843     		orrs	r0, r5
 907 0034 9860     		str	r0, [r3, #8]
 269:Src/motor.c   **** 	TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest possib
 908              		.loc 1 269 2 is_stmt 1 view .LVU204
 909              		.loc 1 269 12 is_stmt 0 view .LVU205
 910 0036 1D4F     		ldr	r7, .L39+8
 911 0038 DF62     		str	r7, [r3, #44]
 270:Src/motor.c   **** 	TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negative 
 912              		.loc 1 270 2 is_stmt 1 view .LVU206
 913              		.loc 1 270 12 is_stmt 0 view .LVU207
 914 003a 1D4E     		ldr	r6, .L39+12
 915 003c 5E62     		str	r6, [r3, #36]
 271:Src/motor.c   **** 															// (Could also cast unsigned register to signed number to get negative numbers if it
 272:Src/motor.c   **** 															//  just another option, the mid-bias is a bit simpler to understand though.)
 273:Src/motor.c   **** 	TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 916              		.loc 1 273 2 is_stmt 1 view .LVU208
 917              		.loc 1 273 6 is_stmt 0 view .LVU209
 918 003e 1D68     		ldr	r5, [r3]
 919              		.loc 1 273 12 view .LVU210
 920 0040 0120     		movs	r0, #1
 921 0042 0543     		orrs	r5, r0
 922 0044 1D60     		str	r5, [r3]
 274:Src/motor.c   **** 
 275:Src/motor.c   **** 	TIM1->CCMR1 = 0;
 923              		.loc 1 275 2 is_stmt 1 view .LVU211
 924              		.loc 1 275 14 is_stmt 0 view .LVU212
 925 0046 1B4B     		ldr	r3, .L39+16
 926 0048 9A61     		str	r2, [r3, #24]
 276:Src/motor.c   **** 	TIM1->CCER = 0;
 927              		.loc 1 276 2 is_stmt 1 view .LVU213
 928              		.loc 1 276 13 is_stmt 0 view .LVU214
 929 004a 1A62     		str	r2, [r3, #32]
 277:Src/motor.c   **** 	TIM1->SMCR = 0;
 930              		.loc 1 277 2 is_stmt 1 view .LVU215
 931              		.loc 1 277 13 is_stmt 0 view .LVU216
 932 004c 9A60     		str	r2, [r3, #8]
 278:Src/motor.c   **** 	TIM1->CR1 = 0;
 933              		.loc 1 278 2 is_stmt 1 view .LVU217
 934              		.loc 1 278 12 is_stmt 0 view .LVU218
 935 004e 1A60     		str	r2, [r3]
 279:Src/motor.c   **** 	TIM1->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected to 
 936              		.loc 1 279 2 is_stmt 1 view .LVU219
 937              		.loc 1 279 6 is_stmt 0 view .LVU220
 938 0050 9A69     		ldr	r2, [r3, #24]
 939              		.loc 1 279 14 view .LVU221
 940 0052 1443     		orrs	r4, r2
 941 0054 9C61     		str	r4, [r3, #24]
 280:Src/motor.c   **** 	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and fall
 942              		.loc 1 280 2 is_stmt 1 view .LVU222
 943              		.loc 1 280 6 is_stmt 0 view .LVU223
 944 0056 9A68     		ldr	r2, [r3, #8]
 945              		.loc 1 280 13 view .LVU224
 946 0058 6446     		mov	r4, ip
 947 005a 2243     		orrs	r2, r4
ARM GAS  /tmp/cc4d88PT.s 			page 23


 948 005c 9A60     		str	r2, [r3, #8]
 281:Src/motor.c   **** 	TIM1->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest possib
 949              		.loc 1 281 2 is_stmt 1 view .LVU225
 950              		.loc 1 281 12 is_stmt 0 view .LVU226
 951 005e DF62     		str	r7, [r3, #44]
 282:Src/motor.c   **** 	TIM1->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negative 
 952              		.loc 1 282 2 is_stmt 1 view .LVU227
 953              		.loc 1 282 12 is_stmt 0 view .LVU228
 954 0060 5E62     		str	r6, [r3, #36]
 283:Src/motor.c   **** 															// (Could also cast unsigned register to signed number to get negative numbers if it
 284:Src/motor.c   **** 															//  just another option, the mid-bias is a bit simpler to understand though.)
 285:Src/motor.c   **** 	TIM1->CR1 |= TIM_CR1_CEN;     
 955              		.loc 1 285 2 is_stmt 1 view .LVU229
 956              		.loc 1 285 6 is_stmt 0 view .LVU230
 957 0062 1A68     		ldr	r2, [r3]
 958              		.loc 1 285 12 view .LVU231
 959 0064 0243     		orrs	r2, r0
 960 0066 1A60     		str	r2, [r3]
 286:Src/motor.c   **** 
 287:Src/motor.c   **** 	// Configure a second timer (TIM6) to fire an ISR on update event
 288:Src/motor.c   **** 	// Used to periodically check and update speed variable
 289:Src/motor.c   **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 961              		.loc 1 289 2 is_stmt 1 view .LVU232
 962              		.loc 1 289 5 is_stmt 0 view .LVU233
 963 0068 CB69     		ldr	r3, [r1, #28]
 964              		.loc 1 289 15 view .LVU234
 965 006a 1022     		movs	r2, #16
 966 006c 1343     		orrs	r3, r2
 967 006e CB61     		str	r3, [r1, #28]
 290:Src/motor.c   **** 
 291:Src/motor.c   **** 	// Select PSC and ARR values that give an appropriate interrupt rate
 292:Src/motor.c   **** 	TIM6->PSC = 11;
 968              		.loc 1 292 2 is_stmt 1 view .LVU235
 969              		.loc 1 292 12 is_stmt 0 view .LVU236
 970 0070 114B     		ldr	r3, .L39+20
 971 0072 053A     		subs	r2, r2, #5
 972 0074 9A62     		str	r2, [r3, #40]
 293:Src/motor.c   **** 	TIM6->ARR = 30000;
 973              		.loc 1 293 2 is_stmt 1 view .LVU237
 974              		.loc 1 293 12 is_stmt 0 view .LVU238
 975 0076 114A     		ldr	r2, .L39+24
 976 0078 DA62     		str	r2, [r3, #44]
 294:Src/motor.c   **** 
 295:Src/motor.c   **** 	TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 977              		.loc 1 295 2 is_stmt 1 view .LVU239
 978              		.loc 1 295 6 is_stmt 0 view .LVU240
 979 007a DA68     		ldr	r2, [r3, #12]
 980              		.loc 1 295 13 view .LVU241
 981 007c 0243     		orrs	r2, r0
 982 007e DA60     		str	r2, [r3, #12]
 296:Src/motor.c   **** 	TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 983              		.loc 1 296 2 is_stmt 1 view .LVU242
 984              		.loc 1 296 6 is_stmt 0 view .LVU243
 985 0080 1A68     		ldr	r2, [r3]
 986              		.loc 1 296 12 view .LVU244
 987 0082 0243     		orrs	r2, r0
 988 0084 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc4d88PT.s 			page 24


 297:Src/motor.c   **** 
 298:Src/motor.c   **** 	NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 989              		.loc 1 298 2 is_stmt 1 view .LVU245
 990              	.LVL69:
 991              	.LBB6:
 992              	.LBI6:
 993              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
ARM GAS  /tmp/cc4d88PT.s 			page 25


  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4d88PT.s 			page 26


 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
ARM GAS  /tmp/cc4d88PT.s 			page 27


 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4d88PT.s 			page 28


 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4d88PT.s 			page 29


 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /tmp/cc4d88PT.s 			page 30


 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
ARM GAS  /tmp/cc4d88PT.s 			page 31


 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  /tmp/cc4d88PT.s 			page 32


 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4d88PT.s 			page 33


 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
ARM GAS  /tmp/cc4d88PT.s 			page 34


 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
ARM GAS  /tmp/cc4d88PT.s 			page 35


 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 994              		.loc 2 623 22 view .LVU246
 995              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 996              		.loc 2 625 3 view .LVU247
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 997              		.loc 2 627 5 view .LVU248
 998              		.loc 2 627 20 is_stmt 0 view .LVU249
 999 0086 0E4B     		ldr	r3, .L39+28
 1000 0088 8022     		movs	r2, #128
 1001 008a 9202     		lsls	r2, r2, #10
 1002 008c 1A60     		str	r2, [r3]
 1003              	.LVL70:
 1004              		.loc 2 627 20 view .LVU250
 1005              	.LBE7:
 1006              	.LBE6:
 299:Src/motor.c   **** 	NVIC_SetPriority(TIM6_DAC_IRQn,3);
 1007              		.loc 1 299 2 is_stmt 1 view .LVU251
 1008              	.LBB8:
 1009              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  /tmp/cc4d88PT.s 			page 36


 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/cc4d88PT.s 			page 37


 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1010              		.loc 2 730 22 view .LVU252
 1011              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1012              		.loc 2 732 3 view .LVU253
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1013              		.loc 2 734 5 view .LVU254
 1014              		.loc 2 734 52 is_stmt 0 view .LVU255
 1015 008e C420     		movs	r0, #196
 1016 0090 8000     		lsls	r0, r0, #2
 1017 0092 1958     		ldr	r1, [r3, r0]
 1018              		.loc 2 734 33 view .LVU256
 1019 0094 0B4A     		ldr	r2, .L39+32
 1020 0096 1140     		ands	r1, r2
 1021              		.loc 2 734 102 view .LVU257
 1022 0098 C022     		movs	r2, #192
 1023 009a 1202     		lsls	r2, r2, #8
 1024 009c 0A43     		orrs	r2, r1
 1025              		.loc 2 734 30 view .LVU258
 1026 009e 1A50     		str	r2, [r3, r0]
 1027              	.LVL71:
 1028              		.loc 2 734 30 view .LVU259
 1029              	.LBE9:
 1030              	.LBE8:
 300:Src/motor.c   **** }
 1031              		.loc 1 300 1 view .LVU260
 1032              		@ sp needed
 1033 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1034              	.L40:
 1035 00a2 C046     		.align	2
 1036              	.L39:
 1037 00a4 00100240 		.word	1073876992
 1038 00a8 00040040 		.word	1073742848
 1039 00ac FFFF0000 		.word	65535
 1040 00b0 FF7F0000 		.word	32767
 1041 00b4 002C0140 		.word	1073818624
 1042 00b8 00100040 		.word	1073745920
 1043 00bc 30750000 		.word	30000
 1044 00c0 00E100E0 		.word	-536813312
 1045 00c4 FF00FFFF 		.word	-65281
 1046              		.cfi_endproc
 1047              	.LFE54:
 1049              		.section	.text.motor_init,"ax",%progbits
ARM GAS  /tmp/cc4d88PT.s 			page 38


 1050              		.align	1
 1051              		.global	motor_init
 1052              		.syntax unified
 1053              		.code	16
 1054              		.thumb_func
 1056              	motor_init:
 1057              	.LFB43:
  24:Src/motor.c   **** 	pwm_init();
 1058              		.loc 1 24 23 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062 0000 10B5     		push	{r4, lr}
 1063              	.LCFI11:
 1064              		.cfi_def_cfa_offset 8
 1065              		.cfi_offset 4, -8
 1066              		.cfi_offset 14, -4
  25:Src/motor.c   **** 	encoder_init();
 1067              		.loc 1 25 2 view .LVU262
 1068 0002 FFF7FEFF 		bl	pwm_init
 1069              	.LVL72:
  26:Src/motor.c   **** }
 1070              		.loc 1 26 2 view .LVU263
 1071 0006 FFF7FEFF 		bl	encoder_init
 1072              	.LVL73:
  27:Src/motor.c   **** 
 1073              		.loc 1 27 1 is_stmt 0 view .LVU264
 1074              		@ sp needed
 1075 000a 10BD     		pop	{r4, pc}
 1076              		.cfi_endproc
 1077              	.LFE43:
 1079              		.section	.text.ObjectDetected,"ax",%progbits
 1080              		.align	1
 1081              		.global	ObjectDetected
 1082              		.syntax unified
 1083              		.code	16
 1084              		.thumb_func
 1086              	ObjectDetected:
 1087              	.LFB55:
 301:Src/motor.c   **** 
 302:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 303:Src/motor.c   **** #define ULTRASONIC_SAMPLES 4
 304:Src/motor.c   **** 
 305:Src/motor.c   **** uint8_t ObjectDetected(){
 1088              		.loc 1 305 25 is_stmt 1 view -0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092 0000 70B5     		push	{r4, r5, r6, lr}
 1093              	.LCFI12:
 1094              		.cfi_def_cfa_offset 16
 1095              		.cfi_offset 4, -16
 1096              		.cfi_offset 5, -12
 1097              		.cfi_offset 6, -8
 1098              		.cfi_offset 14, -4
 306:Src/motor.c   **** 	uint32_t us_left_sum = 0;
 1099              		.loc 1 306 2 view .LVU266
ARM GAS  /tmp/cc4d88PT.s 			page 39


 1100              	.LVL74:
 307:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1101              		.loc 1 307 2 view .LVU267
 308:Src/motor.c   **** 
 309:Src/motor.c   **** 	for(uint8_t i=0;i<ULTRASONIC_SAMPLES;i++){
 1102              		.loc 1 309 2 view .LVU268
 1103              	.LBB10:
 1104              		.loc 1 309 6 view .LVU269
 1105              		.loc 1 309 14 is_stmt 0 view .LVU270
 1106 0002 0024     		movs	r4, #0
 1107              	.LBE10:
 307:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1108              		.loc 1 307 11 view .LVU271
 1109 0004 0025     		movs	r5, #0
 306:Src/motor.c   **** 	uint32_t us_right_sum = 0;
 1110              		.loc 1 306 11 view .LVU272
 1111 0006 0026     		movs	r6, #0
 1112              	.LBB11:
 1113              		.loc 1 309 2 view .LVU273
 1114 0008 09E0     		b	.L43
 1115              	.LVL75:
 1116              	.L44:
 310:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1117              		.loc 1 310 3 is_stmt 1 discriminator 3 view .LVU274
 1118              		.loc 1 310 18 is_stmt 0 discriminator 3 view .LVU275
 1119 000a 0C48     		ldr	r0, .L48
 1120 000c FFF7FEFF 		bl	GetUltrasonic
 1121              	.LVL76:
 1122              		.loc 1 310 15 discriminator 3 view .LVU276
 1123 0010 3618     		adds	r6, r6, r0
 1124              	.LVL77:
 311:Src/motor.c   **** 		us_right_sum += GetUltrasonic(&ultrasonic_right_pins);
 1125              		.loc 1 311 3 is_stmt 1 discriminator 3 view .LVU277
 1126              		.loc 1 311 19 is_stmt 0 discriminator 3 view .LVU278
 1127 0012 0B48     		ldr	r0, .L48+4
 1128 0014 FFF7FEFF 		bl	GetUltrasonic
 1129              	.LVL78:
 1130              		.loc 1 311 16 discriminator 3 view .LVU279
 1131 0018 2D18     		adds	r5, r5, r0
 1132              	.LVL79:
 309:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1133              		.loc 1 309 40 is_stmt 1 discriminator 3 view .LVU280
 1134 001a 0134     		adds	r4, r4, #1
 1135              	.LVL80:
 309:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1136              		.loc 1 309 40 is_stmt 0 discriminator 3 view .LVU281
 1137 001c E4B2     		uxtb	r4, r4
 1138              	.LVL81:
 1139              	.L43:
 309:Src/motor.c   **** 		us_left_sum += GetUltrasonic(&ultrasonic_left_pins);
 1140              		.loc 1 309 19 is_stmt 1 discriminator 1 view .LVU282
 1141 001e 032C     		cmp	r4, #3
 1142 0020 F3D9     		bls	.L44
 1143              	.LBE11:
 312:Src/motor.c   **** 	}
 313:Src/motor.c   **** 
 314:Src/motor.c   **** 	us_left_sum >>= 2; //div by 4
ARM GAS  /tmp/cc4d88PT.s 			page 40


 1144              		.loc 1 314 2 view .LVU283
 1145              	.LVL82:
 315:Src/motor.c   **** 	us_right_sum >>= 2;
 1146              		.loc 1 315 2 view .LVU284
 1147              		.loc 1 315 15 is_stmt 0 view .LVU285
 1148 0022 AD08     		lsrs	r5, r5, #2
 1149              	.LVL83:
 316:Src/motor.c   **** 
 317:Src/motor.c   **** 	return (us_left_sum < STOP_ULTRASONIC) || (us_right_sum < STOP_ULTRASONIC);
 1150              		.loc 1 317 2 is_stmt 1 view .LVU286
 1151              		.loc 1 317 41 is_stmt 0 view .LVU287
 1152 0024 4F2E     		cmp	r6, #79
 1153 0026 03D9     		bls	.L46
 1154              		.loc 1 317 41 discriminator 2 view .LVU288
 1155 0028 132D     		cmp	r5, #19
 1156 002a 04D8     		bhi	.L47
 1157              		.loc 1 317 41 view .LVU289
 1158 002c 0120     		movs	r0, #1
 1159 002e 00E0     		b	.L45
 1160              	.L46:
 1161 0030 0120     		movs	r0, #1
 1162              	.L45:
 1163              		.loc 1 317 41 discriminator 6 view .LVU290
 1164 0032 C0B2     		uxtb	r0, r0
 318:Src/motor.c   **** }
 1165              		.loc 1 318 1 discriminator 6 view .LVU291
 1166              		@ sp needed
 1167              	.LVL84:
 1168              	.LVL85:
 1169              	.LVL86:
 1170              		.loc 1 318 1 discriminator 6 view .LVU292
 1171 0034 70BD     		pop	{r4, r5, r6, pc}
 1172              	.LVL87:
 1173              	.L47:
 317:Src/motor.c   **** }
 1174              		.loc 1 317 41 view .LVU293
 1175 0036 0020     		movs	r0, #0
 1176 0038 FBE7     		b	.L45
 1177              	.L49:
 1178 003a C046     		.align	2
 1179              	.L48:
 1180 003c 00000000 		.word	ultrasonic_left_pins
 1181 0040 00000000 		.word	ultrasonic_right_pins
 1182              		.cfi_endproc
 1183              	.LFE55:
 1185              		.global	__aeabi_i2f
 1186              		.global	__aeabi_fdiv
 1187              		.global	__aeabi_fmul
 1188              		.global	__aeabi_f2iz
 1189              		.global	__aeabi_fadd
 1190              		.global	__aeabi_f2uiz
 1191              		.section	.rodata.TIM6_DAC_IRQHandler.str1.4,"aMS",%progbits,1
 1192              		.align	2
 1193              	.LC33:
 1194 0000 48697420 		.ascii	"Hit distance target\012\000"
 1194      64697374 
 1194      616E6365 
ARM GAS  /tmp/cc4d88PT.s 			page 41


 1194      20746172 
 1194      6765740A 
 1195 0015 000000   		.align	2
 1196              	.LC36:
 1197 0018 4F626A65 		.ascii	"Object detected\012\000"
 1197      63742064 
 1197      65746563 
 1197      7465640A 
 1197      00
 1198 0029 000000   		.align	2
 1199              	.LC40:
 1200 002c 68656164 		.ascii	"heading: %d\012\000"
 1200      696E673A 
 1200      2025640A 
 1200      00
 1201              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 1202              		.align	1
 1203              		.global	TIM6_DAC_IRQHandler
 1204              		.syntax unified
 1205              		.code	16
 1206              		.thumb_func
 1208              	TIM6_DAC_IRQHandler:
 1209              	.LFB56:
 319:Src/motor.c   **** 
 320:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 1210              		.loc 1 320 32 is_stmt 1 view -0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 32
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214 0000 30B5     		push	{r4, r5, lr}
 1215              	.LCFI13:
 1216              		.cfi_def_cfa_offset 12
 1217              		.cfi_offset 4, -12
 1218              		.cfi_offset 5, -8
 1219              		.cfi_offset 14, -4
 1220 0002 89B0     		sub	sp, sp, #36
 1221              	.LCFI14:
 1222              		.cfi_def_cfa_offset 48
 321:Src/motor.c   **** 	/* Calculate the motor speed in raw encoder counts
 322:Src/motor.c   **** 	 * Note the motor speed is signed! Motor can be run in reverse.
 323:Src/motor.c   **** 	 * Speed is measured by how far the counter moved from center point
 324:Src/motor.c   **** 	 */
 325:Src/motor.c   **** 	uint8_t usart_buffer[32];
 1223              		.loc 1 325 2 view .LVU295
 326:Src/motor.c   **** 
 327:Src/motor.c   **** 
 328:Src/motor.c   **** 	motorl_speed = (TIM3->CNT - 0x7FFF);
 1224              		.loc 1 328 2 view .LVU296
 1225              		.loc 1 328 22 is_stmt 0 view .LVU297
 1226 0004 6149     		ldr	r1, .L61
 1227 0006 4B6A     		ldr	r3, [r1, #36]
 1228              		.loc 1 328 28 view .LVU298
 1229 0008 614A     		ldr	r2, .L61+4
 1230 000a 9446     		mov	ip, r2
 1231 000c 6344     		add	r3, r3, ip
 1232 000e 1BB2     		sxth	r3, r3
 1233              		.loc 1 328 15 view .LVU299
ARM GAS  /tmp/cc4d88PT.s 			page 42


 1234 0010 604A     		ldr	r2, .L61+8
 1235 0012 1380     		strh	r3, [r2]
 329:Src/motor.c   **** 	/* sprintf(usart_buffer, "motorl: %d\n", motorl_speed); */
 330:Src/motor.c   **** 	/* USART_SendString(usart_buffer); */
 331:Src/motor.c   **** 	TIM3->CNT = 0x7FFF; // Reset back to center point
 1236              		.loc 1 331 2 is_stmt 1 view .LVU300
 1237              		.loc 1 331 12 is_stmt 0 view .LVU301
 1238 0014 6048     		ldr	r0, .L61+12
 1239 0016 4862     		str	r0, [r1, #36]
 332:Src/motor.c   **** 	motorr_speed = (TIM1->CNT - 0x7FFF);
 1240              		.loc 1 332 2 is_stmt 1 view .LVU302
 1241              		.loc 1 332 22 is_stmt 0 view .LVU303
 1242 0018 6049     		ldr	r1, .L61+16
 1243 001a 4B6A     		ldr	r3, [r1, #36]
 1244              		.loc 1 332 28 view .LVU304
 1245 001c 6344     		add	r3, r3, ip
 1246 001e 1BB2     		sxth	r3, r3
 1247              		.loc 1 332 15 view .LVU305
 1248 0020 5F4C     		ldr	r4, .L61+20
 1249 0022 2380     		strh	r3, [r4]
 333:Src/motor.c   **** 	TIM1->CNT = 0x7FFF; // Reset back to center point
 1250              		.loc 1 333 2 is_stmt 1 view .LVU306
 1251              		.loc 1 333 12 is_stmt 0 view .LVU307
 1252 0024 4862     		str	r0, [r1, #36]
 334:Src/motor.c   **** 
 335:Src/motor.c   **** 	if(abs(motorl_speed)>50){
 1253              		.loc 1 335 2 is_stmt 1 view .LVU308
 1254              		.loc 1 335 5 is_stmt 0 view .LVU309
 1255 0026 1388     		ldrh	r3, [r2]
 1256 0028 1BB2     		sxth	r3, r3
 1257 002a DA17     		asrs	r2, r3, #31
 1258 002c 9B18     		adds	r3, r3, r2
 1259 002e 5340     		eors	r3, r2
 1260 0030 9BB2     		uxth	r3, r3
 1261              		.loc 1 335 4 view .LVU310
 1262 0032 322B     		cmp	r3, #50
 1263 0034 36D9     		bls	.L51
 1264              	.LBB12:
 336:Src/motor.c   **** 		float ratio = ((float) abs(motorl_speed))/ ((float) abs(motorr_speed));
 1265              		.loc 1 336 3 is_stmt 1 view .LVU311
 1266              		.loc 1 336 26 is_stmt 0 view .LVU312
 1267 0036 574B     		ldr	r3, .L61+8
 1268 0038 1888     		ldrh	r0, [r3]
 1269 003a 00B2     		sxth	r0, r0
 1270 003c C317     		asrs	r3, r0, #31
 1271 003e C018     		adds	r0, r0, r3
 1272 0040 5840     		eors	r0, r3
 1273 0042 80B2     		uxth	r0, r0
 1274              		.loc 1 336 18 view .LVU313
 1275 0044 FFF7FEFF 		bl	__aeabi_i2f
 1276              	.LVL88:
 1277 0048 041C     		adds	r4, r0, #0
 1278              		.loc 1 336 55 view .LVU314
 1279 004a 554B     		ldr	r3, .L61+20
 1280 004c 1B88     		ldrh	r3, [r3]
 1281 004e 1BB2     		sxth	r3, r3
 1282 0050 DA17     		asrs	r2, r3, #31
ARM GAS  /tmp/cc4d88PT.s 			page 43


 1283 0052 9B18     		adds	r3, r3, r2
 1284 0054 5340     		eors	r3, r2
 1285 0056 98B2     		uxth	r0, r3
 1286              		.loc 1 336 47 view .LVU315
 1287 0058 FFF7FEFF 		bl	__aeabi_i2f
 1288              	.LVL89:
 1289 005c 011C     		adds	r1, r0, #0
 1290              		.loc 1 336 9 view .LVU316
 1291 005e 201C     		adds	r0, r4, #0
 1292 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1293              	.LVL90:
 1294 0064 041C     		adds	r4, r0, #0
 1295              	.LVL91:
 337:Src/motor.c   **** 		pwm_right = min((int)(pwm_right * ratio), 100);
 1296              		.loc 1 337 3 is_stmt 1 view .LVU317
 1297              		.loc 1 337 15 is_stmt 0 view .LVU318
 1298 0066 4F4B     		ldr	r3, .L61+24
 1299 0068 1878     		ldrb	r0, [r3]
 1300              	.LVL92:
 1301              		.loc 1 337 15 view .LVU319
 1302 006a C0B2     		uxtb	r0, r0
 1303 006c FFF7FEFF 		bl	__aeabi_i2f
 1304              	.LVL93:
 1305 0070 211C     		adds	r1, r4, #0
 1306 0072 FFF7FEFF 		bl	__aeabi_fmul
 1307              	.LVL94:
 1308 0076 FFF7FEFF 		bl	__aeabi_f2iz
 1309              	.LVL95:
 1310              		.loc 1 337 13 view .LVU320
 1311 007a 6428     		cmp	r0, #100
 1312 007c 0BDC     		bgt	.L57
 1313              		.loc 1 337 15 discriminator 1 view .LVU321
 1314 007e 494B     		ldr	r3, .L61+24
 1315 0080 1878     		ldrb	r0, [r3]
 1316 0082 C0B2     		uxtb	r0, r0
 1317 0084 FFF7FEFF 		bl	__aeabi_i2f
 1318              	.LVL96:
 1319 0088 211C     		adds	r1, r4, #0
 1320 008a FFF7FEFF 		bl	__aeabi_fmul
 1321              	.LVL97:
 1322 008e FFF7FEFF 		bl	__aeabi_f2iz
 1323              	.LVL98:
 1324              		.loc 1 337 13 discriminator 1 view .LVU322
 1325 0092 C0B2     		uxtb	r0, r0
 1326 0094 00E0     		b	.L52
 1327              	.L57:
 1328              		.loc 1 337 13 view .LVU323
 1329 0096 6420     		movs	r0, #100
 1330              	.L52:
 1331              		.loc 1 337 13 discriminator 4 view .LVU324
 1332 0098 424B     		ldr	r3, .L61+24
 1333 009a 1870     		strb	r0, [r3]
 338:Src/motor.c   **** 		pwm_setDutyCycleR(pwm_right);
 1334              		.loc 1 338 3 is_stmt 1 discriminator 4 view .LVU325
 1335 009c 1878     		ldrb	r0, [r3]
 1336 009e C0B2     		uxtb	r0, r0
 1337 00a0 FFF7FEFF 		bl	pwm_setDutyCycleR
ARM GAS  /tmp/cc4d88PT.s 			page 44


 1338              	.LVL99:
 1339              	.L51:
 1340              		.loc 1 338 3 is_stmt 0 discriminator 4 view .LVU326
 1341              	.LBE12:
 339:Src/motor.c   **** #if PRINT_DEBUG
 340:Src/motor.c   **** 		sprintf(usart_buffer, "pwm_right: %d\n", pwm_right);
 341:Src/motor.c   **** 		USART_SendString(usart_buffer);
 342:Src/motor.c   **** 		sprintf(usart_buffer, "motorr: %d\n", motorr_speed);
 343:Src/motor.c   **** 		USART_SendString(usart_buffer);
 344:Src/motor.c   **** #endif
 345:Src/motor.c   **** 	}
 346:Src/motor.c   **** 
 347:Src/motor.c   **** 	if(target_dist > 0){
 1342              		.loc 1 347 2 is_stmt 1 view .LVU327
 1343              		.loc 1 347 17 is_stmt 0 view .LVU328
 1344 00a4 404B     		ldr	r3, .L61+28
 1345 00a6 1B78     		ldrb	r3, [r3]
 1346              		.loc 1 347 4 view .LVU329
 1347 00a8 002B     		cmp	r3, #0
 1348 00aa 1ED0     		beq	.L53
 1349              	.LBB13:
 348:Src/motor.c   **** 		current_dist += (float)abs(motorl_speed)/132;
 1350              		.loc 1 348 3 is_stmt 1 view .LVU330
 1351              		.loc 1 348 26 is_stmt 0 view .LVU331
 1352 00ac 394B     		ldr	r3, .L61+8
 1353 00ae 1888     		ldrh	r0, [r3]
 1354 00b0 00B2     		sxth	r0, r0
 1355 00b2 C317     		asrs	r3, r0, #31
 1356 00b4 C018     		adds	r0, r0, r3
 1357 00b6 5840     		eors	r0, r3
 1358 00b8 80B2     		uxth	r0, r0
 1359              		.loc 1 348 19 view .LVU332
 1360 00ba FFF7FEFF 		bl	__aeabi_i2f
 1361              	.LVL100:
 1362              		.loc 1 348 43 view .LVU333
 1363 00be 3B49     		ldr	r1, .L61+32
 1364 00c0 FFF7FEFF 		bl	__aeabi_fdiv
 1365              	.LVL101:
 1366 00c4 011C     		adds	r1, r0, #0
 1367              		.loc 1 348 16 view .LVU334
 1368 00c6 3A4C     		ldr	r4, .L61+36
 1369 00c8 2068     		ldr	r0, [r4]
 1370 00ca FFF7FEFF 		bl	__aeabi_fadd
 1371              	.LVL102:
 1372 00ce 2060     		str	r0, [r4]
 349:Src/motor.c   **** #if PRINT_DEBUG
 350:Src/motor.c   **** 		sprintf(usart_buffer, "current_dist: %d\n", (int)current_dist);
 351:Src/motor.c   **** 		USART_SendString(usart_buffer);
 352:Src/motor.c   **** #endif
 353:Src/motor.c   **** 		uint8_t obj = 0;
 1373              		.loc 1 353 3 is_stmt 1 view .LVU335
 1374              	.LVL103:
 354:Src/motor.c   **** 		if ((uint8_t)current_dist >= target_dist || !turning && (obj = ObjectDetected())){
 1375              		.loc 1 354 3 view .LVU336
 1376              		.loc 1 354 7 is_stmt 0 view .LVU337
 1377 00d0 2068     		ldr	r0, [r4]
 1378 00d2 FFF7FEFF 		bl	__aeabi_f2uiz
ARM GAS  /tmp/cc4d88PT.s 			page 45


 1379              	.LVL104:
 1380 00d6 C0B2     		uxtb	r0, r0
 1381              		.loc 1 354 29 view .LVU338
 1382 00d8 334B     		ldr	r3, .L61+28
 1383 00da 1B78     		ldrb	r3, [r3]
 1384 00dc DBB2     		uxtb	r3, r3
 1385              		.loc 1 354 6 view .LVU339
 1386 00de 9842     		cmp	r0, r3
 1387 00e0 0AD2     		bcs	.L58
 1388              		.loc 1 354 47 discriminator 1 view .LVU340
 1389 00e2 344B     		ldr	r3, .L61+40
 1390 00e4 1B78     		ldrb	r3, [r3]
 1391              		.loc 1 354 44 discriminator 1 view .LVU341
 1392 00e6 002B     		cmp	r3, #0
 1393 00e8 2AD0     		beq	.L59
 1394              	.LVL105:
 1395              	.L53:
 1396              		.loc 1 354 44 discriminator 1 view .LVU342
 1397              	.LBE13:
 355:Src/motor.c   **** 			if(obj)
 356:Src/motor.c   **** 				USART_SendString("Object detected\n");
 357:Src/motor.c   **** 			else
 358:Src/motor.c   **** 				USART_SendString("Hit distance target\n");
 359:Src/motor.c   **** 			motors_Off();
 360:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 361:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 362:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 363:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 364:Src/motor.c   **** 			pwm_right = 0;
 365:Src/motor.c   **** 			if(!turning){
 366:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 367:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 368:Src/motor.c   **** 				USART_SendString(usart_buffer);
 369:Src/motor.c   **** 			}
 370:Src/motor.c   **** 			target_dist = 0;
 371:Src/motor.c   **** 			current_dist = 0;
 372:Src/motor.c   **** 		}
 373:Src/motor.c   **** 	}
 374:Src/motor.c   **** 
 375:Src/motor.c   **** 	// Call the PI update function
 376:Src/motor.c   **** 	TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 1398              		.loc 1 376 2 is_stmt 1 view .LVU343
 1399              		.loc 1 376 6 is_stmt 0 view .LVU344
 1400 00ea 334A     		ldr	r2, .L61+44
 1401 00ec 1369     		ldr	r3, [r2, #16]
 1402              		.loc 1 376 11 view .LVU345
 1403 00ee 0121     		movs	r1, #1
 1404 00f0 8B43     		bics	r3, r1
 1405 00f2 1361     		str	r3, [r2, #16]
 377:Src/motor.c   **** }
 1406              		.loc 1 377 1 view .LVU346
 1407 00f4 09B0     		add	sp, sp, #36
 1408              		@ sp needed
 1409 00f6 30BD     		pop	{r4, r5, pc}
 1410              	.LVL106:
 1411              	.L58:
 1412              	.LBB14:
ARM GAS  /tmp/cc4d88PT.s 			page 46


 355:Src/motor.c   **** 			if(obj)
 1413              		.loc 1 355 4 is_stmt 1 view .LVU347
 358:Src/motor.c   **** 			motors_Off();
 1414              		.loc 1 358 5 view .LVU348
 1415 00f8 3048     		ldr	r0, .L61+48
 1416 00fa FFF7FEFF 		bl	USART_SendString
 1417              	.LVL107:
 1418              	.L55:
 359:Src/motor.c   **** 			motorl_speed = (TIM3->CNT - 0x7FFF);
 1419              		.loc 1 359 4 view .LVU349
 1420 00fe FFF7FEFF 		bl	motors_Off
 1421              	.LVL108:
 360:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1422              		.loc 1 360 4 view .LVU350
 360:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1423              		.loc 1 360 24 is_stmt 0 view .LVU351
 1424 0102 224A     		ldr	r2, .L61
 1425 0104 536A     		ldr	r3, [r2, #36]
 360:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1426              		.loc 1 360 30 view .LVU352
 1427 0106 2249     		ldr	r1, .L61+4
 1428 0108 8C46     		mov	ip, r1
 1429 010a 6344     		add	r3, r3, ip
 1430 010c 1BB2     		sxth	r3, r3
 360:Src/motor.c   **** 			TIM3->CNT = 0x7FFF; // Reset back to center point
 1431              		.loc 1 360 17 view .LVU353
 1432 010e 2149     		ldr	r1, .L61+8
 1433 0110 0B80     		strh	r3, [r1]
 361:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1434              		.loc 1 361 4 is_stmt 1 view .LVU354
 361:Src/motor.c   **** 			motorr_speed = (TIM1->CNT - 0x7FFF);
 1435              		.loc 1 361 14 is_stmt 0 view .LVU355
 1436 0112 2149     		ldr	r1, .L61+12
 1437 0114 5162     		str	r1, [r2, #36]
 362:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1438              		.loc 1 362 4 is_stmt 1 view .LVU356
 362:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1439              		.loc 1 362 24 is_stmt 0 view .LVU357
 1440 0116 214A     		ldr	r2, .L61+16
 1441 0118 536A     		ldr	r3, [r2, #36]
 362:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1442              		.loc 1 362 30 view .LVU358
 1443 011a 6344     		add	r3, r3, ip
 1444 011c 1BB2     		sxth	r3, r3
 362:Src/motor.c   **** 			TIM1->CNT = 0x7FFF; // Reset back to center point
 1445              		.loc 1 362 17 view .LVU359
 1446 011e 2048     		ldr	r0, .L61+20
 1447 0120 0380     		strh	r3, [r0]
 363:Src/motor.c   **** 			pwm_right = 0;
 1448              		.loc 1 363 4 is_stmt 1 view .LVU360
 363:Src/motor.c   **** 			pwm_right = 0;
 1449              		.loc 1 363 14 is_stmt 0 view .LVU361
 1450 0122 5162     		str	r1, [r2, #36]
 364:Src/motor.c   **** 			if(!turning){
 1451              		.loc 1 364 4 is_stmt 1 view .LVU362
 364:Src/motor.c   **** 			if(!turning){
 1452              		.loc 1 364 14 is_stmt 0 view .LVU363
ARM GAS  /tmp/cc4d88PT.s 			page 47


 1453 0124 1F4B     		ldr	r3, .L61+24
 1454 0126 0022     		movs	r2, #0
 1455 0128 1A70     		strb	r2, [r3]
 365:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1456              		.loc 1 365 4 is_stmt 1 view .LVU364
 365:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1457              		.loc 1 365 7 is_stmt 0 view .LVU365
 1458 012a 224B     		ldr	r3, .L61+40
 1459 012c 1B78     		ldrb	r3, [r3]
 365:Src/motor.c   **** 				absolute_dist += current_dist * (float)cos((double)heading);
 1460              		.loc 1 365 6 view .LVU366
 1461 012e 002B     		cmp	r3, #0
 1462 0130 0ED0     		beq	.L60
 1463              	.L56:
 370:Src/motor.c   **** 			current_dist = 0;
 1464              		.loc 1 370 4 is_stmt 1 view .LVU367
 370:Src/motor.c   **** 			current_dist = 0;
 1465              		.loc 1 370 16 is_stmt 0 view .LVU368
 1466 0132 1D4B     		ldr	r3, .L61+28
 1467 0134 0022     		movs	r2, #0
 1468 0136 1A70     		strb	r2, [r3]
 371:Src/motor.c   **** 		}
 1469              		.loc 1 371 4 is_stmt 1 view .LVU369
 371:Src/motor.c   **** 		}
 1470              		.loc 1 371 17 is_stmt 0 view .LVU370
 1471 0138 1D4B     		ldr	r3, .L61+36
 1472 013a 0022     		movs	r2, #0
 1473 013c 1A60     		str	r2, [r3]
 1474 013e D4E7     		b	.L53
 1475              	.LVL109:
 1476              	.L59:
 354:Src/motor.c   **** 			if(obj)
 1477              		.loc 1 354 66 discriminator 2 view .LVU371
 1478 0140 FFF7FEFF 		bl	ObjectDetected
 1479              	.LVL110:
 354:Src/motor.c   **** 			if(obj)
 1480              		.loc 1 354 56 discriminator 2 view .LVU372
 1481 0144 0028     		cmp	r0, #0
 1482 0146 D0D0     		beq	.L53
 355:Src/motor.c   **** 				USART_SendString("Object detected\n");
 1483              		.loc 1 355 4 is_stmt 1 view .LVU373
 356:Src/motor.c   **** 			else
 1484              		.loc 1 356 5 view .LVU374
 1485 0148 1D48     		ldr	r0, .L61+52
 1486              	.LVL111:
 356:Src/motor.c   **** 			else
 1487              		.loc 1 356 5 is_stmt 0 view .LVU375
 1488 014a FFF7FEFF 		bl	USART_SendString
 1489              	.LVL112:
 1490 014e D6E7     		b	.L55
 1491              	.LVL113:
 1492              	.L60:
 366:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1493              		.loc 1 366 5 is_stmt 1 view .LVU376
 366:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1494              		.loc 1 366 44 is_stmt 0 view .LVU377
 1495 0150 1C4C     		ldr	r4, .L61+56
ARM GAS  /tmp/cc4d88PT.s 			page 48


 1496 0152 2068     		ldr	r0, [r4]
 1497 0154 FFF7FEFF 		bl	__aeabi_f2d
 1498              	.LVL114:
 1499 0158 FFF7FEFF 		bl	cos
 1500              	.LVL115:
 366:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1501              		.loc 1 366 37 view .LVU378
 1502 015c FFF7FEFF 		bl	__aeabi_d2f
 1503              	.LVL116:
 366:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1504              		.loc 1 366 35 view .LVU379
 1505 0160 134B     		ldr	r3, .L61+36
 1506 0162 1968     		ldr	r1, [r3]
 1507 0164 FFF7FEFF 		bl	__aeabi_fmul
 1508              	.LVL117:
 1509 0168 011C     		adds	r1, r0, #0
 366:Src/motor.c   **** 				sprintf(usart_buffer, "heading: %d\n", (int)heading);
 1510              		.loc 1 366 19 view .LVU380
 1511 016a 174D     		ldr	r5, .L61+60
 1512 016c 2868     		ldr	r0, [r5]
 1513 016e FFF7FEFF 		bl	__aeabi_fadd
 1514              	.LVL118:
 1515 0172 2860     		str	r0, [r5]
 367:Src/motor.c   **** 				USART_SendString(usart_buffer);
 1516              		.loc 1 367 5 is_stmt 1 view .LVU381
 1517 0174 2068     		ldr	r0, [r4]
 1518 0176 FFF7FEFF 		bl	__aeabi_f2iz
 1519              	.LVL119:
 1520 017a 0200     		movs	r2, r0
 1521 017c 1349     		ldr	r1, .L61+64
 1522 017e 6846     		mov	r0, sp
 1523 0180 FFF7FEFF 		bl	sprintf
 1524              	.LVL120:
 368:Src/motor.c   **** 			}
 1525              		.loc 1 368 5 view .LVU382
 1526 0184 6846     		mov	r0, sp
 1527 0186 FFF7FEFF 		bl	USART_SendString
 1528              	.LVL121:
 1529 018a D2E7     		b	.L56
 1530              	.L62:
 1531              		.align	2
 1532              	.L61:
 1533 018c 00040040 		.word	1073742848
 1534 0190 0180FFFF 		.word	-32767
 1535 0194 00000000 		.word	motorl_speed
 1536 0198 FF7F0000 		.word	32767
 1537 019c 002C0140 		.word	1073818624
 1538 01a0 00000000 		.word	motorr_speed
 1539 01a4 00000000 		.word	pwm_right
 1540 01a8 00000000 		.word	target_dist
 1541 01ac 00000443 		.word	1124335616
 1542 01b0 00000000 		.word	current_dist
 1543 01b4 00000000 		.word	turning
 1544 01b8 00100040 		.word	1073745920
 1545 01bc 00000000 		.word	.LC33
 1546 01c0 18000000 		.word	.LC36
 1547 01c4 00000000 		.word	heading
ARM GAS  /tmp/cc4d88PT.s 			page 49


 1548 01c8 00000000 		.word	absolute_dist
 1549 01cc 2C000000 		.word	.LC40
 1550              	.LBE14:
 1551              		.cfi_endproc
 1552              	.LFE56:
 1554              		.section	.text.get_distance,"ax",%progbits
 1555              		.align	1
 1556              		.global	get_distance
 1557              		.syntax unified
 1558              		.code	16
 1559              		.thumb_func
 1561              	get_distance:
 1562              	.LFB57:
 378:Src/motor.c   **** 
 379:Src/motor.c   **** float get_distance(void){
 1563              		.loc 1 379 25 view -0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 0
 1566              		@ frame_needed = 0, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 380:Src/motor.c   **** 	return absolute_dist;
 1568              		.loc 1 380 2 view .LVU384
 1569              		.loc 1 380 9 is_stmt 0 view .LVU385
 1570 0000 014B     		ldr	r3, .L64
 1571 0002 1868     		ldr	r0, [r3]
 381:Src/motor.c   **** }
 1572              		.loc 1 381 1 view .LVU386
 1573              		@ sp needed
 1574 0004 7047     		bx	lr
 1575              	.L65:
 1576 0006 C046     		.align	2
 1577              	.L64:
 1578 0008 00000000 		.word	absolute_dist
 1579              		.cfi_endproc
 1580              	.LFE57:
 1582              		.global	pwm_left
 1583              		.section	.data.pwm_left,"aw"
 1586              	pwm_left:
 1587 0000 64       		.byte	100
 1588              		.global	pwm_right
 1589              		.section	.data.pwm_right,"aw"
 1592              	pwm_right:
 1593 0000 64       		.byte	100
 1594              		.global	turning
 1595              		.section	.bss.turning,"aw",%nobits
 1598              	turning:
 1599 0000 00       		.space	1
 1600              		.global	heading
 1601              		.section	.bss.heading,"aw",%nobits
 1602              		.align	2
 1605              	heading:
 1606 0000 00000000 		.space	4
 1607              		.global	absolute_dist
 1608              		.section	.bss.absolute_dist,"aw",%nobits
 1609              		.align	2
 1612              	absolute_dist:
 1613 0000 00000000 		.space	4
ARM GAS  /tmp/cc4d88PT.s 			page 50


 1614              		.global	current_dist
 1615              		.section	.bss.current_dist,"aw",%nobits
 1616              		.align	2
 1619              	current_dist:
 1620 0000 00000000 		.space	4
 1621              		.global	target_dist
 1622              		.section	.bss.target_dist,"aw",%nobits
 1625              	target_dist:
 1626 0000 00       		.space	1
 1627              		.global	motorr_speed
 1628              		.section	.bss.motorr_speed,"aw",%nobits
 1629              		.align	1
 1632              	motorr_speed:
 1633 0000 0000     		.space	2
 1634              		.global	motorl_speed
 1635              		.section	.bss.motorl_speed,"aw",%nobits
 1636              		.align	1
 1639              	motorl_speed:
 1640 0000 0000     		.space	2
 1641              		.text
 1642              	.Letext0:
 1643              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1644              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1645              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1646              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1647              		.file 7 "Inc/pins.h"
 1648              		.file 8 "Inc/motor.h"
 1649              		.file 9 "/usr/arm-none-eabi/include/stdio.h"
 1650              		.file 10 "Inc/main.h"
 1651              		.file 11 "/usr/arm-none-eabi/include/math.h"
ARM GAS  /tmp/cc4d88PT.s 			page 51


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/cc4d88PT.s:19     .text.pwm_init:00000000 $t
     /tmp/cc4d88PT.s:25     .text.pwm_init:00000000 pwm_init
     /tmp/cc4d88PT.s:172    .text.pwm_init:00000094 $d
     /tmp/cc4d88PT.s:181    .text.pwm_setDutyCycleL:00000000 $t
     /tmp/cc4d88PT.s:187    .text.pwm_setDutyCycleL:00000000 pwm_setDutyCycleL
     /tmp/cc4d88PT.s:224    .text.pwm_setDutyCycleL:00000018 $d
     /tmp/cc4d88PT.s:229    .text.pwm_setDutyCycleR:00000000 $t
     /tmp/cc4d88PT.s:235    .text.pwm_setDutyCycleR:00000000 pwm_setDutyCycleR
     /tmp/cc4d88PT.s:274    .text.set_Motor_Direction:00000000 $t
     /tmp/cc4d88PT.s:280    .text.set_Motor_Direction:00000000 set_Motor_Direction
     /tmp/cc4d88PT.s:352    .text.set_Forward:00000000 $t
     /tmp/cc4d88PT.s:358    .text.set_Forward:00000000 set_Forward
     /tmp/cc4d88PT.s:397    .text.set_Forward:00000028 $d
     /tmp/cc4d88PT.s:1592   .data.pwm_right:00000000 pwm_right
     /tmp/cc4d88PT.s:1586   .data.pwm_left:00000000 pwm_left
     /tmp/cc4d88PT.s:405    .text.set_Backward:00000000 $t
     /tmp/cc4d88PT.s:411    .text.set_Backward:00000000 set_Backward
     /tmp/cc4d88PT.s:450    .text.set_Backward:00000028 $d
     /tmp/cc4d88PT.s:458    .text.set_Right:00000000 $t
     /tmp/cc4d88PT.s:464    .text.set_Right:00000000 set_Right
     /tmp/cc4d88PT.s:503    .text.set_Right:00000028 $d
     /tmp/cc4d88PT.s:511    .text.set_Left:00000000 $t
     /tmp/cc4d88PT.s:517    .text.set_Left:00000000 set_Left
     /tmp/cc4d88PT.s:556    .text.set_Left:00000028 $d
     /tmp/cc4d88PT.s:564    .text.motors_Off:00000000 $t
     /tmp/cc4d88PT.s:570    .text.motors_Off:00000000 motors_Off
     /tmp/cc4d88PT.s:596    .rodata.MoveMotors.str1.4:00000000 $d
     /tmp/cc4d88PT.s:611    .text.MoveMotors:00000000 $t
     /tmp/cc4d88PT.s:617    .text.MoveMotors:00000000 MoveMotors
     /tmp/cc4d88PT.s:829    .text.MoveMotors:000000f0 $d
     /tmp/cc4d88PT.s:1598   .bss.turning:00000000 turning
     /tmp/cc4d88PT.s:1625   .bss.target_dist:00000000 target_dist
     /tmp/cc4d88PT.s:1605   .bss.heading:00000000 heading
     /tmp/cc4d88PT.s:842    .text.encoder_init:00000000 $t
     /tmp/cc4d88PT.s:848    .text.encoder_init:00000000 encoder_init
     /tmp/cc4d88PT.s:1037   .text.encoder_init:000000a4 $d
     /tmp/cc4d88PT.s:1050   .text.motor_init:00000000 $t
     /tmp/cc4d88PT.s:1056   .text.motor_init:00000000 motor_init
     /tmp/cc4d88PT.s:1080   .text.ObjectDetected:00000000 $t
     /tmp/cc4d88PT.s:1086   .text.ObjectDetected:00000000 ObjectDetected
     /tmp/cc4d88PT.s:1180   .text.ObjectDetected:0000003c $d
     /tmp/cc4d88PT.s:1192   .rodata.TIM6_DAC_IRQHandler.str1.4:00000000 $d
     /tmp/cc4d88PT.s:1202   .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/cc4d88PT.s:1208   .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/cc4d88PT.s:1533   .text.TIM6_DAC_IRQHandler:0000018c $d
     /tmp/cc4d88PT.s:1639   .bss.motorl_speed:00000000 motorl_speed
     /tmp/cc4d88PT.s:1632   .bss.motorr_speed:00000000 motorr_speed
     /tmp/cc4d88PT.s:1619   .bss.current_dist:00000000 current_dist
     /tmp/cc4d88PT.s:1612   .bss.absolute_dist:00000000 absolute_dist
     /tmp/cc4d88PT.s:1555   .text.get_distance:00000000 $t
     /tmp/cc4d88PT.s:1561   .text.get_distance:00000000 get_distance
     /tmp/cc4d88PT.s:1578   .text.get_distance:00000008 $d
     /tmp/cc4d88PT.s:1599   .bss.turning:00000000 $d
     /tmp/cc4d88PT.s:1602   .bss.heading:00000000 $d
     /tmp/cc4d88PT.s:1609   .bss.absolute_dist:00000000 $d
ARM GAS  /tmp/cc4d88PT.s 			page 52


     /tmp/cc4d88PT.s:1616   .bss.current_dist:00000000 $d
     /tmp/cc4d88PT.s:1626   .bss.target_dist:00000000 $d
     /tmp/cc4d88PT.s:1629   .bss.motorr_speed:00000000 $d
     /tmp/cc4d88PT.s:1636   .bss.motorl_speed:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
motor_left_pins
motor_right_pins
__aeabi_uidiv
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_dmul
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_dsub
GetUltrasonic
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_i2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2iz
__aeabi_fadd
__aeabi_f2uiz
USART_SendString
cos
sprintf
