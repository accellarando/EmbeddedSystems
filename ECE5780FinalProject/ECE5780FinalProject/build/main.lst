ARM GAS  /tmp/cc4ejHWS.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB57:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include "motor.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/cc4ejHWS.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** TIM_HandleTypeDef htim1;
  47:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  48:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  49:Src/main.c    **** #define TRIG_PORT GPIOB
  50:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  51:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  52:Src/main.c    **** #define ECHO_PORT GPIOB
  53:Src/main.c    **** volatile uint32_t pMillis;
  54:Src/main.c    **** volatile uint16_t startTime;
  55:Src/main.c    **** volatile uint16_t Value1 = 0;
  56:Src/main.c    **** volatile uint16_t Value2 = 0;
  57:Src/main.c    **** volatile uint16_t leftDistance = 0;
  58:Src/main.c    **** volatile uint16_t rightDistance = 0;
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  65:Src/main.c    **** void SystemClock_Config(void);
  66:Src/main.c    **** static void MX_GPIO_Init(void);
  67:Src/main.c    **** static void MX_TIM1_Init(void);
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** #define LED_RED GPIO_PIN_6
  75:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  76:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  77:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  78:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  79:Src/main.c    **** 
  80:Src/main.c    **** void LED_Init(uint32_t pins) {
  81:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  82:Src/main.c    **** 
  83:Src/main.c    ****     GPIO_InitTypeDef gpio_led_init = {pins,
  84:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
  85:Src/main.c    ****         GPIO_SPEED_FREQ_LOW,
  86:Src/main.c    ****         GPIO_NOPULL
  87:Src/main.c    ****     };
  88:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpio_led_init);
  89:Src/main.c    **** }
  90:Src/main.c    **** 
ARM GAS  /tmp/cc4ejHWS.s 			page 3


  91:Src/main.c    **** /**
  92:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  93:Src/main.c    ****  *        functions appropriately.
  94:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  95:Src/main.c    ****  */
  96:Src/main.c    **** void GPIO_AF_Init() {
  97:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  98:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  99:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 100:Src/main.c    **** 
 101:Src/main.c    **** 	// uart_pins
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 103:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 104:Src/main.c    **** 
 105:Src/main.c    **** 	// motor_left_pins
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 111:Src/main.c    **** 
 112:Src/main.c    **** 	// motor_right_pins
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 118:Src/main.c    **** 
 119:Src/main.c    **** 	// ultrasonic_left_pins
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 121:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 122:Src/main.c    **** 
 123:Src/main.c    **** 	// ultrasonic_right_pins
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 125:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 126:Src/main.c    **** }
 127:Src/main.c    **** 
 128:Src/main.c    **** /**
 129:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 130:Src/main.c    ****  */
 131:Src/main.c    **** void USART_Init() {
 132:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 133:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//Set baud rate
 136:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 137:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 138:Src/main.c    **** 												//use with the BT adapter
 139:Src/main.c    **** 
 140:Src/main.c    **** 	//Enable transmitter
 141:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 142:Src/main.c    **** 
 143:Src/main.c    **** 	//Enable receiver
 144:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 145:Src/main.c    **** 
 146:Src/main.c    **** 	//Enable the receive register not empty interrupt
 147:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /tmp/cc4ejHWS.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    **** 	//Enable USART3
 150:Src/main.c    **** 	USART3->CR1 |= 1;
 151:Src/main.c    **** }
 152:Src/main.c    **** 
 153:Src/main.c    **** /**
 154:Src/main.c    ****  * @brief Sends a single character on the USART.
 155:Src/main.c    ****  *
 156:Src/main.c    ****  * @param c: the character to be sent
 157:Src/main.c    ****  */
 158:Src/main.c    **** void USART_SendChar(uint8_t c) {
 159:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 160:Src/main.c    **** 		;
 161:Src/main.c    **** 
 162:Src/main.c    **** 	USART3->TDR = c;
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
 166:Src/main.c    ****  * @brief Sends a string on the USART.
 167:Src/main.c    ****  *
 168:Src/main.c    ****  * @param p_string: pointer to string to send
 169:Src/main.c    ****  */
 170:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 171:Src/main.c    **** 	while(*p_string != 0) {
 172:Src/main.c    **** 		USART_SendChar(*p_string);
 173:Src/main.c    **** 		p_string++;
 174:Src/main.c    **** 	}
 175:Src/main.c    **** 	USART_SendChar(0);
 176:Src/main.c    **** }
 177:Src/main.c    **** 
 178:Src/main.c    **** volatile uint8_t command[3];
 179:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 180:Src/main.c    **** 
 181:Src/main.c    **** void ClearCommand(){
 182:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 183:Src/main.c    **** 	memset(command, 0, sizeof(command));
 184:Src/main.c    **** 	incomingCommand = 0;
 185:Src/main.c    **** 	USART_SendString(prompt);
 186:Src/main.c    **** }
 187:Src/main.c    **** 
 188:Src/main.c    **** void USART3_4_IRQHandler(){
 189:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 190:Src/main.c    **** 	incomingCommand = 1;
 191:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 192:Src/main.c    **** 		;
 193:Src/main.c    **** 	if(command[0])
 194:Src/main.c    **** 		if(command[1]){
 195:Src/main.c    **** 			if(command[2]){
 196:Src/main.c    **** 				USART_SendString(err);
 197:Src/main.c    **** 				ClearCommand();
 198:Src/main.c    **** 			}
 199:Src/main.c    **** 			else
 200:Src/main.c    **** 				command[2] = USART3->RDR;
 201:Src/main.c    **** 		}
 202:Src/main.c    **** 		else
 203:Src/main.c    **** 			command[1] = USART3->RDR;
 204:Src/main.c    **** 	else
ARM GAS  /tmp/cc4ejHWS.s 			page 5


 205:Src/main.c    **** 		command[0] = USART3->RDR;
 206:Src/main.c    **** }
 207:Src/main.c    **** 
 208:Src/main.c    **** void Log(){
 209:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 210:Src/main.c    **** 	USART_SendString(err);
 211:Src/main.c    **** }
 212:Src/main.c    **** 
 213:Src/main.c    **** void Proceed(){
 214:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 215:Src/main.c    **** 	USART_SendString(err);
 216:Src/main.c    **** }
 217:Src/main.c    **** 
 218:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 219:Src/main.c    **** 	uint32_t left_motor_pin;
 220:Src/main.c    **** 	uint32_t right_motor_pin;
 221:Src/main.c    **** 	int32_t CH1_DC = 65535;
 222:Src/main.c    **** 
 223:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 224:Src/main.c    **** 
 225:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 226:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 227:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 228:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 229:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 230:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 231:Src/main.c    **** 
 232:Src/main.c    **** 	MotorCommand motorcmd = {0};
 233:Src/main.c    **** 
 234:Src/main.c    **** 	uint8_t* part1;
 235:Src/main.c    **** 	uint8_t part2[15];
 236:Src/main.c    **** 	uint8_t zero = 0;
 237:Src/main.c    **** 	memcpy(part2, &zero, 15);
 238:Src/main.c    **** 
 239:Src/main.c    **** 	switch(direction){
 240:Src/main.c    **** 		case 'w':
 241:Src/main.c    **** 			part1 = forward;
 242:Src/main.c    **** 			motorcmd.dir = FORWARD;
 243:Src/main.c    **** 			break;
 244:Src/main.c    **** 		case 'a':
 245:Src/main.c    **** 			part1 = left;
 246:Src/main.c    **** 			motorcmd.dir = LEFT;
 247:Src/main.c    **** 			break;
 248:Src/main.c    **** 		case 'd':
 249:Src/main.c    **** 			part1 = right;
 250:Src/main.c    **** 			motorcmd.dir = RIGHT;
 251:Src/main.c    **** 			break;
 252:Src/main.c    **** 		case 'l':
 253:Src/main.c    **** 			part1 = log;
 254:Src/main.c    **** 			USART_SendString(part1);
 255:Src/main.c    **** 			Log();
 256:Src/main.c    **** 			ClearCommand();
 257:Src/main.c    **** 			return;
 258:Src/main.c    **** 		case 'p':
 259:Src/main.c    **** 			part1 = proceed;
 260:Src/main.c    **** 			USART_SendString(part1);
 261:Src/main.c    **** 			Proceed();
ARM GAS  /tmp/cc4ejHWS.s 			page 6


 262:Src/main.c    **** 			ClearCommand();
 263:Src/main.c    **** 			return;
 264:Src/main.c    **** 		case 'x':
 265:Src/main.c    **** 			part1 = stop;
 266:Src/main.c    **** 			USART_SendString(part1);
 267:Src/main.c    **** 			motorcmd.dir = OFF;
 268:Src/main.c    **** 			ClearCommand();
 269:Src/main.c    **** 			MoveMotors(&motorcmd);
 270:Src/main.c    **** 			return;
 271:Src/main.c    **** 		default:
 272:Src/main.c    **** 			USART_SendString(err);
 273:Src/main.c    **** 			ClearCommand();
 274:Src/main.c    **** 			return;
 275:Src/main.c    **** 	}
 276:Src/main.c    **** 
 277:Src/main.c    **** 	//these are for "vector commands" only:
 278:Src/main.c    **** 	
 279:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 280:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 281:Src/main.c    **** 		motorcmd.amount = 0;
 282:Src/main.c    **** 	}
 283:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 284:Src/main.c    **** 		USART_SendString(err);
 285:Src/main.c    **** 		ClearCommand();
 286:Src/main.c    **** 		return;
 287:Src/main.c    **** 	}
 288:Src/main.c    **** 	else{
 289:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 290:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 291:Src/main.c    **** 		motorcmd.amount = dist;
 292:Src/main.c    **** 	}
 293:Src/main.c    **** 
 294:Src/main.c    **** 
 295:Src/main.c    **** 	USART_SendString(part1);
 296:Src/main.c    **** 	USART_SendString(part2);
 297:Src/main.c    **** 
 298:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 299:Src/main.c    **** 	HAL_Delay(1000);
 300:Src/main.c    **** 	TIM2->CCR1 = 0;
 301:Src/main.c    **** 
 302:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 303:Src/main.c    **** 	USART_SendString(result);
 304:Src/main.c    **** 
 305:Src/main.c    **** 	ClearCommand();
 306:Src/main.c    **** 
 307:Src/main.c    **** 
 308:Src/main.c    **** 	// Example code while loop
 309:Src/main.c    **** 	//    while (1)
 310:Src/main.c    **** 	//    {
 311:Src/main.c    **** 	//        while(CH1_DC < 65535)
 312:Src/main.c    **** 	//        {
 313:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 314:Src/main.c    **** 	//            CH1_DC += 70;
 315:Src/main.c    **** 	//            HAL_Delay(1);
 316:Src/main.c    **** 	//        }
 317:Src/main.c    **** 	//        while(CH1_DC > 0)
 318:Src/main.c    **** 	//        {
ARM GAS  /tmp/cc4ejHWS.s 			page 7


 319:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 320:Src/main.c    **** 	//            CH1_DC -= 70;
 321:Src/main.c    **** 	//            HAL_Delay(1);
 322:Src/main.c    **** 	//        }
 323:Src/main.c    **** 	//    }
 324:Src/main.c    **** }
 325:Src/main.c    **** 
 326:Src/main.c    **** /*
 327:Src/main.c    **** void ProcessCommandPWM(uint8_t side, uint8_t amt){
 328:Src/main.c    **** 	MotorCommand motorcmd = {0};
 329:Src/main.c    **** 	motorcmd.dir = FORWARD;
 330:Src/main.c    **** 	motorcmd.amount = 9;
 331:Src/main.c    **** 	switch(side){
 332:Src/main.c    **** 		case 'l':
 333:Src/main.c    **** 			pwm_left = amt;
 334:Src/main.c    **** 			break;
 335:Src/main.c    **** 		case 'r':
 336:Src/main.c    **** 			pwm_right = amt;
 337:Src/main.c    **** 			break;
 338:Src/main.c    **** 		case 'x':
 339:Src/main.c    **** 			motorcmd.dir = OFF;
 340:Src/main.c    **** 			break;
 341:Src/main.c    **** 		default:
 342:Src/main.c    **** 			break;
 343:Src/main.c    **** 	}
 344:Src/main.c    **** 	MoveMotors(&motorcmd);
 345:Src/main.c    **** 	ClearCommand();
 346:Src/main.c    **** }
 347:Src/main.c    **** */
 348:Src/main.c    **** 
 349:Src/main.c    **** /*
 350:Src/main.c    **** void Ultrasonic_Init(uint32_t pins)
 351:Src/main.c    **** {
 352:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 353:Src/main.c    **** 
 354:Src/main.c    **** 	GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 355:Src/main.c    **** 		GPIO_MODE_INPUT,
 356:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
 357:Src/main.c    **** 		GPIO_NOPULL
 358:Src/main.c    **** 	};
 359:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &gpio_init);
 360:Src/main.c    **** }
 361:Src/main.c    **** */
 362:Src/main.c    **** 
 363:Src/main.c    **** void GetDistance()
 364:Src/main.c    **** {
 365:Src/main.c    **** 
 366:Src/main.c    **** }
 367:Src/main.c    **** 
 368:Src/main.c    **** /* USER CODE END 0 */
 369:Src/main.c    **** 
 370:Src/main.c    **** /**
 371:Src/main.c    ****  * @brief  The application entry point.
 372:Src/main.c    ****  * @retval int
 373:Src/main.c    ****  */
 374:Src/main.c    **** int main(void)
 375:Src/main.c    **** {
ARM GAS  /tmp/cc4ejHWS.s 			page 8


 376:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 377:Src/main.c    ****     SystemClock_Config();
 378:Src/main.c    ****     
 379:Src/main.c    ****     //USART Initalizations
 380:Src/main.c    ****     GPIO_AF_Init();
 381:Src/main.c    ****     USART_Init();
 382:Src/main.c    **** 
 383:Src/main.c    ****     motor_init();                           // Initialize motor code
 384:Src/main.c    ****     
 385:Src/main.c    ****     NVIC_EnableIRQ(USART3_4_IRQn);
 386:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 387:Src/main.c    **** 
 388:Src/main.c    ****     uint8_t prompt[] = "CMD> ";
 389:Src/main.c    ****     
 390:Src/main.c    ****     //PWM and Ultrasonic Initalizations
 391:Src/main.c    ****     MX_GPIO_Init();
 392:Src/main.c    ****     MX_TIM1_Init();
 393:Src/main.c    ****     
 394:Src/main.c    ****     HAL_TIM_Base_Start(&htim1);
 395:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 396:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 397:Src/main.c    **** 	
 398:Src/main.c    **** 	while (1) {
 399:Src/main.c    ****         int32_t counter = 0;
 400:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 401:Src/main.c    ****         
 402:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
 403:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 404:Src/main.c    ****         while (counter < 10){
 405:Src/main.c    ****             counter++;
 406:Src/main.c    ****         }  // wait for 10 us
 407:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 408:Src/main.c    ****         
 409:Src/main.c    ****         
 410:Src/main.c    ****         startTime = HAL_GetTick();
 411:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 412:Src/main.c    ****         
 413:Src/main.c    ****         // wait for the echo pin to go high
 414:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 10 >  HAL_GetTick())
 415:Src/main.c    ****         {
 416:Src/main.c    ****          
 417:Src/main.c    ****         }
 418:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 419:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
 420:Src/main.c    ****         
 421:Src/main.c    **** 
 422:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 423:Src/main.c    ****       // wait for the echo pin to go low
 424:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 50 > HAL_GetTick())
 425:Src/main.c    ****         {
 426:Src/main.c    ****             
 427:Src/main.c    ****         }
 428:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 429:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 430:Src/main.c    **** 
 431:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 432:Src/main.c    ****         leftDistance = (Value2 - Value1);
ARM GAS  /tmp/cc4ejHWS.s 			page 9


 433:Src/main.c    ****         if(leftDistance < 10)
 434:Src/main.c    ****         {
 435:Src/main.c    ****             char strLeft[32];
 436:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 437:Src/main.c    **** 			/*
 438:Src/main.c    ****             USART_SendString("Left Ultrasonic: ");
 439:Src/main.c    ****             USART_SendString(strLeft);
 440:Src/main.c    ****             USART_SendString("\n");
 441:Src/main.c    **** 			*/
 442:Src/main.c    ****         }
 443:Src/main.c    ****         
 444:Src/main.c    ****         counter = 0;
 445:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 446:Src/main.c    ****         
 447:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
 448:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 449:Src/main.c    ****         while (counter < 10){
 450:Src/main.c    ****             counter++;
 451:Src/main.c    ****         }  // wait for 10 us
 452:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 453:Src/main.c    ****         
 454:Src/main.c    ****         
 455:Src/main.c    ****         startTime = HAL_GetTick();
 456:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 457:Src/main.c    ****         
 458:Src/main.c    ****         // wait for the echo pin to go high
 459:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 10 >  HAL_GetTick())
 460:Src/main.c    ****         {
 461:Src/main.c    ****          
 462:Src/main.c    ****         }
 463:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 464:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
 465:Src/main.c    ****         
 466:Src/main.c    **** 
 467:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 468:Src/main.c    ****       // wait for the echo pin to go low
 469:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 50 > HAL_GetTick())
 470:Src/main.c    ****         {
 471:Src/main.c    ****             
 472:Src/main.c    ****         }
 473:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 474:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 475:Src/main.c    **** 
 476:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 477:Src/main.c    ****         rightDistance = (Value2 - Value1);
 478:Src/main.c    ****         if(rightDistance < 10)
 479:Src/main.c    ****         {
 480:Src/main.c    ****             char strRight[32];
 481:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 482:Src/main.c    **** 			/*
 483:Src/main.c    ****             USART_SendString("Right Ultrasonic: ");
 484:Src/main.c    ****             USART_SendString(strRight);
 485:Src/main.c    ****             USART_SendString("\n");
 486:Src/main.c    **** 			*/
 487:Src/main.c    **** 	}
 488:Src/main.c    **** 		if(incomingCommand)
 489:Src/main.c    **** 		{
ARM GAS  /tmp/cc4ejHWS.s 			page 10


 490:Src/main.c    **** 			if(command[0] != 'w' &&
 491:Src/main.c    **** 					command[0] != 'a' &&
 492:Src/main.c    **** 					command[0] != 'd'){
 493:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 494:Src/main.c    **** 			}
 495:Src/main.c    **** 			if(command[1])
 496:Src/main.c    **** 			{
 497:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 498:Src/main.c    **** 			}
 499:Src/main.c    **** 		}
 500:Src/main.c    **** 		/*
 501:Src/main.c    **** 		if(incomingCommand){
 502:Src/main.c    **** 			if(command[2]){
 503:Src/main.c    **** 				uint8_t tens = command[1] - '0';
 504:Src/main.c    **** 				uint8_t huns = command[2] - '0';
 505:Src/main.c    **** 				ProcessCommandPWM(command[0], 10*tens + huns);
 506:Src/main.c    **** 			}
 507:Src/main.c    **** 		}
 508:Src/main.c    **** 		*/
 509:Src/main.c    **** 	 HAL_Delay(500);
 510:Src/main.c    **** 	}
 511:Src/main.c    **** }
 512:Src/main.c    **** 
 513:Src/main.c    **** /**
 514:Src/main.c    ****  * @brief System Clock Configuration
 515:Src/main.c    ****  * @retval None
 516:Src/main.c    ****  */
 517:Src/main.c    **** void SystemClock_Config(void)
 518:Src/main.c    **** {
 519:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 520:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 521:Src/main.c    **** 
 522:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 523:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 524:Src/main.c    **** 	 */
 525:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 526:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 527:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 528:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 529:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 530:Src/main.c    **** 	{
 531:Src/main.c    **** 		Error_Handler();
 532:Src/main.c    **** 	}
 533:Src/main.c    **** 
 534:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 535:Src/main.c    **** 	*/
 536:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 537:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 538:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 539:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 540:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 541:Src/main.c    **** 
 542:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 543:Src/main.c    **** 	{
 544:Src/main.c    **** 		Error_Handler();
 545:Src/main.c    **** 	}
 546:Src/main.c    **** }
ARM GAS  /tmp/cc4ejHWS.s 			page 11


 547:Src/main.c    **** 
 548:Src/main.c    **** /**
 549:Src/main.c    ****  * @brief TIM2 Initialization Function
 550:Src/main.c    ****  * @param None
 551:Src/main.c    ****  * @retval None
 552:Src/main.c    ****  */
 553:Src/main.c    **** static void MX_TIM1_Init(void)
 554:Src/main.c    **** {
 555:Src/main.c    **** 
 556:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 557:Src/main.c    **** 
 558:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 559:Src/main.c    **** 
 560:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 561:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 562:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 563:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 564:Src/main.c    **** 
 565:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 566:Src/main.c    **** 
 567:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 568:Src/main.c    ****   htim1.Instance = TIM1;
 569:Src/main.c    ****   htim1.Init.Prescaler = 0;
 570:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 571:Src/main.c    ****   htim1.Init.Period = 65535;
 572:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 573:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 574:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 575:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 576:Src/main.c    ****   {
 577:Src/main.c    ****     Error_Handler();
 578:Src/main.c    ****   }
 579:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 580:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 581:Src/main.c    ****   {
 582:Src/main.c    ****     Error_Handler();
 583:Src/main.c    ****   }
 584:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 585:Src/main.c    ****   {
 586:Src/main.c    ****     Error_Handler();
 587:Src/main.c    ****   }
 588:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 589:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 590:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 591:Src/main.c    ****   {
 592:Src/main.c    ****     Error_Handler();
 593:Src/main.c    ****   }
 594:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 595:Src/main.c    ****   sConfigOC.Pulse = 0;
 596:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 597:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 598:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 599:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 600:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 601:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 602:Src/main.c    ****   {
 603:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/cc4ejHWS.s 			page 12


 604:Src/main.c    ****   }
 605:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 606:Src/main.c    ****   {
 607:Src/main.c    ****     Error_Handler();
 608:Src/main.c    ****   }
 609:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 610:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 611:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 612:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 613:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 614:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 615:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 616:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 617:Src/main.c    ****   {
 618:Src/main.c    ****     Error_Handler();
 619:Src/main.c    ****   }
 620:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 621:Src/main.c    **** 
 622:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 623:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 624:Src/main.c    **** 
 625:Src/main.c    **** }
 626:Src/main.c    **** 
 627:Src/main.c    **** /**
 628:Src/main.c    ****  * @brief GPIO Initialization Function
 629:Src/main.c    ****  * @param None
 630:Src/main.c    ****  * @retval None
 631:Src/main.c    ****  */
 632:Src/main.c    **** static void MX_GPIO_Init(void)
 633:Src/main.c    **** {
  26              		.loc 1 633 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 634:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 634 2 view .LVU1
  39              		.loc 1 634 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 635:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 636:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 637:Src/main.c    **** 
 638:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 639:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 639 2 is_stmt 1 view .LVU3
  46              	.LBB11:
ARM GAS  /tmp/cc4ejHWS.s 			page 13


  47              		.loc 1 639 2 view .LVU4
  48              		.loc 1 639 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 639 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 639 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE11:
  62              		.loc 1 639 2 view .LVU8
 640:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 641:Src/main.c    **** 
 642:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 643:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 643 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
 644:Src/main.c    **** 
 645:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 646:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 646 2 view .LVU10
  72              		.loc 1 646 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 647:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 647 2 is_stmt 1 view .LVU12
  76              		.loc 1 647 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 648:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 648 2 is_stmt 1 view .LVU14
  79              		.loc 1 648 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 649:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 649 2 is_stmt 1 view .LVU16
  83              		.loc 1 649 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 650:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 650 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 651:Src/main.c    **** 
 652:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 653:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
ARM GAS  /tmp/cc4ejHWS.s 			page 14


 654:Src/main.c    **** }
  90              		.loc 1 654 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE57:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 80 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 80 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 83 5 is_stmt 1 view .LVU22
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 83 22 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 131              		.loc 1 83 22 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  88:Src/main.c    **** }
 137              		.loc 1 88 5 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
ARM GAS  /tmp/cc4ejHWS.s 			page 15


  89:Src/main.c    **** 
 142              		.loc 1 89 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  89:Src/main.c    **** 
 146              		.loc 1 89 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  96:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 96 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 97 2 view .LVU29
 177              	.LBB12:
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 97 2 view .LVU30
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 97 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 97 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 97 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE12:
ARM GAS  /tmp/cc4ejHWS.s 			page 16


  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 97 2 view .LVU34
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 98 2 view .LVU35
 195              	.LBB13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 98 2 view .LVU36
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 98 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 98 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 98 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 98 2 view .LVU40
  99:Src/main.c    **** 
 211              		.loc 1 99 5 view .LVU41
 212              	.LBB14:
  99:Src/main.c    **** 
 213              		.loc 1 99 5 view .LVU42
  99:Src/main.c    **** 
 214              		.loc 1 99 5 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 
 220              		.loc 1 99 5 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
  99:Src/main.c    **** 
 224              		.loc 1 99 5 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
 226              	.LBE14:
  99:Src/main.c    **** 
 227              		.loc 1 99 5 view .LVU46
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 102 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
 103:Src/main.c    **** 
 234              		.loc 1 103 2 view .LVU48
ARM GAS  /tmp/cc4ejHWS.s 			page 17


 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 106 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 107 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 108 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 258              		.loc 1 109 2 view .LVU52
 259 006e 2100     		movs	r1, r4
 260 0070 4C31     		adds	r1, r1, #76
 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 110:Src/main.c    **** 
 264              		.loc 1 110 2 view .LVU53
 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 113 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 114 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 115 2 view .LVU56
 283 0096 2100     		movs	r1, r4
ARM GAS  /tmp/cc4ejHWS.s 			page 18


 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 116 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 117:Src/main.c    **** 
 294              		.loc 1 117 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 120 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 121:Src/main.c    **** 
 306              		.loc 1 121 2 view .LVU60
 307 00be 2100     		movs	r1, r4
 308 00c0 1C31     		adds	r1, r1, #28
 309 00c2 A069     		ldr	r0, [r4, #24]
 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 124 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 125:Src/main.c    **** }
 318              		.loc 1 125 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL23:
 126:Src/main.c    **** 
 324              		.loc 1 126 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
ARM GAS  /tmp/cc4ejHWS.s 			page 19


 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 131:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 131 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 362              		.loc 1 132 2 view .LVU65
 363              	.LBB15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 132 2 view .LVU66
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 132 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 132 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 132 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 132 2 view .LVU70
 133:Src/main.c    **** 
 380              		.loc 1 133 2 view .LVU71
 133:Src/main.c    **** 
 381              		.loc 1 133 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 133:Src/main.c    **** 
ARM GAS  /tmp/cc4ejHWS.s 			page 20


 383              		.loc 1 133 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 136 2 is_stmt 1 view .LVU74
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 136 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 136 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 137:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 137 2 is_stmt 1 view .LVU77
 137:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 137 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 137:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 137 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 137:Src/main.c    **** 												//use with the BT adapter
 403              		.loc 1 137 14 view .LVU80
 404 0034 E060     		str	r0, [r4, #12]
 141:Src/main.c    **** 
 405              		.loc 1 141 2 is_stmt 1 view .LVU81
 141:Src/main.c    **** 
 406              		.loc 1 141 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 141:Src/main.c    **** 
 408              		.loc 1 141 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 144:Src/main.c    **** 
 412              		.loc 1 144 2 is_stmt 1 view .LVU84
 144:Src/main.c    **** 
 413              		.loc 1 144 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 144:Src/main.c    **** 
 415              		.loc 1 144 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 147:Src/main.c    **** 
 419              		.loc 1 147 2 is_stmt 1 view .LVU87
 147:Src/main.c    **** 
 420              		.loc 1 147 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
 147:Src/main.c    **** 
 422              		.loc 1 147 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
ARM GAS  /tmp/cc4ejHWS.s 			page 21


 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 150:Src/main.c    **** }
 426              		.loc 1 150 2 is_stmt 1 view .LVU90
 150:Src/main.c    **** }
 427              		.loc 1 150 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 150:Src/main.c    **** }
 429              		.loc 1 150 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 151:Src/main.c    **** 
 433              		.loc 1 151 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
 448              		.global	USART_SendChar
 449              		.syntax unified
 450              		.code	16
 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 158:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 158 32 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 159:Src/main.c    **** 		;
 462              		.loc 1 159 8 discriminator 1 view .LVU95
 159:Src/main.c    **** 		;
 463              		.loc 1 159 16 is_stmt 0 discriminator 1 view .LVU96
 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 159:Src/main.c    **** 		;
 466              		.loc 1 159 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 162:Src/main.c    **** }
 469              		.loc 1 162 2 is_stmt 1 view .LVU98
 162:Src/main.c    **** }
 470              		.loc 1 162 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
ARM GAS  /tmp/cc4ejHWS.s 			page 22


 163:Src/main.c    **** 
 473              		.loc 1 163 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 170:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 170 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 170:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 170 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 171 2 is_stmt 1 view .LVU103
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 505              		.loc 1 171 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 172:Src/main.c    **** 		p_string++;
 509              		.loc 1 172 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 173:Src/main.c    **** 	}
 512              		.loc 1 173 3 view .LVU106
 173:Src/main.c    **** 	}
 513              		.loc 1 173 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 171 18 is_stmt 1 view .LVU108
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 171 8 is_stmt 0 view .LVU109
 519 000c 2078     		ldrb	r0, [r4]
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 171 18 view .LVU110
ARM GAS  /tmp/cc4ejHWS.s 			page 23


 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 175:Src/main.c    **** }
 523              		.loc 1 175 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 176:Src/main.c    **** 
 526              		.loc 1 176 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 176:Src/main.c    **** 
 529              		.loc 1 176 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
 546              	.LFB48:
 181:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 547              		.loc 1 181 20 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 182 2 view .LVU115
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 182 10 is_stmt 0 view .LVU116
 560 0004 094B     		ldr	r3, .L22
 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 183:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 183 2 is_stmt 1 view .LVU117
 567 0010 0748     		ldr	r0, .L22+4
 568 0012 0322     		movs	r2, #3
 569 0014 0021     		movs	r1, #0
 570 0016 FFF7FEFF 		bl	memset
 571              	.LVL33:
ARM GAS  /tmp/cc4ejHWS.s 			page 24


 184:Src/main.c    **** 	USART_SendString(prompt);
 572              		.loc 1 184 2 view .LVU118
 184:Src/main.c    **** 	USART_SendString(prompt);
 573              		.loc 1 184 18 is_stmt 0 view .LVU119
 574 001a 064B     		ldr	r3, .L22+8
 575 001c 0022     		movs	r2, #0
 576 001e 1A70     		strb	r2, [r3]
 185:Src/main.c    **** }
 577              		.loc 1 185 2 is_stmt 1 view .LVU120
 578 0020 6846     		mov	r0, sp
 579 0022 FFF7FEFF 		bl	USART_SendString
 580              	.LVL34:
 186:Src/main.c    **** 
 581              		.loc 1 186 1 is_stmt 0 view .LVU121
 582 0026 03B0     		add	sp, sp, #12
 583              		@ sp needed
 584 0028 00BD     		pop	{pc}
 585              	.L23:
 586 002a C046     		.align	2
 587              	.L22:
 588 002c 00000000 		.word	.LC21
 589 0030 00000000 		.word	command
 590 0034 00000000 		.word	incomingCommand
 591              		.cfi_endproc
 592              	.LFE48:
 594              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 595              		.align	2
 596              	.LC25:
 597 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 597      616E6420 
 597      746F6F20 
 597      6C6F6E67 
 597      210A00
 598              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 599              		.align	1
 600              		.global	USART3_4_IRQHandler
 601              		.syntax unified
 602              		.code	16
 603              		.thumb_func
 605              	USART3_4_IRQHandler:
 606              	.LFB49:
 188:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 607              		.loc 1 188 27 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 24
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 30B5     		push	{r4, r5, lr}
 612              	.LCFI11:
 613              		.cfi_def_cfa_offset 12
 614              		.cfi_offset 4, -12
 615              		.cfi_offset 5, -8
 616              		.cfi_offset 14, -4
 617 0002 87B0     		sub	sp, sp, #28
 618              	.LCFI12:
 619              		.cfi_def_cfa_offset 40
 189:Src/main.c    **** 	incomingCommand = 1;
 620              		.loc 1 189 2 view .LVU123
ARM GAS  /tmp/cc4ejHWS.s 			page 25


 189:Src/main.c    **** 	incomingCommand = 1;
 621              		.loc 1 189 10 is_stmt 0 view .LVU124
 622 0004 01AA     		add	r2, sp, #4
 623 0006 1B4B     		ldr	r3, .L32
 624 0008 1800     		movs	r0, r3
 625 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 626 000c 38C2     		stmia	r2!, {r3, r4, r5}
 627 000e 0368     		ldr	r3, [r0]
 628 0010 1360     		str	r3, [r2]
 629 0012 8388     		ldrh	r3, [r0, #4]
 630 0014 9380     		strh	r3, [r2, #4]
 631 0016 8379     		ldrb	r3, [r0, #6]
 632 0018 9371     		strb	r3, [r2, #6]
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 633              		.loc 1 190 2 is_stmt 1 view .LVU125
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 634              		.loc 1 190 18 is_stmt 0 view .LVU126
 635 001a 174B     		ldr	r3, .L32+4
 636 001c 0122     		movs	r2, #1
 637 001e 1A70     		strb	r2, [r3]
 191:Src/main.c    **** 		;
 638              		.loc 1 191 2 is_stmt 1 view .LVU127
 639              	.L25:
 191:Src/main.c    **** 		;
 640              		.loc 1 191 8 discriminator 1 view .LVU128
 191:Src/main.c    **** 		;
 641              		.loc 1 191 16 is_stmt 0 discriminator 1 view .LVU129
 642 0020 164B     		ldr	r3, .L32+8
 643 0022 DB69     		ldr	r3, [r3, #28]
 191:Src/main.c    **** 		;
 644              		.loc 1 191 8 discriminator 1 view .LVU130
 645 0024 9B06     		lsls	r3, r3, #26
 646 0026 FBD5     		bpl	.L25
 193:Src/main.c    **** 		if(command[1]){
 647              		.loc 1 193 2 is_stmt 1 view .LVU131
 193:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 193 12 is_stmt 0 view .LVU132
 649 0028 154B     		ldr	r3, .L32+12
 650 002a 1B78     		ldrb	r3, [r3]
 193:Src/main.c    **** 		if(command[1]){
 651              		.loc 1 193 4 view .LVU133
 652 002c 002B     		cmp	r3, #0
 653 002e 19D0     		beq	.L26
 194:Src/main.c    **** 			if(command[2]){
 654              		.loc 1 194 3 is_stmt 1 view .LVU134
 194:Src/main.c    **** 			if(command[2]){
 655              		.loc 1 194 13 is_stmt 0 view .LVU135
 656 0030 134B     		ldr	r3, .L32+12
 657 0032 5B78     		ldrb	r3, [r3, #1]
 194:Src/main.c    **** 			if(command[2]){
 658              		.loc 1 194 5 view .LVU136
 659 0034 002B     		cmp	r3, #0
 660 0036 0FD0     		beq	.L27
 195:Src/main.c    **** 				USART_SendString(err);
 661              		.loc 1 195 4 is_stmt 1 view .LVU137
 195:Src/main.c    **** 				USART_SendString(err);
 662              		.loc 1 195 14 is_stmt 0 view .LVU138
ARM GAS  /tmp/cc4ejHWS.s 			page 26


 663 0038 114B     		ldr	r3, .L32+12
 664 003a 9B78     		ldrb	r3, [r3, #2]
 195:Src/main.c    **** 				USART_SendString(err);
 665              		.loc 1 195 6 view .LVU139
 666 003c 002B     		cmp	r3, #0
 667 003e 05D1     		bne	.L31
 200:Src/main.c    **** 		}
 668              		.loc 1 200 5 is_stmt 1 view .LVU140
 200:Src/main.c    **** 		}
 669              		.loc 1 200 24 is_stmt 0 view .LVU141
 670 0040 0E4B     		ldr	r3, .L32+8
 671 0042 9B8C     		ldrh	r3, [r3, #36]
 200:Src/main.c    **** 		}
 672              		.loc 1 200 16 view .LVU142
 673 0044 DBB2     		uxtb	r3, r3
 674 0046 0E4A     		ldr	r2, .L32+12
 675 0048 9370     		strb	r3, [r2, #2]
 676 004a 10E0     		b	.L24
 677              	.L31:
 196:Src/main.c    **** 				ClearCommand();
 678              		.loc 1 196 5 is_stmt 1 view .LVU143
 679 004c 01A8     		add	r0, sp, #4
 680 004e FFF7FEFF 		bl	USART_SendString
 681              	.LVL35:
 197:Src/main.c    **** 			}
 682              		.loc 1 197 5 view .LVU144
 683 0052 FFF7FEFF 		bl	ClearCommand
 684              	.LVL36:
 685 0056 0AE0     		b	.L24
 686              	.L27:
 203:Src/main.c    **** 	else
 687              		.loc 1 203 4 view .LVU145
 203:Src/main.c    **** 	else
 688              		.loc 1 203 23 is_stmt 0 view .LVU146
 689 0058 084B     		ldr	r3, .L32+8
 690 005a 9B8C     		ldrh	r3, [r3, #36]
 203:Src/main.c    **** 	else
 691              		.loc 1 203 15 view .LVU147
 692 005c DBB2     		uxtb	r3, r3
 693 005e 084A     		ldr	r2, .L32+12
 694 0060 5370     		strb	r3, [r2, #1]
 695 0062 04E0     		b	.L24
 696              	.L26:
 205:Src/main.c    **** }
 697              		.loc 1 205 3 is_stmt 1 view .LVU148
 205:Src/main.c    **** }
 698              		.loc 1 205 22 is_stmt 0 view .LVU149
 699 0064 054B     		ldr	r3, .L32+8
 700 0066 9B8C     		ldrh	r3, [r3, #36]
 205:Src/main.c    **** }
 701              		.loc 1 205 14 view .LVU150
 702 0068 DBB2     		uxtb	r3, r3
 703 006a 054A     		ldr	r2, .L32+12
 704 006c 1370     		strb	r3, [r2]
 705              	.L24:
 206:Src/main.c    **** 
 706              		.loc 1 206 1 view .LVU151
ARM GAS  /tmp/cc4ejHWS.s 			page 27


 707 006e 07B0     		add	sp, sp, #28
 708              		@ sp needed
 709 0070 30BD     		pop	{r4, r5, pc}
 710              	.L33:
 711 0072 C046     		.align	2
 712              	.L32:
 713 0074 00000000 		.word	.LC25
 714 0078 00000000 		.word	incomingCommand
 715 007c 00480040 		.word	1073760256
 716 0080 00000000 		.word	command
 717              		.cfi_endproc
 718              	.LFE49:
 720              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 721              		.align	2
 722              	.LC29:
 723 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 723      79657420 
 723      696D706C 
 723      656D656E 
 723      7465640A 
 724              		.section	.text.Log,"ax",%progbits
 725              		.align	1
 726              		.global	Log
 727              		.syntax unified
 728              		.code	16
 729              		.thumb_func
 731              	Log:
 732              	.LFB50:
 208:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 733              		.loc 1 208 11 is_stmt 1 view -0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737 0000 10B5     		push	{r4, lr}
 738              	.LCFI13:
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 4, -8
 741              		.cfi_offset 14, -4
 209:Src/main.c    **** 	USART_SendString(err);
 742              		.loc 1 209 2 view .LVU153
 743              	.LVL37:
 210:Src/main.c    **** }
 744              		.loc 1 210 2 view .LVU154
 745 0002 0248     		ldr	r0, .L35
 746 0004 FFF7FEFF 		bl	USART_SendString
 747              	.LVL38:
 211:Src/main.c    **** 
 748              		.loc 1 211 1 is_stmt 0 view .LVU155
 749              		@ sp needed
 750 0008 10BD     		pop	{r4, pc}
 751              	.L36:
 752 000a C046     		.align	2
 753              	.L35:
 754 000c 00000000 		.word	.LC29
 755              		.cfi_endproc
 756              	.LFE50:
 758              		.section	.text.Proceed,"ax",%progbits
ARM GAS  /tmp/cc4ejHWS.s 			page 28


 759              		.align	1
 760              		.global	Proceed
 761              		.syntax unified
 762              		.code	16
 763              		.thumb_func
 765              	Proceed:
 766              	.LFB51:
 213:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 767              		.loc 1 213 15 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771 0000 10B5     		push	{r4, lr}
 772              	.LCFI14:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 4, -8
 775              		.cfi_offset 14, -4
 214:Src/main.c    **** 	USART_SendString(err);
 776              		.loc 1 214 2 view .LVU157
 777              	.LVL39:
 215:Src/main.c    **** }
 778              		.loc 1 215 2 view .LVU158
 779 0002 0248     		ldr	r0, .L38
 780 0004 FFF7FEFF 		bl	USART_SendString
 781              	.LVL40:
 216:Src/main.c    **** 
 782              		.loc 1 216 1 is_stmt 0 view .LVU159
 783              		@ sp needed
 784 0008 10BD     		pop	{r4, pc}
 785              	.L39:
 786 000a C046     		.align	2
 787              	.L38:
 788 000c 00000000 		.word	.LC29
 789              		.cfi_endproc
 790              	.LFE51:
 792              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 793              		.align	2
 794              	.LC47:
 795 0000 696E6465 		.ascii	"indefinitely\012\000"
 795      66696E69 
 795      74656C79 
 795      0A00
 796 000e 0000     		.align	2
 797              	.LC49:
 798 0010 25640A00 		.ascii	"%d\012\000"
 799              		.align	2
 800              	.LC32:
 801 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 801      523A2049 
 801      6E76616C 
 801      69642063 
 801      6F6D6D61 
 802 002d 000000   		.align	2
 803              	.LC34:
 804 0030 4D6F7669 		.ascii	"Moving forward \000"
 804      6E672066 
 804      6F727761 
ARM GAS  /tmp/cc4ejHWS.s 			page 29


 804      72642000 
 805              		.align	2
 806              	.LC36:
 807 0040 5475726E 		.ascii	"Turning left \000"
 807      696E6720 
 807      6C656674 
 807      2000
 808 004e 0000     		.align	2
 809              	.LC38:
 810 0050 5475726E 		.ascii	"Turning right \000"
 810      696E6720 
 810      72696768 
 810      742000
 811 005f 00       		.align	2
 812              	.LC40:
 813 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 813      696E6720 
 813      73656E73 
 813      6F722064 
 813      6174610A 
 814 0075 000000   		.align	2
 815              	.LC42:
 816 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 816      72696E67 
 816      20617574 
 816      6F6E6F6D 
 816      6F757320 
 817 0095 000000   		.align	2
 818              	.LC44:
 819 0098 53746F70 		.ascii	"Stopping all motors!\012\000"
 819      70696E67 
 819      20616C6C 
 819      206D6F74 
 819      6F727321 
 820              		.section	.text.ProcessCommand,"ax",%progbits
 821              		.align	1
 822              		.global	ProcessCommand
 823              		.syntax unified
 824              		.code	16
 825              		.thumb_func
 827              	ProcessCommand:
 828              	.LVL41:
 829              	.LFB52:
 218:Src/main.c    **** 	uint32_t left_motor_pin;
 830              		.loc 1 218 57 is_stmt 1 view -0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 184
 833              		@ frame_needed = 0, uses_anonymous_args = 0
 218:Src/main.c    **** 	uint32_t left_motor_pin;
 834              		.loc 1 218 57 is_stmt 0 view .LVU161
 835 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 836              	.LCFI15:
 837              		.cfi_def_cfa_offset 20
 838              		.cfi_offset 4, -20
 839              		.cfi_offset 5, -16
 840              		.cfi_offset 6, -12
 841              		.cfi_offset 7, -8
ARM GAS  /tmp/cc4ejHWS.s 			page 30


 842              		.cfi_offset 14, -4
 843 0002 AFB0     		sub	sp, sp, #188
 844              	.LCFI16:
 845              		.cfi_def_cfa_offset 208
 846 0004 0400     		movs	r4, r0
 847 0006 0D00     		movs	r5, r1
 219:Src/main.c    **** 	uint32_t right_motor_pin;
 848              		.loc 1 219 2 is_stmt 1 view .LVU162
 220:Src/main.c    **** 	int32_t CH1_DC = 65535;
 849              		.loc 1 220 2 view .LVU163
 221:Src/main.c    **** 
 850              		.loc 1 221 2 view .LVU164
 851              	.LVL42:
 223:Src/main.c    **** 
 852              		.loc 1 223 2 view .LVU165
 223:Src/main.c    **** 
 853              		.loc 1 223 10 is_stmt 0 view .LVU166
 854 0008 27A9     		add	r1, sp, #156
 855              	.LVL43:
 223:Src/main.c    **** 
 856              		.loc 1 223 10 view .LVU167
 857 000a 5C4B     		ldr	r3, .L57
 858 000c 0A00     		movs	r2, r1
 859 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 860 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 861              	.LVL44:
 223:Src/main.c    **** 
 862              		.loc 1 223 10 view .LVU168
 863 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 864 0014 43C2     		stmia	r2!, {r0, r1, r6}
 865 0016 1B78     		ldrb	r3, [r3]
 866 0018 1370     		strb	r3, [r2]
 225:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 867              		.loc 1 225 2 is_stmt 1 view .LVU169
 225:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 868              		.loc 1 225 10 is_stmt 0 view .LVU170
 869 001a 23AA     		add	r2, sp, #140
 870 001c 584B     		ldr	r3, .L57+4
 871 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 872 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 873 0022 1B68     		ldr	r3, [r3]
 874 0024 1360     		str	r3, [r2]
 226:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 875              		.loc 1 226 2 is_stmt 1 view .LVU171
 226:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 876              		.loc 1 226 10 is_stmt 0 view .LVU172
 877 0026 1FAA     		add	r2, sp, #124
 878 0028 564B     		ldr	r3, .L57+8
 879 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 880 002c C1C2     		stmia	r2!, {r0, r6, r7}
 881 002e 1B88     		ldrh	r3, [r3]
 882 0030 1380     		strh	r3, [r2]
 227:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 883              		.loc 1 227 2 is_stmt 1 view .LVU173
 227:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 884              		.loc 1 227 10 is_stmt 0 view .LVU174
 885 0032 1BAA     		add	r2, sp, #108
ARM GAS  /tmp/cc4ejHWS.s 			page 31


 886 0034 544B     		ldr	r3, .L57+12
 887 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 888 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 889 003a 1100     		movs	r1, r2
 890 003c 1A88     		ldrh	r2, [r3]
 891 003e 0A80     		strh	r2, [r1]
 892 0040 9B78     		ldrb	r3, [r3, #2]
 893 0042 8B70     		strb	r3, [r1, #2]
 228:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 894              		.loc 1 228 2 is_stmt 1 view .LVU175
 228:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 895              		.loc 1 228 10 is_stmt 0 view .LVU176
 896 0044 15A9     		add	r1, sp, #84
 897 0046 514B     		ldr	r3, .L57+16
 898 0048 0A00     		movs	r2, r1
 899 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 900 004c C1C2     		stmia	r2!, {r0, r6, r7}
 901 004e 03CB     		ldmia	r3!, {r0, r1}
 902 0050 03C2     		stmia	r2!, {r0, r1}
 903 0052 1B78     		ldrb	r3, [r3]
 904 0054 1370     		strb	r3, [r2]
 229:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 905              		.loc 1 229 2 is_stmt 1 view .LVU177
 229:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 906              		.loc 1 229 10 is_stmt 0 view .LVU178
 907 0056 0DA9     		add	r1, sp, #52
 908 0058 4D4B     		ldr	r3, .L57+20
 909 005a 0A00     		movs	r2, r1
 910 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 911 005e C1C2     		stmia	r2!, {r0, r6, r7}
 912 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 913 0062 43C2     		stmia	r2!, {r0, r1, r6}
 914 0064 1968     		ldr	r1, [r3]
 915 0066 1160     		str	r1, [r2]
 916 0068 1B79     		ldrb	r3, [r3, #4]
 917 006a 1371     		strb	r3, [r2, #4]
 230:Src/main.c    **** 
 918              		.loc 1 230 2 is_stmt 1 view .LVU179
 230:Src/main.c    **** 
 919              		.loc 1 230 10 is_stmt 0 view .LVU180
 920 006c 07A9     		add	r1, sp, #28
 921 006e 494B     		ldr	r3, .L57+24
 922 0070 0A00     		movs	r2, r1
 923 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 924 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 925 0076 03CB     		ldmia	r3!, {r0, r1}
 926 0078 03C2     		stmia	r2!, {r0, r1}
 927 007a 1B88     		ldrh	r3, [r3]
 928 007c 1380     		strh	r3, [r2]
 232:Src/main.c    **** 
 929              		.loc 1 232 2 is_stmt 1 view .LVU181
 232:Src/main.c    **** 
 930              		.loc 1 232 15 is_stmt 0 view .LVU182
 931 007e 06AB     		add	r3, sp, #24
 932 0080 0022     		movs	r2, #0
 933 0082 1A80     		strh	r2, [r3]
 234:Src/main.c    **** 	uint8_t part2[15];
ARM GAS  /tmp/cc4ejHWS.s 			page 32


 934              		.loc 1 234 2 is_stmt 1 view .LVU183
 235:Src/main.c    **** 	uint8_t zero = 0;
 935              		.loc 1 235 2 view .LVU184
 236:Src/main.c    **** 	memcpy(part2, &zero, 15);
 936              		.loc 1 236 2 view .LVU185
 236:Src/main.c    **** 	memcpy(part2, &zero, 15);
 937              		.loc 1 236 10 is_stmt 0 view .LVU186
 938 0084 6B46     		mov	r3, sp
 939 0086 D91D     		adds	r1, r3, #7
 940 0088 0023     		movs	r3, #0
 941 008a 0B70     		strb	r3, [r1]
 237:Src/main.c    **** 
 942              		.loc 1 237 2 is_stmt 1 view .LVU187
 943 008c 0F32     		adds	r2, r2, #15
 944 008e 02A8     		add	r0, sp, #8
 945 0090 FFF7FEFF 		bl	memcpy
 946              	.LVL45:
 239:Src/main.c    **** 		case 'w':
 947              		.loc 1 239 2 view .LVU188
 948 0094 2300     		movs	r3, r4
 949 0096 613B     		subs	r3, r3, #97
 950 0098 DAB2     		uxtb	r2, r3
 951 009a 172A     		cmp	r2, #23
 952 009c 53D8     		bhi	.L41
 953 009e 9300     		lsls	r3, r2, #2
 954 00a0 3D4A     		ldr	r2, .L57+28
 955 00a2 D358     		ldr	r3, [r2, r3]
 956 00a4 9F46     		mov	pc, r3
 957              		.section	.rodata.ProcessCommand,"a",%progbits
 958              		.align	2
 959              	.L43:
 960 0000 A6000000 		.word	.L48
 961 0004 46010000 		.word	.L41
 962 0008 46010000 		.word	.L41
 963 000c 04010000 		.word	.L47
 964 0010 46010000 		.word	.L41
 965 0014 46010000 		.word	.L41
 966 0018 46010000 		.word	.L41
 967 001c 46010000 		.word	.L41
 968 0020 46010000 		.word	.L41
 969 0024 46010000 		.word	.L41
 970 0028 46010000 		.word	.L41
 971 002c 0E010000 		.word	.L46
 972 0030 46010000 		.word	.L41
 973 0034 46010000 		.word	.L41
 974 0038 46010000 		.word	.L41
 975 003c 1E010000 		.word	.L45
 976 0040 46010000 		.word	.L41
 977 0044 46010000 		.word	.L41
 978 0048 46010000 		.word	.L41
 979 004c 46010000 		.word	.L41
 980 0050 46010000 		.word	.L41
 981 0054 46010000 		.word	.L41
 982 0058 52010000 		.word	.L54
 983 005c 2E010000 		.word	.L42
 984              		.section	.text.ProcessCommand
 985              	.L48:
ARM GAS  /tmp/cc4ejHWS.s 			page 33


 245:Src/main.c    **** 			motorcmd.dir = LEFT;
 986              		.loc 1 245 4 view .LVU189
 987              	.LVL46:
 246:Src/main.c    **** 			break;
 988              		.loc 1 246 4 view .LVU190
 246:Src/main.c    **** 			break;
 989              		.loc 1 246 17 is_stmt 0 view .LVU191
 990 00a6 06AB     		add	r3, sp, #24
 991 00a8 0122     		movs	r2, #1
 992 00aa 1A70     		strb	r2, [r3]
 247:Src/main.c    **** 		case 'd':
 993              		.loc 1 247 4 is_stmt 1 view .LVU192
 245:Src/main.c    **** 			motorcmd.dir = LEFT;
 994              		.loc 1 245 10 is_stmt 0 view .LVU193
 995 00ac 1FAE     		add	r6, sp, #124
 996              	.LVL47:
 997              	.L44:
 279:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 998              		.loc 1 279 2 is_stmt 1 view .LVU194
 279:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 999              		.loc 1 279 4 is_stmt 0 view .LVU195
 1000 00ae 302D     		cmp	r5, #48
 1001 00b0 51D0     		beq	.L55
 1002              	.L50:
 283:Src/main.c    **** 		USART_SendString(err);
 1003              		.loc 1 283 7 is_stmt 1 view .LVU196
 283:Src/main.c    **** 		USART_SendString(err);
 1004              		.loc 1 283 25 is_stmt 0 view .LVU197
 1005 00b2 2B00     		movs	r3, r5
 1006 00b4 313B     		subs	r3, r3, #49
 1007 00b6 DBB2     		uxtb	r3, r3
 283:Src/main.c    **** 		USART_SendString(err);
 1008              		.loc 1 283 9 view .LVU198
 1009 00b8 082B     		cmp	r3, #8
 1010 00ba 58D8     		bhi	.L56
 1011              	.LBB16:
 289:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1012              		.loc 1 289 3 is_stmt 1 view .LVU199
 289:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1013              		.loc 1 289 11 is_stmt 0 view .LVU200
 1014 00bc 1424     		movs	r4, #20
 1015 00be 6C43     		muls	r4, r5
 1016 00c0 4034     		adds	r4, r4, #64
 1017 00c2 E4B2     		uxtb	r4, r4
 1018              	.LVL48:
 290:Src/main.c    **** 		motorcmd.amount = dist;
 1019              		.loc 1 290 3 is_stmt 1 view .LVU201
 1020 00c4 3549     		ldr	r1, .L57+32
 1021 00c6 2200     		movs	r2, r4
 1022 00c8 02A8     		add	r0, sp, #8
 1023 00ca FFF7FEFF 		bl	sprintf
 1024              	.LVL49:
 291:Src/main.c    **** 	}
 1025              		.loc 1 291 3 view .LVU202
 291:Src/main.c    **** 	}
 1026              		.loc 1 291 19 is_stmt 0 view .LVU203
 1027 00ce 06AB     		add	r3, sp, #24
ARM GAS  /tmp/cc4ejHWS.s 			page 34


 1028 00d0 5C70     		strb	r4, [r3, #1]
 1029              	.LVL50:
 1030              	.L51:
 291:Src/main.c    **** 	}
 1031              		.loc 1 291 19 view .LVU204
 1032              	.LBE16:
 295:Src/main.c    **** 	USART_SendString(part2);
 1033              		.loc 1 295 2 is_stmt 1 view .LVU205
 1034 00d2 3000     		movs	r0, r6
 1035 00d4 FFF7FEFF 		bl	USART_SendString
 1036              	.LVL51:
 296:Src/main.c    **** 
 1037              		.loc 1 296 2 view .LVU206
 1038 00d8 02A8     		add	r0, sp, #8
 1039 00da FFF7FEFF 		bl	USART_SendString
 1040              	.LVL52:
 298:Src/main.c    **** 	HAL_Delay(1000);
 1041              		.loc 1 298 2 view .LVU207
 298:Src/main.c    **** 	HAL_Delay(1000);
 1042              		.loc 1 298 13 is_stmt 0 view .LVU208
 1043 00de 8024     		movs	r4, #128
 1044 00e0 E405     		lsls	r4, r4, #23
 1045 00e2 2F4B     		ldr	r3, .L57+36
 1046 00e4 6363     		str	r3, [r4, #52]
 299:Src/main.c    **** 	TIM2->CCR1 = 0;
 1047              		.loc 1 299 2 is_stmt 1 view .LVU209
 1048 00e6 FA20     		movs	r0, #250
 1049 00e8 8000     		lsls	r0, r0, #2
 1050 00ea FFF7FEFF 		bl	HAL_Delay
 1051              	.LVL53:
 300:Src/main.c    **** 
 1052              		.loc 1 300 2 view .LVU210
 300:Src/main.c    **** 
 1053              		.loc 1 300 13 is_stmt 0 view .LVU211
 1054 00ee 0023     		movs	r3, #0
 1055 00f0 6363     		str	r3, [r4, #52]
 302:Src/main.c    **** 	USART_SendString(result);
 1056              		.loc 1 302 2 is_stmt 1 view .LVU212
 302:Src/main.c    **** 	USART_SendString(result);
 1057              		.loc 1 302 20 is_stmt 0 view .LVU213
 1058 00f2 06A8     		add	r0, sp, #24
 1059 00f4 FFF7FEFF 		bl	MoveMotors
 1060              	.LVL54:
 303:Src/main.c    **** 
 1061              		.loc 1 303 2 is_stmt 1 view .LVU214
 1062 00f8 FFF7FEFF 		bl	USART_SendString
 1063              	.LVL55:
 305:Src/main.c    **** 
 1064              		.loc 1 305 2 view .LVU215
 1065 00fc FFF7FEFF 		bl	ClearCommand
 1066              	.LVL56:
 1067              	.L40:
 324:Src/main.c    **** 
 1068              		.loc 1 324 1 is_stmt 0 view .LVU216
 1069 0100 2FB0     		add	sp, sp, #188
 1070              		@ sp needed
 1071 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/cc4ejHWS.s 			page 35


 1072              	.L47:
 249:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1073              		.loc 1 249 4 is_stmt 1 view .LVU217
 1074              	.LVL57:
 250:Src/main.c    **** 			break;
 1075              		.loc 1 250 4 view .LVU218
 250:Src/main.c    **** 			break;
 1076              		.loc 1 250 17 is_stmt 0 view .LVU219
 1077 0104 06AB     		add	r3, sp, #24
 1078 0106 0222     		movs	r2, #2
 1079 0108 1A70     		strb	r2, [r3]
 251:Src/main.c    **** 		case 'l':
 1080              		.loc 1 251 4 is_stmt 1 view .LVU220
 249:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1081              		.loc 1 249 10 is_stmt 0 view .LVU221
 1082 010a 1BAE     		add	r6, sp, #108
 1083              	.LVL58:
 251:Src/main.c    **** 		case 'l':
 1084              		.loc 1 251 4 view .LVU222
 1085 010c CFE7     		b	.L44
 1086              	.LVL59:
 1087              	.L46:
 253:Src/main.c    **** 			USART_SendString(part1);
 1088              		.loc 1 253 4 is_stmt 1 view .LVU223
 254:Src/main.c    **** 			Log();
 1089              		.loc 1 254 4 view .LVU224
 1090 010e 15A8     		add	r0, sp, #84
 1091              	.LVL60:
 254:Src/main.c    **** 			Log();
 1092              		.loc 1 254 4 is_stmt 0 view .LVU225
 1093 0110 FFF7FEFF 		bl	USART_SendString
 1094              	.LVL61:
 255:Src/main.c    **** 			ClearCommand();
 1095              		.loc 1 255 4 is_stmt 1 view .LVU226
 1096 0114 FFF7FEFF 		bl	Log
 1097              	.LVL62:
 256:Src/main.c    **** 			return;
 1098              		.loc 1 256 4 view .LVU227
 1099 0118 FFF7FEFF 		bl	ClearCommand
 1100              	.LVL63:
 257:Src/main.c    **** 		case 'p':
 1101              		.loc 1 257 4 view .LVU228
 1102 011c F0E7     		b	.L40
 1103              	.LVL64:
 1104              	.L45:
 259:Src/main.c    **** 			USART_SendString(part1);
 1105              		.loc 1 259 4 view .LVU229
 260:Src/main.c    **** 			Proceed();
 1106              		.loc 1 260 4 view .LVU230
 1107 011e 0DA8     		add	r0, sp, #52
 1108              	.LVL65:
 260:Src/main.c    **** 			Proceed();
 1109              		.loc 1 260 4 is_stmt 0 view .LVU231
 1110 0120 FFF7FEFF 		bl	USART_SendString
 1111              	.LVL66:
 261:Src/main.c    **** 			ClearCommand();
 1112              		.loc 1 261 4 is_stmt 1 view .LVU232
ARM GAS  /tmp/cc4ejHWS.s 			page 36


 1113 0124 FFF7FEFF 		bl	Proceed
 1114              	.LVL67:
 262:Src/main.c    **** 			return;
 1115              		.loc 1 262 4 view .LVU233
 1116 0128 FFF7FEFF 		bl	ClearCommand
 1117              	.LVL68:
 263:Src/main.c    **** 		case 'x':
 1118              		.loc 1 263 4 view .LVU234
 1119 012c E8E7     		b	.L40
 1120              	.LVL69:
 1121              	.L42:
 265:Src/main.c    **** 			USART_SendString(part1);
 1122              		.loc 1 265 4 view .LVU235
 266:Src/main.c    **** 			motorcmd.dir = OFF;
 1123              		.loc 1 266 4 view .LVU236
 1124 012e 07A8     		add	r0, sp, #28
 1125              	.LVL70:
 266:Src/main.c    **** 			motorcmd.dir = OFF;
 1126              		.loc 1 266 4 is_stmt 0 view .LVU237
 1127 0130 FFF7FEFF 		bl	USART_SendString
 1128              	.LVL71:
 267:Src/main.c    **** 			ClearCommand();
 1129              		.loc 1 267 4 is_stmt 1 view .LVU238
 267:Src/main.c    **** 			ClearCommand();
 1130              		.loc 1 267 17 is_stmt 0 view .LVU239
 1131 0134 06AC     		add	r4, sp, #24
 1132 0136 0423     		movs	r3, #4
 1133 0138 2370     		strb	r3, [r4]
 268:Src/main.c    **** 			MoveMotors(&motorcmd);
 1134              		.loc 1 268 4 is_stmt 1 view .LVU240
 1135 013a FFF7FEFF 		bl	ClearCommand
 1136              	.LVL72:
 269:Src/main.c    **** 			return;
 1137              		.loc 1 269 4 view .LVU241
 1138 013e 2000     		movs	r0, r4
 1139 0140 FFF7FEFF 		bl	MoveMotors
 1140              	.LVL73:
 270:Src/main.c    **** 		default:
 1141              		.loc 1 270 4 view .LVU242
 1142 0144 DCE7     		b	.L40
 1143              	.LVL74:
 1144              	.L41:
 272:Src/main.c    **** 			ClearCommand();
 1145              		.loc 1 272 4 view .LVU243
 1146 0146 27A8     		add	r0, sp, #156
 1147 0148 FFF7FEFF 		bl	USART_SendString
 1148              	.LVL75:
 273:Src/main.c    **** 			return;
 1149              		.loc 1 273 4 view .LVU244
 1150 014c FFF7FEFF 		bl	ClearCommand
 1151              	.LVL76:
 274:Src/main.c    **** 	}
 1152              		.loc 1 274 4 view .LVU245
 1153 0150 D6E7     		b	.L40
 1154              	.L54:
 239:Src/main.c    **** 		case 'w':
 1155              		.loc 1 239 2 is_stmt 0 view .LVU246
ARM GAS  /tmp/cc4ejHWS.s 			page 37


 1156 0152 23AE     		add	r6, sp, #140
 1157 0154 ABE7     		b	.L44
 1158              	.LVL77:
 1159              	.L55:
 279:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1160              		.loc 1 279 21 discriminator 1 view .LVU247
 1161 0156 772C     		cmp	r4, #119
 1162 0158 ABD1     		bne	.L50
 280:Src/main.c    **** 		motorcmd.amount = 0;
 1163              		.loc 1 280 3 is_stmt 1 view .LVU248
 1164 015a 02AA     		add	r2, sp, #8
 1165 015c 114B     		ldr	r3, .L57+40
 1166 015e 31CB     		ldmia	r3!, {r0, r4, r5}
 1167 0160 31C2     		stmia	r2!, {r0, r4, r5}
 1168 0162 1B88     		ldrh	r3, [r3]
 1169 0164 1380     		strh	r3, [r2]
 281:Src/main.c    **** 	}
 1170              		.loc 1 281 3 view .LVU249
 281:Src/main.c    **** 	}
 1171              		.loc 1 281 19 is_stmt 0 view .LVU250
 1172 0166 06AB     		add	r3, sp, #24
 1173 0168 0022     		movs	r2, #0
 1174 016a 5A70     		strb	r2, [r3, #1]
 1175 016c B1E7     		b	.L51
 1176              	.L56:
 284:Src/main.c    **** 		ClearCommand();
 1177              		.loc 1 284 3 is_stmt 1 view .LVU251
 1178 016e 27A8     		add	r0, sp, #156
 1179 0170 FFF7FEFF 		bl	USART_SendString
 1180              	.LVL78:
 285:Src/main.c    **** 		return;
 1181              		.loc 1 285 3 view .LVU252
 1182 0174 FFF7FEFF 		bl	ClearCommand
 1183              	.LVL79:
 286:Src/main.c    **** 	}
 1184              		.loc 1 286 3 view .LVU253
 1185 0178 C2E7     		b	.L40
 1186              	.L58:
 1187 017a C046     		.align	2
 1188              	.L57:
 1189 017c 14000000 		.word	.LC32
 1190 0180 30000000 		.word	.LC34
 1191 0184 40000000 		.word	.LC36
 1192 0188 50000000 		.word	.LC38
 1193 018c 60000000 		.word	.LC40
 1194 0190 78000000 		.word	.LC42
 1195 0194 98000000 		.word	.LC44
 1196 0198 00000000 		.word	.L43
 1197 019c 10000000 		.word	.LC49
 1198 01a0 FFFF0000 		.word	65535
 1199 01a4 00000000 		.word	.LC47
 1200              		.cfi_endproc
 1201              	.LFE52:
 1203              		.section	.text.GetDistance,"ax",%progbits
 1204              		.align	1
 1205              		.global	GetDistance
 1206              		.syntax unified
ARM GAS  /tmp/cc4ejHWS.s 			page 38


 1207              		.code	16
 1208              		.thumb_func
 1210              	GetDistance:
 1211              	.LFB53:
 364:Src/main.c    **** 
 1212              		.loc 1 364 1 view -0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 0
 1215              		@ frame_needed = 0, uses_anonymous_args = 0
 1216              		@ link register save eliminated.
 366:Src/main.c    **** 
 1217              		.loc 1 366 1 view .LVU255
 1218              		@ sp needed
 1219 0000 7047     		bx	lr
 1220              		.cfi_endproc
 1221              	.LFE53:
 1223              		.section	.text.Error_Handler,"ax",%progbits
 1224              		.align	1
 1225              		.global	Error_Handler
 1226              		.syntax unified
 1227              		.code	16
 1228              		.thumb_func
 1230              	Error_Handler:
 1231              	.LFB58:
 655:Src/main.c    **** 
 656:Src/main.c    **** /* USER CODE BEGIN 4 */
 657:Src/main.c    **** 
 658:Src/main.c    **** /* USER CODE END 4 */
 659:Src/main.c    **** 
 660:Src/main.c    **** /**
 661:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 662:Src/main.c    ****  * @retval None
 663:Src/main.c    ****  */
 664:Src/main.c    **** void Error_Handler(void)
 665:Src/main.c    **** {
 1232              		.loc 1 665 1 view -0
 1233              		.cfi_startproc
 1234              		@ Volatile: function does not return.
 1235              		@ args = 0, pretend = 0, frame = 0
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237              		@ link register save eliminated.
 666:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 667:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 668:Src/main.c    **** 	__disable_irq();
 1238              		.loc 1 668 2 view .LVU257
 1239              	.LBB17:
 1240              	.LBI17:
 1241              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/cc4ejHWS.s 			page 39


  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc4ejHWS.s 			page 40


  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4ejHWS.s 			page 41


 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1242              		.loc 2 140 27 view .LVU258
 1243              	.LBB18:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1244              		.loc 2 142 3 view .LVU259
 1245              		.syntax divided
 1246              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1247 0000 72B6     		cpsid i
 1248              	@ 0 "" 2
 1249              		.thumb
 1250              		.syntax unified
 1251              	.L61:
 1252              	.LBE18:
 1253              	.LBE17:
 669:Src/main.c    **** 	while (1)
 1254              		.loc 1 669 2 discriminator 1 view .LVU260
 670:Src/main.c    **** 	{
 671:Src/main.c    **** 	}
 1255              		.loc 1 671 2 discriminator 1 view .LVU261
 669:Src/main.c    **** 	while (1)
 1256              		.loc 1 669 8 discriminator 1 view .LVU262
 1257 0002 FEE7     		b	.L61
 1258              		.cfi_endproc
 1259              	.LFE58:
 1261              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1262              		.align	1
 1263              		.syntax unified
 1264              		.code	16
 1265              		.thumb_func
 1267              	MX_TIM1_Init:
 1268              	.LFB56:
 554:Src/main.c    **** 
 1269              		.loc 1 554 1 view -0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 88
 1272              		@ frame_needed = 0, uses_anonymous_args = 0
 1273 0000 00B5     		push	{lr}
 1274              	.LCFI17:
 1275              		.cfi_def_cfa_offset 4
 1276              		.cfi_offset 14, -4
ARM GAS  /tmp/cc4ejHWS.s 			page 42


 1277 0002 97B0     		sub	sp, sp, #92
 1278              	.LCFI18:
 1279              		.cfi_def_cfa_offset 96
 560:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1280              		.loc 1 560 3 view .LVU264
 560:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1281              		.loc 1 560 26 is_stmt 0 view .LVU265
 1282 0004 1022     		movs	r2, #16
 1283 0006 0021     		movs	r1, #0
 1284 0008 12A8     		add	r0, sp, #72
 1285 000a FFF7FEFF 		bl	memset
 1286              	.LVL80:
 561:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1287              		.loc 1 561 3 is_stmt 1 view .LVU266
 561:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1288              		.loc 1 561 27 is_stmt 0 view .LVU267
 1289 000e 0822     		movs	r2, #8
 1290 0010 0021     		movs	r1, #0
 1291 0012 10A8     		add	r0, sp, #64
 1292 0014 FFF7FEFF 		bl	memset
 1293              	.LVL81:
 562:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1294              		.loc 1 562 3 is_stmt 1 view .LVU268
 562:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1295              		.loc 1 562 22 is_stmt 0 view .LVU269
 1296 0018 1C22     		movs	r2, #28
 1297 001a 0021     		movs	r1, #0
 1298 001c 09A8     		add	r0, sp, #36
 1299 001e FFF7FEFF 		bl	memset
 1300              	.LVL82:
 563:Src/main.c    **** 
 1301              		.loc 1 563 3 is_stmt 1 view .LVU270
 563:Src/main.c    **** 
 1302              		.loc 1 563 34 is_stmt 0 view .LVU271
 1303 0022 2022     		movs	r2, #32
 1304 0024 0021     		movs	r1, #0
 1305 0026 01A8     		add	r0, sp, #4
 1306 0028 FFF7FEFF 		bl	memset
 1307              	.LVL83:
 568:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1308              		.loc 1 568 3 is_stmt 1 view .LVU272
 568:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1309              		.loc 1 568 18 is_stmt 0 view .LVU273
 1310 002c 3048     		ldr	r0, .L77
 1311 002e 314B     		ldr	r3, .L77+4
 1312 0030 0360     		str	r3, [r0]
 569:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1313              		.loc 1 569 3 is_stmt 1 view .LVU274
 569:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1314              		.loc 1 569 24 is_stmt 0 view .LVU275
 1315 0032 0023     		movs	r3, #0
 1316 0034 4360     		str	r3, [r0, #4]
 570:Src/main.c    ****   htim1.Init.Period = 65535;
 1317              		.loc 1 570 3 is_stmt 1 view .LVU276
 570:Src/main.c    ****   htim1.Init.Period = 65535;
 1318              		.loc 1 570 26 is_stmt 0 view .LVU277
 1319 0036 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/cc4ejHWS.s 			page 43


 571:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1320              		.loc 1 571 3 is_stmt 1 view .LVU278
 571:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1321              		.loc 1 571 21 is_stmt 0 view .LVU279
 1322 0038 2F4A     		ldr	r2, .L77+8
 1323 003a C260     		str	r2, [r0, #12]
 572:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1324              		.loc 1 572 3 is_stmt 1 view .LVU280
 572:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1325              		.loc 1 572 28 is_stmt 0 view .LVU281
 1326 003c 0361     		str	r3, [r0, #16]
 573:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1327              		.loc 1 573 3 is_stmt 1 view .LVU282
 573:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1328              		.loc 1 573 32 is_stmt 0 view .LVU283
 1329 003e 4361     		str	r3, [r0, #20]
 574:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1330              		.loc 1 574 3 is_stmt 1 view .LVU284
 574:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1331              		.loc 1 574 32 is_stmt 0 view .LVU285
 1332 0040 8033     		adds	r3, r3, #128
 1333 0042 8361     		str	r3, [r0, #24]
 575:Src/main.c    ****   {
 1334              		.loc 1 575 3 is_stmt 1 view .LVU286
 575:Src/main.c    ****   {
 1335              		.loc 1 575 7 is_stmt 0 view .LVU287
 1336 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1337              	.LVL84:
 575:Src/main.c    ****   {
 1338              		.loc 1 575 6 view .LVU288
 1339 0048 0028     		cmp	r0, #0
 1340 004a 42D1     		bne	.L70
 579:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1341              		.loc 1 579 3 is_stmt 1 view .LVU289
 579:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1342              		.loc 1 579 34 is_stmt 0 view .LVU290
 1343 004c 8023     		movs	r3, #128
 1344 004e 5B01     		lsls	r3, r3, #5
 1345 0050 1293     		str	r3, [sp, #72]
 580:Src/main.c    ****   {
 1346              		.loc 1 580 3 is_stmt 1 view .LVU291
 580:Src/main.c    ****   {
 1347              		.loc 1 580 7 is_stmt 0 view .LVU292
 1348 0052 2748     		ldr	r0, .L77
 1349 0054 12A9     		add	r1, sp, #72
 1350 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1351              	.LVL85:
 580:Src/main.c    ****   {
 1352              		.loc 1 580 6 view .LVU293
 1353 005a 0028     		cmp	r0, #0
 1354 005c 3BD1     		bne	.L71
 584:Src/main.c    ****   {
 1355              		.loc 1 584 3 is_stmt 1 view .LVU294
 584:Src/main.c    ****   {
 1356              		.loc 1 584 7 is_stmt 0 view .LVU295
 1357 005e 2448     		ldr	r0, .L77
 1358 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
ARM GAS  /tmp/cc4ejHWS.s 			page 44


 1359              	.LVL86:
 584:Src/main.c    ****   {
 1360              		.loc 1 584 6 view .LVU296
 1361 0064 0028     		cmp	r0, #0
 1362 0066 38D1     		bne	.L72
 588:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1363              		.loc 1 588 3 is_stmt 1 view .LVU297
 588:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1364              		.loc 1 588 37 is_stmt 0 view .LVU298
 1365 0068 0023     		movs	r3, #0
 1366 006a 1093     		str	r3, [sp, #64]
 589:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1367              		.loc 1 589 3 is_stmt 1 view .LVU299
 589:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1368              		.loc 1 589 33 is_stmt 0 view .LVU300
 1369 006c 1193     		str	r3, [sp, #68]
 590:Src/main.c    ****   {
 1370              		.loc 1 590 3 is_stmt 1 view .LVU301
 590:Src/main.c    ****   {
 1371              		.loc 1 590 7 is_stmt 0 view .LVU302
 1372 006e 2048     		ldr	r0, .L77
 1373 0070 10A9     		add	r1, sp, #64
 1374 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1375              	.LVL87:
 590:Src/main.c    ****   {
 1376              		.loc 1 590 6 view .LVU303
 1377 0076 0028     		cmp	r0, #0
 1378 0078 31D1     		bne	.L73
 594:Src/main.c    ****   sConfigOC.Pulse = 0;
 1379              		.loc 1 594 3 is_stmt 1 view .LVU304
 594:Src/main.c    ****   sConfigOC.Pulse = 0;
 1380              		.loc 1 594 20 is_stmt 0 view .LVU305
 1381 007a 6023     		movs	r3, #96
 1382 007c 0993     		str	r3, [sp, #36]
 595:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1383              		.loc 1 595 3 is_stmt 1 view .LVU306
 595:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1384              		.loc 1 595 19 is_stmt 0 view .LVU307
 1385 007e 0023     		movs	r3, #0
 1386 0080 0A93     		str	r3, [sp, #40]
 596:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1387              		.loc 1 596 3 is_stmt 1 view .LVU308
 596:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1388              		.loc 1 596 24 is_stmt 0 view .LVU309
 1389 0082 0B93     		str	r3, [sp, #44]
 597:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1390              		.loc 1 597 3 is_stmt 1 view .LVU310
 597:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1391              		.loc 1 597 25 is_stmt 0 view .LVU311
 1392 0084 0C93     		str	r3, [sp, #48]
 598:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1393              		.loc 1 598 3 is_stmt 1 view .LVU312
 598:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1394              		.loc 1 598 24 is_stmt 0 view .LVU313
 1395 0086 0D93     		str	r3, [sp, #52]
 599:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1396              		.loc 1 599 3 is_stmt 1 view .LVU314
ARM GAS  /tmp/cc4ejHWS.s 			page 45


 599:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1397              		.loc 1 599 25 is_stmt 0 view .LVU315
 1398 0088 0E93     		str	r3, [sp, #56]
 600:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1399              		.loc 1 600 3 is_stmt 1 view .LVU316
 600:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1400              		.loc 1 600 26 is_stmt 0 view .LVU317
 1401 008a 0F93     		str	r3, [sp, #60]
 601:Src/main.c    ****   {
 1402              		.loc 1 601 3 is_stmt 1 view .LVU318
 601:Src/main.c    ****   {
 1403              		.loc 1 601 7 is_stmt 0 view .LVU319
 1404 008c 1848     		ldr	r0, .L77
 1405 008e 0022     		movs	r2, #0
 1406 0090 09A9     		add	r1, sp, #36
 1407 0092 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1408              	.LVL88:
 601:Src/main.c    ****   {
 1409              		.loc 1 601 6 view .LVU320
 1410 0096 0028     		cmp	r0, #0
 1411 0098 23D1     		bne	.L74
 605:Src/main.c    ****   {
 1412              		.loc 1 605 3 is_stmt 1 view .LVU321
 605:Src/main.c    ****   {
 1413              		.loc 1 605 7 is_stmt 0 view .LVU322
 1414 009a 1548     		ldr	r0, .L77
 1415 009c 0422     		movs	r2, #4
 1416 009e 09A9     		add	r1, sp, #36
 1417 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1418              	.LVL89:
 605:Src/main.c    ****   {
 1419              		.loc 1 605 6 view .LVU323
 1420 00a4 0028     		cmp	r0, #0
 1421 00a6 1ED1     		bne	.L75
 609:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1422              		.loc 1 609 3 is_stmt 1 view .LVU324
 609:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1423              		.loc 1 609 40 is_stmt 0 view .LVU325
 1424 00a8 0023     		movs	r3, #0
 1425 00aa 0193     		str	r3, [sp, #4]
 610:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1426              		.loc 1 610 3 is_stmt 1 view .LVU326
 610:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1427              		.loc 1 610 41 is_stmt 0 view .LVU327
 1428 00ac 0293     		str	r3, [sp, #8]
 611:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1429              		.loc 1 611 3 is_stmt 1 view .LVU328
 611:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1430              		.loc 1 611 34 is_stmt 0 view .LVU329
 1431 00ae 0393     		str	r3, [sp, #12]
 612:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1432              		.loc 1 612 3 is_stmt 1 view .LVU330
 612:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1433              		.loc 1 612 33 is_stmt 0 view .LVU331
 1434 00b0 0493     		str	r3, [sp, #16]
 613:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1435              		.loc 1 613 3 is_stmt 1 view .LVU332
ARM GAS  /tmp/cc4ejHWS.s 			page 46


 613:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1436              		.loc 1 613 35 is_stmt 0 view .LVU333
 1437 00b2 0593     		str	r3, [sp, #20]
 614:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1438              		.loc 1 614 3 is_stmt 1 view .LVU334
 614:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1439              		.loc 1 614 38 is_stmt 0 view .LVU335
 1440 00b4 8022     		movs	r2, #128
 1441 00b6 9201     		lsls	r2, r2, #6
 1442 00b8 0692     		str	r2, [sp, #24]
 615:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1443              		.loc 1 615 3 is_stmt 1 view .LVU336
 615:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1444              		.loc 1 615 40 is_stmt 0 view .LVU337
 1445 00ba 0893     		str	r3, [sp, #32]
 616:Src/main.c    ****   {
 1446              		.loc 1 616 3 is_stmt 1 view .LVU338
 616:Src/main.c    ****   {
 1447              		.loc 1 616 7 is_stmt 0 view .LVU339
 1448 00bc 0C48     		ldr	r0, .L77
 1449 00be 01A9     		add	r1, sp, #4
 1450 00c0 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1451              	.LVL90:
 616:Src/main.c    ****   {
 1452              		.loc 1 616 6 view .LVU340
 1453 00c4 0028     		cmp	r0, #0
 1454 00c6 10D1     		bne	.L76
 623:Src/main.c    **** 
 1455              		.loc 1 623 3 is_stmt 1 view .LVU341
 1456 00c8 0948     		ldr	r0, .L77
 1457 00ca FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1458              	.LVL91:
 625:Src/main.c    **** 
 1459              		.loc 1 625 1 is_stmt 0 view .LVU342
 1460 00ce 17B0     		add	sp, sp, #92
 1461              		@ sp needed
 1462 00d0 00BD     		pop	{pc}
 1463              	.L70:
 577:Src/main.c    ****   }
 1464              		.loc 1 577 5 is_stmt 1 view .LVU343
 1465 00d2 FFF7FEFF 		bl	Error_Handler
 1466              	.LVL92:
 1467              	.L71:
 582:Src/main.c    ****   }
 1468              		.loc 1 582 5 view .LVU344
 1469 00d6 FFF7FEFF 		bl	Error_Handler
 1470              	.LVL93:
 1471              	.L72:
 586:Src/main.c    ****   }
 1472              		.loc 1 586 5 view .LVU345
 1473 00da FFF7FEFF 		bl	Error_Handler
 1474              	.LVL94:
 1475              	.L73:
 592:Src/main.c    ****   }
 1476              		.loc 1 592 5 view .LVU346
 1477 00de FFF7FEFF 		bl	Error_Handler
 1478              	.LVL95:
ARM GAS  /tmp/cc4ejHWS.s 			page 47


 1479              	.L74:
 603:Src/main.c    ****   }
 1480              		.loc 1 603 5 view .LVU347
 1481 00e2 FFF7FEFF 		bl	Error_Handler
 1482              	.LVL96:
 1483              	.L75:
 607:Src/main.c    ****   }
 1484              		.loc 1 607 5 view .LVU348
 1485 00e6 FFF7FEFF 		bl	Error_Handler
 1486              	.LVL97:
 1487              	.L76:
 618:Src/main.c    ****   }
 1488              		.loc 1 618 5 view .LVU349
 1489 00ea FFF7FEFF 		bl	Error_Handler
 1490              	.LVL98:
 1491              	.L78:
 1492 00ee C046     		.align	2
 1493              	.L77:
 1494 00f0 00000000 		.word	htim1
 1495 00f4 002C0140 		.word	1073818624
 1496 00f8 FFFF0000 		.word	65535
 1497              		.cfi_endproc
 1498              	.LFE56:
 1500              		.section	.text.SystemClock_Config,"ax",%progbits
 1501              		.align	1
 1502              		.global	SystemClock_Config
 1503              		.syntax unified
 1504              		.code	16
 1505              		.thumb_func
 1507              	SystemClock_Config:
 1508              	.LFB55:
 518:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1509              		.loc 1 518 1 view -0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 72
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513 0000 00B5     		push	{lr}
 1514              	.LCFI19:
 1515              		.cfi_def_cfa_offset 4
 1516              		.cfi_offset 14, -4
 1517 0002 93B0     		sub	sp, sp, #76
 1518              	.LCFI20:
 1519              		.cfi_def_cfa_offset 80
 519:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1520              		.loc 1 519 2 view .LVU351
 519:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1521              		.loc 1 519 21 is_stmt 0 view .LVU352
 1522 0004 3422     		movs	r2, #52
 1523 0006 0021     		movs	r1, #0
 1524 0008 05A8     		add	r0, sp, #20
 1525 000a FFF7FEFF 		bl	memset
 1526              	.LVL99:
 520:Src/main.c    **** 
 1527              		.loc 1 520 2 is_stmt 1 view .LVU353
 520:Src/main.c    **** 
 1528              		.loc 1 520 21 is_stmt 0 view .LVU354
 1529 000e 1022     		movs	r2, #16
ARM GAS  /tmp/cc4ejHWS.s 			page 48


 1530 0010 0021     		movs	r1, #0
 1531 0012 01A8     		add	r0, sp, #4
 1532 0014 FFF7FEFF 		bl	memset
 1533              	.LVL100:
 525:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1534              		.loc 1 525 2 is_stmt 1 view .LVU355
 525:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1535              		.loc 1 525 35 is_stmt 0 view .LVU356
 1536 0018 0223     		movs	r3, #2
 1537 001a 0593     		str	r3, [sp, #20]
 526:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1538              		.loc 1 526 2 is_stmt 1 view .LVU357
 526:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1539              		.loc 1 526 29 is_stmt 0 view .LVU358
 1540 001c 013B     		subs	r3, r3, #1
 1541 001e 0893     		str	r3, [sp, #32]
 527:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1542              		.loc 1 527 2 is_stmt 1 view .LVU359
 527:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1543              		.loc 1 527 40 is_stmt 0 view .LVU360
 1544 0020 0F33     		adds	r3, r3, #15
 1545 0022 0993     		str	r3, [sp, #36]
 528:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1546              		.loc 1 528 2 is_stmt 1 view .LVU361
 529:Src/main.c    **** 	{
 1547              		.loc 1 529 2 view .LVU362
 529:Src/main.c    **** 	{
 1548              		.loc 1 529 6 is_stmt 0 view .LVU363
 1549 0024 05A8     		add	r0, sp, #20
 1550 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1551              	.LVL101:
 529:Src/main.c    **** 	{
 1552              		.loc 1 529 5 view .LVU364
 1553 002a 0028     		cmp	r0, #0
 1554 002c 0DD1     		bne	.L82
 536:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1555              		.loc 1 536 2 is_stmt 1 view .LVU365
 536:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1556              		.loc 1 536 30 is_stmt 0 view .LVU366
 1557 002e 0723     		movs	r3, #7
 1558 0030 0193     		str	r3, [sp, #4]
 538:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1559              		.loc 1 538 2 is_stmt 1 view .LVU367
 538:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1560              		.loc 1 538 33 is_stmt 0 view .LVU368
 1561 0032 0023     		movs	r3, #0
 1562 0034 0293     		str	r3, [sp, #8]
 539:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1563              		.loc 1 539 2 is_stmt 1 view .LVU369
 539:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1564              		.loc 1 539 34 is_stmt 0 view .LVU370
 1565 0036 0393     		str	r3, [sp, #12]
 540:Src/main.c    **** 
 1566              		.loc 1 540 2 is_stmt 1 view .LVU371
 540:Src/main.c    **** 
 1567              		.loc 1 540 35 is_stmt 0 view .LVU372
 1568 0038 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/cc4ejHWS.s 			page 49


 542:Src/main.c    **** 	{
 1569              		.loc 1 542 2 is_stmt 1 view .LVU373
 542:Src/main.c    **** 	{
 1570              		.loc 1 542 6 is_stmt 0 view .LVU374
 1571 003a 0021     		movs	r1, #0
 1572 003c 01A8     		add	r0, sp, #4
 1573 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1574              	.LVL102:
 542:Src/main.c    **** 	{
 1575              		.loc 1 542 5 view .LVU375
 1576 0042 0028     		cmp	r0, #0
 1577 0044 03D1     		bne	.L83
 546:Src/main.c    **** 
 1578              		.loc 1 546 1 view .LVU376
 1579 0046 13B0     		add	sp, sp, #76
 1580              		@ sp needed
 1581 0048 00BD     		pop	{pc}
 1582              	.L82:
 531:Src/main.c    **** 	}
 1583              		.loc 1 531 3 is_stmt 1 view .LVU377
 1584 004a FFF7FEFF 		bl	Error_Handler
 1585              	.LVL103:
 1586              	.L83:
 544:Src/main.c    **** 	}
 1587              		.loc 1 544 3 view .LVU378
 1588 004e FFF7FEFF 		bl	Error_Handler
 1589              	.LVL104:
 1590              		.cfi_endproc
 1591              	.LFE55:
 1593              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1594              		.align	2
 1595              	.LC59:
 1596 0000 257500   		.ascii	"%u\000"
 1597              		.section	.text.main,"ax",%progbits
 1598              		.align	1
 1599              		.global	main
 1600              		.syntax unified
 1601              		.code	16
 1602              		.thumb_func
 1604              	main:
 1605              	.LFB54:
 375:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1606              		.loc 1 375 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 40
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610 0000 10B5     		push	{r4, lr}
 1611              	.LCFI21:
 1612              		.cfi_def_cfa_offset 8
 1613              		.cfi_offset 4, -8
 1614              		.cfi_offset 14, -4
 1615 0002 8AB0     		sub	sp, sp, #40
 1616              	.LCFI22:
 1617              		.cfi_def_cfa_offset 48
 376:Src/main.c    ****     SystemClock_Config();
 1618              		.loc 1 376 2 view .LVU380
 1619 0004 FFF7FEFF 		bl	HAL_Init
ARM GAS  /tmp/cc4ejHWS.s 			page 50


 1620              	.LVL105:
 377:Src/main.c    ****     
 1621              		.loc 1 377 5 view .LVU381
 1622 0008 FFF7FEFF 		bl	SystemClock_Config
 1623              	.LVL106:
 380:Src/main.c    ****     USART_Init();
 1624              		.loc 1 380 5 view .LVU382
 1625 000c FFF7FEFF 		bl	GPIO_AF_Init
 1626              	.LVL107:
 381:Src/main.c    **** 
 1627              		.loc 1 381 5 view .LVU383
 1628 0010 FFF7FEFF 		bl	USART_Init
 1629              	.LVL108:
 383:Src/main.c    ****     
 1630              		.loc 1 383 5 view .LVU384
 1631 0014 FFF7FEFF 		bl	motor_init
 1632              	.LVL109:
 385:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 1633              		.loc 1 385 5 view .LVU385
 1634              	.LBB19:
 1635              	.LBI19:
 1636              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4ejHWS.s 			page 51


  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4ejHWS.s 			page 52


  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /tmp/cc4ejHWS.s 			page 53


 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
ARM GAS  /tmp/cc4ejHWS.s 			page 54


 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
ARM GAS  /tmp/cc4ejHWS.s 			page 55


 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
ARM GAS  /tmp/cc4ejHWS.s 			page 56


 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
ARM GAS  /tmp/cc4ejHWS.s 			page 57


 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc4ejHWS.s 			page 58


 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
ARM GAS  /tmp/cc4ejHWS.s 			page 59


 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
ARM GAS  /tmp/cc4ejHWS.s 			page 60


 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
ARM GAS  /tmp/cc4ejHWS.s 			page 61


 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1637              		.loc 3 623 22 view .LVU386
 1638              	.LBB20:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1639              		.loc 3 625 3 view .LVU387
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1640              		.loc 3 627 5 view .LVU388
 1641              		.loc 3 627 20 is_stmt 0 view .LVU389
 1642 0018 834B     		ldr	r3, .L106
 1643 001a 8022     		movs	r2, #128
 1644 001c 9205     		lsls	r2, r2, #22
 1645 001e 1A60     		str	r2, [r3]
 1646              	.LVL110:
 1647              		.loc 3 627 20 view .LVU390
 1648              	.LBE20:
 1649              	.LBE19:
 386:Src/main.c    **** 
 1650              		.loc 1 386 5 is_stmt 1 view .LVU391
 1651              	.LBB21:
 1652              	.LBI21:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/cc4ejHWS.s 			page 62


 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/cc4ejHWS.s 			page 63


 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1653              		.loc 3 730 22 view .LVU392
 1654              	.LBB22:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1655              		.loc 3 732 3 view .LVU393
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1656              		.loc 3 734 5 view .LVU394
 1657              		.loc 3 734 52 is_stmt 0 view .LVU395
 1658 0020 C720     		movs	r0, #199
 1659 0022 8000     		lsls	r0, r0, #2
 1660 0024 1958     		ldr	r1, [r3, r0]
 1661              		.loc 3 734 33 view .LVU396
 1662 0026 814A     		ldr	r2, .L106+4
 1663 0028 1140     		ands	r1, r2
 1664              		.loc 3 734 102 view .LVU397
 1665 002a 8022     		movs	r2, #128
 1666 002c D201     		lsls	r2, r2, #7
 1667 002e 0A43     		orrs	r2, r1
 1668              		.loc 3 734 30 view .LVU398
 1669 0030 1A50     		str	r2, [r3, r0]
 1670              	.LVL111:
 1671              		.loc 3 734 30 view .LVU399
 1672              	.LBE22:
 1673              	.LBE21:
 388:Src/main.c    ****     
 1674              		.loc 1 388 5 is_stmt 1 view .LVU400
 388:Src/main.c    ****     
 1675              		.loc 1 388 13 is_stmt 0 view .LVU401
ARM GAS  /tmp/cc4ejHWS.s 			page 64


 1676 0032 7F4B     		ldr	r3, .L106+8
 1677 0034 1A68     		ldr	r2, [r3]
 1678 0036 0892     		str	r2, [sp, #32]
 1679 0038 9A88     		ldrh	r2, [r3, #4]
 1680 003a 08AB     		add	r3, sp, #32
 1681 003c 9A80     		strh	r2, [r3, #4]
 391:Src/main.c    ****     MX_TIM1_Init();
 1682              		.loc 1 391 5 is_stmt 1 view .LVU402
 1683 003e FFF7FEFF 		bl	MX_GPIO_Init
 1684              	.LVL112:
 392:Src/main.c    ****     
 1685              		.loc 1 392 5 view .LVU403
 1686 0042 FFF7FEFF 		bl	MX_TIM1_Init
 1687              	.LVL113:
 394:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 1688              		.loc 1 394 5 view .LVU404
 1689 0046 7B48     		ldr	r0, .L106+12
 1690 0048 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1691              	.LVL114:
 395:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1692              		.loc 1 395 5 view .LVU405
 1693 004c 8021     		movs	r1, #128
 1694 004e 7A4C     		ldr	r4, .L106+16
 1695 0050 0022     		movs	r2, #0
 1696 0052 0901     		lsls	r1, r1, #4
 1697 0054 2000     		movs	r0, r4
 1698 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1699              	.LVL115:
 396:Src/main.c    **** 	
 1700              		.loc 1 396 5 view .LVU406
 1701 005a 8021     		movs	r1, #128
 1702 005c 0022     		movs	r2, #0
 1703 005e 8901     		lsls	r1, r1, #6
 1704 0060 2000     		movs	r0, r4
 1705 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1706              	.LVL116:
 1707 0066 C4E0     		b	.L101
 1708              	.LVL117:
 1709              	.L105:
 1710              	.LBB23:
 407:Src/main.c    ****         
 1711              		.loc 1 407 9 view .LVU407
 1712 0068 8021     		movs	r1, #128
 1713 006a 0022     		movs	r2, #0
 1714 006c 0901     		lsls	r1, r1, #4
 1715 006e 7248     		ldr	r0, .L106+16
 1716 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1717              	.LVL118:
 410:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1718              		.loc 1 410 9 view .LVU408
 410:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1719              		.loc 1 410 21 is_stmt 0 view .LVU409
 1720 0074 FFF7FEFF 		bl	HAL_GetTick
 1721              	.LVL119:
 410:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1722              		.loc 1 410 19 view .LVU410
 1723 0078 80B2     		uxth	r0, r0
ARM GAS  /tmp/cc4ejHWS.s 			page 65


 1724 007a 704B     		ldr	r3, .L106+20
 1725 007c 1880     		strh	r0, [r3]
 411:Src/main.c    ****         
 1726              		.loc 1 411 9 is_stmt 1 view .LVU411
 411:Src/main.c    ****         
 1727              		.loc 1 411 19 is_stmt 0 view .LVU412
 1728 007e FFF7FEFF 		bl	HAL_GetTick
 1729              	.LVL120:
 411:Src/main.c    ****         
 1730              		.loc 1 411 17 view .LVU413
 1731 0082 6F4B     		ldr	r3, .L106+24
 1732 0084 1860     		str	r0, [r3]
 414:Src/main.c    ****         {
 1733              		.loc 1 414 9 is_stmt 1 view .LVU414
 1734              	.L88:
 417:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1735              		.loc 1 417 9 discriminator 2 view .LVU415
 414:Src/main.c    ****         {
 1736              		.loc 1 414 63 discriminator 2 view .LVU416
 414:Src/main.c    ****         {
 1737              		.loc 1 414 18 is_stmt 0 discriminator 2 view .LVU417
 1738 0086 8021     		movs	r1, #128
 1739 0088 4901     		lsls	r1, r1, #5
 1740 008a 6B48     		ldr	r0, .L106+16
 1741 008c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1742              	.LVL121:
 414:Src/main.c    ****         {
 1743              		.loc 1 414 63 discriminator 2 view .LVU418
 1744 0090 0028     		cmp	r0, #0
 1745 0092 06D1     		bne	.L87
 414:Src/main.c    ****         {
 1746              		.loc 1 414 74 discriminator 1 view .LVU419
 1747 0094 6A4B     		ldr	r3, .L106+24
 1748 0096 1C68     		ldr	r4, [r3]
 1749 0098 0A34     		adds	r4, r4, #10
 414:Src/main.c    ****         {
 1750              		.loc 1 414 82 discriminator 1 view .LVU420
 1751 009a FFF7FEFF 		bl	HAL_GetTick
 1752              	.LVL122:
 414:Src/main.c    ****         {
 1753              		.loc 1 414 63 discriminator 1 view .LVU421
 1754 009e 8442     		cmp	r4, r0
 1755 00a0 F1D8     		bhi	.L88
 1756              	.L87:
 419:Src/main.c    ****         
 1757              		.loc 1 419 9 is_stmt 1 view .LVU422
 419:Src/main.c    ****         
 1758              		.loc 1 419 19 is_stmt 0 view .LVU423
 1759 00a2 FFF7FEFF 		bl	HAL_GetTick
 1760              	.LVL123:
 419:Src/main.c    ****         
 1761              		.loc 1 419 33 view .LVU424
 1762 00a6 654B     		ldr	r3, .L106+20
 1763 00a8 1B88     		ldrh	r3, [r3]
 1764 00aa C01A     		subs	r0, r0, r3
 1765 00ac 80B2     		uxth	r0, r0
 419:Src/main.c    ****         
ARM GAS  /tmp/cc4ejHWS.s 			page 66


 1766              		.loc 1 419 16 view .LVU425
 1767 00ae 654B     		ldr	r3, .L106+28
 1768 00b0 1880     		strh	r0, [r3]
 422:Src/main.c    ****       // wait for the echo pin to go low
 1769              		.loc 1 422 7 is_stmt 1 view .LVU426
 422:Src/main.c    ****       // wait for the echo pin to go low
 1770              		.loc 1 422 17 is_stmt 0 view .LVU427
 1771 00b2 FFF7FEFF 		bl	HAL_GetTick
 1772              	.LVL124:
 422:Src/main.c    ****       // wait for the echo pin to go low
 1773              		.loc 1 422 15 view .LVU428
 1774 00b6 624B     		ldr	r3, .L106+24
 1775 00b8 1860     		str	r0, [r3]
 424:Src/main.c    ****         {
 1776              		.loc 1 424 9 is_stmt 1 view .LVU429
 1777              	.L90:
 427:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1778              		.loc 1 427 9 discriminator 2 view .LVU430
 424:Src/main.c    ****         {
 1779              		.loc 1 424 62 discriminator 2 view .LVU431
 424:Src/main.c    ****         {
 1780              		.loc 1 424 17 is_stmt 0 discriminator 2 view .LVU432
 1781 00ba 8021     		movs	r1, #128
 1782 00bc 4901     		lsls	r1, r1, #5
 1783 00be 5E48     		ldr	r0, .L106+16
 1784 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1785              	.LVL125:
 424:Src/main.c    ****         {
 1786              		.loc 1 424 62 discriminator 2 view .LVU433
 1787 00c4 0028     		cmp	r0, #0
 1788 00c6 06D0     		beq	.L89
 424:Src/main.c    ****         {
 1789              		.loc 1 424 73 discriminator 1 view .LVU434
 1790 00c8 5D4B     		ldr	r3, .L106+24
 1791 00ca 1C68     		ldr	r4, [r3]
 1792 00cc 3234     		adds	r4, r4, #50
 424:Src/main.c    ****         {
 1793              		.loc 1 424 80 discriminator 1 view .LVU435
 1794 00ce FFF7FEFF 		bl	HAL_GetTick
 1795              	.LVL126:
 424:Src/main.c    ****         {
 1796              		.loc 1 424 62 discriminator 1 view .LVU436
 1797 00d2 8442     		cmp	r4, r0
 1798 00d4 F1D8     		bhi	.L90
 1799              	.L89:
 429:Src/main.c    **** 
 1800              		.loc 1 429 9 is_stmt 1 view .LVU437
 429:Src/main.c    **** 
 1801              		.loc 1 429 19 is_stmt 0 view .LVU438
 1802 00d6 FFF7FEFF 		bl	HAL_GetTick
 1803              	.LVL127:
 429:Src/main.c    **** 
 1804              		.loc 1 429 33 view .LVU439
 1805 00da 584B     		ldr	r3, .L106+20
 1806 00dc 1B88     		ldrh	r3, [r3]
 1807 00de C01A     		subs	r0, r0, r3
 1808 00e0 80B2     		uxth	r0, r0
ARM GAS  /tmp/cc4ejHWS.s 			page 67


 429:Src/main.c    **** 
 1809              		.loc 1 429 16 view .LVU440
 1810 00e2 594B     		ldr	r3, .L106+32
 1811 00e4 1880     		strh	r0, [r3]
 432:Src/main.c    ****         if(leftDistance < 10)
 1812              		.loc 1 432 9 is_stmt 1 view .LVU441
 432:Src/main.c    ****         if(leftDistance < 10)
 1813              		.loc 1 432 32 is_stmt 0 view .LVU442
 1814 00e6 1B88     		ldrh	r3, [r3]
 1815 00e8 564A     		ldr	r2, .L106+28
 1816 00ea 1288     		ldrh	r2, [r2]
 1817 00ec 9B1A     		subs	r3, r3, r2
 1818 00ee 9BB2     		uxth	r3, r3
 432:Src/main.c    ****         if(leftDistance < 10)
 1819              		.loc 1 432 22 view .LVU443
 1820 00f0 564A     		ldr	r2, .L106+36
 1821 00f2 1380     		strh	r3, [r2]
 433:Src/main.c    ****         {
 1822              		.loc 1 433 9 is_stmt 1 view .LVU444
 433:Src/main.c    ****         {
 1823              		.loc 1 433 25 is_stmt 0 view .LVU445
 1824 00f4 1388     		ldrh	r3, [r2]
 1825 00f6 9BB2     		uxth	r3, r3
 433:Src/main.c    ****         {
 1826              		.loc 1 433 11 view .LVU446
 1827 00f8 092B     		cmp	r3, #9
 1828 00fa 07D9     		bls	.L102
 1829              	.L91:
 444:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1830              		.loc 1 444 9 is_stmt 1 view .LVU447
 1831              	.LVL128:
 445:Src/main.c    ****         
 1832              		.loc 1 445 9 view .LVU448
 1833 00fc 8021     		movs	r1, #128
 1834 00fe 0122     		movs	r2, #1
 1835 0100 8901     		lsls	r1, r1, #6
 1836 0102 4D48     		ldr	r0, .L106+16
 1837 0104 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1838              	.LVL129:
 449:Src/main.c    ****             counter++;
 1839              		.loc 1 449 9 view .LVU449
 444:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1840              		.loc 1 444 17 is_stmt 0 view .LVU450
 1841 0108 0023     		movs	r3, #0
 449:Src/main.c    ****             counter++;
 1842              		.loc 1 449 15 view .LVU451
 1843 010a 07E0     		b	.L92
 1844              	.LVL130:
 1845              	.L102:
 1846              	.LBB24:
 435:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 1847              		.loc 1 435 13 is_stmt 1 view .LVU452
 436:Src/main.c    **** 			/*
 1848              		.loc 1 436 13 view .LVU453
 1849 010c 1288     		ldrh	r2, [r2]
 1850 010e 92B2     		uxth	r2, r2
 1851 0110 4F49     		ldr	r1, .L106+40
ARM GAS  /tmp/cc4ejHWS.s 			page 68


 1852 0112 6846     		mov	r0, sp
 1853 0114 FFF7FEFF 		bl	sprintf
 1854              	.LVL131:
 1855 0118 F0E7     		b	.L91
 1856              	.LVL132:
 1857              	.L93:
 436:Src/main.c    **** 			/*
 1858              		.loc 1 436 13 is_stmt 0 view .LVU454
 1859              	.LBE24:
 450:Src/main.c    ****         }  // wait for 10 us
 1860              		.loc 1 450 13 is_stmt 1 view .LVU455
 450:Src/main.c    ****         }  // wait for 10 us
 1861              		.loc 1 450 20 is_stmt 0 view .LVU456
 1862 011a 0133     		adds	r3, r3, #1
 1863              	.LVL133:
 1864              	.L92:
 449:Src/main.c    ****             counter++;
 1865              		.loc 1 449 24 is_stmt 1 view .LVU457
 1866 011c 092B     		cmp	r3, #9
 1867 011e FCDD     		ble	.L93
 452:Src/main.c    ****         
 1868              		.loc 1 452 9 view .LVU458
 1869 0120 8021     		movs	r1, #128
 1870 0122 0022     		movs	r2, #0
 1871 0124 8901     		lsls	r1, r1, #6
 1872 0126 4448     		ldr	r0, .L106+16
 1873 0128 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1874              	.LVL134:
 455:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1875              		.loc 1 455 9 view .LVU459
 455:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1876              		.loc 1 455 21 is_stmt 0 view .LVU460
 1877 012c FFF7FEFF 		bl	HAL_GetTick
 1878              	.LVL135:
 455:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1879              		.loc 1 455 19 view .LVU461
 1880 0130 80B2     		uxth	r0, r0
 1881 0132 424B     		ldr	r3, .L106+20
 1882 0134 1880     		strh	r0, [r3]
 456:Src/main.c    ****         
 1883              		.loc 1 456 9 is_stmt 1 view .LVU462
 456:Src/main.c    ****         
 1884              		.loc 1 456 19 is_stmt 0 view .LVU463
 1885 0136 FFF7FEFF 		bl	HAL_GetTick
 1886              	.LVL136:
 456:Src/main.c    ****         
 1887              		.loc 1 456 17 view .LVU464
 1888 013a 414B     		ldr	r3, .L106+24
 1889 013c 1860     		str	r0, [r3]
 459:Src/main.c    ****         {
 1890              		.loc 1 459 9 is_stmt 1 view .LVU465
 1891              	.L95:
 462:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1892              		.loc 1 462 9 discriminator 2 view .LVU466
 459:Src/main.c    ****         {
 1893              		.loc 1 459 64 discriminator 2 view .LVU467
 459:Src/main.c    ****         {
ARM GAS  /tmp/cc4ejHWS.s 			page 69


 1894              		.loc 1 459 18 is_stmt 0 discriminator 2 view .LVU468
 1895 013e 8021     		movs	r1, #128
 1896 0140 C901     		lsls	r1, r1, #7
 1897 0142 3D48     		ldr	r0, .L106+16
 1898 0144 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1899              	.LVL137:
 459:Src/main.c    ****         {
 1900              		.loc 1 459 64 discriminator 2 view .LVU469
 1901 0148 0028     		cmp	r0, #0
 1902 014a 06D1     		bne	.L94
 459:Src/main.c    ****         {
 1903              		.loc 1 459 75 discriminator 1 view .LVU470
 1904 014c 3C4B     		ldr	r3, .L106+24
 1905 014e 1C68     		ldr	r4, [r3]
 1906 0150 0A34     		adds	r4, r4, #10
 459:Src/main.c    ****         {
 1907              		.loc 1 459 83 discriminator 1 view .LVU471
 1908 0152 FFF7FEFF 		bl	HAL_GetTick
 1909              	.LVL138:
 459:Src/main.c    ****         {
 1910              		.loc 1 459 64 discriminator 1 view .LVU472
 1911 0156 8442     		cmp	r4, r0
 1912 0158 F1D8     		bhi	.L95
 1913              	.L94:
 464:Src/main.c    ****         
 1914              		.loc 1 464 9 is_stmt 1 view .LVU473
 464:Src/main.c    ****         
 1915              		.loc 1 464 19 is_stmt 0 view .LVU474
 1916 015a FFF7FEFF 		bl	HAL_GetTick
 1917              	.LVL139:
 464:Src/main.c    ****         
 1918              		.loc 1 464 33 view .LVU475
 1919 015e 374B     		ldr	r3, .L106+20
 1920 0160 1B88     		ldrh	r3, [r3]
 1921 0162 C01A     		subs	r0, r0, r3
 1922 0164 80B2     		uxth	r0, r0
 464:Src/main.c    ****         
 1923              		.loc 1 464 16 view .LVU476
 1924 0166 374B     		ldr	r3, .L106+28
 1925 0168 1880     		strh	r0, [r3]
 467:Src/main.c    ****       // wait for the echo pin to go low
 1926              		.loc 1 467 7 is_stmt 1 view .LVU477
 467:Src/main.c    ****       // wait for the echo pin to go low
 1927              		.loc 1 467 17 is_stmt 0 view .LVU478
 1928 016a FFF7FEFF 		bl	HAL_GetTick
 1929              	.LVL140:
 467:Src/main.c    ****       // wait for the echo pin to go low
 1930              		.loc 1 467 15 view .LVU479
 1931 016e 344B     		ldr	r3, .L106+24
 1932 0170 1860     		str	r0, [r3]
 469:Src/main.c    ****         {
 1933              		.loc 1 469 9 is_stmt 1 view .LVU480
 1934              	.L97:
 472:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1935              		.loc 1 472 9 discriminator 2 view .LVU481
 469:Src/main.c    ****         {
 1936              		.loc 1 469 63 discriminator 2 view .LVU482
ARM GAS  /tmp/cc4ejHWS.s 			page 70


 469:Src/main.c    ****         {
 1937              		.loc 1 469 17 is_stmt 0 discriminator 2 view .LVU483
 1938 0172 8021     		movs	r1, #128
 1939 0174 C901     		lsls	r1, r1, #7
 1940 0176 3048     		ldr	r0, .L106+16
 1941 0178 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1942              	.LVL141:
 469:Src/main.c    ****         {
 1943              		.loc 1 469 63 discriminator 2 view .LVU484
 1944 017c 0028     		cmp	r0, #0
 1945 017e 06D0     		beq	.L96
 469:Src/main.c    ****         {
 1946              		.loc 1 469 74 discriminator 1 view .LVU485
 1947 0180 2F4B     		ldr	r3, .L106+24
 1948 0182 1C68     		ldr	r4, [r3]
 1949 0184 3234     		adds	r4, r4, #50
 469:Src/main.c    ****         {
 1950              		.loc 1 469 81 discriminator 1 view .LVU486
 1951 0186 FFF7FEFF 		bl	HAL_GetTick
 1952              	.LVL142:
 469:Src/main.c    ****         {
 1953              		.loc 1 469 63 discriminator 1 view .LVU487
 1954 018a 8442     		cmp	r4, r0
 1955 018c F1D8     		bhi	.L97
 1956              	.L96:
 474:Src/main.c    **** 
 1957              		.loc 1 474 9 is_stmt 1 view .LVU488
 474:Src/main.c    **** 
 1958              		.loc 1 474 19 is_stmt 0 view .LVU489
 1959 018e FFF7FEFF 		bl	HAL_GetTick
 1960              	.LVL143:
 474:Src/main.c    **** 
 1961              		.loc 1 474 33 view .LVU490
 1962 0192 2A4B     		ldr	r3, .L106+20
 1963 0194 1B88     		ldrh	r3, [r3]
 1964 0196 C01A     		subs	r0, r0, r3
 1965 0198 80B2     		uxth	r0, r0
 474:Src/main.c    **** 
 1966              		.loc 1 474 16 view .LVU491
 1967 019a 2B4B     		ldr	r3, .L106+32
 1968 019c 1880     		strh	r0, [r3]
 477:Src/main.c    ****         if(rightDistance < 10)
 1969              		.loc 1 477 9 is_stmt 1 view .LVU492
 477:Src/main.c    ****         if(rightDistance < 10)
 1970              		.loc 1 477 33 is_stmt 0 view .LVU493
 1971 019e 1B88     		ldrh	r3, [r3]
 1972 01a0 284A     		ldr	r2, .L106+28
 1973 01a2 1288     		ldrh	r2, [r2]
 1974 01a4 9B1A     		subs	r3, r3, r2
 1975 01a6 9BB2     		uxth	r3, r3
 477:Src/main.c    ****         if(rightDistance < 10)
 1976              		.loc 1 477 23 view .LVU494
 1977 01a8 2A4A     		ldr	r2, .L106+44
 1978 01aa 1380     		strh	r3, [r2]
 478:Src/main.c    ****         {
 1979              		.loc 1 478 9 is_stmt 1 view .LVU495
 478:Src/main.c    ****         {
ARM GAS  /tmp/cc4ejHWS.s 			page 71


 1980              		.loc 1 478 26 is_stmt 0 view .LVU496
 1981 01ac 1388     		ldrh	r3, [r2]
 1982 01ae 9BB2     		uxth	r3, r3
 478:Src/main.c    ****         {
 1983              		.loc 1 478 11 view .LVU497
 1984 01b0 092B     		cmp	r3, #9
 1985 01b2 2AD9     		bls	.L103
 1986              	.L98:
 488:Src/main.c    **** 		{
 1987              		.loc 1 488 3 is_stmt 1 view .LVU498
 488:Src/main.c    **** 		{
 1988              		.loc 1 488 6 is_stmt 0 view .LVU499
 1989 01b4 284B     		ldr	r3, .L106+48
 1990 01b6 1B78     		ldrb	r3, [r3]
 488:Src/main.c    **** 		{
 1991              		.loc 1 488 5 view .LVU500
 1992 01b8 002B     		cmp	r3, #0
 1993 01ba 16D0     		beq	.L99
 490:Src/main.c    **** 					command[0] != 'a' &&
 1994              		.loc 1 490 4 is_stmt 1 view .LVU501
 490:Src/main.c    **** 					command[0] != 'a' &&
 1995              		.loc 1 490 14 is_stmt 0 view .LVU502
 1996 01bc 274B     		ldr	r3, .L106+52
 1997 01be 1B78     		ldrb	r3, [r3]
 490:Src/main.c    **** 					command[0] != 'a' &&
 1998              		.loc 1 490 6 view .LVU503
 1999 01c0 772B     		cmp	r3, #119
 2000 01c2 07D0     		beq	.L100
 491:Src/main.c    **** 					command[0] != 'd'){
 2001              		.loc 1 491 13 discriminator 1 view .LVU504
 2002 01c4 254B     		ldr	r3, .L106+52
 2003 01c6 1B78     		ldrb	r3, [r3]
 490:Src/main.c    **** 					command[0] != 'a' &&
 2004              		.loc 1 490 25 discriminator 1 view .LVU505
 2005 01c8 612B     		cmp	r3, #97
 2006 01ca 03D0     		beq	.L100
 492:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 2007              		.loc 1 492 13 view .LVU506
 2008 01cc 234B     		ldr	r3, .L106+52
 2009 01ce 1B78     		ldrb	r3, [r3]
 491:Src/main.c    **** 					command[0] != 'd'){
 2010              		.loc 1 491 24 view .LVU507
 2011 01d0 642B     		cmp	r3, #100
 2012 01d2 21D1     		bne	.L104
 2013              	.L100:
 495:Src/main.c    **** 			{
 2014              		.loc 1 495 4 is_stmt 1 view .LVU508
 495:Src/main.c    **** 			{
 2015              		.loc 1 495 14 is_stmt 0 view .LVU509
 2016 01d4 214B     		ldr	r3, .L106+52
 2017 01d6 5B78     		ldrb	r3, [r3, #1]
 495:Src/main.c    **** 			{
 2018              		.loc 1 495 6 view .LVU510
 2019 01d8 002B     		cmp	r3, #0
 2020 01da 06D0     		beq	.L99
 497:Src/main.c    **** 			}
 2021              		.loc 1 497 5 is_stmt 1 view .LVU511
ARM GAS  /tmp/cc4ejHWS.s 			page 72


 497:Src/main.c    **** 			}
 2022              		.loc 1 497 27 is_stmt 0 view .LVU512
 2023 01dc 1F4B     		ldr	r3, .L106+52
 2024 01de 1878     		ldrb	r0, [r3]
 2025 01e0 C0B2     		uxtb	r0, r0
 497:Src/main.c    **** 			}
 2026              		.loc 1 497 39 view .LVU513
 2027 01e2 5978     		ldrb	r1, [r3, #1]
 2028 01e4 C9B2     		uxtb	r1, r1
 497:Src/main.c    **** 			}
 2029              		.loc 1 497 5 view .LVU514
 2030 01e6 FFF7FEFF 		bl	ProcessCommand
 2031              	.LVL144:
 2032              	.L99:
 509:Src/main.c    **** 	}
 2033              		.loc 1 509 3 is_stmt 1 view .LVU515
 2034 01ea FA20     		movs	r0, #250
 2035 01ec 4000     		lsls	r0, r0, #1
 2036 01ee FFF7FEFF 		bl	HAL_Delay
 2037              	.LVL145:
 2038              	.LBE23:
 398:Src/main.c    ****         int32_t counter = 0;
 2039              		.loc 1 398 8 view .LVU516
 2040              	.L101:
 398:Src/main.c    ****         int32_t counter = 0;
 2041              		.loc 1 398 2 view .LVU517
 2042              	.LBB26:
 399:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 2043              		.loc 1 399 9 view .LVU518
 400:Src/main.c    ****         
 2044              		.loc 1 400 9 view .LVU519
 2045 01f2 8021     		movs	r1, #128
 2046 01f4 0122     		movs	r2, #1
 2047 01f6 0901     		lsls	r1, r1, #4
 2048 01f8 0F48     		ldr	r0, .L106+16
 2049 01fa FFF7FEFF 		bl	HAL_GPIO_WritePin
 2050              	.LVL146:
 404:Src/main.c    ****             counter++;
 2051              		.loc 1 404 9 view .LVU520
 399:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 2052              		.loc 1 399 17 is_stmt 0 view .LVU521
 2053 01fe 0023     		movs	r3, #0
 2054              	.LVL147:
 2055              	.L85:
 404:Src/main.c    ****             counter++;
 2056              		.loc 1 404 24 is_stmt 1 view .LVU522
 2057 0200 092B     		cmp	r3, #9
 2058 0202 00DD     		ble	.LCB1653
 2059 0204 30E7     		b	.L105	@long jump
 2060              	.LCB1653:
 405:Src/main.c    ****         }  // wait for 10 us
 2061              		.loc 1 405 13 view .LVU523
 405:Src/main.c    ****         }  // wait for 10 us
 2062              		.loc 1 405 20 is_stmt 0 view .LVU524
 2063 0206 0133     		adds	r3, r3, #1
 2064              	.LVL148:
 405:Src/main.c    ****         }  // wait for 10 us
ARM GAS  /tmp/cc4ejHWS.s 			page 73


 2065              		.loc 1 405 20 view .LVU525
 2066 0208 FAE7     		b	.L85
 2067              	.LVL149:
 2068              	.L103:
 2069              	.LBB25:
 480:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 2070              		.loc 1 480 13 is_stmt 1 view .LVU526
 481:Src/main.c    **** 			/*
 2071              		.loc 1 481 13 view .LVU527
 2072 020a 1288     		ldrh	r2, [r2]
 2073 020c 92B2     		uxth	r2, r2
 2074 020e 1049     		ldr	r1, .L106+40
 2075 0210 6846     		mov	r0, sp
 2076 0212 FFF7FEFF 		bl	sprintf
 2077              	.LVL150:
 2078 0216 CDE7     		b	.L98
 2079              	.L104:
 2080              	.LBE25:
 493:Src/main.c    **** 			}
 2081              		.loc 1 493 5 view .LVU528
 493:Src/main.c    **** 			}
 2082              		.loc 1 493 27 is_stmt 0 view .LVU529
 2083 0218 104B     		ldr	r3, .L106+52
 2084 021a 1878     		ldrb	r0, [r3]
 2085 021c C0B2     		uxtb	r0, r0
 493:Src/main.c    **** 			}
 2086              		.loc 1 493 5 view .LVU530
 2087 021e 0021     		movs	r1, #0
 2088 0220 FFF7FEFF 		bl	ProcessCommand
 2089              	.LVL151:
 2090 0224 D6E7     		b	.L100
 2091              	.L107:
 2092 0226 C046     		.align	2
 2093              	.L106:
 2094 0228 00E100E0 		.word	-536813312
 2095 022c FF00FFFF 		.word	-65281
 2096 0230 00000000 		.word	.LC21
 2097 0234 00000000 		.word	htim1
 2098 0238 00040048 		.word	1207960576
 2099 023c 00000000 		.word	startTime
 2100 0240 00000000 		.word	pMillis
 2101 0244 00000000 		.word	Value1
 2102 0248 00000000 		.word	Value2
 2103 024c 00000000 		.word	leftDistance
 2104 0250 00000000 		.word	.LC59
 2105 0254 00000000 		.word	rightDistance
 2106 0258 00000000 		.word	incomingCommand
 2107 025c 00000000 		.word	command
 2108              	.LBE26:
 2109              		.cfi_endproc
 2110              	.LFE54:
 2112              		.global	incomingCommand
 2113              		.section	.bss.incomingCommand,"aw",%nobits
 2116              	incomingCommand:
 2117 0000 00       		.space	1
 2118              		.global	command
 2119              		.section	.bss.command,"aw",%nobits
ARM GAS  /tmp/cc4ejHWS.s 			page 74


 2120              		.align	2
 2123              	command:
 2124 0000 000000   		.space	3
 2125              		.global	rightDistance
 2126              		.section	.bss.rightDistance,"aw",%nobits
 2127              		.align	1
 2130              	rightDistance:
 2131 0000 0000     		.space	2
 2132              		.global	leftDistance
 2133              		.section	.bss.leftDistance,"aw",%nobits
 2134              		.align	1
 2137              	leftDistance:
 2138 0000 0000     		.space	2
 2139              		.global	Value2
 2140              		.section	.bss.Value2,"aw",%nobits
 2141              		.align	1
 2144              	Value2:
 2145 0000 0000     		.space	2
 2146              		.global	Value1
 2147              		.section	.bss.Value1,"aw",%nobits
 2148              		.align	1
 2151              	Value1:
 2152 0000 0000     		.space	2
 2153              		.global	startTime
 2154              		.section	.bss.startTime,"aw",%nobits
 2155              		.align	1
 2158              	startTime:
 2159 0000 0000     		.space	2
 2160              		.global	pMillis
 2161              		.section	.bss.pMillis,"aw",%nobits
 2162              		.align	2
 2165              	pMillis:
 2166 0000 00000000 		.space	4
 2167              		.global	htim1
 2168              		.section	.bss.htim1,"aw",%nobits
 2169              		.align	2
 2172              	htim1:
 2173 0000 00000000 		.space	64
 2173      00000000 
 2173      00000000 
 2173      00000000 
 2173      00000000 
 2174              		.text
 2175              	.Letext0:
 2176              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2177              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2178              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2179              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2180              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2181              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2182              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2183              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2184              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2185              		.file 13 "Inc/pins.h"
 2186              		.file 14 "Inc/motor.h"
 2187              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2188              		.file 16 "Inc/main.h"
ARM GAS  /tmp/cc4ejHWS.s 			page 75


 2189              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2190              		.file 18 "/usr/arm-none-eabi/include/stdio.h"
 2191              		.file 19 "/usr/arm-none-eabi/include/string.h"
 2192              		.file 20 "<built-in>"
ARM GAS  /tmp/cc4ejHWS.s 			page 76


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc4ejHWS.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc4ejHWS.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc4ejHWS.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/cc4ejHWS.s:102    .text.LED_Init:00000000 $t
     /tmp/cc4ejHWS.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/cc4ejHWS.s:151    .text.LED_Init:00000024 $d
     /tmp/cc4ejHWS.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/cc4ejHWS.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/cc4ejHWS.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/cc4ejHWS.s:342    .text.USART_Init:00000000 $t
     /tmp/cc4ejHWS.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/cc4ejHWS.s:440    .text.USART_Init:0000005c $d
     /tmp/cc4ejHWS.s:447    .text.USART_SendChar:00000000 $t
     /tmp/cc4ejHWS.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/cc4ejHWS.s:479    .text.USART_SendChar:00000010 $d
     /tmp/cc4ejHWS.s:484    .text.USART_SendString:00000000 $t
     /tmp/cc4ejHWS.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/cc4ejHWS.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/cc4ejHWS.s:539    .text.ClearCommand:00000000 $t
     /tmp/cc4ejHWS.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/cc4ejHWS.s:588    .text.ClearCommand:0000002c $d
     /tmp/cc4ejHWS.s:2123   .bss.command:00000000 command
     /tmp/cc4ejHWS.s:2116   .bss.incomingCommand:00000000 incomingCommand
     /tmp/cc4ejHWS.s:595    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/cc4ejHWS.s:599    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/cc4ejHWS.s:605    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/cc4ejHWS.s:713    .text.USART3_4_IRQHandler:00000074 $d
     /tmp/cc4ejHWS.s:721    .rodata.Log.str1.4:00000000 $d
     /tmp/cc4ejHWS.s:725    .text.Log:00000000 $t
     /tmp/cc4ejHWS.s:731    .text.Log:00000000 Log
     /tmp/cc4ejHWS.s:754    .text.Log:0000000c $d
     /tmp/cc4ejHWS.s:759    .text.Proceed:00000000 $t
     /tmp/cc4ejHWS.s:765    .text.Proceed:00000000 Proceed
     /tmp/cc4ejHWS.s:788    .text.Proceed:0000000c $d
     /tmp/cc4ejHWS.s:793    .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/cc4ejHWS.s:821    .text.ProcessCommand:00000000 $t
     /tmp/cc4ejHWS.s:827    .text.ProcessCommand:00000000 ProcessCommand
     /tmp/cc4ejHWS.s:958    .rodata.ProcessCommand:00000000 $d
     /tmp/cc4ejHWS.s:1189   .text.ProcessCommand:0000017c $d
     /tmp/cc4ejHWS.s:1204   .text.GetDistance:00000000 $t
     /tmp/cc4ejHWS.s:1210   .text.GetDistance:00000000 GetDistance
     /tmp/cc4ejHWS.s:1224   .text.Error_Handler:00000000 $t
     /tmp/cc4ejHWS.s:1230   .text.Error_Handler:00000000 Error_Handler
     /tmp/cc4ejHWS.s:1262   .text.MX_TIM1_Init:00000000 $t
     /tmp/cc4ejHWS.s:1267   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/cc4ejHWS.s:1494   .text.MX_TIM1_Init:000000f0 $d
     /tmp/cc4ejHWS.s:2172   .bss.htim1:00000000 htim1
     /tmp/cc4ejHWS.s:1501   .text.SystemClock_Config:00000000 $t
     /tmp/cc4ejHWS.s:1507   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc4ejHWS.s:1594   .rodata.main.str1.4:00000000 $d
     /tmp/cc4ejHWS.s:1598   .text.main:00000000 $t
     /tmp/cc4ejHWS.s:1604   .text.main:00000000 main
     /tmp/cc4ejHWS.s:2094   .text.main:00000228 $d
     /tmp/cc4ejHWS.s:2158   .bss.startTime:00000000 startTime
     /tmp/cc4ejHWS.s:2165   .bss.pMillis:00000000 pMillis
ARM GAS  /tmp/cc4ejHWS.s 			page 77


     /tmp/cc4ejHWS.s:2151   .bss.Value1:00000000 Value1
     /tmp/cc4ejHWS.s:2144   .bss.Value2:00000000 Value2
     /tmp/cc4ejHWS.s:2137   .bss.leftDistance:00000000 leftDistance
     /tmp/cc4ejHWS.s:2130   .bss.rightDistance:00000000 rightDistance
     /tmp/cc4ejHWS.s:2117   .bss.incomingCommand:00000000 $d
     /tmp/cc4ejHWS.s:2120   .bss.command:00000000 $d
     /tmp/cc4ejHWS.s:2127   .bss.rightDistance:00000000 $d
     /tmp/cc4ejHWS.s:2134   .bss.leftDistance:00000000 $d
     /tmp/cc4ejHWS.s:2141   .bss.Value2:00000000 $d
     /tmp/cc4ejHWS.s:2148   .bss.Value1:00000000 $d
     /tmp/cc4ejHWS.s:2155   .bss.startTime:00000000 $d
     /tmp/cc4ejHWS.s:2162   .bss.pMillis:00000000 $d
     /tmp/cc4ejHWS.s:2169   .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
memcpy
sprintf
HAL_Delay
MoveMotors
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
HAL_TIM_Base_Start
HAL_GetTick
HAL_GPIO_ReadPin
