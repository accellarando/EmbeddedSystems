ARM GAS  /tmp/cc7EdtTp.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_TIM15_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_TIM15_Init:
  25              	.LFB57:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****  * in the root directory of this software component.
  14:Src/main.c    ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  ******************************************************************************
  17:Src/main.c    ****  */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include <stdbool.h>
  24:Src/main.c    **** #include "motor.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/cc7EdtTp.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim15;
  49:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  50:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  51:Src/main.c    **** #define TRIG_PORT GPIOB
  52:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  53:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  54:Src/main.c    **** #define ECHO_PORT GPIOB
  55:Src/main.c    **** volatile uint32_t pMillis;
  56:Src/main.c    **** volatile uint16_t startTime;
  57:Src/main.c    **** volatile uint16_t Value1 = 0;
  58:Src/main.c    **** volatile uint16_t Value2 = 0;
  59:Src/main.c    **** volatile uint16_t leftDistance = 0;
  60:Src/main.c    **** volatile uint16_t rightDistance = 0;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** static void MX_GPIO_Init(void);
  69:Src/main.c    **** static void MX_TIM15_Init(void);
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** #define LED_RED GPIO_PIN_6
  77:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  78:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  79:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  80:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  81:Src/main.c    **** 
  82:Src/main.c    **** void LED_Init(uint32_t pins) {
  83:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  84:Src/main.c    **** 
  85:Src/main.c    **** 	GPIO_InitTypeDef gpio_led_init = {pins,
  86:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
  87:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
  88:Src/main.c    **** 		GPIO_NOPULL
  89:Src/main.c    **** 	};
  90:Src/main.c    **** 	HAL_GPIO_Init(GPIOC, &gpio_led_init);
ARM GAS  /tmp/cc7EdtTp.s 			page 3


  91:Src/main.c    **** }
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  95:Src/main.c    ****  *        functions appropriately.
  96:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  97:Src/main.c    ****  */
  98:Src/main.c    **** void GPIO_AF_Init() {
  99:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 100:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 101:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 102:Src/main.c    **** 
 103:Src/main.c    **** 	// uart_pins
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 105:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 106:Src/main.c    **** 
 107:Src/main.c    **** 	// motor_left_pins
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 113:Src/main.c    **** 
 114:Src/main.c    **** 	// motor_right_pins
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 119:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 120:Src/main.c    **** 
 121:Src/main.c    **** 	// ultrasonic_left_pins
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 123:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 124:Src/main.c    **** 
 125:Src/main.c    **** 	// ultrasonic_right_pins
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 127:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 128:Src/main.c    **** }
 129:Src/main.c    **** 
 130:Src/main.c    **** /**
 131:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 132:Src/main.c    ****  */
 133:Src/main.c    **** void USART_Init() {
 134:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 135:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	//Set baud rate
 138:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 139:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 140:Src/main.c    **** 												//use with the BT adapter
 141:Src/main.c    **** 
 142:Src/main.c    **** 												//Enable transmitter
 143:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	//Enable receiver
 146:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 147:Src/main.c    **** 
ARM GAS  /tmp/cc7EdtTp.s 			page 4


 148:Src/main.c    **** 	//Enable the receive register not empty interrupt
 149:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	//Enable USART3
 152:Src/main.c    **** 	USART3->CR1 |= 1;
 153:Src/main.c    **** }
 154:Src/main.c    **** 
 155:Src/main.c    **** /**
 156:Src/main.c    ****  * @brief Sends a single character on the USART.
 157:Src/main.c    ****  *
 158:Src/main.c    ****  * @param c: the character to be sent
 159:Src/main.c    ****  */
 160:Src/main.c    **** void USART_SendChar(uint8_t c) {
 161:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 162:Src/main.c    **** 		;
 163:Src/main.c    **** 
 164:Src/main.c    **** 	USART3->TDR = c;
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** /**
 168:Src/main.c    ****  * @brief Sends a string on the USART.
 169:Src/main.c    ****  *
 170:Src/main.c    ****  * @param p_string: pointer to string to send
 171:Src/main.c    ****  */
 172:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 173:Src/main.c    **** 	while(*p_string != 0) {
 174:Src/main.c    **** 		USART_SendChar(*p_string);
 175:Src/main.c    **** 		p_string++;
 176:Src/main.c    **** 	}
 177:Src/main.c    **** 	USART_SendChar(0);
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** volatile uint8_t command[3];
 181:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 182:Src/main.c    **** 
 183:Src/main.c    **** void ClearCommand(){
 184:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 185:Src/main.c    **** 	memset(command, 0, sizeof(command));
 186:Src/main.c    **** 	incomingCommand = 0;
 187:Src/main.c    **** 	USART_SendString(prompt);
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** void USART3_4_IRQHandler(){
 191:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 192:Src/main.c    **** 	incomingCommand = 1;
 193:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 194:Src/main.c    **** 	}
 195:Src/main.c    **** 	if(command[0]){
 196:Src/main.c    **** 		if(command[1]){
 197:Src/main.c    **** 			USART_SendString(err);
 198:Src/main.c    **** 			ClearCommand();
 199:Src/main.c    **** 		}
 200:Src/main.c    **** 		else{
 201:Src/main.c    **** 			command[1] = USART3->RDR;
 202:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 203:Src/main.c    **** 		}
 204:Src/main.c    **** 	}
ARM GAS  /tmp/cc7EdtTp.s 			page 5


 205:Src/main.c    **** 	else{
 206:Src/main.c    **** 		command[0] = USART3->RDR;
 207:Src/main.c    **** 		if(command[0] != 'w' &&
 208:Src/main.c    **** 				command[0] != 'a' &&
 209:Src/main.c    **** 				command[0] != 'd'){
 210:Src/main.c    **** 			ProcessCommand(command[0], NULL);
 211:Src/main.c    **** 		}
 212:Src/main.c    **** 	}
 213:Src/main.c    **** }
 214:Src/main.c    **** 
 215:Src/main.c    **** void Log(){
 216:Src/main.c    **** 	uint8_t str_buff[32];
 217:Src/main.c    **** 
 218:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic left: %d\n", GetUltrasonic(&ultrasonic_left_pins));
 219:Src/main.c    **** 	USART_SendString(str_buff);
 220:Src/main.c    **** 
 221:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic right: %d\n", GetUltrasonic(&ultrasonic_right_pins));
 222:Src/main.c    **** 	USART_SendString(str_buff);
 223:Src/main.c    **** 
 224:Src/main.c    **** 	sprintf(str_buff, "Distance travelled: %d\n", (int)get_distance());
 225:Src/main.c    **** 	USART_SendString(str_buff);
 226:Src/main.c    **** 
 227:Src/main.c    **** 	sprintf(str_buff, "Heading: %d\n", (int)get_heading());
 228:Src/main.c    **** 	USART_SendString(str_buff);
 229:Src/main.c    **** 
 230:Src/main.c    **** }
 231:Src/main.c    **** 
 232:Src/main.c    **** void Proceed(){
 233:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 234:Src/main.c    **** 	USART_SendString(err);
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 238:Src/main.c    **** 	uint32_t left_motor_pin;
 239:Src/main.c    **** 	uint32_t right_motor_pin;
 240:Src/main.c    **** 	int32_t CH1_DC = 65535;
 241:Src/main.c    **** 
 242:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 243:Src/main.c    **** 
 244:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 245:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 246:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 247:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 248:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 249:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 250:Src/main.c    **** 
 251:Src/main.c    **** 	MotorCommand motorcmd = {0};
 252:Src/main.c    **** 
 253:Src/main.c    **** 	uint8_t* part1;
 254:Src/main.c    **** 	uint8_t part2[15];
 255:Src/main.c    **** 	uint8_t zero = 0;
 256:Src/main.c    **** 	memcpy(part2, &zero, 15);
 257:Src/main.c    **** 
 258:Src/main.c    **** 	switch(direction){
 259:Src/main.c    **** 		case 'w':
 260:Src/main.c    **** 			part1 = forward;
 261:Src/main.c    **** 			motorcmd.dir = FORWARD;
ARM GAS  /tmp/cc7EdtTp.s 			page 6


 262:Src/main.c    **** 			break;
 263:Src/main.c    **** 		case 'a':
 264:Src/main.c    **** 			part1 = left;
 265:Src/main.c    **** 			motorcmd.dir = LEFT;
 266:Src/main.c    **** 			break;
 267:Src/main.c    **** 		case 'd':
 268:Src/main.c    **** 			part1 = right;
 269:Src/main.c    **** 			motorcmd.dir = RIGHT;
 270:Src/main.c    **** 			break;
 271:Src/main.c    **** 		case 'l':
 272:Src/main.c    **** 			part1 = log;
 273:Src/main.c    **** 			USART_SendString(part1);
 274:Src/main.c    **** 			Log();
 275:Src/main.c    **** 			ClearCommand();
 276:Src/main.c    **** 			return;
 277:Src/main.c    **** 		case 'p':
 278:Src/main.c    **** 			part1 = proceed;
 279:Src/main.c    **** 			USART_SendString(part1);
 280:Src/main.c    **** 			Proceed();
 281:Src/main.c    **** 			ClearCommand();
 282:Src/main.c    **** 			return;
 283:Src/main.c    **** 		case 'x':
 284:Src/main.c    **** 			part1 = stop;
 285:Src/main.c    **** 			USART_SendString(part1);
 286:Src/main.c    **** 			motorcmd.dir = OFF;
 287:Src/main.c    **** 			MoveMotors(&motorcmd);
 288:Src/main.c    **** 			ClearCommand();
 289:Src/main.c    **** 			return;
 290:Src/main.c    **** 		default:
 291:Src/main.c    **** 			USART_SendString(err);
 292:Src/main.c    **** 			ClearCommand();
 293:Src/main.c    **** 			return;
 294:Src/main.c    **** 	}
 295:Src/main.c    **** 
 296:Src/main.c    **** 	//these are for "vector commands" only:
 297:Src/main.c    **** 
 298:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 299:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 300:Src/main.c    **** 		motorcmd.amount = 0;
 301:Src/main.c    **** 	}
 302:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 303:Src/main.c    **** 		USART_SendString(err);
 304:Src/main.c    **** 		ClearCommand();
 305:Src/main.c    **** 		return;
 306:Src/main.c    **** 	}
 307:Src/main.c    **** 	else{
 308:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 309:Src/main.c    **** 		motorcmd.amount = dist;
 310:Src/main.c    **** 	}
 311:Src/main.c    **** 
 312:Src/main.c    **** 
 313:Src/main.c    **** 	USART_SendString(part1);
 314:Src/main.c    **** 	USART_SendString(part2);
 315:Src/main.c    **** 
 316:Src/main.c    **** 	/* anyone know what this does??
 317:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 318:Src/main.c    **** 	HAL_Delay(1000);
ARM GAS  /tmp/cc7EdtTp.s 			page 7


 319:Src/main.c    **** 	TIM2->CCR1 = 0;
 320:Src/main.c    **** 	*/
 321:Src/main.c    **** 
 322:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 323:Src/main.c    **** 	USART_SendString(result);
 324:Src/main.c    **** 
 325:Src/main.c    **** 	ClearCommand();
 326:Src/main.c    **** 
 327:Src/main.c    **** 
 328:Src/main.c    **** 	// Example code while loop
 329:Src/main.c    **** 	//    while (1)
 330:Src/main.c    **** 	//    {
 331:Src/main.c    **** 	//        while(CH1_DC < 65535)
 332:Src/main.c    **** 	//        {
 333:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 334:Src/main.c    **** 	//            CH1_DC += 70;
 335:Src/main.c    **** 	//            HAL_Delay(1);
 336:Src/main.c    **** 	//        }
 337:Src/main.c    **** 	//        while(CH1_DC > 0)
 338:Src/main.c    **** 	//        {
 339:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 340:Src/main.c    **** 	//            CH1_DC -= 70;
 341:Src/main.c    **** 	//            HAL_Delay(1);
 342:Src/main.c    **** 	//        }
 343:Src/main.c    **** 	//    }
 344:Src/main.c    **** }
 345:Src/main.c    **** 
 346:Src/main.c    **** /*
 347:Src/main.c    ****    void ProcessCommandPWM(uint8_t side, uint8_t amt){
 348:Src/main.c    ****    MotorCommand motorcmd = {0};
 349:Src/main.c    ****    motorcmd.dir = FORWARD;
 350:Src/main.c    ****    motorcmd.amount = 9;
 351:Src/main.c    ****    switch(side){
 352:Src/main.c    ****    case 'l':
 353:Src/main.c    ****    pwm_left = amt;
 354:Src/main.c    ****    break;
 355:Src/main.c    ****    case 'r':
 356:Src/main.c    ****    pwm_right = amt;
 357:Src/main.c    ****    break;
 358:Src/main.c    ****    case 'x':
 359:Src/main.c    ****    motorcmd.dir = OFF;
 360:Src/main.c    ****    break;
 361:Src/main.c    ****    default:
 362:Src/main.c    ****    break;
 363:Src/main.c    ****    }
 364:Src/main.c    ****    MoveMotors(&motorcmd);
 365:Src/main.c    ****    ClearCommand();
 366:Src/main.c    ****    }
 367:Src/main.c    ****    */
 368:Src/main.c    **** 
 369:Src/main.c    **** /*
 370:Src/main.c    ****    void Ultrasonic_Init(uint32_t pins)
 371:Src/main.c    ****    {
 372:Src/main.c    ****    __HAL_RCC_GPIOA_CLK_ENABLE();
 373:Src/main.c    **** 
 374:Src/main.c    ****    GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 375:Src/main.c    ****    GPIO_MODE_INPUT,
ARM GAS  /tmp/cc7EdtTp.s 			page 8


 376:Src/main.c    ****    GPIO_SPEED_FREQ_LOW,
 377:Src/main.c    ****    GPIO_NOPULL
 378:Src/main.c    ****    };
 379:Src/main.c    ****    HAL_GPIO_Init(GPIOA, &gpio_init);
 380:Src/main.c    ****    }
 381:Src/main.c    ****    */
 382:Src/main.c    **** 
 383:Src/main.c    **** void PrintDistance()
 384:Src/main.c    **** {
 385:Src/main.c    **** 	char dist[32] = "";
 386:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 387:Src/main.c    **** 	USART_SendString(dist);
 388:Src/main.c    **** }
 389:Src/main.c    **** 
 390:Src/main.c    **** volatile uint32_t risingEdgeTime;
 391:Src/main.c    **** volatile uint32_t fallingEdgeTime;
 392:Src/main.c    **** volatile uint32_t pulseWidth = 0;
 393:Src/main.c    **** // Define constants
 394:Src/main.c    **** 
 395:Src/main.c    **** // Declare global variables
 396:Src/main.c    **** TIM_HandleTypeDef htim155;
 397:Src/main.c    **** uint32_t pulse_start_time = 0;
 398:Src/main.c    **** uint32_t pulse_end_time = 0;
 399:Src/main.c    **** 
 400:Src/main.c    **** uint32_t GetUltrasonic(ultrasonic_pins_t* ultrasonic){
 401:Src/main.c    **** 	uint32_t i = 0, j = 0;
 402:Src/main.c    **** 	TIM15->EGR |= 1; //clears counter
 403:Src/main.c    **** 	while(TIM15->EGR & 1)
 404:Src/main.c    **** 		;
 405:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_SET);
 406:Src/main.c    **** 	while (TIM15->CNT < 200){
 407:Src/main.c    **** 	}
 408:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 409:Src/main.c    **** 
 410:Src/main.c    **** 	pMillis = TIM15->CNT;
 411:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 412:Src/main.c    **** 		i++;
 413:Src/main.c    **** 	}
 414:Src/main.c    **** 	uint32_t val1 = TIM15->CNT;
 415:Src/main.c    **** 
 416:Src/main.c    **** 	pMillis = val1;
 417:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 418:Src/main.c    **** 		j++;
 419:Src/main.c    **** 	}
 420:Src/main.c    **** 
 421:Src/main.c    **** 	uint32_t val2 = TIM15->CNT;
 422:Src/main.c    **** 	if(val2-val1 == 1200)
 423:Src/main.c    **** 		return -1;
 424:Src/main.c    **** 	return (val2-val1)/4.42; //this is a magic number that gives us centimeters with our prescaler val
 425:Src/main.c    **** }
 426:Src/main.c    **** /* USER CODE END 0 */
 427:Src/main.c    **** 
 428:Src/main.c    **** /**
 429:Src/main.c    ****  * @brief  The application entry point.
 430:Src/main.c    ****  * @retval int
 431:Src/main.c    ****  */
 432:Src/main.c    **** 
ARM GAS  /tmp/cc7EdtTp.s 			page 9


 433:Src/main.c    **** //doesn't actually init tim15 but don't worry about it....
 434:Src/main.c    **** /*
 435:Src/main.c    ****    void TIM15_Init(){
 436:Src/main.c    ****    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 437:Src/main.c    ****    TIM_MasterConfigTypeDef sMasterConfig = {0};
 438:Src/main.c    ****    TIM_IC_InitTypeDef sConfigIC = {0};
 439:Src/main.c    **** 
 440:Src/main.c    ****    htim155.Instance = TIM15;
 441:Src/main.c    ****    htim155.Init.Prescaler = 14;
 442:Src/main.c    ****    htim155.Init.CounterMode = TIM_COUNTERMODE_UP;
 443:Src/main.c    ****    htim155.Init.Period = 0xFFFF;
 444:Src/main.c    ****    htim155.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 445:Src/main.c    ****    if (HAL_TIM_Base_Init(&htim155) != HAL_OK)
 446:Src/main.c    ****    {
 447:Src/main.c    ****    Error_Handler();
 448:Src/main.c    ****    }
 449:Src/main.c    ****    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 450:Src/main.c    ****    if (HAL_TIM_ConfigClockSource(&htim155, &sClockSourceConfig) != HAL_OK)
 451:Src/main.c    ****    {
 452:Src/main.c    ****    Error_Handler();
 453:Src/main.c    ****    }
 454:Src/main.c    ****    if (HAL_TIM_IC_Init(&htim155) != HAL_OK)
 455:Src/main.c    ****    {
 456:Src/main.c    ****    Error_Handler();
 457:Src/main.c    ****    }
 458:Src/main.c    ****    sConfigIC.ICPolarity = TIM_ICPOLARITY_BOTHEDGE;
 459:Src/main.c    ****    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 460:Src/main.c    ****    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 461:Src/main.c    ****    sConfigIC.ICFilter = 0;
 462:Src/main.c    ****    if (HAL_TIM_IC_ConfigChannel(&htim155, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 463:Src/main.c    ****    {
 464:Src/main.c    ****    Error_Handler();
 465:Src/main.c    ****    }
 466:Src/main.c    ****    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 467:Src/main.c    ****    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 468:Src/main.c    ****    if (HAL_TIMEx_MasterConfigSynchronization(&htim155, &sMasterConfig) != HAL_OK)
 469:Src/main.c    ****    {
 470:Src/main.c    ****    Error_Handler();
 471:Src/main.c    ****    }
 472:Src/main.c    ****    }
 473:Src/main.c    ****    */
 474:Src/main.c    **** 
 475:Src/main.c    **** int main(void)
 476:Src/main.c    **** {
 477:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 478:Src/main.c    **** 	SystemClock_Config();
 479:Src/main.c    **** 
 480:Src/main.c    **** 	//USART Initalizations
 481:Src/main.c    **** 	GPIO_AF_Init();
 482:Src/main.c    **** 	USART_Init();
 483:Src/main.c    **** 
 484:Src/main.c    **** 	motor_init();                           // Initialize motor code
 485:Src/main.c    **** 
 486:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 487:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,2);
 488:Src/main.c    **** 
 489:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
ARM GAS  /tmp/cc7EdtTp.s 			page 10


 490:Src/main.c    **** 
 491:Src/main.c    **** 	//PWM and Ultrasonic Initalizations
 492:Src/main.c    **** 	MX_GPIO_Init();
 493:Src/main.c    **** 	/* TIM15_Init(); */
 494:Src/main.c    **** 	MX_TIM15_Init(); 
 495:Src/main.c    **** 
 496:Src/main.c    **** 	/* HAL_TIM_Base_Start(&htim15); */
 497:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 498:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 499:Src/main.c    **** 
 500:Src/main.c    **** 	while (1) {
 501:Src/main.c    **** 		/*
 502:Src/main.c    **** 		   if(incomingCommand){
 503:Src/main.c    **** 		   if(command[2]){
 504:Src/main.c    **** 		   uint8_t tens = command[1] - '0';
 505:Src/main.c    **** 		   uint8_t huns = command[2] - '0';
 506:Src/main.c    **** 		   ProcessCommandPWM(command[0], 10*tens + huns);
 507:Src/main.c    **** 		   }
 508:Src/main.c    **** 		   }
 509:Src/main.c    **** 		   */
 510:Src/main.c    **** 		HAL_Delay(500);
 511:Src/main.c    **** 	}
 512:Src/main.c    **** }
 513:Src/main.c    **** 
 514:Src/main.c    **** /**
 515:Src/main.c    ****  * @brief System Clock Configuration
 516:Src/main.c    ****  * @retval None
 517:Src/main.c    ****  */
 518:Src/main.c    **** void SystemClock_Config(void)
 519:Src/main.c    **** {
 520:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 521:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 522:Src/main.c    **** 
 523:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 524:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 525:Src/main.c    **** 	 */
 526:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 527:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 528:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 529:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 530:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 531:Src/main.c    **** 	{
 532:Src/main.c    **** 		Error_Handler();
 533:Src/main.c    **** 	}
 534:Src/main.c    **** 
 535:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 536:Src/main.c    **** 	*/
 537:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 538:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 539:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 540:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 541:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 542:Src/main.c    **** 
 543:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 544:Src/main.c    **** 	{
 545:Src/main.c    **** 		Error_Handler();
 546:Src/main.c    **** 	}
ARM GAS  /tmp/cc7EdtTp.s 			page 11


 547:Src/main.c    **** }
 548:Src/main.c    **** 
 549:Src/main.c    **** /**
 550:Src/main.c    ****  * @brief TIM15 Initialization Function
 551:Src/main.c    ****  * @param None
 552:Src/main.c    ****  * @retval None
 553:Src/main.c    ****  */
 554:Src/main.c    **** static void MX_TIM15_Init(void)
 555:Src/main.c    **** {
  26              		.loc 1 555 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 556:Src/main.c    **** 
 557:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 0 */
 558:Src/main.c    **** 
 559:Src/main.c    **** 	/* USER CODE END TIM1_Init 0 */
 560:Src/main.c    **** 
 561:Src/main.c    **** 	/* TIM_ClockConfigTypeDef sClockSourceConfig = {0}; */
 562:Src/main.c    **** 	/* TIM_MasterConfigTypeDef sMasterConfig = {0}; */
 563:Src/main.c    **** 
 564:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 1 */
 565:Src/main.c    **** 
 566:Src/main.c    **** 	/* USER CODE END TIM1_Init 1 */
 567:Src/main.c    **** 	/*
 568:Src/main.c    **** 	   htim15.Instance = TIM15;
 569:Src/main.c    **** 	   htim15.Init.Prescaler = 0;
 570:Src/main.c    **** 	   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 571:Src/main.c    **** 	   htim15.Init.Period = 65535;
 572:Src/main.c    **** 	   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 573:Src/main.c    **** 	   htim15.Init.RepetitionCounter = 0;
 574:Src/main.c    **** 	   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 575:Src/main.c    **** 	   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 576:Src/main.c    **** 	   {
 577:Src/main.c    **** 	   Error_Handler();
 578:Src/main.c    **** 	   }
 579:Src/main.c    **** 	   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 580:Src/main.c    **** 	   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 581:Src/main.c    **** 	   {
 582:Src/main.c    **** 	   Error_Handler();
 583:Src/main.c    **** 	   }
 584:Src/main.c    **** 	   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 585:Src/main.c    **** 	   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 586:Src/main.c    **** 	   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 587:Src/main.c    **** 	   {
 588:Src/main.c    **** 	   Error_Handler();
 589:Src/main.c    **** 	   }
 590:Src/main.c    **** 	   */
 591:Src/main.c    **** 
 592:Src/main.c    **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
  31              		.loc 1 592 2 view .LVU1
  32              		.loc 1 592 5 is_stmt 0 view .LVU2
  33 0000 074A     		ldr	r2, .L2
  34 0002 9169     		ldr	r1, [r2, #24]
  35              		.loc 1 592 15 view .LVU3
  36 0004 8023     		movs	r3, #128
ARM GAS  /tmp/cc7EdtTp.s 			page 12


  37 0006 5B02     		lsls	r3, r3, #9
  38 0008 0B43     		orrs	r3, r1
  39 000a 9361     		str	r3, [r2, #24]
 593:Src/main.c    **** 	TIM15->PSC |= 100;
  40              		.loc 1 593 2 is_stmt 1 view .LVU4
  41              		.loc 1 593 7 is_stmt 0 view .LVU5
  42 000c 054B     		ldr	r3, .L2+4
  43 000e 9A6A     		ldr	r2, [r3, #40]
  44              		.loc 1 593 13 view .LVU6
  45 0010 6421     		movs	r1, #100
  46 0012 0A43     		orrs	r2, r1
  47 0014 9A62     		str	r2, [r3, #40]
 594:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
  48              		.loc 1 594 2 is_stmt 1 view .LVU7
  49              		.loc 1 594 7 is_stmt 0 view .LVU8
  50 0016 1A68     		ldr	r2, [r3]
  51              		.loc 1 594 13 view .LVU9
  52 0018 6339     		subs	r1, r1, #99
  53 001a 0A43     		orrs	r2, r1
  54 001c 1A60     		str	r2, [r3]
 595:Src/main.c    **** 
 596:Src/main.c    **** 	// HAL_TIM_Base_Start(&htim15);
 597:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 2 */
 598:Src/main.c    **** 
 599:Src/main.c    **** 	/* USER CODE END TIM1_Init 2 */
 600:Src/main.c    **** 
 601:Src/main.c    **** }
  55              		.loc 1 601 1 view .LVU10
  56              		@ sp needed
  57 001e 7047     		bx	lr
  58              	.L3:
  59              		.align	2
  60              	.L2:
  61 0020 00100240 		.word	1073876992
  62 0024 00400140 		.word	1073823744
  63              		.cfi_endproc
  64              	.LFE57:
  66              		.section	.text.MX_GPIO_Init,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.code	16
  70              		.thumb_func
  72              	MX_GPIO_Init:
  73              	.LFB58:
 602:Src/main.c    **** 
 603:Src/main.c    **** /**
 604:Src/main.c    ****  * @brief GPIO Initialization Function
 605:Src/main.c    ****  * @param None
 606:Src/main.c    ****  * @retval None
 607:Src/main.c    ****  */
 608:Src/main.c    **** static void MX_GPIO_Init(void)
 609:Src/main.c    **** {
  74              		.loc 1 609 1 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 24
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc7EdtTp.s 			page 13


  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 86B0     		sub	sp, sp, #24
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 32
 610:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  86              		.loc 1 610 2 view .LVU12
  87              		.loc 1 610 19 is_stmt 0 view .LVU13
  88 0004 1422     		movs	r2, #20
  89 0006 0021     		movs	r1, #0
  90 0008 01A8     		add	r0, sp, #4
  91 000a FFF7FEFF 		bl	memset
  92              	.LVL0:
 611:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 612:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 613:Src/main.c    **** 
 614:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 615:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  93              		.loc 1 615 2 is_stmt 1 view .LVU14
  94              	.LBB8:
  95              		.loc 1 615 2 view .LVU15
  96              		.loc 1 615 2 view .LVU16
  97 000e 0E4B     		ldr	r3, .L5
  98 0010 5A69     		ldr	r2, [r3, #20]
  99 0012 8021     		movs	r1, #128
 100 0014 C903     		lsls	r1, r1, #15
 101 0016 0A43     		orrs	r2, r1
 102 0018 5A61     		str	r2, [r3, #20]
 103              		.loc 1 615 2 view .LVU17
 104 001a 5B69     		ldr	r3, [r3, #20]
 105 001c 0B40     		ands	r3, r1
 106 001e 0093     		str	r3, [sp]
 107              		.loc 1 615 2 view .LVU18
 108 0020 009B     		ldr	r3, [sp]
 109              	.LBE8:
 110              		.loc 1 615 2 view .LVU19
 616:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 617:Src/main.c    **** 
 618:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 619:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 111              		.loc 1 619 2 view .LVU20
 112 0022 9024     		movs	r4, #144
 113 0024 E405     		lsls	r4, r4, #23
 114 0026 0022     		movs	r2, #0
 115 0028 0121     		movs	r1, #1
 116 002a 2000     		movs	r0, r4
 117 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL1:
 620:Src/main.c    **** 
 621:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 622:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
 119              		.loc 1 622 2 view .LVU21
 120              		.loc 1 622 22 is_stmt 0 view .LVU22
 121 0030 0123     		movs	r3, #1
 122 0032 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc7EdtTp.s 			page 14


 623:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 123              		.loc 1 623 2 is_stmt 1 view .LVU23
 124              		.loc 1 623 23 is_stmt 0 view .LVU24
 125 0034 0293     		str	r3, [sp, #8]
 624:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 126              		.loc 1 624 2 is_stmt 1 view .LVU25
 127              		.loc 1 624 23 is_stmt 0 view .LVU26
 128 0036 0023     		movs	r3, #0
 129 0038 0393     		str	r3, [sp, #12]
 625:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 625 2 is_stmt 1 view .LVU27
 131              		.loc 1 625 24 is_stmt 0 view .LVU28
 132 003a 0493     		str	r3, [sp, #16]
 626:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 133              		.loc 1 626 2 is_stmt 1 view .LVU29
 134 003c 01A9     		add	r1, sp, #4
 135 003e 2000     		movs	r0, r4
 136 0040 FFF7FEFF 		bl	HAL_GPIO_Init
 137              	.LVL2:
 627:Src/main.c    **** 
 628:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 629:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 630:Src/main.c    **** }
 138              		.loc 1 630 1 is_stmt 0 view .LVU30
 139 0044 06B0     		add	sp, sp, #24
 140              		@ sp needed
 141 0046 10BD     		pop	{r4, pc}
 142              	.L6:
 143              		.align	2
 144              	.L5:
 145 0048 00100240 		.word	1073876992
 146              		.cfi_endproc
 147              	.LFE58:
 149              		.section	.text.LED_Init,"ax",%progbits
 150              		.align	1
 151              		.global	LED_Init
 152              		.syntax unified
 153              		.code	16
 154              		.thumb_func
 156              	LED_Init:
 157              	.LVL3:
 158              	.LFB43:
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 159              		.loc 1 82 30 is_stmt 1 view -0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 24
 162              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 163              		.loc 1 82 30 is_stmt 0 view .LVU32
 164 0000 10B5     		push	{r4, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169 0002 86B0     		sub	sp, sp, #24
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/cc7EdtTp.s 			page 15


 172 0004 0400     		movs	r4, r0
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 173              		.loc 1 85 2 is_stmt 1 view .LVU33
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 174              		.loc 1 85 19 is_stmt 0 view .LVU34
 175 0006 1422     		movs	r2, #20
 176 0008 0021     		movs	r1, #0
 177 000a 01A8     		add	r0, sp, #4
 178              	.LVL4:
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 179              		.loc 1 85 19 view .LVU35
 180 000c FFF7FEFF 		bl	memset
 181              	.LVL5:
 182 0010 0194     		str	r4, [sp, #4]
 183 0012 0123     		movs	r3, #1
 184 0014 0293     		str	r3, [sp, #8]
  90:Src/main.c    **** }
 185              		.loc 1 90 2 is_stmt 1 view .LVU36
 186 0016 01A9     		add	r1, sp, #4
 187 0018 0248     		ldr	r0, .L8
 188 001a FFF7FEFF 		bl	HAL_GPIO_Init
 189              	.LVL6:
  91:Src/main.c    **** 
 190              		.loc 1 91 1 is_stmt 0 view .LVU37
 191 001e 06B0     		add	sp, sp, #24
 192              		@ sp needed
 193              	.LVL7:
  91:Src/main.c    **** 
 194              		.loc 1 91 1 view .LVU38
 195 0020 10BD     		pop	{r4, pc}
 196              	.L9:
 197 0022 C046     		.align	2
 198              	.L8:
 199 0024 00080048 		.word	1207961600
 200              		.cfi_endproc
 201              	.LFE43:
 203              		.section	.text.GPIO_AF_Init,"ax",%progbits
 204              		.align	1
 205              		.global	GPIO_AF_Init
 206              		.syntax unified
 207              		.code	16
 208              		.thumb_func
 210              	GPIO_AF_Init:
 211              	.LFB44:
  98:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 212              		.loc 1 98 21 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 16
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              	.LCFI4:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 4, -8
 220              		.cfi_offset 14, -4
 221 0002 84B0     		sub	sp, sp, #16
 222              	.LCFI5:
 223              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc7EdtTp.s 			page 16


  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 224              		.loc 1 99 2 view .LVU40
 225              	.LBB9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 226              		.loc 1 99 2 view .LVU41
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 227              		.loc 1 99 2 view .LVU42
 228 0004 364B     		ldr	r3, .L11
 229 0006 5A69     		ldr	r2, [r3, #20]
 230 0008 8021     		movs	r1, #128
 231 000a 8902     		lsls	r1, r1, #10
 232 000c 0A43     		orrs	r2, r1
 233 000e 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 234              		.loc 1 99 2 view .LVU43
 235 0010 5A69     		ldr	r2, [r3, #20]
 236 0012 0A40     		ands	r2, r1
 237 0014 0192     		str	r2, [sp, #4]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 238              		.loc 1 99 2 view .LVU44
 239 0016 019A     		ldr	r2, [sp, #4]
 240              	.LBE9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 241              		.loc 1 99 2 view .LVU45
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 242              		.loc 1 100 2 view .LVU46
 243              	.LBB10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 244              		.loc 1 100 2 view .LVU47
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 245              		.loc 1 100 2 view .LVU48
 246 0018 5A69     		ldr	r2, [r3, #20]
 247 001a 8021     		movs	r1, #128
 248 001c C902     		lsls	r1, r1, #11
 249 001e 0A43     		orrs	r2, r1
 250 0020 5A61     		str	r2, [r3, #20]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 251              		.loc 1 100 2 view .LVU49
 252 0022 5A69     		ldr	r2, [r3, #20]
 253 0024 0A40     		ands	r2, r1
 254 0026 0292     		str	r2, [sp, #8]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 255              		.loc 1 100 2 view .LVU50
 256 0028 029A     		ldr	r2, [sp, #8]
 257              	.LBE10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 258              		.loc 1 100 2 view .LVU51
 101:Src/main.c    **** 
 259              		.loc 1 101 2 view .LVU52
 260              	.LBB11:
 101:Src/main.c    **** 
 261              		.loc 1 101 2 view .LVU53
 101:Src/main.c    **** 
 262              		.loc 1 101 2 view .LVU54
 263 002a 5A69     		ldr	r2, [r3, #20]
 264 002c 8021     		movs	r1, #128
 265 002e 0903     		lsls	r1, r1, #12
ARM GAS  /tmp/cc7EdtTp.s 			page 17


 266 0030 0A43     		orrs	r2, r1
 267 0032 5A61     		str	r2, [r3, #20]
 101:Src/main.c    **** 
 268              		.loc 1 101 2 view .LVU55
 269 0034 5B69     		ldr	r3, [r3, #20]
 270 0036 0B40     		ands	r3, r1
 271 0038 0393     		str	r3, [sp, #12]
 101:Src/main.c    **** 
 272              		.loc 1 101 2 view .LVU56
 273 003a 039B     		ldr	r3, [sp, #12]
 274              	.LBE11:
 101:Src/main.c    **** 
 275              		.loc 1 101 2 view .LVU57
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 276              		.loc 1 104 2 view .LVU58
 277 003c 2949     		ldr	r1, .L11+4
 278 003e 0C1F     		subs	r4, r1, #4
 279 0040 2068     		ldr	r0, [r4]
 280 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL8:
 105:Src/main.c    **** 
 282              		.loc 1 105 2 view .LVU59
 283 0046 2100     		movs	r1, r4
 284 0048 1C31     		adds	r1, r1, #28
 285 004a A069     		ldr	r0, [r4, #24]
 286 004c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL9:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 288              		.loc 1 108 2 view .LVU60
 289 0050 2549     		ldr	r1, .L11+8
 290 0052 0C1F     		subs	r4, r1, #4
 291 0054 2068     		ldr	r0, [r4]
 292 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL10:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 294              		.loc 1 109 2 view .LVU61
 295 005a 2100     		movs	r1, r4
 296 005c 1C31     		adds	r1, r1, #28
 297 005e A069     		ldr	r0, [r4, #24]
 298 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL11:
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 300              		.loc 1 110 2 view .LVU62
 301 0064 2100     		movs	r1, r4
 302 0066 3431     		adds	r1, r1, #52
 303 0068 206B     		ldr	r0, [r4, #48]
 304 006a FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL12:
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 306              		.loc 1 111 2 view .LVU63
 307 006e 2100     		movs	r1, r4
 308 0070 4C31     		adds	r1, r1, #76
 309 0072 A06C     		ldr	r0, [r4, #72]
 310 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL13:
 112:Src/main.c    **** 
 312              		.loc 1 112 2 view .LVU64
ARM GAS  /tmp/cc7EdtTp.s 			page 18


 313 0078 2100     		movs	r1, r4
 314 007a 6431     		adds	r1, r1, #100
 315 007c 206E     		ldr	r0, [r4, #96]
 316 007e FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL14:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 318              		.loc 1 115 2 view .LVU65
 319 0082 1A49     		ldr	r1, .L11+12
 320 0084 0C1F     		subs	r4, r1, #4
 321 0086 2068     		ldr	r0, [r4]
 322 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL15:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 324              		.loc 1 116 2 view .LVU66
 325 008c 2100     		movs	r1, r4
 326 008e 1C31     		adds	r1, r1, #28
 327 0090 A069     		ldr	r0, [r4, #24]
 328 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 329              	.LVL16:
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 330              		.loc 1 117 2 view .LVU67
 331 0096 2100     		movs	r1, r4
 332 0098 3431     		adds	r1, r1, #52
 333 009a 206B     		ldr	r0, [r4, #48]
 334 009c FFF7FEFF 		bl	HAL_GPIO_Init
 335              	.LVL17:
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 336              		.loc 1 118 2 view .LVU68
 337 00a0 2100     		movs	r1, r4
 338 00a2 4C31     		adds	r1, r1, #76
 339 00a4 A06C     		ldr	r0, [r4, #72]
 340 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 341              	.LVL18:
 119:Src/main.c    **** 
 342              		.loc 1 119 2 view .LVU69
 343 00aa 2100     		movs	r1, r4
 344 00ac 6431     		adds	r1, r1, #100
 345 00ae 206E     		ldr	r0, [r4, #96]
 346 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 347              	.LVL19:
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 348              		.loc 1 122 2 view .LVU70
 349 00b4 0E49     		ldr	r1, .L11+16
 350 00b6 0C1F     		subs	r4, r1, #4
 351 00b8 2068     		ldr	r0, [r4]
 352 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 353              	.LVL20:
 123:Src/main.c    **** 
 354              		.loc 1 123 2 view .LVU71
 355 00be 2100     		movs	r1, r4
 356 00c0 1C31     		adds	r1, r1, #28
 357 00c2 A069     		ldr	r0, [r4, #24]
 358 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 359              	.LVL21:
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 360              		.loc 1 126 2 view .LVU72
 361 00c8 0A49     		ldr	r1, .L11+20
ARM GAS  /tmp/cc7EdtTp.s 			page 19


 362 00ca 0C1F     		subs	r4, r1, #4
 363 00cc 2068     		ldr	r0, [r4]
 364 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 365              	.LVL22:
 127:Src/main.c    **** }
 366              		.loc 1 127 2 view .LVU73
 367 00d2 2100     		movs	r1, r4
 368 00d4 1C31     		adds	r1, r1, #28
 369 00d6 A069     		ldr	r0, [r4, #24]
 370 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 371              	.LVL23:
 128:Src/main.c    **** 
 372              		.loc 1 128 1 is_stmt 0 view .LVU74
 373 00dc 04B0     		add	sp, sp, #16
 374              		@ sp needed
 375 00de 10BD     		pop	{r4, pc}
 376              	.L12:
 377              		.align	2
 378              	.L11:
 379 00e0 00100240 		.word	1073876992
 380 00e4 04000000 		.word	uart_pins+4
 381 00e8 04000000 		.word	motor_left_pins+4
 382 00ec 04000000 		.word	motor_right_pins+4
 383 00f0 04000000 		.word	ultrasonic_left_pins+4
 384 00f4 04000000 		.word	ultrasonic_right_pins+4
 385              		.cfi_endproc
 386              	.LFE44:
 388              		.global	__aeabi_uidiv
 389              		.section	.text.USART_Init,"ax",%progbits
 390              		.align	1
 391              		.global	USART_Init
 392              		.syntax unified
 393              		.code	16
 394              		.thumb_func
 396              	USART_Init:
 397              	.LFB45:
 133:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 398              		.loc 1 133 19 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402 0000 10B5     		push	{r4, lr}
 403              	.LCFI6:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 4, -8
 406              		.cfi_offset 14, -4
 407 0002 82B0     		sub	sp, sp, #8
 408              	.LCFI7:
 409              		.cfi_def_cfa_offset 16
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 410              		.loc 1 134 2 view .LVU76
 411              	.LBB12:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 412              		.loc 1 134 2 view .LVU77
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 413              		.loc 1 134 2 view .LVU78
 414 0004 154B     		ldr	r3, .L14
ARM GAS  /tmp/cc7EdtTp.s 			page 20


 415 0006 D969     		ldr	r1, [r3, #28]
 416 0008 8022     		movs	r2, #128
 417 000a D202     		lsls	r2, r2, #11
 418 000c 1143     		orrs	r1, r2
 419 000e D961     		str	r1, [r3, #28]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 420              		.loc 1 134 2 view .LVU79
 421 0010 D969     		ldr	r1, [r3, #28]
 422 0012 1140     		ands	r1, r2
 423 0014 0191     		str	r1, [sp, #4]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 424              		.loc 1 134 2 view .LVU80
 425 0016 0199     		ldr	r1, [sp, #4]
 426              	.LBE12:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 427              		.loc 1 134 2 view .LVU81
 135:Src/main.c    **** 
 428              		.loc 1 135 2 view .LVU82
 135:Src/main.c    **** 
 429              		.loc 1 135 5 is_stmt 0 view .LVU83
 430 0018 D969     		ldr	r1, [r3, #28]
 135:Src/main.c    **** 
 431              		.loc 1 135 15 view .LVU84
 432 001a 0A43     		orrs	r2, r1
 433 001c DA61     		str	r2, [r3, #28]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 434              		.loc 1 138 2 is_stmt 1 view .LVU85
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 435              		.loc 1 138 8 is_stmt 0 view .LVU86
 436 001e 104C     		ldr	r4, .L14+4
 437 0020 2368     		ldr	r3, [r4]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 438              		.loc 1 138 14 view .LVU87
 439 0022 104A     		ldr	r2, .L14+8
 440 0024 1340     		ands	r3, r2
 441 0026 2360     		str	r3, [r4]
 139:Src/main.c    **** 												//use with the BT adapter
 442              		.loc 1 139 2 is_stmt 1 view .LVU88
 139:Src/main.c    **** 												//use with the BT adapter
 443              		.loc 1 139 16 is_stmt 0 view .LVU89
 444 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 445              	.LVL24:
 139:Src/main.c    **** 												//use with the BT adapter
 446              		.loc 1 139 38 view .LVU90
 447 002c 9621     		movs	r1, #150
 448 002e 8901     		lsls	r1, r1, #6
 449 0030 FFF7FEFF 		bl	__aeabi_uidiv
 450              	.LVL25:
 139:Src/main.c    **** 												//use with the BT adapter
 451              		.loc 1 139 14 view .LVU91
 452 0034 E060     		str	r0, [r4, #12]
 143:Src/main.c    **** 
 453              		.loc 1 143 2 is_stmt 1 view .LVU92
 143:Src/main.c    **** 
 454              		.loc 1 143 8 is_stmt 0 view .LVU93
 455 0036 2368     		ldr	r3, [r4]
 143:Src/main.c    **** 
ARM GAS  /tmp/cc7EdtTp.s 			page 21


 456              		.loc 1 143 14 view .LVU94
 457 0038 0822     		movs	r2, #8
 458 003a 1343     		orrs	r3, r2
 459 003c 2360     		str	r3, [r4]
 146:Src/main.c    **** 
 460              		.loc 1 146 2 is_stmt 1 view .LVU95
 146:Src/main.c    **** 
 461              		.loc 1 146 8 is_stmt 0 view .LVU96
 462 003e 2368     		ldr	r3, [r4]
 146:Src/main.c    **** 
 463              		.loc 1 146 14 view .LVU97
 464 0040 043A     		subs	r2, r2, #4
 465 0042 1343     		orrs	r3, r2
 466 0044 2360     		str	r3, [r4]
 149:Src/main.c    **** 
 467              		.loc 1 149 2 is_stmt 1 view .LVU98
 149:Src/main.c    **** 
 468              		.loc 1 149 8 is_stmt 0 view .LVU99
 469 0046 2368     		ldr	r3, [r4]
 149:Src/main.c    **** 
 470              		.loc 1 149 14 view .LVU100
 471 0048 1C32     		adds	r2, r2, #28
 472 004a 1343     		orrs	r3, r2
 473 004c 2360     		str	r3, [r4]
 152:Src/main.c    **** }
 474              		.loc 1 152 2 is_stmt 1 view .LVU101
 152:Src/main.c    **** }
 475              		.loc 1 152 8 is_stmt 0 view .LVU102
 476 004e 2368     		ldr	r3, [r4]
 152:Src/main.c    **** }
 477              		.loc 1 152 14 view .LVU103
 478 0050 1F3A     		subs	r2, r2, #31
 479 0052 1343     		orrs	r3, r2
 480 0054 2360     		str	r3, [r4]
 153:Src/main.c    **** 
 481              		.loc 1 153 1 view .LVU104
 482 0056 02B0     		add	sp, sp, #8
 483              		@ sp needed
 484 0058 10BD     		pop	{r4, pc}
 485              	.L15:
 486 005a C046     		.align	2
 487              	.L14:
 488 005c 00100240 		.word	1073876992
 489 0060 00480040 		.word	1073760256
 490 0064 FF7FFFFF 		.word	-32769
 491              		.cfi_endproc
 492              	.LFE45:
 494              		.section	.text.USART_SendChar,"ax",%progbits
 495              		.align	1
 496              		.global	USART_SendChar
 497              		.syntax unified
 498              		.code	16
 499              		.thumb_func
 501              	USART_SendChar:
 502              	.LFB46:
 160:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 503              		.loc 1 160 32 is_stmt 1 view -0
ARM GAS  /tmp/cc7EdtTp.s 			page 22


 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508              	.LVL26:
 509              	.L17:
 161:Src/main.c    **** 		;
 510              		.loc 1 161 8 discriminator 1 view .LVU106
 161:Src/main.c    **** 		;
 511              		.loc 1 161 16 is_stmt 0 discriminator 1 view .LVU107
 512 0000 034B     		ldr	r3, .L19
 513 0002 DB69     		ldr	r3, [r3, #28]
 161:Src/main.c    **** 		;
 514              		.loc 1 161 8 discriminator 1 view .LVU108
 515 0004 1B06     		lsls	r3, r3, #24
 516 0006 FBD5     		bpl	.L17
 164:Src/main.c    **** }
 517              		.loc 1 164 2 is_stmt 1 view .LVU109
 164:Src/main.c    **** }
 518              		.loc 1 164 14 is_stmt 0 view .LVU110
 519 0008 014B     		ldr	r3, .L19
 520 000a 1885     		strh	r0, [r3, #40]
 165:Src/main.c    **** 
 521              		.loc 1 165 1 view .LVU111
 522              		@ sp needed
 523 000c 7047     		bx	lr
 524              	.L20:
 525 000e C046     		.align	2
 526              	.L19:
 527 0010 00480040 		.word	1073760256
 528              		.cfi_endproc
 529              	.LFE46:
 531              		.section	.text.USART_SendString,"ax",%progbits
 532              		.align	1
 533              		.global	USART_SendString
 534              		.syntax unified
 535              		.code	16
 536              		.thumb_func
 538              	USART_SendString:
 539              	.LVL27:
 540              	.LFB47:
 172:Src/main.c    **** 	while(*p_string != 0) {
 541              		.loc 1 172 42 is_stmt 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 172:Src/main.c    **** 	while(*p_string != 0) {
 545              		.loc 1 172 42 is_stmt 0 view .LVU113
 546 0000 10B5     		push	{r4, lr}
 547              	.LCFI8:
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 4, -8
 550              		.cfi_offset 14, -4
 551 0002 0400     		movs	r4, r0
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 552              		.loc 1 173 2 is_stmt 1 view .LVU114
 173:Src/main.c    **** 		USART_SendChar(*p_string);
ARM GAS  /tmp/cc7EdtTp.s 			page 23


 553              		.loc 1 173 7 is_stmt 0 view .LVU115
 554 0004 02E0     		b	.L22
 555              	.LVL28:
 556              	.L23:
 174:Src/main.c    **** 		p_string++;
 557              		.loc 1 174 3 is_stmt 1 view .LVU116
 558 0006 FFF7FEFF 		bl	USART_SendChar
 559              	.LVL29:
 175:Src/main.c    **** 	}
 560              		.loc 1 175 3 view .LVU117
 175:Src/main.c    **** 	}
 561              		.loc 1 175 11 is_stmt 0 view .LVU118
 562 000a 0134     		adds	r4, r4, #1
 563              	.LVL30:
 564              	.L22:
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 565              		.loc 1 173 18 is_stmt 1 view .LVU119
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 566              		.loc 1 173 8 is_stmt 0 view .LVU120
 567 000c 2078     		ldrb	r0, [r4]
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 568              		.loc 1 173 18 view .LVU121
 569 000e 0028     		cmp	r0, #0
 570 0010 F9D1     		bne	.L23
 177:Src/main.c    **** }
 571              		.loc 1 177 2 is_stmt 1 view .LVU122
 572 0012 FFF7FEFF 		bl	USART_SendChar
 573              	.LVL31:
 178:Src/main.c    **** 
 574              		.loc 1 178 1 is_stmt 0 view .LVU123
 575              		@ sp needed
 576              	.LVL32:
 178:Src/main.c    **** 
 577              		.loc 1 178 1 view .LVU124
 578 0016 10BD     		pop	{r4, pc}
 579              		.cfi_endproc
 580              	.LFE47:
 582              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 583              		.align	2
 584              	.LC21:
 585 0000 434D443E 		.ascii	"CMD> \000"
 585      2000
 586              		.section	.text.ClearCommand,"ax",%progbits
 587              		.align	1
 588              		.global	ClearCommand
 589              		.syntax unified
 590              		.code	16
 591              		.thumb_func
 593              	ClearCommand:
 594              	.LFB48:
 183:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 595              		.loc 1 183 20 is_stmt 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 8
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599 0000 00B5     		push	{lr}
 600              	.LCFI9:
ARM GAS  /tmp/cc7EdtTp.s 			page 24


 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 14, -4
 603 0002 83B0     		sub	sp, sp, #12
 604              	.LCFI10:
 605              		.cfi_def_cfa_offset 16
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 606              		.loc 1 184 2 view .LVU126
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 607              		.loc 1 184 10 is_stmt 0 view .LVU127
 608 0004 094B     		ldr	r3, .L25
 609 0006 1A68     		ldr	r2, [r3]
 610 0008 0092     		str	r2, [sp]
 611 000a 9B88     		ldrh	r3, [r3, #4]
 612 000c 6A46     		mov	r2, sp
 613 000e 9380     		strh	r3, [r2, #4]
 185:Src/main.c    **** 	incomingCommand = 0;
 614              		.loc 1 185 2 is_stmt 1 view .LVU128
 615 0010 0748     		ldr	r0, .L25+4
 616 0012 0322     		movs	r2, #3
 617 0014 0021     		movs	r1, #0
 618 0016 FFF7FEFF 		bl	memset
 619              	.LVL33:
 186:Src/main.c    **** 	USART_SendString(prompt);
 620              		.loc 1 186 2 view .LVU129
 186:Src/main.c    **** 	USART_SendString(prompt);
 621              		.loc 1 186 18 is_stmt 0 view .LVU130
 622 001a 064B     		ldr	r3, .L25+8
 623 001c 0022     		movs	r2, #0
 624 001e 1A70     		strb	r2, [r3]
 187:Src/main.c    **** }
 625              		.loc 1 187 2 is_stmt 1 view .LVU131
 626 0020 6846     		mov	r0, sp
 627 0022 FFF7FEFF 		bl	USART_SendString
 628              	.LVL34:
 188:Src/main.c    **** 
 629              		.loc 1 188 1 is_stmt 0 view .LVU132
 630 0026 03B0     		add	sp, sp, #12
 631              		@ sp needed
 632 0028 00BD     		pop	{pc}
 633              	.L26:
 634 002a C046     		.align	2
 635              	.L25:
 636 002c 00000000 		.word	.LC21
 637 0030 00000000 		.word	command
 638 0034 00000000 		.word	incomingCommand
 639              		.cfi_endproc
 640              	.LFE48:
 642              		.section	.rodata.Proceed.str1.4,"aMS",%progbits,1
 643              		.align	2
 644              	.LC25:
 645 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 645      79657420 
 645      696D706C 
 645      656D656E 
 645      7465640A 
 646              		.section	.text.Proceed,"ax",%progbits
 647              		.align	1
ARM GAS  /tmp/cc7EdtTp.s 			page 25


 648              		.global	Proceed
 649              		.syntax unified
 650              		.code	16
 651              		.thumb_func
 653              	Proceed:
 654              	.LFB51:
 232:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 655              		.loc 1 232 15 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659 0000 10B5     		push	{r4, lr}
 660              	.LCFI11:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 4, -8
 663              		.cfi_offset 14, -4
 233:Src/main.c    **** 	USART_SendString(err);
 664              		.loc 1 233 2 view .LVU134
 665              	.LVL35:
 234:Src/main.c    **** }
 666              		.loc 1 234 2 view .LVU135
 667 0002 0248     		ldr	r0, .L28
 668 0004 FFF7FEFF 		bl	USART_SendString
 669              	.LVL36:
 235:Src/main.c    **** 
 670              		.loc 1 235 1 is_stmt 0 view .LVU136
 671              		@ sp needed
 672 0008 10BD     		pop	{r4, pc}
 673              	.L29:
 674 000a C046     		.align	2
 675              	.L28:
 676 000c 00000000 		.word	.LC25
 677              		.cfi_endproc
 678              	.LFE51:
 680              		.global	__aeabi_f2d
 681              		.section	.rodata.PrintDistance.str1.4,"aMS",%progbits,1
 682              		.align	2
 683              	.LC27:
 684 0000 25660A00 		.ascii	"%f\012\000"
 685              		.section	.text.PrintDistance,"ax",%progbits
 686              		.align	1
 687              		.global	PrintDistance
 688              		.syntax unified
 689              		.code	16
 690              		.thumb_func
 692              	PrintDistance:
 693              	.LFB53:
 384:Src/main.c    **** 	char dist[32] = "";
 694              		.loc 1 384 1 is_stmt 1 view -0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 32
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698 0000 00B5     		push	{lr}
 699              	.LCFI12:
 700              		.cfi_def_cfa_offset 4
 701              		.cfi_offset 14, -4
 702 0002 89B0     		sub	sp, sp, #36
ARM GAS  /tmp/cc7EdtTp.s 			page 26


 703              	.LCFI13:
 704              		.cfi_def_cfa_offset 40
 385:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 705              		.loc 1 385 2 view .LVU138
 385:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 706              		.loc 1 385 7 is_stmt 0 view .LVU139
 707 0004 0023     		movs	r3, #0
 708 0006 0093     		str	r3, [sp]
 709 0008 1C22     		movs	r2, #28
 710 000a 0021     		movs	r1, #0
 711 000c 01A8     		add	r0, sp, #4
 712 000e FFF7FEFF 		bl	memset
 713              	.LVL37:
 386:Src/main.c    **** 	USART_SendString(dist);
 714              		.loc 1 386 2 is_stmt 1 view .LVU140
 386:Src/main.c    **** 	USART_SendString(dist);
 715              		.loc 1 386 24 is_stmt 0 view .LVU141
 716 0012 FFF7FEFF 		bl	get_distance
 717              	.LVL38:
 386:Src/main.c    **** 	USART_SendString(dist);
 718              		.loc 1 386 2 view .LVU142
 719 0016 FFF7FEFF 		bl	__aeabi_f2d
 720              	.LVL39:
 721 001a 0200     		movs	r2, r0
 722 001c 0B00     		movs	r3, r1
 723 001e 0449     		ldr	r1, .L31
 724 0020 6846     		mov	r0, sp
 725 0022 FFF7FEFF 		bl	sprintf
 726              	.LVL40:
 387:Src/main.c    **** }
 727              		.loc 1 387 2 is_stmt 1 view .LVU143
 728 0026 6846     		mov	r0, sp
 729 0028 FFF7FEFF 		bl	USART_SendString
 730              	.LVL41:
 388:Src/main.c    **** 
 731              		.loc 1 388 1 is_stmt 0 view .LVU144
 732 002c 09B0     		add	sp, sp, #36
 733              		@ sp needed
 734 002e 00BD     		pop	{pc}
 735              	.L32:
 736              		.align	2
 737              	.L31:
 738 0030 00000000 		.word	.LC27
 739              		.cfi_endproc
 740              	.LFE53:
 742              		.global	__aeabi_ui2d
 743              		.global	__aeabi_ddiv
 744              		.global	__aeabi_d2uiz
 745              		.section	.text.GetUltrasonic,"ax",%progbits
 746              		.align	1
 747              		.global	GetUltrasonic
 748              		.syntax unified
 749              		.code	16
 750              		.thumb_func
 752              	GetUltrasonic:
 753              	.LVL42:
 754              	.LFB54:
ARM GAS  /tmp/cc7EdtTp.s 			page 27


 400:Src/main.c    **** 	uint32_t i = 0, j = 0;
 755              		.loc 1 400 54 is_stmt 1 view -0
 756              		.cfi_startproc
 757              		@ args = 0, pretend = 0, frame = 0
 758              		@ frame_needed = 0, uses_anonymous_args = 0
 400:Src/main.c    **** 	uint32_t i = 0, j = 0;
 759              		.loc 1 400 54 is_stmt 0 view .LVU146
 760 0000 70B5     		push	{r4, r5, r6, lr}
 761              	.LCFI14:
 762              		.cfi_def_cfa_offset 16
 763              		.cfi_offset 4, -16
 764              		.cfi_offset 5, -12
 765              		.cfi_offset 6, -8
 766              		.cfi_offset 14, -4
 767 0002 0400     		movs	r4, r0
 401:Src/main.c    **** 	TIM15->EGR |= 1; //clears counter
 768              		.loc 1 401 2 is_stmt 1 view .LVU147
 769              	.LVL43:
 402:Src/main.c    **** 	while(TIM15->EGR & 1)
 770              		.loc 1 402 2 view .LVU148
 402:Src/main.c    **** 	while(TIM15->EGR & 1)
 771              		.loc 1 402 7 is_stmt 0 view .LVU149
 772 0004 274A     		ldr	r2, .L43
 773 0006 5369     		ldr	r3, [r2, #20]
 402:Src/main.c    **** 	while(TIM15->EGR & 1)
 774              		.loc 1 402 13 view .LVU150
 775 0008 0121     		movs	r1, #1
 776 000a 0B43     		orrs	r3, r1
 777 000c 5361     		str	r3, [r2, #20]
 403:Src/main.c    **** 		;
 778              		.loc 1 403 2 is_stmt 1 view .LVU151
 779              	.L34:
 403:Src/main.c    **** 		;
 780              		.loc 1 403 8 discriminator 1 view .LVU152
 403:Src/main.c    **** 		;
 781              		.loc 1 403 13 is_stmt 0 discriminator 1 view .LVU153
 782 000e 254B     		ldr	r3, .L43
 783 0010 5B69     		ldr	r3, [r3, #20]
 403:Src/main.c    **** 		;
 784              		.loc 1 403 8 discriminator 1 view .LVU154
 785 0012 DB07     		lsls	r3, r3, #31
 786 0014 FBD4     		bmi	.L34
 405:Src/main.c    **** 	while (TIM15->CNT < 200){
 787              		.loc 1 405 2 is_stmt 1 view .LVU155
 788 0016 A18B     		ldrh	r1, [r4, #28]
 789 0018 A069     		ldr	r0, [r4, #24]
 790              	.LVL44:
 405:Src/main.c    **** 	while (TIM15->CNT < 200){
 791              		.loc 1 405 2 is_stmt 0 view .LVU156
 792 001a 0122     		movs	r2, #1
 793 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 794              	.LVL45:
 406:Src/main.c    **** 	}
 795              		.loc 1 406 2 is_stmt 1 view .LVU157
 796              	.L35:
 407:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 797              		.loc 1 407 2 discriminator 1 view .LVU158
ARM GAS  /tmp/cc7EdtTp.s 			page 28


 406:Src/main.c    **** 	}
 798              		.loc 1 406 20 discriminator 1 view .LVU159
 406:Src/main.c    **** 	}
 799              		.loc 1 406 14 is_stmt 0 discriminator 1 view .LVU160
 800 0020 204B     		ldr	r3, .L43
 801 0022 5B6A     		ldr	r3, [r3, #36]
 406:Src/main.c    **** 	}
 802              		.loc 1 406 20 discriminator 1 view .LVU161
 803 0024 C72B     		cmp	r3, #199
 804 0026 FBD9     		bls	.L35
 408:Src/main.c    **** 
 805              		.loc 1 408 2 is_stmt 1 view .LVU162
 806 0028 A18B     		ldrh	r1, [r4, #28]
 807 002a A069     		ldr	r0, [r4, #24]
 808 002c 0022     		movs	r2, #0
 809 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 810              	.LVL46:
 410:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 811              		.loc 1 410 2 view .LVU163
 410:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 812              		.loc 1 410 17 is_stmt 0 view .LVU164
 813 0032 1C4B     		ldr	r3, .L43
 814 0034 5A6A     		ldr	r2, [r3, #36]
 410:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 815              		.loc 1 410 10 view .LVU165
 816 0036 1C4B     		ldr	r3, .L43+4
 817 0038 1A60     		str	r2, [r3]
 411:Src/main.c    **** 		i++;
 818              		.loc 1 411 2 is_stmt 1 view .LVU166
 819              	.LVL47:
 820              	.L37:
 411:Src/main.c    **** 		i++;
 821              		.loc 1 411 79 view .LVU167
 411:Src/main.c    **** 		i++;
 822              		.loc 1 411 11 is_stmt 0 view .LVU168
 823 003a A188     		ldrh	r1, [r4, #4]
 824 003c 2068     		ldr	r0, [r4]
 825 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 826              	.LVL48:
 411:Src/main.c    **** 		i++;
 827              		.loc 1 411 79 view .LVU169
 828 0042 0028     		cmp	r0, #0
 829 0044 06D1     		bne	.L36
 411:Src/main.c    **** 		i++;
 830              		.loc 1 411 90 discriminator 1 view .LVU170
 831 0046 184B     		ldr	r3, .L43+4
 832 0048 1B68     		ldr	r3, [r3]
 833 004a C833     		adds	r3, r3, #200
 411:Src/main.c    **** 		i++;
 834              		.loc 1 411 104 discriminator 1 view .LVU171
 835 004c 154A     		ldr	r2, .L43
 836 004e 526A     		ldr	r2, [r2, #36]
 411:Src/main.c    **** 		i++;
 837              		.loc 1 411 79 discriminator 1 view .LVU172
 838 0050 9342     		cmp	r3, r2
 839 0052 F2D8     		bhi	.L37
 840              	.L36:
ARM GAS  /tmp/cc7EdtTp.s 			page 29


 414:Src/main.c    **** 
 841              		.loc 1 414 2 is_stmt 1 view .LVU173
 414:Src/main.c    **** 
 842              		.loc 1 414 11 is_stmt 0 view .LVU174
 843 0054 134B     		ldr	r3, .L43
 844 0056 5D6A     		ldr	r5, [r3, #36]
 845              	.LVL49:
 416:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 846              		.loc 1 416 2 is_stmt 1 view .LVU175
 416:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 847              		.loc 1 416 10 is_stmt 0 view .LVU176
 848 0058 134B     		ldr	r3, .L43+4
 849 005a 1D60     		str	r5, [r3]
 417:Src/main.c    **** 		j++;
 850              		.loc 1 417 2 is_stmt 1 view .LVU177
 851              	.LVL50:
 852              	.L39:
 417:Src/main.c    **** 		j++;
 853              		.loc 1 417 78 view .LVU178
 417:Src/main.c    **** 		j++;
 854              		.loc 1 417 10 is_stmt 0 view .LVU179
 855 005c A188     		ldrh	r1, [r4, #4]
 856 005e 2068     		ldr	r0, [r4]
 857 0060 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 858              	.LVL51:
 417:Src/main.c    **** 		j++;
 859              		.loc 1 417 78 view .LVU180
 860 0064 0028     		cmp	r0, #0
 861 0066 09D0     		beq	.L38
 417:Src/main.c    **** 		j++;
 862              		.loc 1 417 89 discriminator 1 view .LVU181
 863 0068 0F4B     		ldr	r3, .L43+4
 864 006a 1B68     		ldr	r3, [r3]
 865 006c 9622     		movs	r2, #150
 866 006e D200     		lsls	r2, r2, #3
 867 0070 9446     		mov	ip, r2
 868 0072 6344     		add	r3, r3, ip
 417:Src/main.c    **** 		j++;
 869              		.loc 1 417 103 discriminator 1 view .LVU182
 870 0074 0B4A     		ldr	r2, .L43
 871 0076 526A     		ldr	r2, [r2, #36]
 417:Src/main.c    **** 		j++;
 872              		.loc 1 417 78 discriminator 1 view .LVU183
 873 0078 9342     		cmp	r3, r2
 874 007a EFD8     		bhi	.L39
 875              	.L38:
 421:Src/main.c    **** 	if(val2-val1 == 1200)
 876              		.loc 1 421 2 is_stmt 1 view .LVU184
 421:Src/main.c    **** 	if(val2-val1 == 1200)
 877              		.loc 1 421 11 is_stmt 0 view .LVU185
 878 007c 094B     		ldr	r3, .L43
 879 007e 586A     		ldr	r0, [r3, #36]
 880              	.LVL52:
 422:Src/main.c    **** 		return -1;
 881              		.loc 1 422 2 is_stmt 1 view .LVU186
 422:Src/main.c    **** 		return -1;
 882              		.loc 1 422 9 is_stmt 0 view .LVU187
ARM GAS  /tmp/cc7EdtTp.s 			page 30


 883 0080 401B     		subs	r0, r0, r5
 884              	.LVL53:
 422:Src/main.c    **** 		return -1;
 885              		.loc 1 422 4 view .LVU188
 886 0082 9623     		movs	r3, #150
 887 0084 DB00     		lsls	r3, r3, #3
 888 0086 9842     		cmp	r0, r3
 889 0088 08D0     		beq	.L41
 424:Src/main.c    **** }
 890              		.loc 1 424 2 is_stmt 1 view .LVU189
 424:Src/main.c    **** }
 891              		.loc 1 424 20 is_stmt 0 view .LVU190
 892 008a FFF7FEFF 		bl	__aeabi_ui2d
 893              	.LVL54:
 894 008e 074A     		ldr	r2, .L43+8
 895 0090 074B     		ldr	r3, .L43+12
 896 0092 FFF7FEFF 		bl	__aeabi_ddiv
 897              	.LVL55:
 898 0096 FFF7FEFF 		bl	__aeabi_d2uiz
 899              	.LVL56:
 900              	.L33:
 425:Src/main.c    **** /* USER CODE END 0 */
 901              		.loc 1 425 1 view .LVU191
 902              		@ sp needed
 903              	.LVL57:
 904              	.LVL58:
 425:Src/main.c    **** /* USER CODE END 0 */
 905              		.loc 1 425 1 view .LVU192
 906 009a 70BD     		pop	{r4, r5, r6, pc}
 907              	.LVL59:
 908              	.L41:
 423:Src/main.c    **** 	return (val2-val1)/4.42; //this is a magic number that gives us centimeters with our prescaler val
 909              		.loc 1 423 10 view .LVU193
 910 009c 0120     		movs	r0, #1
 911 009e 4042     		rsbs	r0, r0, #0
 912 00a0 FBE7     		b	.L33
 913              	.L44:
 914 00a2 C046     		.align	2
 915              	.L43:
 916 00a4 00400140 		.word	1073823744
 917 00a8 00000000 		.word	pMillis
 918 00ac AE47E17A 		.word	2061584302
 919 00b0 14AE1140 		.word	1074900500
 920              		.cfi_endproc
 921              	.LFE54:
 923              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 924              		.align	2
 925              	.LC31:
 926 0000 556C7472 		.ascii	"Ultrasonic left: %d\012\000"
 926      61736F6E 
 926      6963206C 
 926      6566743A 
 926      2025640A 
 927 0015 000000   		.align	2
 928              	.LC34:
 929 0018 556C7472 		.ascii	"Ultrasonic right: %d\012\000"
 929      61736F6E 
ARM GAS  /tmp/cc7EdtTp.s 			page 31


 929      69632072 
 929      69676874 
 929      3A202564 
 930              		.global	__aeabi_f2iz
 931 002e 0000     		.align	2
 932              	.LC36:
 933 0030 44697374 		.ascii	"Distance travelled: %d\012\000"
 933      616E6365 
 933      20747261 
 933      76656C6C 
 933      65643A20 
 934              		.align	2
 935              	.LC38:
 936 0048 48656164 		.ascii	"Heading: %d\012\000"
 936      696E673A 
 936      2025640A 
 936      00
 937              		.section	.text.Log,"ax",%progbits
 938              		.align	1
 939              		.global	Log
 940              		.syntax unified
 941              		.code	16
 942              		.thumb_func
 944              	Log:
 945              	.LFB50:
 215:Src/main.c    **** 	uint8_t str_buff[32];
 946              		.loc 1 215 11 is_stmt 1 view -0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 32
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950 0000 00B5     		push	{lr}
 951              	.LCFI15:
 952              		.cfi_def_cfa_offset 4
 953              		.cfi_offset 14, -4
 954 0002 89B0     		sub	sp, sp, #36
 955              	.LCFI16:
 956              		.cfi_def_cfa_offset 40
 216:Src/main.c    **** 
 957              		.loc 1 216 2 view .LVU195
 218:Src/main.c    **** 	USART_SendString(str_buff);
 958              		.loc 1 218 2 view .LVU196
 959 0004 1648     		ldr	r0, .L46
 960 0006 FFF7FEFF 		bl	GetUltrasonic
 961              	.LVL60:
 962 000a 0200     		movs	r2, r0
 963 000c 1549     		ldr	r1, .L46+4
 964 000e 6846     		mov	r0, sp
 965 0010 FFF7FEFF 		bl	sprintf
 966              	.LVL61:
 219:Src/main.c    **** 
 967              		.loc 1 219 2 view .LVU197
 968 0014 6846     		mov	r0, sp
 969 0016 FFF7FEFF 		bl	USART_SendString
 970              	.LVL62:
 221:Src/main.c    **** 	USART_SendString(str_buff);
 971              		.loc 1 221 2 view .LVU198
 972 001a 1348     		ldr	r0, .L46+8
ARM GAS  /tmp/cc7EdtTp.s 			page 32


 973 001c FFF7FEFF 		bl	GetUltrasonic
 974              	.LVL63:
 975 0020 0200     		movs	r2, r0
 976 0022 1249     		ldr	r1, .L46+12
 977 0024 6846     		mov	r0, sp
 978 0026 FFF7FEFF 		bl	sprintf
 979              	.LVL64:
 222:Src/main.c    **** 
 980              		.loc 1 222 2 view .LVU199
 981 002a 6846     		mov	r0, sp
 982 002c FFF7FEFF 		bl	USART_SendString
 983              	.LVL65:
 224:Src/main.c    **** 	USART_SendString(str_buff);
 984              		.loc 1 224 2 view .LVU200
 224:Src/main.c    **** 	USART_SendString(str_buff);
 985              		.loc 1 224 53 is_stmt 0 view .LVU201
 986 0030 FFF7FEFF 		bl	get_distance
 987              	.LVL66:
 224:Src/main.c    **** 	USART_SendString(str_buff);
 988              		.loc 1 224 2 view .LVU202
 989 0034 FFF7FEFF 		bl	__aeabi_f2iz
 990              	.LVL67:
 991 0038 0200     		movs	r2, r0
 992 003a 0D49     		ldr	r1, .L46+16
 993 003c 6846     		mov	r0, sp
 994 003e FFF7FEFF 		bl	sprintf
 995              	.LVL68:
 225:Src/main.c    **** 
 996              		.loc 1 225 2 is_stmt 1 view .LVU203
 997 0042 6846     		mov	r0, sp
 998 0044 FFF7FEFF 		bl	USART_SendString
 999              	.LVL69:
 227:Src/main.c    **** 	USART_SendString(str_buff);
 1000              		.loc 1 227 2 view .LVU204
 227:Src/main.c    **** 	USART_SendString(str_buff);
 1001              		.loc 1 227 42 is_stmt 0 view .LVU205
 1002 0048 FFF7FEFF 		bl	get_heading
 1003              	.LVL70:
 1004 004c 0200     		movs	r2, r0
 227:Src/main.c    **** 	USART_SendString(str_buff);
 1005              		.loc 1 227 2 view .LVU206
 1006 004e 0949     		ldr	r1, .L46+20
 1007 0050 6846     		mov	r0, sp
 1008 0052 FFF7FEFF 		bl	sprintf
 1009              	.LVL71:
 228:Src/main.c    **** 
 1010              		.loc 1 228 2 is_stmt 1 view .LVU207
 1011 0056 6846     		mov	r0, sp
 1012 0058 FFF7FEFF 		bl	USART_SendString
 1013              	.LVL72:
 230:Src/main.c    **** 
 1014              		.loc 1 230 1 is_stmt 0 view .LVU208
 1015 005c 09B0     		add	sp, sp, #36
 1016              		@ sp needed
 1017 005e 00BD     		pop	{pc}
 1018              	.L47:
 1019              		.align	2
ARM GAS  /tmp/cc7EdtTp.s 			page 33


 1020              	.L46:
 1021 0060 00000000 		.word	ultrasonic_left_pins
 1022 0064 00000000 		.word	.LC31
 1023 0068 00000000 		.word	ultrasonic_right_pins
 1024 006c 18000000 		.word	.LC34
 1025 0070 30000000 		.word	.LC36
 1026 0074 48000000 		.word	.LC38
 1027              		.cfi_endproc
 1028              	.LFE50:
 1030              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 1031              		.align	2
 1032              	.LC55:
 1033 0000 696E6465 		.ascii	"indefinitely\012\000"
 1033      66696E69 
 1033      74656C79 
 1033      0A00
 1034 000e 0000     		.align	2
 1035              	.LC40:
 1036 0010 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 1036      523A2049 
 1036      6E76616C 
 1036      69642063 
 1036      6F6D6D61 
 1037 0029 000000   		.align	2
 1038              	.LC42:
 1039 002c 4D6F7669 		.ascii	"Moving forward \000"
 1039      6E672066 
 1039      6F727761 
 1039      72642000 
 1040              		.align	2
 1041              	.LC44:
 1042 003c 5475726E 		.ascii	"Turning left \000"
 1042      696E6720 
 1042      6C656674 
 1042      2000
 1043 004a 0000     		.align	2
 1044              	.LC46:
 1045 004c 5475726E 		.ascii	"Turning right \000"
 1045      696E6720 
 1045      72696768 
 1045      742000
 1046 005b 00       		.align	2
 1047              	.LC48:
 1048 005c 4C6F6767 		.ascii	"Logging sensor data\012\000"
 1048      696E6720 
 1048      73656E73 
 1048      6F722064 
 1048      6174610A 
 1049 0071 000000   		.align	2
 1050              	.LC50:
 1051 0074 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 1051      72696E67 
 1051      20617574 
 1051      6F6E6F6D 
 1051      6F757320 
 1052 0091 000000   		.align	2
 1053              	.LC52:
ARM GAS  /tmp/cc7EdtTp.s 			page 34


 1054 0094 53746F70 		.ascii	"Stopping all motors!\012\000"
 1054      70696E67 
 1054      20616C6C 
 1054      206D6F74 
 1054      6F727321 
 1055              		.section	.text.ProcessCommand,"ax",%progbits
 1056              		.align	1
 1057              		.global	ProcessCommand
 1058              		.syntax unified
 1059              		.code	16
 1060              		.thumb_func
 1062              	ProcessCommand:
 1063              	.LVL73:
 1064              	.LFB52:
 237:Src/main.c    **** 	uint32_t left_motor_pin;
 1065              		.loc 1 237 57 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 184
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 237:Src/main.c    **** 	uint32_t left_motor_pin;
 1069              		.loc 1 237 57 is_stmt 0 view .LVU210
 1070 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1071              	.LCFI17:
 1072              		.cfi_def_cfa_offset 20
 1073              		.cfi_offset 4, -20
 1074              		.cfi_offset 5, -16
 1075              		.cfi_offset 6, -12
 1076              		.cfi_offset 7, -8
 1077              		.cfi_offset 14, -4
 1078 0002 AFB0     		sub	sp, sp, #188
 1079              	.LCFI18:
 1080              		.cfi_def_cfa_offset 208
 1081 0004 0500     		movs	r5, r0
 1082 0006 0C00     		movs	r4, r1
 238:Src/main.c    **** 	uint32_t right_motor_pin;
 1083              		.loc 1 238 2 is_stmt 1 view .LVU211
 239:Src/main.c    **** 	int32_t CH1_DC = 65535;
 1084              		.loc 1 239 2 view .LVU212
 240:Src/main.c    **** 
 1085              		.loc 1 240 2 view .LVU213
 1086              	.LVL74:
 242:Src/main.c    **** 
 1087              		.loc 1 242 2 view .LVU214
 242:Src/main.c    **** 
 1088              		.loc 1 242 10 is_stmt 0 view .LVU215
 1089 0008 27A9     		add	r1, sp, #156
 1090              	.LVL75:
 242:Src/main.c    **** 
 1091              		.loc 1 242 10 view .LVU216
 1092 000a 534B     		ldr	r3, .L65
 1093 000c 0A00     		movs	r2, r1
 1094 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 1095 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 1096              	.LVL76:
 242:Src/main.c    **** 
 1097              		.loc 1 242 10 view .LVU217
 1098 0012 43CB     		ldmia	r3!, {r0, r1, r6}
ARM GAS  /tmp/cc7EdtTp.s 			page 35


 1099 0014 43C2     		stmia	r2!, {r0, r1, r6}
 1100 0016 1B78     		ldrb	r3, [r3]
 1101 0018 1370     		strb	r3, [r2]
 244:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1102              		.loc 1 244 2 is_stmt 1 view .LVU218
 244:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1103              		.loc 1 244 10 is_stmt 0 view .LVU219
 1104 001a 23AA     		add	r2, sp, #140
 1105 001c 4F4B     		ldr	r3, .L65+4
 1106 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 1107 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 1108 0022 1B68     		ldr	r3, [r3]
 1109 0024 1360     		str	r3, [r2]
 245:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1110              		.loc 1 245 2 is_stmt 1 view .LVU220
 245:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1111              		.loc 1 245 10 is_stmt 0 view .LVU221
 1112 0026 1FAA     		add	r2, sp, #124
 1113 0028 4D4B     		ldr	r3, .L65+8
 1114 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 1115 002c C1C2     		stmia	r2!, {r0, r6, r7}
 1116 002e 1B88     		ldrh	r3, [r3]
 1117 0030 1380     		strh	r3, [r2]
 246:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1118              		.loc 1 246 2 is_stmt 1 view .LVU222
 246:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1119              		.loc 1 246 10 is_stmt 0 view .LVU223
 1120 0032 1BAA     		add	r2, sp, #108
 1121 0034 4B4B     		ldr	r3, .L65+12
 1122 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 1123 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 1124 003a 1100     		movs	r1, r2
 1125 003c 1A88     		ldrh	r2, [r3]
 1126 003e 0A80     		strh	r2, [r1]
 1127 0040 9B78     		ldrb	r3, [r3, #2]
 1128 0042 8B70     		strb	r3, [r1, #2]
 247:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1129              		.loc 1 247 2 is_stmt 1 view .LVU224
 247:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1130              		.loc 1 247 10 is_stmt 0 view .LVU225
 1131 0044 15A9     		add	r1, sp, #84
 1132 0046 484B     		ldr	r3, .L65+16
 1133 0048 0A00     		movs	r2, r1
 1134 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 1135 004c C1C2     		stmia	r2!, {r0, r6, r7}
 1136 004e 03CB     		ldmia	r3!, {r0, r1}
 1137 0050 03C2     		stmia	r2!, {r0, r1}
 1138 0052 1B78     		ldrb	r3, [r3]
 1139 0054 1370     		strb	r3, [r2]
 248:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1140              		.loc 1 248 2 is_stmt 1 view .LVU226
 248:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1141              		.loc 1 248 10 is_stmt 0 view .LVU227
 1142 0056 0DA9     		add	r1, sp, #52
 1143 0058 444B     		ldr	r3, .L65+20
 1144 005a 0A00     		movs	r2, r1
 1145 005c C1CB     		ldmia	r3!, {r0, r6, r7}
ARM GAS  /tmp/cc7EdtTp.s 			page 36


 1146 005e C1C2     		stmia	r2!, {r0, r6, r7}
 1147 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 1148 0062 43C2     		stmia	r2!, {r0, r1, r6}
 1149 0064 1968     		ldr	r1, [r3]
 1150 0066 1160     		str	r1, [r2]
 1151 0068 1B79     		ldrb	r3, [r3, #4]
 1152 006a 1371     		strb	r3, [r2, #4]
 249:Src/main.c    **** 
 1153              		.loc 1 249 2 is_stmt 1 view .LVU228
 249:Src/main.c    **** 
 1154              		.loc 1 249 10 is_stmt 0 view .LVU229
 1155 006c 07A9     		add	r1, sp, #28
 1156 006e 404B     		ldr	r3, .L65+24
 1157 0070 0A00     		movs	r2, r1
 1158 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 1159 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 1160 0076 03CB     		ldmia	r3!, {r0, r1}
 1161 0078 03C2     		stmia	r2!, {r0, r1}
 1162 007a 1B88     		ldrh	r3, [r3]
 1163 007c 1380     		strh	r3, [r2]
 251:Src/main.c    **** 
 1164              		.loc 1 251 2 is_stmt 1 view .LVU230
 251:Src/main.c    **** 
 1165              		.loc 1 251 15 is_stmt 0 view .LVU231
 1166 007e 06AB     		add	r3, sp, #24
 1167 0080 0022     		movs	r2, #0
 1168 0082 1A80     		strh	r2, [r3]
 253:Src/main.c    **** 	uint8_t part2[15];
 1169              		.loc 1 253 2 is_stmt 1 view .LVU232
 254:Src/main.c    **** 	uint8_t zero = 0;
 1170              		.loc 1 254 2 view .LVU233
 255:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1171              		.loc 1 255 2 view .LVU234
 255:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1172              		.loc 1 255 10 is_stmt 0 view .LVU235
 1173 0084 6B46     		mov	r3, sp
 1174 0086 D91D     		adds	r1, r3, #7
 1175 0088 0023     		movs	r3, #0
 1176 008a 0B70     		strb	r3, [r1]
 256:Src/main.c    **** 
 1177              		.loc 1 256 2 is_stmt 1 view .LVU236
 1178 008c 0F32     		adds	r2, r2, #15
 1179 008e 02A8     		add	r0, sp, #8
 1180 0090 FFF7FEFF 		bl	memcpy
 1181              	.LVL77:
 258:Src/main.c    **** 		case 'w':
 1182              		.loc 1 258 2 view .LVU237
 1183 0094 2B00     		movs	r3, r5
 1184 0096 613B     		subs	r3, r3, #97
 1185 0098 DAB2     		uxtb	r2, r3
 1186 009a 172A     		cmp	r2, #23
 1187 009c 41D8     		bhi	.L49
 1188 009e 9300     		lsls	r3, r2, #2
 1189 00a0 344A     		ldr	r2, .L65+28
 1190 00a2 D358     		ldr	r3, [r2, r3]
 1191 00a4 9F46     		mov	pc, r3
 1192              		.section	.rodata.ProcessCommand,"a",%progbits
ARM GAS  /tmp/cc7EdtTp.s 			page 37


 1193              		.align	2
 1194              	.L51:
 1195 0000 A6000000 		.word	.L56
 1196 0004 22010000 		.word	.L49
 1197 0008 22010000 		.word	.L49
 1198 000c E2000000 		.word	.L55
 1199 0010 22010000 		.word	.L49
 1200 0014 22010000 		.word	.L49
 1201 0018 22010000 		.word	.L49
 1202 001c 22010000 		.word	.L49
 1203 0020 22010000 		.word	.L49
 1204 0024 22010000 		.word	.L49
 1205 0028 22010000 		.word	.L49
 1206 002c EC000000 		.word	.L54
 1207 0030 22010000 		.word	.L49
 1208 0034 22010000 		.word	.L49
 1209 0038 22010000 		.word	.L49
 1210 003c FC000000 		.word	.L53
 1211 0040 22010000 		.word	.L49
 1212 0044 22010000 		.word	.L49
 1213 0048 22010000 		.word	.L49
 1214 004c 22010000 		.word	.L49
 1215 0050 22010000 		.word	.L49
 1216 0054 22010000 		.word	.L49
 1217 0058 2E010000 		.word	.L62
 1218 005c 0C010000 		.word	.L50
 1219              		.section	.text.ProcessCommand
 1220              	.L56:
 264:Src/main.c    **** 			motorcmd.dir = LEFT;
 1221              		.loc 1 264 4 view .LVU238
 1222              	.LVL78:
 265:Src/main.c    **** 			break;
 1223              		.loc 1 265 4 view .LVU239
 265:Src/main.c    **** 			break;
 1224              		.loc 1 265 17 is_stmt 0 view .LVU240
 1225 00a6 06AB     		add	r3, sp, #24
 1226 00a8 0122     		movs	r2, #1
 1227 00aa 1A70     		strb	r2, [r3]
 266:Src/main.c    **** 		case 'd':
 1228              		.loc 1 266 4 is_stmt 1 view .LVU241
 264:Src/main.c    **** 			motorcmd.dir = LEFT;
 1229              		.loc 1 264 10 is_stmt 0 view .LVU242
 1230 00ac 1FA8     		add	r0, sp, #124
 1231              	.LVL79:
 1232              	.L52:
 298:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1233              		.loc 1 298 2 is_stmt 1 view .LVU243
 298:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1234              		.loc 1 298 4 is_stmt 0 view .LVU244
 1235 00ae 302C     		cmp	r4, #48
 1236 00b0 3FD0     		beq	.L63
 1237              	.L58:
 302:Src/main.c    **** 		USART_SendString(err);
 1238              		.loc 1 302 7 is_stmt 1 view .LVU245
 302:Src/main.c    **** 		USART_SendString(err);
 1239              		.loc 1 302 25 is_stmt 0 view .LVU246
 1240 00b2 2300     		movs	r3, r4
ARM GAS  /tmp/cc7EdtTp.s 			page 38


 1241 00b4 313B     		subs	r3, r3, #49
 1242 00b6 DBB2     		uxtb	r3, r3
 302:Src/main.c    **** 		USART_SendString(err);
 1243              		.loc 1 302 9 view .LVU247
 1244 00b8 082B     		cmp	r3, #8
 1245 00ba 46D8     		bhi	.L64
 1246              	.LBB13:
 308:Src/main.c    **** 		motorcmd.amount = dist;
 1247              		.loc 1 308 3 is_stmt 1 view .LVU248
 308:Src/main.c    **** 		motorcmd.amount = dist;
 1248              		.loc 1 308 11 is_stmt 0 view .LVU249
 1249 00bc 1423     		movs	r3, #20
 1250 00be 6343     		muls	r3, r4
 1251 00c0 4033     		adds	r3, r3, #64
 1252              	.LVL80:
 309:Src/main.c    **** 	}
 1253              		.loc 1 309 3 is_stmt 1 view .LVU250
 309:Src/main.c    **** 	}
 1254              		.loc 1 309 19 is_stmt 0 view .LVU251
 1255 00c2 06AA     		add	r2, sp, #24
 1256 00c4 5370     		strb	r3, [r2, #1]
 1257              	.LVL81:
 1258              	.L59:
 309:Src/main.c    **** 	}
 1259              		.loc 1 309 19 view .LVU252
 1260              	.LBE13:
 313:Src/main.c    **** 	USART_SendString(part2);
 1261              		.loc 1 313 2 is_stmt 1 view .LVU253
 1262 00c6 FFF7FEFF 		bl	USART_SendString
 1263              	.LVL82:
 314:Src/main.c    **** 
 1264              		.loc 1 314 2 view .LVU254
 1265 00ca 02A8     		add	r0, sp, #8
 1266 00cc FFF7FEFF 		bl	USART_SendString
 1267              	.LVL83:
 322:Src/main.c    **** 	USART_SendString(result);
 1268              		.loc 1 322 2 view .LVU255
 322:Src/main.c    **** 	USART_SendString(result);
 1269              		.loc 1 322 20 is_stmt 0 view .LVU256
 1270 00d0 06A8     		add	r0, sp, #24
 1271 00d2 FFF7FEFF 		bl	MoveMotors
 1272              	.LVL84:
 323:Src/main.c    **** 
 1273              		.loc 1 323 2 is_stmt 1 view .LVU257
 1274 00d6 FFF7FEFF 		bl	USART_SendString
 1275              	.LVL85:
 325:Src/main.c    **** 
 1276              		.loc 1 325 2 view .LVU258
 1277 00da FFF7FEFF 		bl	ClearCommand
 1278              	.LVL86:
 1279              	.L48:
 344:Src/main.c    **** 
 1280              		.loc 1 344 1 is_stmt 0 view .LVU259
 1281 00de 2FB0     		add	sp, sp, #188
 1282              		@ sp needed
 1283 00e0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1284              	.L55:
ARM GAS  /tmp/cc7EdtTp.s 			page 39


 268:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1285              		.loc 1 268 4 is_stmt 1 view .LVU260
 1286              	.LVL87:
 269:Src/main.c    **** 			break;
 1287              		.loc 1 269 4 view .LVU261
 269:Src/main.c    **** 			break;
 1288              		.loc 1 269 17 is_stmt 0 view .LVU262
 1289 00e2 06AB     		add	r3, sp, #24
 1290 00e4 0222     		movs	r2, #2
 1291 00e6 1A70     		strb	r2, [r3]
 270:Src/main.c    **** 		case 'l':
 1292              		.loc 1 270 4 is_stmt 1 view .LVU263
 268:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1293              		.loc 1 268 10 is_stmt 0 view .LVU264
 1294 00e8 1BA8     		add	r0, sp, #108
 1295              	.LVL88:
 270:Src/main.c    **** 		case 'l':
 1296              		.loc 1 270 4 view .LVU265
 1297 00ea E0E7     		b	.L52
 1298              	.LVL89:
 1299              	.L54:
 272:Src/main.c    **** 			USART_SendString(part1);
 1300              		.loc 1 272 4 is_stmt 1 view .LVU266
 273:Src/main.c    **** 			Log();
 1301              		.loc 1 273 4 view .LVU267
 1302 00ec 15A8     		add	r0, sp, #84
 1303              	.LVL90:
 273:Src/main.c    **** 			Log();
 1304              		.loc 1 273 4 is_stmt 0 view .LVU268
 1305 00ee FFF7FEFF 		bl	USART_SendString
 1306              	.LVL91:
 274:Src/main.c    **** 			ClearCommand();
 1307              		.loc 1 274 4 is_stmt 1 view .LVU269
 1308 00f2 FFF7FEFF 		bl	Log
 1309              	.LVL92:
 275:Src/main.c    **** 			return;
 1310              		.loc 1 275 4 view .LVU270
 1311 00f6 FFF7FEFF 		bl	ClearCommand
 1312              	.LVL93:
 276:Src/main.c    **** 		case 'p':
 1313              		.loc 1 276 4 view .LVU271
 1314 00fa F0E7     		b	.L48
 1315              	.LVL94:
 1316              	.L53:
 278:Src/main.c    **** 			USART_SendString(part1);
 1317              		.loc 1 278 4 view .LVU272
 279:Src/main.c    **** 			Proceed();
 1318              		.loc 1 279 4 view .LVU273
 1319 00fc 0DA8     		add	r0, sp, #52
 1320              	.LVL95:
 279:Src/main.c    **** 			Proceed();
 1321              		.loc 1 279 4 is_stmt 0 view .LVU274
 1322 00fe FFF7FEFF 		bl	USART_SendString
 1323              	.LVL96:
 280:Src/main.c    **** 			ClearCommand();
 1324              		.loc 1 280 4 is_stmt 1 view .LVU275
 1325 0102 FFF7FEFF 		bl	Proceed
ARM GAS  /tmp/cc7EdtTp.s 			page 40


 1326              	.LVL97:
 281:Src/main.c    **** 			return;
 1327              		.loc 1 281 4 view .LVU276
 1328 0106 FFF7FEFF 		bl	ClearCommand
 1329              	.LVL98:
 282:Src/main.c    **** 		case 'x':
 1330              		.loc 1 282 4 view .LVU277
 1331 010a E8E7     		b	.L48
 1332              	.LVL99:
 1333              	.L50:
 284:Src/main.c    **** 			USART_SendString(part1);
 1334              		.loc 1 284 4 view .LVU278
 285:Src/main.c    **** 			motorcmd.dir = OFF;
 1335              		.loc 1 285 4 view .LVU279
 1336 010c 07A8     		add	r0, sp, #28
 1337              	.LVL100:
 285:Src/main.c    **** 			motorcmd.dir = OFF;
 1338              		.loc 1 285 4 is_stmt 0 view .LVU280
 1339 010e FFF7FEFF 		bl	USART_SendString
 1340              	.LVL101:
 286:Src/main.c    **** 			MoveMotors(&motorcmd);
 1341              		.loc 1 286 4 is_stmt 1 view .LVU281
 286:Src/main.c    **** 			MoveMotors(&motorcmd);
 1342              		.loc 1 286 17 is_stmt 0 view .LVU282
 1343 0112 06A8     		add	r0, sp, #24
 1344 0114 0423     		movs	r3, #4
 1345 0116 0370     		strb	r3, [r0]
 287:Src/main.c    **** 			ClearCommand();
 1346              		.loc 1 287 4 is_stmt 1 view .LVU283
 1347 0118 FFF7FEFF 		bl	MoveMotors
 1348              	.LVL102:
 288:Src/main.c    **** 			return;
 1349              		.loc 1 288 4 view .LVU284
 1350 011c FFF7FEFF 		bl	ClearCommand
 1351              	.LVL103:
 289:Src/main.c    **** 		default:
 1352              		.loc 1 289 4 view .LVU285
 1353 0120 DDE7     		b	.L48
 1354              	.LVL104:
 1355              	.L49:
 291:Src/main.c    **** 			ClearCommand();
 1356              		.loc 1 291 4 view .LVU286
 1357 0122 27A8     		add	r0, sp, #156
 1358 0124 FFF7FEFF 		bl	USART_SendString
 1359              	.LVL105:
 292:Src/main.c    **** 			return;
 1360              		.loc 1 292 4 view .LVU287
 1361 0128 FFF7FEFF 		bl	ClearCommand
 1362              	.LVL106:
 293:Src/main.c    **** 	}
 1363              		.loc 1 293 4 view .LVU288
 1364 012c D7E7     		b	.L48
 1365              	.L62:
 258:Src/main.c    **** 		case 'w':
 1366              		.loc 1 258 2 is_stmt 0 view .LVU289
 1367 012e 23A8     		add	r0, sp, #140
 1368 0130 BDE7     		b	.L52
ARM GAS  /tmp/cc7EdtTp.s 			page 41


 1369              	.LVL107:
 1370              	.L63:
 298:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1371              		.loc 1 298 21 discriminator 1 view .LVU290
 1372 0132 772D     		cmp	r5, #119
 1373 0134 BDD1     		bne	.L58
 299:Src/main.c    **** 		motorcmd.amount = 0;
 1374              		.loc 1 299 3 is_stmt 1 view .LVU291
 1375 0136 02AA     		add	r2, sp, #8
 1376 0138 0F4B     		ldr	r3, .L65+32
 1377 013a 70CB     		ldmia	r3!, {r4, r5, r6}
 1378 013c 70C2     		stmia	r2!, {r4, r5, r6}
 1379 013e 1B88     		ldrh	r3, [r3]
 1380 0140 1380     		strh	r3, [r2]
 300:Src/main.c    **** 	}
 1381              		.loc 1 300 3 view .LVU292
 300:Src/main.c    **** 	}
 1382              		.loc 1 300 19 is_stmt 0 view .LVU293
 1383 0142 06AB     		add	r3, sp, #24
 1384 0144 0022     		movs	r2, #0
 1385 0146 5A70     		strb	r2, [r3, #1]
 1386 0148 BDE7     		b	.L59
 1387              	.L64:
 303:Src/main.c    **** 		ClearCommand();
 1388              		.loc 1 303 3 is_stmt 1 view .LVU294
 1389 014a 27A8     		add	r0, sp, #156
 1390              	.LVL108:
 303:Src/main.c    **** 		ClearCommand();
 1391              		.loc 1 303 3 is_stmt 0 view .LVU295
 1392 014c FFF7FEFF 		bl	USART_SendString
 1393              	.LVL109:
 304:Src/main.c    **** 		return;
 1394              		.loc 1 304 3 is_stmt 1 view .LVU296
 1395 0150 FFF7FEFF 		bl	ClearCommand
 1396              	.LVL110:
 305:Src/main.c    **** 	}
 1397              		.loc 1 305 3 view .LVU297
 1398 0154 C3E7     		b	.L48
 1399              	.L66:
 1400 0156 C046     		.align	2
 1401              	.L65:
 1402 0158 10000000 		.word	.LC40
 1403 015c 2C000000 		.word	.LC42
 1404 0160 3C000000 		.word	.LC44
 1405 0164 4C000000 		.word	.LC46
 1406 0168 5C000000 		.word	.LC48
 1407 016c 74000000 		.word	.LC50
 1408 0170 94000000 		.word	.LC52
 1409 0174 00000000 		.word	.L51
 1410 0178 00000000 		.word	.LC55
 1411              		.cfi_endproc
 1412              	.LFE52:
 1414              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1415              		.align	2
 1416              	.LC57:
 1417 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 1417      616E6420 
ARM GAS  /tmp/cc7EdtTp.s 			page 42


 1417      746F6F20 
 1417      6C6F6E67 
 1417      210A00
 1418              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 1419              		.align	1
 1420              		.global	USART3_4_IRQHandler
 1421              		.syntax unified
 1422              		.code	16
 1423              		.thumb_func
 1425              	USART3_4_IRQHandler:
 1426              	.LFB49:
 190:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 1427              		.loc 1 190 27 view -0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 24
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431 0000 30B5     		push	{r4, r5, lr}
 1432              	.LCFI19:
 1433              		.cfi_def_cfa_offset 12
 1434              		.cfi_offset 4, -12
 1435              		.cfi_offset 5, -8
 1436              		.cfi_offset 14, -4
 1437 0002 87B0     		sub	sp, sp, #28
 1438              	.LCFI20:
 1439              		.cfi_def_cfa_offset 40
 191:Src/main.c    **** 	incomingCommand = 1;
 1440              		.loc 1 191 2 view .LVU299
 191:Src/main.c    **** 	incomingCommand = 1;
 1441              		.loc 1 191 10 is_stmt 0 view .LVU300
 1442 0004 01AA     		add	r2, sp, #4
 1443 0006 204B     		ldr	r3, .L73
 1444 0008 1800     		movs	r0, r3
 1445 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 1446 000c 38C2     		stmia	r2!, {r3, r4, r5}
 1447 000e 0368     		ldr	r3, [r0]
 1448 0010 1360     		str	r3, [r2]
 1449 0012 8388     		ldrh	r3, [r0, #4]
 1450 0014 9380     		strh	r3, [r2, #4]
 1451 0016 8379     		ldrb	r3, [r0, #6]
 1452 0018 9371     		strb	r3, [r2, #6]
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 1453              		.loc 1 192 2 is_stmt 1 view .LVU301
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 1454              		.loc 1 192 18 is_stmt 0 view .LVU302
 1455 001a 1C4B     		ldr	r3, .L73+4
 1456 001c 0122     		movs	r2, #1
 1457 001e 1A70     		strb	r2, [r3]
 193:Src/main.c    **** 	}
 1458              		.loc 1 193 2 is_stmt 1 view .LVU303
 1459              	.L68:
 194:Src/main.c    **** 	if(command[0]){
 1460              		.loc 1 194 2 discriminator 1 view .LVU304
 193:Src/main.c    **** 	}
 1461              		.loc 1 193 8 discriminator 1 view .LVU305
 193:Src/main.c    **** 	}
 1462              		.loc 1 193 16 is_stmt 0 discriminator 1 view .LVU306
 1463 0020 1B4B     		ldr	r3, .L73+8
ARM GAS  /tmp/cc7EdtTp.s 			page 43


 1464 0022 DB69     		ldr	r3, [r3, #28]
 193:Src/main.c    **** 	}
 1465              		.loc 1 193 8 discriminator 1 view .LVU307
 1466 0024 9B06     		lsls	r3, r3, #26
 1467 0026 FBD5     		bpl	.L68
 195:Src/main.c    **** 		if(command[1]){
 1468              		.loc 1 195 2 is_stmt 1 view .LVU308
 195:Src/main.c    **** 		if(command[1]){
 1469              		.loc 1 195 12 is_stmt 0 view .LVU309
 1470 0028 1A4B     		ldr	r3, .L73+12
 1471 002a 1B78     		ldrb	r3, [r3]
 195:Src/main.c    **** 		if(command[1]){
 1472              		.loc 1 195 4 view .LVU310
 1473 002c 002B     		cmp	r3, #0
 1474 002e 16D0     		beq	.L69
 196:Src/main.c    **** 			USART_SendString(err);
 1475              		.loc 1 196 3 is_stmt 1 view .LVU311
 196:Src/main.c    **** 			USART_SendString(err);
 1476              		.loc 1 196 13 is_stmt 0 view .LVU312
 1477 0030 184B     		ldr	r3, .L73+12
 1478 0032 5B78     		ldrb	r3, [r3, #1]
 196:Src/main.c    **** 			USART_SendString(err);
 1479              		.loc 1 196 5 view .LVU313
 1480 0034 002B     		cmp	r3, #0
 1481 0036 06D0     		beq	.L70
 197:Src/main.c    **** 			ClearCommand();
 1482              		.loc 1 197 4 is_stmt 1 view .LVU314
 1483 0038 01A8     		add	r0, sp, #4
 1484 003a FFF7FEFF 		bl	USART_SendString
 1485              	.LVL111:
 198:Src/main.c    **** 		}
 1486              		.loc 1 198 4 view .LVU315
 1487 003e FFF7FEFF 		bl	ClearCommand
 1488              	.LVL112:
 1489              	.L67:
 213:Src/main.c    **** 
 1490              		.loc 1 213 1 is_stmt 0 view .LVU316
 1491 0042 07B0     		add	sp, sp, #28
 1492              		@ sp needed
 1493 0044 30BD     		pop	{r4, r5, pc}
 1494              	.L70:
 1495              	.LBB14:
 201:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 1496              		.loc 1 201 4 is_stmt 1 view .LVU317
 201:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 1497              		.loc 1 201 23 is_stmt 0 view .LVU318
 1498 0046 124B     		ldr	r3, .L73+8
 1499 0048 9A8C     		ldrh	r2, [r3, #36]
 201:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 1500              		.loc 1 201 15 view .LVU319
 1501 004a D2B2     		uxtb	r2, r2
 1502 004c 114B     		ldr	r3, .L73+12
 1503 004e 5A70     		strb	r2, [r3, #1]
 202:Src/main.c    **** 		}
 1504              		.loc 1 202 4 is_stmt 1 view .LVU320
 202:Src/main.c    **** 		}
 1505              		.loc 1 202 26 is_stmt 0 view .LVU321
ARM GAS  /tmp/cc7EdtTp.s 			page 44


 1506 0050 1878     		ldrb	r0, [r3]
 1507 0052 C0B2     		uxtb	r0, r0
 202:Src/main.c    **** 		}
 1508              		.loc 1 202 38 view .LVU322
 1509 0054 5978     		ldrb	r1, [r3, #1]
 1510 0056 C9B2     		uxtb	r1, r1
 202:Src/main.c    **** 		}
 1511              		.loc 1 202 4 view .LVU323
 1512 0058 FFF7FEFF 		bl	ProcessCommand
 1513              	.LVL113:
 1514 005c F1E7     		b	.L67
 1515              	.L69:
 1516              	.LBE14:
 206:Src/main.c    **** 		if(command[0] != 'w' &&
 1517              		.loc 1 206 3 is_stmt 1 view .LVU324
 206:Src/main.c    **** 		if(command[0] != 'w' &&
 1518              		.loc 1 206 22 is_stmt 0 view .LVU325
 1519 005e 0C4B     		ldr	r3, .L73+8
 1520 0060 9B8C     		ldrh	r3, [r3, #36]
 206:Src/main.c    **** 		if(command[0] != 'w' &&
 1521              		.loc 1 206 14 view .LVU326
 1522 0062 DBB2     		uxtb	r3, r3
 1523 0064 0B4A     		ldr	r2, .L73+12
 1524 0066 1370     		strb	r3, [r2]
 207:Src/main.c    **** 				command[0] != 'a' &&
 1525              		.loc 1 207 3 is_stmt 1 view .LVU327
 207:Src/main.c    **** 				command[0] != 'a' &&
 1526              		.loc 1 207 13 is_stmt 0 view .LVU328
 1527 0068 1378     		ldrb	r3, [r2]
 207:Src/main.c    **** 				command[0] != 'a' &&
 1528              		.loc 1 207 5 view .LVU329
 1529 006a 772B     		cmp	r3, #119
 1530 006c E9D0     		beq	.L67
 208:Src/main.c    **** 				command[0] != 'd'){
 1531              		.loc 1 208 12 discriminator 1 view .LVU330
 1532 006e 1378     		ldrb	r3, [r2]
 207:Src/main.c    **** 				command[0] != 'a' &&
 1533              		.loc 1 207 24 discriminator 1 view .LVU331
 1534 0070 612B     		cmp	r3, #97
 1535 0072 E6D0     		beq	.L67
 209:Src/main.c    **** 			ProcessCommand(command[0], NULL);
 1536              		.loc 1 209 12 view .LVU332
 1537 0074 1378     		ldrb	r3, [r2]
 208:Src/main.c    **** 				command[0] != 'd'){
 1538              		.loc 1 208 23 view .LVU333
 1539 0076 642B     		cmp	r3, #100
 1540 0078 E3D0     		beq	.L67
 1541              	.LBB15:
 210:Src/main.c    **** 		}
 1542              		.loc 1 210 4 is_stmt 1 view .LVU334
 210:Src/main.c    **** 		}
 1543              		.loc 1 210 26 is_stmt 0 view .LVU335
 1544 007a 1078     		ldrb	r0, [r2]
 1545 007c C0B2     		uxtb	r0, r0
 210:Src/main.c    **** 		}
 1546              		.loc 1 210 4 view .LVU336
 1547 007e 0021     		movs	r1, #0
ARM GAS  /tmp/cc7EdtTp.s 			page 45


 1548 0080 FFF7FEFF 		bl	ProcessCommand
 1549              	.LVL114:
 1550              	.LBE15:
 213:Src/main.c    **** 
 1551              		.loc 1 213 1 view .LVU337
 1552 0084 DDE7     		b	.L67
 1553              	.L74:
 1554 0086 C046     		.align	2
 1555              	.L73:
 1556 0088 00000000 		.word	.LC57
 1557 008c 00000000 		.word	incomingCommand
 1558 0090 00480040 		.word	1073760256
 1559 0094 00000000 		.word	command
 1560              		.cfi_endproc
 1561              	.LFE49:
 1563              		.section	.text.Error_Handler,"ax",%progbits
 1564              		.align	1
 1565              		.global	Error_Handler
 1566              		.syntax unified
 1567              		.code	16
 1568              		.thumb_func
 1570              	Error_Handler:
 1571              	.LFB59:
 631:Src/main.c    **** 
 632:Src/main.c    **** /* USER CODE BEGIN 4 */
 633:Src/main.c    **** 
 634:Src/main.c    **** /* USER CODE END 4 */
 635:Src/main.c    **** 
 636:Src/main.c    **** /**
 637:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 638:Src/main.c    ****  * @retval None
 639:Src/main.c    ****  */
 640:Src/main.c    **** void Error_Handler(void)
 641:Src/main.c    **** {
 1572              		.loc 1 641 1 is_stmt 1 view -0
 1573              		.cfi_startproc
 1574              		@ Volatile: function does not return.
 1575              		@ args = 0, pretend = 0, frame = 0
 1576              		@ frame_needed = 0, uses_anonymous_args = 0
 1577              		@ link register save eliminated.
 642:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 643:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 644:Src/main.c    **** 	__disable_irq();
 1578              		.loc 1 644 2 view .LVU339
 1579              	.LBB16:
 1580              	.LBI16:
 1581              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
ARM GAS  /tmp/cc7EdtTp.s 			page 46


  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
ARM GAS  /tmp/cc7EdtTp.s 			page 47


  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc7EdtTp.s 			page 48


 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1582              		.loc 2 140 27 view .LVU340
 1583              	.LBB17:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1584              		.loc 2 142 3 view .LVU341
 1585              		.syntax divided
 1586              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1587 0000 72B6     		cpsid i
 1588              	@ 0 "" 2
 1589              		.thumb
 1590              		.syntax unified
 1591              	.L76:
 1592              	.LBE17:
 1593              	.LBE16:
 645:Src/main.c    **** 	while (1)
 1594              		.loc 1 645 2 discriminator 1 view .LVU342
 646:Src/main.c    **** 	{
 647:Src/main.c    **** 	}
 1595              		.loc 1 647 2 discriminator 1 view .LVU343
 645:Src/main.c    **** 	while (1)
 1596              		.loc 1 645 8 discriminator 1 view .LVU344
 1597 0002 FEE7     		b	.L76
 1598              		.cfi_endproc
 1599              	.LFE59:
 1601              		.section	.text.SystemClock_Config,"ax",%progbits
 1602              		.align	1
 1603              		.global	SystemClock_Config
 1604              		.syntax unified
 1605              		.code	16
 1606              		.thumb_func
 1608              	SystemClock_Config:
 1609              	.LFB56:
 519:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1610              		.loc 1 519 1 view -0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 72
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
 1614 0000 00B5     		push	{lr}
 1615              	.LCFI21:
 1616              		.cfi_def_cfa_offset 4
 1617              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7EdtTp.s 			page 49


 1618 0002 93B0     		sub	sp, sp, #76
 1619              	.LCFI22:
 1620              		.cfi_def_cfa_offset 80
 520:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1621              		.loc 1 520 2 view .LVU346
 520:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1622              		.loc 1 520 21 is_stmt 0 view .LVU347
 1623 0004 3422     		movs	r2, #52
 1624 0006 0021     		movs	r1, #0
 1625 0008 05A8     		add	r0, sp, #20
 1626 000a FFF7FEFF 		bl	memset
 1627              	.LVL115:
 521:Src/main.c    **** 
 1628              		.loc 1 521 2 is_stmt 1 view .LVU348
 521:Src/main.c    **** 
 1629              		.loc 1 521 21 is_stmt 0 view .LVU349
 1630 000e 1022     		movs	r2, #16
 1631 0010 0021     		movs	r1, #0
 1632 0012 01A8     		add	r0, sp, #4
 1633 0014 FFF7FEFF 		bl	memset
 1634              	.LVL116:
 526:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1635              		.loc 1 526 2 is_stmt 1 view .LVU350
 526:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1636              		.loc 1 526 35 is_stmt 0 view .LVU351
 1637 0018 0223     		movs	r3, #2
 1638 001a 0593     		str	r3, [sp, #20]
 527:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1639              		.loc 1 527 2 is_stmt 1 view .LVU352
 527:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1640              		.loc 1 527 29 is_stmt 0 view .LVU353
 1641 001c 013B     		subs	r3, r3, #1
 1642 001e 0893     		str	r3, [sp, #32]
 528:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1643              		.loc 1 528 2 is_stmt 1 view .LVU354
 528:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1644              		.loc 1 528 40 is_stmt 0 view .LVU355
 1645 0020 0F33     		adds	r3, r3, #15
 1646 0022 0993     		str	r3, [sp, #36]
 529:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1647              		.loc 1 529 2 is_stmt 1 view .LVU356
 530:Src/main.c    **** 	{
 1648              		.loc 1 530 2 view .LVU357
 530:Src/main.c    **** 	{
 1649              		.loc 1 530 6 is_stmt 0 view .LVU358
 1650 0024 05A8     		add	r0, sp, #20
 1651 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1652              	.LVL117:
 530:Src/main.c    **** 	{
 1653              		.loc 1 530 5 view .LVU359
 1654 002a 0028     		cmp	r0, #0
 1655 002c 0DD1     		bne	.L80
 537:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1656              		.loc 1 537 2 is_stmt 1 view .LVU360
 537:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1657              		.loc 1 537 30 is_stmt 0 view .LVU361
 1658 002e 0723     		movs	r3, #7
ARM GAS  /tmp/cc7EdtTp.s 			page 50


 1659 0030 0193     		str	r3, [sp, #4]
 539:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1660              		.loc 1 539 2 is_stmt 1 view .LVU362
 539:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1661              		.loc 1 539 33 is_stmt 0 view .LVU363
 1662 0032 0023     		movs	r3, #0
 1663 0034 0293     		str	r3, [sp, #8]
 540:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1664              		.loc 1 540 2 is_stmt 1 view .LVU364
 540:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1665              		.loc 1 540 34 is_stmt 0 view .LVU365
 1666 0036 0393     		str	r3, [sp, #12]
 541:Src/main.c    **** 
 1667              		.loc 1 541 2 is_stmt 1 view .LVU366
 541:Src/main.c    **** 
 1668              		.loc 1 541 35 is_stmt 0 view .LVU367
 1669 0038 0493     		str	r3, [sp, #16]
 543:Src/main.c    **** 	{
 1670              		.loc 1 543 2 is_stmt 1 view .LVU368
 543:Src/main.c    **** 	{
 1671              		.loc 1 543 6 is_stmt 0 view .LVU369
 1672 003a 0021     		movs	r1, #0
 1673 003c 01A8     		add	r0, sp, #4
 1674 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1675              	.LVL118:
 543:Src/main.c    **** 	{
 1676              		.loc 1 543 5 view .LVU370
 1677 0042 0028     		cmp	r0, #0
 1678 0044 03D1     		bne	.L81
 547:Src/main.c    **** 
 1679              		.loc 1 547 1 view .LVU371
 1680 0046 13B0     		add	sp, sp, #76
 1681              		@ sp needed
 1682 0048 00BD     		pop	{pc}
 1683              	.L80:
 532:Src/main.c    **** 	}
 1684              		.loc 1 532 3 is_stmt 1 view .LVU372
 1685 004a FFF7FEFF 		bl	Error_Handler
 1686              	.LVL119:
 1687              	.L81:
 545:Src/main.c    **** 	}
 1688              		.loc 1 545 3 view .LVU373
 1689 004e FFF7FEFF 		bl	Error_Handler
 1690              	.LVL120:
 1691              		.cfi_endproc
 1692              	.LFE56:
 1694              		.section	.text.main,"ax",%progbits
 1695              		.align	1
 1696              		.global	main
 1697              		.syntax unified
 1698              		.code	16
 1699              		.thumb_func
 1701              	main:
 1702              	.LFB55:
 476:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1703              		.loc 1 476 1 view -0
 1704              		.cfi_startproc
ARM GAS  /tmp/cc7EdtTp.s 			page 51


 1705              		@ Volatile: function does not return.
 1706              		@ args = 0, pretend = 0, frame = 8
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708 0000 10B5     		push	{r4, lr}
 1709              	.LCFI23:
 1710              		.cfi_def_cfa_offset 8
 1711              		.cfi_offset 4, -8
 1712              		.cfi_offset 14, -4
 1713 0002 82B0     		sub	sp, sp, #8
 1714              	.LCFI24:
 1715              		.cfi_def_cfa_offset 16
 477:Src/main.c    **** 	SystemClock_Config();
 1716              		.loc 1 477 2 view .LVU375
 1717 0004 FFF7FEFF 		bl	HAL_Init
 1718              	.LVL121:
 478:Src/main.c    **** 
 1719              		.loc 1 478 2 view .LVU376
 1720 0008 FFF7FEFF 		bl	SystemClock_Config
 1721              	.LVL122:
 481:Src/main.c    **** 	USART_Init();
 1722              		.loc 1 481 2 view .LVU377
 1723 000c FFF7FEFF 		bl	GPIO_AF_Init
 1724              	.LVL123:
 482:Src/main.c    **** 
 1725              		.loc 1 482 2 view .LVU378
 1726 0010 FFF7FEFF 		bl	USART_Init
 1727              	.LVL124:
 484:Src/main.c    **** 
 1728              		.loc 1 484 2 view .LVU379
 1729 0014 FFF7FEFF 		bl	motor_init
 1730              	.LVL125:
 486:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,2);
 1731              		.loc 1 486 2 view .LVU380
 1732              	.LBB18:
 1733              	.LBI18:
 1734              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
ARM GAS  /tmp/cc7EdtTp.s 			page 52


  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
ARM GAS  /tmp/cc7EdtTp.s 			page 53


  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
ARM GAS  /tmp/cc7EdtTp.s 			page 54


 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
ARM GAS  /tmp/cc7EdtTp.s 			page 55


 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
ARM GAS  /tmp/cc7EdtTp.s 			page 56


 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
ARM GAS  /tmp/cc7EdtTp.s 			page 57


 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc7EdtTp.s 			page 58


 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc7EdtTp.s 			page 59


 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /tmp/cc7EdtTp.s 			page 60


 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
ARM GAS  /tmp/cc7EdtTp.s 			page 61


 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
ARM GAS  /tmp/cc7EdtTp.s 			page 62


 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1735              		.loc 3 623 22 view .LVU381
 1736              	.LBB19:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1737              		.loc 3 625 3 view .LVU382
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1738              		.loc 3 627 5 view .LVU383
 1739              		.loc 3 627 20 is_stmt 0 view .LVU384
 1740 0018 144B     		ldr	r3, .L84
 1741 001a 8022     		movs	r2, #128
 1742 001c 9205     		lsls	r2, r2, #22
 1743 001e 1A60     		str	r2, [r3]
 1744              	.LVL126:
 1745              		.loc 3 627 20 view .LVU385
 1746              	.LBE19:
 1747              	.LBE18:
 487:Src/main.c    **** 
 1748              		.loc 1 487 2 is_stmt 1 view .LVU386
 1749              	.LBB20:
 1750              	.LBI20:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc7EdtTp.s 			page 63


 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /tmp/cc7EdtTp.s 			page 64


 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1751              		.loc 3 730 22 view .LVU387
 1752              	.LBB21:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1753              		.loc 3 732 3 view .LVU388
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1754              		.loc 3 734 5 view .LVU389
 1755              		.loc 3 734 52 is_stmt 0 view .LVU390
 1756 0020 C720     		movs	r0, #199
 1757 0022 8000     		lsls	r0, r0, #2
 1758 0024 1958     		ldr	r1, [r3, r0]
 1759              		.loc 3 734 33 view .LVU391
 1760 0026 124A     		ldr	r2, .L84+4
 1761 0028 1140     		ands	r1, r2
ARM GAS  /tmp/cc7EdtTp.s 			page 65


 1762              		.loc 3 734 102 view .LVU392
 1763 002a 8022     		movs	r2, #128
 1764 002c 1202     		lsls	r2, r2, #8
 1765 002e 0A43     		orrs	r2, r1
 1766              		.loc 3 734 30 view .LVU393
 1767 0030 1A50     		str	r2, [r3, r0]
 1768              	.LVL127:
 1769              		.loc 3 734 30 view .LVU394
 1770              	.LBE21:
 1771              	.LBE20:
 489:Src/main.c    **** 
 1772              		.loc 1 489 2 is_stmt 1 view .LVU395
 489:Src/main.c    **** 
 1773              		.loc 1 489 10 is_stmt 0 view .LVU396
 1774 0032 104B     		ldr	r3, .L84+8
 1775 0034 1A68     		ldr	r2, [r3]
 1776 0036 0092     		str	r2, [sp]
 1777 0038 9B88     		ldrh	r3, [r3, #4]
 1778 003a 6A46     		mov	r2, sp
 1779 003c 9380     		strh	r3, [r2, #4]
 492:Src/main.c    **** 	/* TIM15_Init(); */
 1780              		.loc 1 492 2 is_stmt 1 view .LVU397
 1781 003e FFF7FEFF 		bl	MX_GPIO_Init
 1782              	.LVL128:
 494:Src/main.c    **** 
 1783              		.loc 1 494 2 view .LVU398
 1784 0042 FFF7FEFF 		bl	MX_TIM15_Init
 1785              	.LVL129:
 497:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1786              		.loc 1 497 2 view .LVU399
 1787 0046 8021     		movs	r1, #128
 1788 0048 0B4C     		ldr	r4, .L84+12
 1789 004a 0022     		movs	r2, #0
 1790 004c 0901     		lsls	r1, r1, #4
 1791 004e 2000     		movs	r0, r4
 1792 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1793              	.LVL130:
 498:Src/main.c    **** 
 1794              		.loc 1 498 2 view .LVU400
 1795 0054 8021     		movs	r1, #128
 1796 0056 0022     		movs	r2, #0
 1797 0058 8901     		lsls	r1, r1, #6
 1798 005a 2000     		movs	r0, r4
 1799 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1800              	.LVL131:
 1801              	.L83:
 500:Src/main.c    **** 		/*
 1802              		.loc 1 500 2 discriminator 1 view .LVU401
 510:Src/main.c    **** 	}
 1803              		.loc 1 510 3 discriminator 1 view .LVU402
 1804 0060 FA20     		movs	r0, #250
 1805 0062 4000     		lsls	r0, r0, #1
 1806 0064 FFF7FEFF 		bl	HAL_Delay
 1807              	.LVL132:
 500:Src/main.c    **** 		/*
 1808              		.loc 1 500 8 discriminator 1 view .LVU403
 1809 0068 FAE7     		b	.L83
ARM GAS  /tmp/cc7EdtTp.s 			page 66


 1810              	.L85:
 1811 006a C046     		.align	2
 1812              	.L84:
 1813 006c 00E100E0 		.word	-536813312
 1814 0070 FF00FFFF 		.word	-65281
 1815 0074 00000000 		.word	.LC21
 1816 0078 00040048 		.word	1207960576
 1817              		.cfi_endproc
 1818              	.LFE55:
 1820              		.global	pulse_end_time
 1821              		.section	.bss.pulse_end_time,"aw",%nobits
 1822              		.align	2
 1825              	pulse_end_time:
 1826 0000 00000000 		.space	4
 1827              		.global	pulse_start_time
 1828              		.section	.bss.pulse_start_time,"aw",%nobits
 1829              		.align	2
 1832              	pulse_start_time:
 1833 0000 00000000 		.space	4
 1834              		.global	htim155
 1835              		.section	.bss.htim155,"aw",%nobits
 1836              		.align	2
 1839              	htim155:
 1840 0000 00000000 		.space	64
 1840      00000000 
 1840      00000000 
 1840      00000000 
 1840      00000000 
 1841              		.global	pulseWidth
 1842              		.section	.bss.pulseWidth,"aw",%nobits
 1843              		.align	2
 1846              	pulseWidth:
 1847 0000 00000000 		.space	4
 1848              		.global	fallingEdgeTime
 1849              		.section	.bss.fallingEdgeTime,"aw",%nobits
 1850              		.align	2
 1853              	fallingEdgeTime:
 1854 0000 00000000 		.space	4
 1855              		.global	risingEdgeTime
 1856              		.section	.bss.risingEdgeTime,"aw",%nobits
 1857              		.align	2
 1860              	risingEdgeTime:
 1861 0000 00000000 		.space	4
 1862              		.global	incomingCommand
 1863              		.section	.bss.incomingCommand,"aw",%nobits
 1866              	incomingCommand:
 1867 0000 00       		.space	1
 1868              		.global	command
 1869              		.section	.bss.command,"aw",%nobits
 1870              		.align	2
 1873              	command:
 1874 0000 000000   		.space	3
 1875              		.global	rightDistance
 1876              		.section	.bss.rightDistance,"aw",%nobits
 1877              		.align	1
 1880              	rightDistance:
 1881 0000 0000     		.space	2
ARM GAS  /tmp/cc7EdtTp.s 			page 67


 1882              		.global	leftDistance
 1883              		.section	.bss.leftDistance,"aw",%nobits
 1884              		.align	1
 1887              	leftDistance:
 1888 0000 0000     		.space	2
 1889              		.global	Value2
 1890              		.section	.bss.Value2,"aw",%nobits
 1891              		.align	1
 1894              	Value2:
 1895 0000 0000     		.space	2
 1896              		.global	Value1
 1897              		.section	.bss.Value1,"aw",%nobits
 1898              		.align	1
 1901              	Value1:
 1902 0000 0000     		.space	2
 1903              		.global	startTime
 1904              		.section	.bss.startTime,"aw",%nobits
 1905              		.align	1
 1908              	startTime:
 1909 0000 0000     		.space	2
 1910              		.global	pMillis
 1911              		.section	.bss.pMillis,"aw",%nobits
 1912              		.align	2
 1915              	pMillis:
 1916 0000 00000000 		.space	4
 1917              		.global	htim15
 1918              		.section	.bss.htim15,"aw",%nobits
 1919              		.align	2
 1922              	htim15:
 1923 0000 00000000 		.space	64
 1923      00000000 
 1923      00000000 
 1923      00000000 
 1923      00000000 
 1924              		.text
 1925              	.Letext0:
 1926              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 1927              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1928              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1929              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1930              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1931              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1932              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1933              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1934              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1935              		.file 13 "Inc/pins.h"
 1936              		.file 14 "Inc/motor.h"
 1937              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1938              		.file 16 "/usr/arm-none-eabi/include/string.h"
 1939              		.file 17 "/usr/arm-none-eabi/include/stdio.h"
 1940              		.file 18 "<built-in>"
ARM GAS  /tmp/cc7EdtTp.s 			page 68


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc7EdtTp.s:19     .text.MX_TIM15_Init:00000000 $t
     /tmp/cc7EdtTp.s:24     .text.MX_TIM15_Init:00000000 MX_TIM15_Init
     /tmp/cc7EdtTp.s:61     .text.MX_TIM15_Init:00000020 $d
     /tmp/cc7EdtTp.s:67     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc7EdtTp.s:72     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc7EdtTp.s:145    .text.MX_GPIO_Init:00000048 $d
     /tmp/cc7EdtTp.s:150    .text.LED_Init:00000000 $t
     /tmp/cc7EdtTp.s:156    .text.LED_Init:00000000 LED_Init
     /tmp/cc7EdtTp.s:199    .text.LED_Init:00000024 $d
     /tmp/cc7EdtTp.s:204    .text.GPIO_AF_Init:00000000 $t
     /tmp/cc7EdtTp.s:210    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/cc7EdtTp.s:379    .text.GPIO_AF_Init:000000e0 $d
     /tmp/cc7EdtTp.s:390    .text.USART_Init:00000000 $t
     /tmp/cc7EdtTp.s:396    .text.USART_Init:00000000 USART_Init
     /tmp/cc7EdtTp.s:488    .text.USART_Init:0000005c $d
     /tmp/cc7EdtTp.s:495    .text.USART_SendChar:00000000 $t
     /tmp/cc7EdtTp.s:501    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/cc7EdtTp.s:527    .text.USART_SendChar:00000010 $d
     /tmp/cc7EdtTp.s:532    .text.USART_SendString:00000000 $t
     /tmp/cc7EdtTp.s:538    .text.USART_SendString:00000000 USART_SendString
     /tmp/cc7EdtTp.s:583    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/cc7EdtTp.s:587    .text.ClearCommand:00000000 $t
     /tmp/cc7EdtTp.s:593    .text.ClearCommand:00000000 ClearCommand
     /tmp/cc7EdtTp.s:636    .text.ClearCommand:0000002c $d
     /tmp/cc7EdtTp.s:1873   .bss.command:00000000 command
     /tmp/cc7EdtTp.s:1866   .bss.incomingCommand:00000000 incomingCommand
     /tmp/cc7EdtTp.s:643    .rodata.Proceed.str1.4:00000000 $d
     /tmp/cc7EdtTp.s:647    .text.Proceed:00000000 $t
     /tmp/cc7EdtTp.s:653    .text.Proceed:00000000 Proceed
     /tmp/cc7EdtTp.s:676    .text.Proceed:0000000c $d
     /tmp/cc7EdtTp.s:682    .rodata.PrintDistance.str1.4:00000000 $d
     /tmp/cc7EdtTp.s:686    .text.PrintDistance:00000000 $t
     /tmp/cc7EdtTp.s:692    .text.PrintDistance:00000000 PrintDistance
     /tmp/cc7EdtTp.s:738    .text.PrintDistance:00000030 $d
     /tmp/cc7EdtTp.s:746    .text.GetUltrasonic:00000000 $t
     /tmp/cc7EdtTp.s:752    .text.GetUltrasonic:00000000 GetUltrasonic
     /tmp/cc7EdtTp.s:916    .text.GetUltrasonic:000000a4 $d
     /tmp/cc7EdtTp.s:1915   .bss.pMillis:00000000 pMillis
     /tmp/cc7EdtTp.s:924    .rodata.Log.str1.4:00000000 $d
     /tmp/cc7EdtTp.s:938    .text.Log:00000000 $t
     /tmp/cc7EdtTp.s:944    .text.Log:00000000 Log
     /tmp/cc7EdtTp.s:1021   .text.Log:00000060 $d
     /tmp/cc7EdtTp.s:1031   .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/cc7EdtTp.s:1056   .text.ProcessCommand:00000000 $t
     /tmp/cc7EdtTp.s:1062   .text.ProcessCommand:00000000 ProcessCommand
     /tmp/cc7EdtTp.s:1193   .rodata.ProcessCommand:00000000 $d
     /tmp/cc7EdtTp.s:1402   .text.ProcessCommand:00000158 $d
     /tmp/cc7EdtTp.s:1415   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/cc7EdtTp.s:1419   .text.USART3_4_IRQHandler:00000000 $t
     /tmp/cc7EdtTp.s:1425   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/cc7EdtTp.s:1556   .text.USART3_4_IRQHandler:00000088 $d
     /tmp/cc7EdtTp.s:1564   .text.Error_Handler:00000000 $t
     /tmp/cc7EdtTp.s:1570   .text.Error_Handler:00000000 Error_Handler
     /tmp/cc7EdtTp.s:1602   .text.SystemClock_Config:00000000 $t
     /tmp/cc7EdtTp.s:1608   .text.SystemClock_Config:00000000 SystemClock_Config
ARM GAS  /tmp/cc7EdtTp.s 			page 69


     /tmp/cc7EdtTp.s:1695   .text.main:00000000 $t
     /tmp/cc7EdtTp.s:1701   .text.main:00000000 main
     /tmp/cc7EdtTp.s:1813   .text.main:0000006c $d
     /tmp/cc7EdtTp.s:1825   .bss.pulse_end_time:00000000 pulse_end_time
     /tmp/cc7EdtTp.s:1822   .bss.pulse_end_time:00000000 $d
     /tmp/cc7EdtTp.s:1832   .bss.pulse_start_time:00000000 pulse_start_time
     /tmp/cc7EdtTp.s:1829   .bss.pulse_start_time:00000000 $d
     /tmp/cc7EdtTp.s:1839   .bss.htim155:00000000 htim155
     /tmp/cc7EdtTp.s:1836   .bss.htim155:00000000 $d
     /tmp/cc7EdtTp.s:1846   .bss.pulseWidth:00000000 pulseWidth
     /tmp/cc7EdtTp.s:1843   .bss.pulseWidth:00000000 $d
     /tmp/cc7EdtTp.s:1853   .bss.fallingEdgeTime:00000000 fallingEdgeTime
     /tmp/cc7EdtTp.s:1850   .bss.fallingEdgeTime:00000000 $d
     /tmp/cc7EdtTp.s:1860   .bss.risingEdgeTime:00000000 risingEdgeTime
     /tmp/cc7EdtTp.s:1857   .bss.risingEdgeTime:00000000 $d
     /tmp/cc7EdtTp.s:1867   .bss.incomingCommand:00000000 $d
     /tmp/cc7EdtTp.s:1870   .bss.command:00000000 $d
     /tmp/cc7EdtTp.s:1880   .bss.rightDistance:00000000 rightDistance
     /tmp/cc7EdtTp.s:1877   .bss.rightDistance:00000000 $d
     /tmp/cc7EdtTp.s:1887   .bss.leftDistance:00000000 leftDistance
     /tmp/cc7EdtTp.s:1884   .bss.leftDistance:00000000 $d
     /tmp/cc7EdtTp.s:1894   .bss.Value2:00000000 Value2
     /tmp/cc7EdtTp.s:1891   .bss.Value2:00000000 $d
     /tmp/cc7EdtTp.s:1901   .bss.Value1:00000000 Value1
     /tmp/cc7EdtTp.s:1898   .bss.Value1:00000000 $d
     /tmp/cc7EdtTp.s:1908   .bss.startTime:00000000 startTime
     /tmp/cc7EdtTp.s:1905   .bss.startTime:00000000 $d
     /tmp/cc7EdtTp.s:1912   .bss.pMillis:00000000 $d
     /tmp/cc7EdtTp.s:1922   .bss.htim15:00000000 htim15
     /tmp/cc7EdtTp.s:1919   .bss.htim15:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
__aeabi_f2d
get_distance
sprintf
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
HAL_GPIO_ReadPin
__aeabi_f2iz
get_heading
memcpy
MoveMotors
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
ARM GAS  /tmp/cc7EdtTp.s 			page 70


HAL_Delay
