ARM GAS  /tmp/cc2NrRsB.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB55:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include "motor.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/cc2NrRsB.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** TIM_HandleTypeDef htim1;
  47:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  48:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  49:Src/main.c    **** #define TRIG_PORT GPIOB
  50:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  51:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  52:Src/main.c    **** #define ECHO_PORT GPIOB
  53:Src/main.c    **** volatile uint32_t pMillis;
  54:Src/main.c    **** volatile uint16_t startTime;
  55:Src/main.c    **** volatile uint16_t Value1 = 0;
  56:Src/main.c    **** volatile uint16_t Value2 = 0;
  57:Src/main.c    **** volatile uint16_t leftDistance = 0;
  58:Src/main.c    **** volatile uint16_t rightDistance = 0;
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  65:Src/main.c    **** void SystemClock_Config(void);
  66:Src/main.c    **** static void MX_GPIO_Init(void);
  67:Src/main.c    **** static void MX_TIM1_Init(void);
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** #define LED_RED GPIO_PIN_6
  75:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  76:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  77:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  78:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  79:Src/main.c    **** 
  80:Src/main.c    **** void LED_Init(uint32_t pins) {
  81:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  82:Src/main.c    **** 
  83:Src/main.c    ****     GPIO_InitTypeDef gpio_led_init = {pins,
  84:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
  85:Src/main.c    ****         GPIO_SPEED_FREQ_LOW,
  86:Src/main.c    ****         GPIO_NOPULL
  87:Src/main.c    ****     };
  88:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpio_led_init);
  89:Src/main.c    **** }
  90:Src/main.c    **** 
ARM GAS  /tmp/cc2NrRsB.s 			page 3


  91:Src/main.c    **** /**
  92:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  93:Src/main.c    ****  *        functions appropriately.
  94:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  95:Src/main.c    ****  */
  96:Src/main.c    **** void GPIO_AF_Init() {
  97:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  98:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  99:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 100:Src/main.c    **** 
 101:Src/main.c    **** 	// uart_pins
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 103:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 104:Src/main.c    **** 
 105:Src/main.c    **** 	// motor_left_pins
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 111:Src/main.c    **** 
 112:Src/main.c    **** 	// motor_right_pins
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 118:Src/main.c    **** 
 119:Src/main.c    **** 	// ultrasonic_left_pins
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 121:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 122:Src/main.c    **** 
 123:Src/main.c    **** 	// ultrasonic_right_pins
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 125:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 126:Src/main.c    **** }
 127:Src/main.c    **** 
 128:Src/main.c    **** /**
 129:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 130:Src/main.c    ****  */
 131:Src/main.c    **** void USART_Init() {
 132:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 133:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//Set baud rate
 136:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 137:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 138:Src/main.c    **** 												//use with the BT adapter
 139:Src/main.c    **** 
 140:Src/main.c    **** 	//Enable transmitter
 141:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 142:Src/main.c    **** 
 143:Src/main.c    **** 	//Enable receiver
 144:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 145:Src/main.c    **** 
 146:Src/main.c    **** 	//Enable the receive register not empty interrupt
 147:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /tmp/cc2NrRsB.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    **** 	//Enable USART3
 150:Src/main.c    **** 	USART3->CR1 |= 1;
 151:Src/main.c    **** }
 152:Src/main.c    **** 
 153:Src/main.c    **** /**
 154:Src/main.c    ****  * @brief Sends a single character on the USART.
 155:Src/main.c    ****  *
 156:Src/main.c    ****  * @param c: the character to be sent
 157:Src/main.c    ****  */
 158:Src/main.c    **** void USART_SendChar(uint8_t c) {
 159:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 160:Src/main.c    **** 		;
 161:Src/main.c    **** 
 162:Src/main.c    **** 	USART3->TDR = c;
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
 166:Src/main.c    ****  * @brief Sends a string on the USART.
 167:Src/main.c    ****  *
 168:Src/main.c    ****  * @param p_string: pointer to string to send
 169:Src/main.c    ****  */
 170:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 171:Src/main.c    **** 	while(*p_string != 0) {
 172:Src/main.c    **** 		USART_SendChar(*p_string);
 173:Src/main.c    **** 		p_string++;
 174:Src/main.c    **** 	}
 175:Src/main.c    **** 	USART_SendChar(0);
 176:Src/main.c    **** }
 177:Src/main.c    **** 
 178:Src/main.c    **** volatile uint8_t command[2];
 179:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 180:Src/main.c    **** 
 181:Src/main.c    **** void ClearCommand(){
 182:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 183:Src/main.c    **** 	memset(command, 0, sizeof(command));
 184:Src/main.c    **** 	incomingCommand = 0;
 185:Src/main.c    **** 	USART_SendString(prompt);
 186:Src/main.c    **** }
 187:Src/main.c    **** 
 188:Src/main.c    **** void USART3_4_IRQHandler(){
 189:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 190:Src/main.c    **** 	incomingCommand = 1;
 191:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 192:Src/main.c    **** 		;
 193:Src/main.c    **** 	if(command[0])
 194:Src/main.c    **** 		if(command[1]){
 195:Src/main.c    **** 			USART_SendString(err);
 196:Src/main.c    **** 			ClearCommand();
 197:Src/main.c    **** 		}
 198:Src/main.c    **** 		else
 199:Src/main.c    **** 			command[1] = USART3->RDR;
 200:Src/main.c    **** 	else
 201:Src/main.c    **** 		command[0] = USART3->RDR;
 202:Src/main.c    **** }
 203:Src/main.c    **** 
 204:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
ARM GAS  /tmp/cc2NrRsB.s 			page 5


 205:Src/main.c    **** 	uint32_t left_motor_pin;
 206:Src/main.c    **** 	uint32_t right_motor_pin;
 207:Src/main.c    **** 	int32_t CH1_DC = 65535;
 208:Src/main.c    **** 
 209:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 210:Src/main.c    **** 
 211:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 212:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 213:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 214:Src/main.c    **** 
 215:Src/main.c    **** 	if(direction != 'w' && direction != 'a' && direction != 'd'){
 216:Src/main.c    **** 		USART_SendString(err);
 217:Src/main.c    **** 		ClearCommand();
 218:Src/main.c    **** 		return;
 219:Src/main.c    **** 	}
 220:Src/main.c    **** 
 221:Src/main.c    **** 	uint8_t* part1;
 222:Src/main.c    **** 	uint8_t part2[3];
 223:Src/main.c    **** 
 224:Src/main.c    **** 	switch(direction){
 225:Src/main.c    **** 		case 'w':
 226:Src/main.c    **** 			part1 = forward;
 227:Src/main.c    **** 			break;
 228:Src/main.c    **** 		case 'a':
 229:Src/main.c    **** 			part1 = left;
 230:Src/main.c    **** 			break;
 231:Src/main.c    **** 		case 'd':
 232:Src/main.c    **** 			part1 = right;
 233:Src/main.c    **** 			break;
 234:Src/main.c    **** 		default:
 235:Src/main.c    **** 			USART_SendString(err);
 236:Src/main.c    **** 			ClearCommand();
 237:Src/main.c    **** 	}
 238:Src/main.c    **** 
 239:Src/main.c    **** 	if(distance < '1' || distance > '9'){
 240:Src/main.c    **** 		USART_SendString(err);
 241:Src/main.c    **** 		ClearCommand();
 242:Src/main.c    **** 		return;
 243:Src/main.c    **** 	}
 244:Src/main.c    **** 
 245:Src/main.c    **** 
 246:Src/main.c    **** 	uint8_t dist = (distance - '0') * 20;
 247:Src/main.c    **** 	sprintf(part2, "%d\n", dist);
 248:Src/main.c    **** 
 249:Src/main.c    **** 	USART_SendString(part1);
 250:Src/main.c    **** 	USART_SendString(part2);
 251:Src/main.c    **** 
 252:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 253:Src/main.c    **** 	HAL_Delay(1000);
 254:Src/main.c    **** 	TIM2->CCR1 = 0;
 255:Src/main.c    **** 
 256:Src/main.c    **** 	ClearCommand();
 257:Src/main.c    **** 
 258:Src/main.c    **** 
 259:Src/main.c    **** 	// Example code while loop
 260:Src/main.c    **** 	//    while (1)
 261:Src/main.c    **** 	//    {
ARM GAS  /tmp/cc2NrRsB.s 			page 6


 262:Src/main.c    **** 	//        while(CH1_DC < 65535)
 263:Src/main.c    **** 	//        {
 264:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 265:Src/main.c    **** 	//            CH1_DC += 70;
 266:Src/main.c    **** 	//            HAL_Delay(1);
 267:Src/main.c    **** 	//        }
 268:Src/main.c    **** 	//        while(CH1_DC > 0)
 269:Src/main.c    **** 	//        {
 270:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 271:Src/main.c    **** 	//            CH1_DC -= 70;
 272:Src/main.c    **** 	//            HAL_Delay(1);
 273:Src/main.c    **** 	//        }
 274:Src/main.c    **** 	//    }
 275:Src/main.c    **** }
 276:Src/main.c    **** 
 277:Src/main.c    **** /*
 278:Src/main.c    **** void Ultrasonic_Init(uint32_t pins)
 279:Src/main.c    **** {
 280:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 281:Src/main.c    **** 
 282:Src/main.c    **** 	GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 283:Src/main.c    **** 		GPIO_MODE_INPUT,
 284:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
 285:Src/main.c    **** 		GPIO_NOPULL
 286:Src/main.c    **** 	};
 287:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &gpio_init);
 288:Src/main.c    **** }
 289:Src/main.c    **** */
 290:Src/main.c    **** 
 291:Src/main.c    **** void GetDistance()
 292:Src/main.c    **** {
 293:Src/main.c    **** 
 294:Src/main.c    **** }
 295:Src/main.c    **** 
 296:Src/main.c    **** /* USER CODE END 0 */
 297:Src/main.c    **** 
 298:Src/main.c    **** /**
 299:Src/main.c    ****  * @brief  The application entry point.
 300:Src/main.c    ****  * @retval int
 301:Src/main.c    ****  */
 302:Src/main.c    **** int main(void)
 303:Src/main.c    **** {
 304:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 305:Src/main.c    ****     SystemClock_Config();
 306:Src/main.c    ****     
 307:Src/main.c    ****     //USART Initalizations
 308:Src/main.c    ****     GPIO_AF_Init();
 309:Src/main.c    ****     USART_Init();
 310:Src/main.c    **** 
 311:Src/main.c    ****     motor_init();                           // Initialize motor code
 312:Src/main.c    ****     
 313:Src/main.c    ****     NVIC_EnableIRQ(USART3_4_IRQn);
 314:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 315:Src/main.c    **** 
 316:Src/main.c    ****     uint8_t prompt[] = "CMD> ";
 317:Src/main.c    ****     
 318:Src/main.c    ****     //PWM and Ultrasonic Initalizations
ARM GAS  /tmp/cc2NrRsB.s 			page 7


 319:Src/main.c    ****     MX_GPIO_Init();
 320:Src/main.c    ****     MX_TIM1_Init();
 321:Src/main.c    ****     
 322:Src/main.c    ****     HAL_TIM_Base_Start(&htim1);
 323:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 324:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 325:Src/main.c    **** 	
 326:Src/main.c    **** 	while (1) {
 327:Src/main.c    ****         int32_t counter = 0;
 328:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 329:Src/main.c    ****         
 330:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
 331:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 332:Src/main.c    ****         while (counter < 10){
 333:Src/main.c    ****             counter++;
 334:Src/main.c    ****         }  // wait for 10 us
 335:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 336:Src/main.c    ****         
 337:Src/main.c    ****         
 338:Src/main.c    ****         startTime = HAL_GetTick();
 339:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 340:Src/main.c    ****         
 341:Src/main.c    ****         // wait for the echo pin to go high
 342:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 10 >  HAL_GetTick())
 343:Src/main.c    ****         {
 344:Src/main.c    ****          
 345:Src/main.c    ****         }
 346:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 347:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
 348:Src/main.c    ****         
 349:Src/main.c    **** 
 350:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 351:Src/main.c    ****       // wait for the echo pin to go low
 352:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 50 > HAL_GetTick())
 353:Src/main.c    ****         {
 354:Src/main.c    ****             
 355:Src/main.c    ****         }
 356:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 357:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 358:Src/main.c    **** 
 359:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 360:Src/main.c    ****         leftDistance = (Value2 - Value1);
 361:Src/main.c    ****         if(leftDistance < 10)
 362:Src/main.c    ****         {
 363:Src/main.c    ****             char strLeft[32];
 364:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 365:Src/main.c    **** 			/*
 366:Src/main.c    ****             USART_SendString("Left Ultrasonic: ");
 367:Src/main.c    ****             USART_SendString(strLeft);
 368:Src/main.c    ****             USART_SendString("\n");
 369:Src/main.c    **** 			*/
 370:Src/main.c    ****         }
 371:Src/main.c    ****         
 372:Src/main.c    ****         counter = 0;
 373:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 374:Src/main.c    ****         
 375:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
ARM GAS  /tmp/cc2NrRsB.s 			page 8


 376:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 377:Src/main.c    ****         while (counter < 10){
 378:Src/main.c    ****             counter++;
 379:Src/main.c    ****         }  // wait for 10 us
 380:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 381:Src/main.c    ****         
 382:Src/main.c    ****         
 383:Src/main.c    ****         startTime = HAL_GetTick();
 384:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 385:Src/main.c    ****         
 386:Src/main.c    ****         // wait for the echo pin to go high
 387:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 10 >  HAL_GetTick())
 388:Src/main.c    ****         {
 389:Src/main.c    ****          
 390:Src/main.c    ****         }
 391:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 392:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
 393:Src/main.c    ****         
 394:Src/main.c    **** 
 395:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 396:Src/main.c    ****       // wait for the echo pin to go low
 397:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 50 > HAL_GetTick())
 398:Src/main.c    ****         {
 399:Src/main.c    ****             
 400:Src/main.c    ****         }
 401:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 402:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 403:Src/main.c    **** 
 404:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 405:Src/main.c    ****         rightDistance = (Value2 - Value1);
 406:Src/main.c    ****         if(rightDistance < 10)
 407:Src/main.c    ****         {
 408:Src/main.c    ****             char strRight[32];
 409:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 410:Src/main.c    **** 			/*
 411:Src/main.c    ****             USART_SendString("Right Ultrasonic: ");
 412:Src/main.c    ****             USART_SendString(strRight);
 413:Src/main.c    ****             USART_SendString("\n");
 414:Src/main.c    **** 			*/
 415:Src/main.c    **** 	}
 416:Src/main.c    **** 
 417:Src/main.c    **** 		if(incomingCommand)
 418:Src/main.c    **** 		{
 419:Src/main.c    **** 			if(command[1])
 420:Src/main.c    **** 			{
 421:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 422:Src/main.c    **** 			}
 423:Src/main.c    **** 		}
 424:Src/main.c    **** 	 HAL_Delay(500);
 425:Src/main.c    **** 	}
 426:Src/main.c    **** }
 427:Src/main.c    **** 
 428:Src/main.c    **** /**
 429:Src/main.c    ****  * @brief System Clock Configuration
 430:Src/main.c    ****  * @retval None
 431:Src/main.c    ****  */
 432:Src/main.c    **** void SystemClock_Config(void)
ARM GAS  /tmp/cc2NrRsB.s 			page 9


 433:Src/main.c    **** {
 434:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 435:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 436:Src/main.c    **** 
 437:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 438:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 439:Src/main.c    **** 	 */
 440:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 441:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 442:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 443:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 444:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 445:Src/main.c    **** 	{
 446:Src/main.c    **** 		Error_Handler();
 447:Src/main.c    **** 	}
 448:Src/main.c    **** 
 449:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 450:Src/main.c    **** 	*/
 451:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 452:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 453:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 454:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 455:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 456:Src/main.c    **** 
 457:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 458:Src/main.c    **** 	{
 459:Src/main.c    **** 		Error_Handler();
 460:Src/main.c    **** 	}
 461:Src/main.c    **** }
 462:Src/main.c    **** 
 463:Src/main.c    **** /**
 464:Src/main.c    ****  * @brief TIM2 Initialization Function
 465:Src/main.c    ****  * @param None
 466:Src/main.c    ****  * @retval None
 467:Src/main.c    ****  */
 468:Src/main.c    **** static void MX_TIM1_Init(void)
 469:Src/main.c    **** {
 470:Src/main.c    **** 
 471:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 472:Src/main.c    **** 
 473:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 474:Src/main.c    **** 
 475:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 476:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 477:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 478:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 479:Src/main.c    **** 
 480:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 481:Src/main.c    **** 
 482:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 483:Src/main.c    ****   htim1.Instance = TIM1;
 484:Src/main.c    ****   htim1.Init.Prescaler = 0;
 485:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 486:Src/main.c    ****   htim1.Init.Period = 65535;
 487:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 488:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 489:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
ARM GAS  /tmp/cc2NrRsB.s 			page 10


 490:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 491:Src/main.c    ****   {
 492:Src/main.c    ****     Error_Handler();
 493:Src/main.c    ****   }
 494:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 495:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 496:Src/main.c    ****   {
 497:Src/main.c    ****     Error_Handler();
 498:Src/main.c    ****   }
 499:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 500:Src/main.c    ****   {
 501:Src/main.c    ****     Error_Handler();
 502:Src/main.c    ****   }
 503:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 504:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 505:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 506:Src/main.c    ****   {
 507:Src/main.c    ****     Error_Handler();
 508:Src/main.c    ****   }
 509:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 510:Src/main.c    ****   sConfigOC.Pulse = 0;
 511:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 512:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 513:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 514:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 515:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 516:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 517:Src/main.c    ****   {
 518:Src/main.c    ****     Error_Handler();
 519:Src/main.c    ****   }
 520:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 521:Src/main.c    ****   {
 522:Src/main.c    ****     Error_Handler();
 523:Src/main.c    ****   }
 524:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 525:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 526:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 527:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 528:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 529:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 530:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 531:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 532:Src/main.c    ****   {
 533:Src/main.c    ****     Error_Handler();
 534:Src/main.c    ****   }
 535:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 536:Src/main.c    **** 
 537:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 538:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 539:Src/main.c    **** 
 540:Src/main.c    **** }
 541:Src/main.c    **** 
 542:Src/main.c    **** /**
 543:Src/main.c    ****  * @brief GPIO Initialization Function
 544:Src/main.c    ****  * @param None
 545:Src/main.c    ****  * @retval None
 546:Src/main.c    ****  */
ARM GAS  /tmp/cc2NrRsB.s 			page 11


 547:Src/main.c    **** static void MX_GPIO_Init(void)
 548:Src/main.c    **** {
  26              		.loc 1 548 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 549:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 549 2 view .LVU1
  39              		.loc 1 549 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 550:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 551:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 552:Src/main.c    **** 
 553:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 554:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 554 2 is_stmt 1 view .LVU3
  46              	.LBB11:
  47              		.loc 1 554 2 view .LVU4
  48              		.loc 1 554 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 554 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 554 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE11:
  62              		.loc 1 554 2 view .LVU8
 555:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 556:Src/main.c    **** 
 557:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 558:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 558 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
ARM GAS  /tmp/cc2NrRsB.s 			page 12


 559:Src/main.c    **** 
 560:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 561:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 561 2 view .LVU10
  72              		.loc 1 561 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 562:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 562 2 is_stmt 1 view .LVU12
  76              		.loc 1 562 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 563:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 563 2 is_stmt 1 view .LVU14
  79              		.loc 1 563 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 564:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 564 2 is_stmt 1 view .LVU16
  83              		.loc 1 564 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 565:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 565 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 566:Src/main.c    **** 
 567:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 568:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 569:Src/main.c    **** }
  90              		.loc 1 569 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE55:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 80 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 80 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc2NrRsB.s 			page 13


 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 83 5 is_stmt 1 view .LVU22
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 83 22 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 131              		.loc 1 83 22 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  88:Src/main.c    **** }
 137              		.loc 1 88 5 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  89:Src/main.c    **** 
 142              		.loc 1 89 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  89:Src/main.c    **** 
 146              		.loc 1 89 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  96:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 96 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc2NrRsB.s 			page 14


 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 97 2 view .LVU29
 177              	.LBB12:
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 97 2 view .LVU30
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 97 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 97 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 97 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE12:
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 97 2 view .LVU34
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 98 2 view .LVU35
 195              	.LBB13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 98 2 view .LVU36
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 98 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 98 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 98 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 98 2 view .LVU40
  99:Src/main.c    **** 
 211              		.loc 1 99 5 view .LVU41
 212              	.LBB14:
ARM GAS  /tmp/cc2NrRsB.s 			page 15


  99:Src/main.c    **** 
 213              		.loc 1 99 5 view .LVU42
  99:Src/main.c    **** 
 214              		.loc 1 99 5 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 
 220              		.loc 1 99 5 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
  99:Src/main.c    **** 
 224              		.loc 1 99 5 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
 226              	.LBE14:
  99:Src/main.c    **** 
 227              		.loc 1 99 5 view .LVU46
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 102 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
 103:Src/main.c    **** 
 234              		.loc 1 103 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 106 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 107 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 108 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 258              		.loc 1 109 2 view .LVU52
ARM GAS  /tmp/cc2NrRsB.s 			page 16


 259 006e 2100     		movs	r1, r4
 260 0070 4C31     		adds	r1, r1, #76
 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 110:Src/main.c    **** 
 264              		.loc 1 110 2 view .LVU53
 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 113 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 114 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 115 2 view .LVU56
 283 0096 2100     		movs	r1, r4
 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 116 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 117:Src/main.c    **** 
 294              		.loc 1 117 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 120 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 121:Src/main.c    **** 
 306              		.loc 1 121 2 view .LVU60
 307 00be 2100     		movs	r1, r4
ARM GAS  /tmp/cc2NrRsB.s 			page 17


 308 00c0 1C31     		adds	r1, r1, #28
 309 00c2 A069     		ldr	r0, [r4, #24]
 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 124 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 125:Src/main.c    **** }
 318              		.loc 1 125 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL23:
 126:Src/main.c    **** 
 324              		.loc 1 126 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 131:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 131 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
ARM GAS  /tmp/cc2NrRsB.s 			page 18


 362              		.loc 1 132 2 view .LVU65
 363              	.LBB15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 132 2 view .LVU66
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 132 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 132 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 132 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 132 2 view .LVU70
 133:Src/main.c    **** 
 380              		.loc 1 133 2 view .LVU71
 133:Src/main.c    **** 
 381              		.loc 1 133 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 133:Src/main.c    **** 
 383              		.loc 1 133 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 136 2 is_stmt 1 view .LVU74
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 136 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 136 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 137:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 137 2 is_stmt 1 view .LVU77
 137:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 137 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 137:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 137 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 137:Src/main.c    **** 												//use with the BT adapter
 403              		.loc 1 137 14 view .LVU80
ARM GAS  /tmp/cc2NrRsB.s 			page 19


 404 0034 E060     		str	r0, [r4, #12]
 141:Src/main.c    **** 
 405              		.loc 1 141 2 is_stmt 1 view .LVU81
 141:Src/main.c    **** 
 406              		.loc 1 141 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 141:Src/main.c    **** 
 408              		.loc 1 141 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 144:Src/main.c    **** 
 412              		.loc 1 144 2 is_stmt 1 view .LVU84
 144:Src/main.c    **** 
 413              		.loc 1 144 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 144:Src/main.c    **** 
 415              		.loc 1 144 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 147:Src/main.c    **** 
 419              		.loc 1 147 2 is_stmt 1 view .LVU87
 147:Src/main.c    **** 
 420              		.loc 1 147 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
 147:Src/main.c    **** 
 422              		.loc 1 147 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 150:Src/main.c    **** }
 426              		.loc 1 150 2 is_stmt 1 view .LVU90
 150:Src/main.c    **** }
 427              		.loc 1 150 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 150:Src/main.c    **** }
 429              		.loc 1 150 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 151:Src/main.c    **** 
 433              		.loc 1 151 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
 448              		.global	USART_SendChar
ARM GAS  /tmp/cc2NrRsB.s 			page 20


 449              		.syntax unified
 450              		.code	16
 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 158:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 158 32 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 159:Src/main.c    **** 		;
 462              		.loc 1 159 8 discriminator 1 view .LVU95
 159:Src/main.c    **** 		;
 463              		.loc 1 159 16 is_stmt 0 discriminator 1 view .LVU96
 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 159:Src/main.c    **** 		;
 466              		.loc 1 159 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 162:Src/main.c    **** }
 469              		.loc 1 162 2 is_stmt 1 view .LVU98
 162:Src/main.c    **** }
 470              		.loc 1 162 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
 163:Src/main.c    **** 
 473              		.loc 1 163 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 170:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 170 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 170:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 170 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI8:
ARM GAS  /tmp/cc2NrRsB.s 			page 21


 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 171 2 is_stmt 1 view .LVU103
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 505              		.loc 1 171 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 172:Src/main.c    **** 		p_string++;
 509              		.loc 1 172 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 173:Src/main.c    **** 	}
 512              		.loc 1 173 3 view .LVU106
 173:Src/main.c    **** 	}
 513              		.loc 1 173 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 171 18 is_stmt 1 view .LVU108
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 171 8 is_stmt 0 view .LVU109
 519 000c 2078     		ldrb	r0, [r4]
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 171 18 view .LVU110
 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 175:Src/main.c    **** }
 523              		.loc 1 175 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 176:Src/main.c    **** 
 526              		.loc 1 176 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 176:Src/main.c    **** 
 529              		.loc 1 176 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
 546              	.LFB48:
ARM GAS  /tmp/cc2NrRsB.s 			page 22


 181:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 547              		.loc 1 181 20 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 182 2 view .LVU115
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 182 10 is_stmt 0 view .LVU116
 560 0004 074B     		ldr	r3, .L22
 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 183:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 183 2 is_stmt 1 view .LVU117
 567 0010 054B     		ldr	r3, .L22+4
 568 0012 0022     		movs	r2, #0
 569 0014 1A80     		strh	r2, [r3]
 184:Src/main.c    **** 	USART_SendString(prompt);
 570              		.loc 1 184 2 view .LVU118
 184:Src/main.c    **** 	USART_SendString(prompt);
 571              		.loc 1 184 18 is_stmt 0 view .LVU119
 572 0016 054B     		ldr	r3, .L22+8
 573 0018 1A70     		strb	r2, [r3]
 185:Src/main.c    **** }
 574              		.loc 1 185 2 is_stmt 1 view .LVU120
 575 001a 6846     		mov	r0, sp
 576 001c FFF7FEFF 		bl	USART_SendString
 577              	.LVL33:
 186:Src/main.c    **** 
 578              		.loc 1 186 1 is_stmt 0 view .LVU121
 579 0020 03B0     		add	sp, sp, #12
 580              		@ sp needed
 581 0022 00BD     		pop	{pc}
 582              	.L23:
 583              		.align	2
 584              	.L22:
 585 0024 00000000 		.word	.LC21
 586 0028 00000000 		.word	command
 587 002c 00000000 		.word	incomingCommand
 588              		.cfi_endproc
 589              	.LFE48:
 591              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 592              		.align	2
 593              	.LC25:
 594 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 594      616E6420 
 594      746F6F20 
ARM GAS  /tmp/cc2NrRsB.s 			page 23


 594      6C6F6E67 
 594      210A00
 595              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 596              		.align	1
 597              		.global	USART3_4_IRQHandler
 598              		.syntax unified
 599              		.code	16
 600              		.thumb_func
 602              	USART3_4_IRQHandler:
 603              	.LFB49:
 188:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 604              		.loc 1 188 27 is_stmt 1 view -0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 24
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608 0000 30B5     		push	{r4, r5, lr}
 609              	.LCFI11:
 610              		.cfi_def_cfa_offset 12
 611              		.cfi_offset 4, -12
 612              		.cfi_offset 5, -8
 613              		.cfi_offset 14, -4
 614 0002 87B0     		sub	sp, sp, #28
 615              	.LCFI12:
 616              		.cfi_def_cfa_offset 40
 189:Src/main.c    **** 	incomingCommand = 1;
 617              		.loc 1 189 2 view .LVU123
 189:Src/main.c    **** 	incomingCommand = 1;
 618              		.loc 1 189 10 is_stmt 0 view .LVU124
 619 0004 01AA     		add	r2, sp, #4
 620 0006 164B     		ldr	r3, .L31
 621 0008 1800     		movs	r0, r3
 622 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 623 000c 38C2     		stmia	r2!, {r3, r4, r5}
 624 000e 0368     		ldr	r3, [r0]
 625 0010 1360     		str	r3, [r2]
 626 0012 8388     		ldrh	r3, [r0, #4]
 627 0014 9380     		strh	r3, [r2, #4]
 628 0016 8379     		ldrb	r3, [r0, #6]
 629 0018 9371     		strb	r3, [r2, #6]
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 630              		.loc 1 190 2 is_stmt 1 view .LVU125
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 631              		.loc 1 190 18 is_stmt 0 view .LVU126
 632 001a 124B     		ldr	r3, .L31+4
 633 001c 0122     		movs	r2, #1
 634 001e 1A70     		strb	r2, [r3]
 191:Src/main.c    **** 		;
 635              		.loc 1 191 2 is_stmt 1 view .LVU127
 636              	.L25:
 191:Src/main.c    **** 		;
 637              		.loc 1 191 8 discriminator 1 view .LVU128
 191:Src/main.c    **** 		;
 638              		.loc 1 191 16 is_stmt 0 discriminator 1 view .LVU129
 639 0020 114B     		ldr	r3, .L31+8
 640 0022 DB69     		ldr	r3, [r3, #28]
 191:Src/main.c    **** 		;
 641              		.loc 1 191 8 discriminator 1 view .LVU130
ARM GAS  /tmp/cc2NrRsB.s 			page 24


 642 0024 9B06     		lsls	r3, r3, #26
 643 0026 FBD5     		bpl	.L25
 193:Src/main.c    **** 		if(command[1]){
 644              		.loc 1 193 2 is_stmt 1 view .LVU131
 193:Src/main.c    **** 		if(command[1]){
 645              		.loc 1 193 12 is_stmt 0 view .LVU132
 646 0028 104B     		ldr	r3, .L31+12
 647 002a 1B78     		ldrb	r3, [r3]
 193:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 193 4 view .LVU133
 649 002c 002B     		cmp	r3, #0
 650 002e 0FD0     		beq	.L26
 194:Src/main.c    **** 			USART_SendString(err);
 651              		.loc 1 194 3 is_stmt 1 view .LVU134
 194:Src/main.c    **** 			USART_SendString(err);
 652              		.loc 1 194 13 is_stmt 0 view .LVU135
 653 0030 0E4B     		ldr	r3, .L31+12
 654 0032 5B78     		ldrb	r3, [r3, #1]
 194:Src/main.c    **** 			USART_SendString(err);
 655              		.loc 1 194 5 view .LVU136
 656 0034 002B     		cmp	r3, #0
 657 0036 05D1     		bne	.L30
 199:Src/main.c    **** 	else
 658              		.loc 1 199 4 is_stmt 1 view .LVU137
 199:Src/main.c    **** 	else
 659              		.loc 1 199 23 is_stmt 0 view .LVU138
 660 0038 0B4B     		ldr	r3, .L31+8
 661 003a 9B8C     		ldrh	r3, [r3, #36]
 199:Src/main.c    **** 	else
 662              		.loc 1 199 15 view .LVU139
 663 003c DBB2     		uxtb	r3, r3
 664 003e 0B4A     		ldr	r2, .L31+12
 665 0040 5370     		strb	r3, [r2, #1]
 666 0042 0AE0     		b	.L24
 667              	.L30:
 195:Src/main.c    **** 			ClearCommand();
 668              		.loc 1 195 4 is_stmt 1 view .LVU140
 669 0044 01A8     		add	r0, sp, #4
 670 0046 FFF7FEFF 		bl	USART_SendString
 671              	.LVL34:
 196:Src/main.c    **** 		}
 672              		.loc 1 196 4 view .LVU141
 673 004a FFF7FEFF 		bl	ClearCommand
 674              	.LVL35:
 675 004e 04E0     		b	.L24
 676              	.L26:
 201:Src/main.c    **** }
 677              		.loc 1 201 3 view .LVU142
 201:Src/main.c    **** }
 678              		.loc 1 201 22 is_stmt 0 view .LVU143
 679 0050 054B     		ldr	r3, .L31+8
 680 0052 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** }
 681              		.loc 1 201 14 view .LVU144
 682 0054 DBB2     		uxtb	r3, r3
 683 0056 054A     		ldr	r2, .L31+12
 684 0058 1370     		strb	r3, [r2]
ARM GAS  /tmp/cc2NrRsB.s 			page 25


 685              	.L24:
 202:Src/main.c    **** 
 686              		.loc 1 202 1 view .LVU145
 687 005a 07B0     		add	sp, sp, #28
 688              		@ sp needed
 689 005c 30BD     		pop	{r4, r5, pc}
 690              	.L32:
 691 005e C046     		.align	2
 692              	.L31:
 693 0060 00000000 		.word	.LC25
 694 0064 00000000 		.word	incomingCommand
 695 0068 00480040 		.word	1073760256
 696 006c 00000000 		.word	command
 697              		.cfi_endproc
 698              	.LFE49:
 700              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 701              		.align	2
 702              	.LC37:
 703 0000 25640A00 		.ascii	"%d\012\000"
 704              		.align	2
 705              	.LC29:
 706 0004 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 706      523A2049 
 706      6E76616C 
 706      69642063 
 706      6F6D6D61 
 707 001d 000000   		.align	2
 708              	.LC31:
 709 0020 4D6F7669 		.ascii	"Moving forward \000"
 709      6E672066 
 709      6F727761 
 709      72642000 
 710              		.align	2
 711              	.LC33:
 712 0030 5475726E 		.ascii	"Turning left \000"
 712      696E6720 
 712      6C656674 
 712      2000
 713 003e 0000     		.align	2
 714              	.LC35:
 715 0040 5475726E 		.ascii	"Turning right \000"
 715      696E6720 
 715      72696768 
 715      742000
 716              		.section	.text.ProcessCommand,"ax",%progbits
 717              		.align	1
 718              		.global	ProcessCommand
 719              		.syntax unified
 720              		.code	16
 721              		.thumb_func
 723              	ProcessCommand:
 724              	.LVL36:
 725              	.LFB50:
 204:Src/main.c    **** 	uint32_t left_motor_pin;
 726              		.loc 1 204 57 is_stmt 1 view -0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /tmp/cc2NrRsB.s 			page 26


 729              		@ frame_needed = 0, uses_anonymous_args = 0
 204:Src/main.c    **** 	uint32_t left_motor_pin;
 730              		.loc 1 204 57 is_stmt 0 view .LVU147
 731 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 732              	.LCFI13:
 733              		.cfi_def_cfa_offset 20
 734              		.cfi_offset 4, -20
 735              		.cfi_offset 5, -16
 736              		.cfi_offset 6, -12
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 95B0     		sub	sp, sp, #84
 740              	.LCFI14:
 741              		.cfi_def_cfa_offset 104
 205:Src/main.c    **** 	uint32_t right_motor_pin;
 742              		.loc 1 205 2 is_stmt 1 view .LVU148
 206:Src/main.c    **** 	int32_t CH1_DC = 65535;
 743              		.loc 1 206 2 view .LVU149
 207:Src/main.c    **** 
 744              		.loc 1 207 2 view .LVU150
 745              	.LVL37:
 209:Src/main.c    **** 
 746              		.loc 1 209 2 view .LVU151
 209:Src/main.c    **** 
 747              		.loc 1 209 10 is_stmt 0 view .LVU152
 748 0004 0DAA     		add	r2, sp, #52
 749 0006 2B4B     		ldr	r3, .L43
 750 0008 E0CB     		ldmia	r3!, {r5, r6, r7}
 751 000a E0C2     		stmia	r2!, {r5, r6, r7}
 752 000c 1400     		movs	r4, r2
 753 000e 64CB     		ldmia	r3!, {r2, r5, r6}
 754 0010 64C4     		stmia	r4!, {r2, r5, r6}
 755 0012 1B78     		ldrb	r3, [r3]
 756 0014 2370     		strb	r3, [r4]
 211:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 757              		.loc 1 211 2 is_stmt 1 view .LVU153
 211:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 758              		.loc 1 211 10 is_stmt 0 view .LVU154
 759 0016 09AA     		add	r2, sp, #36
 760 0018 274B     		ldr	r3, .L43+4
 761 001a E0CB     		ldmia	r3!, {r5, r6, r7}
 762 001c E0C2     		stmia	r2!, {r5, r6, r7}
 763 001e 1B68     		ldr	r3, [r3]
 764 0020 1360     		str	r3, [r2]
 212:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 765              		.loc 1 212 2 is_stmt 1 view .LVU155
 212:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 766              		.loc 1 212 10 is_stmt 0 view .LVU156
 767 0022 05AC     		add	r4, sp, #20
 768 0024 254B     		ldr	r3, .L43+8
 769 0026 2200     		movs	r2, r4
 770 0028 E0CB     		ldmia	r3!, {r5, r6, r7}
 771 002a E0C2     		stmia	r2!, {r5, r6, r7}
 772 002c 1B88     		ldrh	r3, [r3]
 773 002e 1380     		strh	r3, [r2]
 213:Src/main.c    **** 
 774              		.loc 1 213 2 is_stmt 1 view .LVU157
ARM GAS  /tmp/cc2NrRsB.s 			page 27


 213:Src/main.c    **** 
 775              		.loc 1 213 10 is_stmt 0 view .LVU158
 776 0030 01AC     		add	r4, sp, #4
 777 0032 234B     		ldr	r3, .L43+12
 778 0034 2200     		movs	r2, r4
 779 0036 E0CB     		ldmia	r3!, {r5, r6, r7}
 780 0038 E0C2     		stmia	r2!, {r5, r6, r7}
 781 003a 1C88     		ldrh	r4, [r3]
 782 003c 1480     		strh	r4, [r2]
 783 003e 9B78     		ldrb	r3, [r3, #2]
 784 0040 9370     		strb	r3, [r2, #2]
 215:Src/main.c    **** 		USART_SendString(err);
 785              		.loc 1 215 2 is_stmt 1 view .LVU159
 215:Src/main.c    **** 		USART_SendString(err);
 786              		.loc 1 215 4 is_stmt 0 view .LVU160
 787 0042 7728     		cmp	r0, #119
 788 0044 0BD0     		beq	.L38
 215:Src/main.c    **** 		USART_SendString(err);
 789              		.loc 1 215 22 discriminator 1 view .LVU161
 790 0046 6128     		cmp	r0, #97
 791 0048 2BD0     		beq	.L39
 215:Src/main.c    **** 		USART_SendString(err);
 792              		.loc 1 215 42 discriminator 2 view .LVU162
 793 004a 6428     		cmp	r0, #100
 794 004c 01D1     		bne	.L41
 232:Src/main.c    **** 			break;
 795              		.loc 1 232 10 view .LVU163
 796 004e 01AC     		add	r4, sp, #4
 797 0050 06E0     		b	.L34
 798              	.L41:
 216:Src/main.c    **** 		ClearCommand();
 799              		.loc 1 216 3 is_stmt 1 view .LVU164
 800 0052 0DA8     		add	r0, sp, #52
 801              	.LVL38:
 216:Src/main.c    **** 		ClearCommand();
 802              		.loc 1 216 3 is_stmt 0 view .LVU165
 803 0054 FFF7FEFF 		bl	USART_SendString
 804              	.LVL39:
 217:Src/main.c    **** 		return;
 805              		.loc 1 217 3 is_stmt 1 view .LVU166
 806 0058 FFF7FEFF 		bl	ClearCommand
 807              	.LVL40:
 218:Src/main.c    **** 	}
 808              		.loc 1 218 3 view .LVU167
 809 005c 1FE0     		b	.L33
 810              	.LVL41:
 811              	.L38:
 226:Src/main.c    **** 			break;
 812              		.loc 1 226 10 is_stmt 0 view .LVU168
 813 005e 09AC     		add	r4, sp, #36
 814              	.L34:
 815              	.LVL42:
 239:Src/main.c    **** 		USART_SendString(err);
 816              		.loc 1 239 2 is_stmt 1 view .LVU169
 239:Src/main.c    **** 		USART_SendString(err);
 817              		.loc 1 239 20 is_stmt 0 view .LVU170
 818 0060 0B00     		movs	r3, r1
ARM GAS  /tmp/cc2NrRsB.s 			page 28


 819 0062 313B     		subs	r3, r3, #49
 820 0064 DBB2     		uxtb	r3, r3
 239:Src/main.c    **** 		USART_SendString(err);
 821              		.loc 1 239 4 view .LVU171
 822 0066 082B     		cmp	r3, #8
 823 0068 1DD8     		bhi	.L42
 246:Src/main.c    **** 	sprintf(part2, "%d\n", dist);
 824              		.loc 1 246 2 is_stmt 1 view .LVU172
 246:Src/main.c    **** 	sprintf(part2, "%d\n", dist);
 825              		.loc 1 246 10 is_stmt 0 view .LVU173
 826 006a 1422     		movs	r2, #20
 827 006c 4A43     		muls	r2, r1
 828 006e 4032     		adds	r2, r2, #64
 829 0070 D2B2     		uxtb	r2, r2
 830              	.LVL43:
 247:Src/main.c    **** 
 831              		.loc 1 247 2 is_stmt 1 view .LVU174
 832 0072 1449     		ldr	r1, .L43+16
 833              	.LVL44:
 247:Src/main.c    **** 
 834              		.loc 1 247 2 is_stmt 0 view .LVU175
 835 0074 6846     		mov	r0, sp
 836              	.LVL45:
 247:Src/main.c    **** 
 837              		.loc 1 247 2 view .LVU176
 838 0076 FFF7FEFF 		bl	sprintf
 839              	.LVL46:
 249:Src/main.c    **** 	USART_SendString(part2);
 840              		.loc 1 249 2 is_stmt 1 view .LVU177
 841 007a 2000     		movs	r0, r4
 842 007c FFF7FEFF 		bl	USART_SendString
 843              	.LVL47:
 250:Src/main.c    **** 
 844              		.loc 1 250 2 view .LVU178
 845 0080 6846     		mov	r0, sp
 846 0082 FFF7FEFF 		bl	USART_SendString
 847              	.LVL48:
 252:Src/main.c    **** 	HAL_Delay(1000);
 848              		.loc 1 252 2 view .LVU179
 252:Src/main.c    **** 	HAL_Delay(1000);
 849              		.loc 1 252 13 is_stmt 0 view .LVU180
 850 0086 8024     		movs	r4, #128
 851              	.LVL49:
 252:Src/main.c    **** 	HAL_Delay(1000);
 852              		.loc 1 252 13 view .LVU181
 853 0088 E405     		lsls	r4, r4, #23
 854 008a 0F4B     		ldr	r3, .L43+20
 855 008c 6363     		str	r3, [r4, #52]
 253:Src/main.c    **** 	TIM2->CCR1 = 0;
 856              		.loc 1 253 2 is_stmt 1 view .LVU182
 857 008e FA20     		movs	r0, #250
 858 0090 8000     		lsls	r0, r0, #2
 859 0092 FFF7FEFF 		bl	HAL_Delay
 860              	.LVL50:
 254:Src/main.c    **** 
 861              		.loc 1 254 2 view .LVU183
 254:Src/main.c    **** 
ARM GAS  /tmp/cc2NrRsB.s 			page 29


 862              		.loc 1 254 13 is_stmt 0 view .LVU184
 863 0096 0023     		movs	r3, #0
 864 0098 6363     		str	r3, [r4, #52]
 256:Src/main.c    **** 
 865              		.loc 1 256 2 is_stmt 1 view .LVU185
 866 009a FFF7FEFF 		bl	ClearCommand
 867              	.LVL51:
 868              	.L33:
 275:Src/main.c    **** 
 869              		.loc 1 275 1 is_stmt 0 view .LVU186
 870 009e 15B0     		add	sp, sp, #84
 871              		@ sp needed
 872 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 873              	.LVL52:
 874              	.L39:
 229:Src/main.c    **** 			break;
 875              		.loc 1 229 10 view .LVU187
 876 00a2 05AC     		add	r4, sp, #20
 877 00a4 DCE7     		b	.L34
 878              	.LVL53:
 879              	.L42:
 240:Src/main.c    **** 		ClearCommand();
 880              		.loc 1 240 3 is_stmt 1 view .LVU188
 881 00a6 0DA8     		add	r0, sp, #52
 882              	.LVL54:
 240:Src/main.c    **** 		ClearCommand();
 883              		.loc 1 240 3 is_stmt 0 view .LVU189
 884 00a8 FFF7FEFF 		bl	USART_SendString
 885              	.LVL55:
 241:Src/main.c    **** 		return;
 886              		.loc 1 241 3 is_stmt 1 view .LVU190
 887 00ac FFF7FEFF 		bl	ClearCommand
 888              	.LVL56:
 242:Src/main.c    **** 	}
 889              		.loc 1 242 3 view .LVU191
 890 00b0 F5E7     		b	.L33
 891              	.L44:
 892 00b2 C046     		.align	2
 893              	.L43:
 894 00b4 04000000 		.word	.LC29
 895 00b8 20000000 		.word	.LC31
 896 00bc 30000000 		.word	.LC33
 897 00c0 40000000 		.word	.LC35
 898 00c4 00000000 		.word	.LC37
 899 00c8 FFFF0000 		.word	65535
 900              		.cfi_endproc
 901              	.LFE50:
 903              		.section	.text.GetDistance,"ax",%progbits
 904              		.align	1
 905              		.global	GetDistance
 906              		.syntax unified
 907              		.code	16
 908              		.thumb_func
 910              	GetDistance:
 911              	.LFB51:
 292:Src/main.c    **** 
 912              		.loc 1 292 1 view -0
ARM GAS  /tmp/cc2NrRsB.s 			page 30


 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916              		@ link register save eliminated.
 294:Src/main.c    **** 
 917              		.loc 1 294 1 view .LVU193
 918              		@ sp needed
 919 0000 7047     		bx	lr
 920              		.cfi_endproc
 921              	.LFE51:
 923              		.section	.text.Error_Handler,"ax",%progbits
 924              		.align	1
 925              		.global	Error_Handler
 926              		.syntax unified
 927              		.code	16
 928              		.thumb_func
 930              	Error_Handler:
 931              	.LFB56:
 570:Src/main.c    **** 
 571:Src/main.c    **** /* USER CODE BEGIN 4 */
 572:Src/main.c    **** 
 573:Src/main.c    **** /* USER CODE END 4 */
 574:Src/main.c    **** 
 575:Src/main.c    **** /**
 576:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 577:Src/main.c    ****  * @retval None
 578:Src/main.c    ****  */
 579:Src/main.c    **** void Error_Handler(void)
 580:Src/main.c    **** {
 932              		.loc 1 580 1 view -0
 933              		.cfi_startproc
 934              		@ Volatile: function does not return.
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 581:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 582:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 583:Src/main.c    **** 	__disable_irq();
 938              		.loc 1 583 2 view .LVU195
 939              	.LBB16:
 940              	.LBI16:
 941              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/cc2NrRsB.s 			page 31


  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/cc2NrRsB.s 			page 32


  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
ARM GAS  /tmp/cc2NrRsB.s 			page 33


 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 942              		.loc 2 140 27 view .LVU196
 943              	.LBB17:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 944              		.loc 2 142 3 view .LVU197
 945              		.syntax divided
 946              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 947 0000 72B6     		cpsid i
 948              	@ 0 "" 2
 949              		.thumb
 950              		.syntax unified
 951              	.L47:
 952              	.LBE17:
 953              	.LBE16:
 584:Src/main.c    **** 	while (1)
 954              		.loc 1 584 2 discriminator 1 view .LVU198
 585:Src/main.c    **** 	{
 586:Src/main.c    **** 	}
 955              		.loc 1 586 2 discriminator 1 view .LVU199
 584:Src/main.c    **** 	while (1)
 956              		.loc 1 584 8 discriminator 1 view .LVU200
 957 0002 FEE7     		b	.L47
 958              		.cfi_endproc
 959              	.LFE56:
 961              		.section	.text.MX_TIM1_Init,"ax",%progbits
 962              		.align	1
 963              		.syntax unified
 964              		.code	16
 965              		.thumb_func
 967              	MX_TIM1_Init:
 968              	.LFB54:
 469:Src/main.c    **** 
 969              		.loc 1 469 1 view -0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 88
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973 0000 00B5     		push	{lr}
 974              	.LCFI15:
 975              		.cfi_def_cfa_offset 4
 976              		.cfi_offset 14, -4
 977 0002 97B0     		sub	sp, sp, #92
 978              	.LCFI16:
 979              		.cfi_def_cfa_offset 96
 475:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 980              		.loc 1 475 3 view .LVU202
 475:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/cc2NrRsB.s 			page 34


 981              		.loc 1 475 26 is_stmt 0 view .LVU203
 982 0004 1022     		movs	r2, #16
 983 0006 0021     		movs	r1, #0
 984 0008 12A8     		add	r0, sp, #72
 985 000a FFF7FEFF 		bl	memset
 986              	.LVL57:
 476:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 987              		.loc 1 476 3 is_stmt 1 view .LVU204
 476:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 988              		.loc 1 476 27 is_stmt 0 view .LVU205
 989 000e 0822     		movs	r2, #8
 990 0010 0021     		movs	r1, #0
 991 0012 10A8     		add	r0, sp, #64
 992 0014 FFF7FEFF 		bl	memset
 993              	.LVL58:
 477:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 994              		.loc 1 477 3 is_stmt 1 view .LVU206
 477:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 995              		.loc 1 477 22 is_stmt 0 view .LVU207
 996 0018 1C22     		movs	r2, #28
 997 001a 0021     		movs	r1, #0
 998 001c 09A8     		add	r0, sp, #36
 999 001e FFF7FEFF 		bl	memset
 1000              	.LVL59:
 478:Src/main.c    **** 
 1001              		.loc 1 478 3 is_stmt 1 view .LVU208
 478:Src/main.c    **** 
 1002              		.loc 1 478 34 is_stmt 0 view .LVU209
 1003 0022 2022     		movs	r2, #32
 1004 0024 0021     		movs	r1, #0
 1005 0026 01A8     		add	r0, sp, #4
 1006 0028 FFF7FEFF 		bl	memset
 1007              	.LVL60:
 483:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1008              		.loc 1 483 3 is_stmt 1 view .LVU210
 483:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1009              		.loc 1 483 18 is_stmt 0 view .LVU211
 1010 002c 3048     		ldr	r0, .L63
 1011 002e 314B     		ldr	r3, .L63+4
 1012 0030 0360     		str	r3, [r0]
 484:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1013              		.loc 1 484 3 is_stmt 1 view .LVU212
 484:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1014              		.loc 1 484 24 is_stmt 0 view .LVU213
 1015 0032 0023     		movs	r3, #0
 1016 0034 4360     		str	r3, [r0, #4]
 485:Src/main.c    ****   htim1.Init.Period = 65535;
 1017              		.loc 1 485 3 is_stmt 1 view .LVU214
 485:Src/main.c    ****   htim1.Init.Period = 65535;
 1018              		.loc 1 485 26 is_stmt 0 view .LVU215
 1019 0036 8360     		str	r3, [r0, #8]
 486:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1020              		.loc 1 486 3 is_stmt 1 view .LVU216
 486:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1021              		.loc 1 486 21 is_stmt 0 view .LVU217
 1022 0038 2F4A     		ldr	r2, .L63+8
 1023 003a C260     		str	r2, [r0, #12]
ARM GAS  /tmp/cc2NrRsB.s 			page 35


 487:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1024              		.loc 1 487 3 is_stmt 1 view .LVU218
 487:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1025              		.loc 1 487 28 is_stmt 0 view .LVU219
 1026 003c 0361     		str	r3, [r0, #16]
 488:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1027              		.loc 1 488 3 is_stmt 1 view .LVU220
 488:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1028              		.loc 1 488 32 is_stmt 0 view .LVU221
 1029 003e 4361     		str	r3, [r0, #20]
 489:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1030              		.loc 1 489 3 is_stmt 1 view .LVU222
 489:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1031              		.loc 1 489 32 is_stmt 0 view .LVU223
 1032 0040 8033     		adds	r3, r3, #128
 1033 0042 8361     		str	r3, [r0, #24]
 490:Src/main.c    ****   {
 1034              		.loc 1 490 3 is_stmt 1 view .LVU224
 490:Src/main.c    ****   {
 1035              		.loc 1 490 7 is_stmt 0 view .LVU225
 1036 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1037              	.LVL61:
 490:Src/main.c    ****   {
 1038              		.loc 1 490 6 view .LVU226
 1039 0048 0028     		cmp	r0, #0
 1040 004a 42D1     		bne	.L56
 494:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1041              		.loc 1 494 3 is_stmt 1 view .LVU227
 494:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1042              		.loc 1 494 34 is_stmt 0 view .LVU228
 1043 004c 8023     		movs	r3, #128
 1044 004e 5B01     		lsls	r3, r3, #5
 1045 0050 1293     		str	r3, [sp, #72]
 495:Src/main.c    ****   {
 1046              		.loc 1 495 3 is_stmt 1 view .LVU229
 495:Src/main.c    ****   {
 1047              		.loc 1 495 7 is_stmt 0 view .LVU230
 1048 0052 2748     		ldr	r0, .L63
 1049 0054 12A9     		add	r1, sp, #72
 1050 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1051              	.LVL62:
 495:Src/main.c    ****   {
 1052              		.loc 1 495 6 view .LVU231
 1053 005a 0028     		cmp	r0, #0
 1054 005c 3BD1     		bne	.L57
 499:Src/main.c    ****   {
 1055              		.loc 1 499 3 is_stmt 1 view .LVU232
 499:Src/main.c    ****   {
 1056              		.loc 1 499 7 is_stmt 0 view .LVU233
 1057 005e 2448     		ldr	r0, .L63
 1058 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1059              	.LVL63:
 499:Src/main.c    ****   {
 1060              		.loc 1 499 6 view .LVU234
 1061 0064 0028     		cmp	r0, #0
 1062 0066 38D1     		bne	.L58
 503:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/cc2NrRsB.s 			page 36


 1063              		.loc 1 503 3 is_stmt 1 view .LVU235
 503:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1064              		.loc 1 503 37 is_stmt 0 view .LVU236
 1065 0068 0023     		movs	r3, #0
 1066 006a 1093     		str	r3, [sp, #64]
 504:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1067              		.loc 1 504 3 is_stmt 1 view .LVU237
 504:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1068              		.loc 1 504 33 is_stmt 0 view .LVU238
 1069 006c 1193     		str	r3, [sp, #68]
 505:Src/main.c    ****   {
 1070              		.loc 1 505 3 is_stmt 1 view .LVU239
 505:Src/main.c    ****   {
 1071              		.loc 1 505 7 is_stmt 0 view .LVU240
 1072 006e 2048     		ldr	r0, .L63
 1073 0070 10A9     		add	r1, sp, #64
 1074 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1075              	.LVL64:
 505:Src/main.c    ****   {
 1076              		.loc 1 505 6 view .LVU241
 1077 0076 0028     		cmp	r0, #0
 1078 0078 31D1     		bne	.L59
 509:Src/main.c    ****   sConfigOC.Pulse = 0;
 1079              		.loc 1 509 3 is_stmt 1 view .LVU242
 509:Src/main.c    ****   sConfigOC.Pulse = 0;
 1080              		.loc 1 509 20 is_stmt 0 view .LVU243
 1081 007a 6023     		movs	r3, #96
 1082 007c 0993     		str	r3, [sp, #36]
 510:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1083              		.loc 1 510 3 is_stmt 1 view .LVU244
 510:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1084              		.loc 1 510 19 is_stmt 0 view .LVU245
 1085 007e 0023     		movs	r3, #0
 1086 0080 0A93     		str	r3, [sp, #40]
 511:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1087              		.loc 1 511 3 is_stmt 1 view .LVU246
 511:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1088              		.loc 1 511 24 is_stmt 0 view .LVU247
 1089 0082 0B93     		str	r3, [sp, #44]
 512:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1090              		.loc 1 512 3 is_stmt 1 view .LVU248
 512:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1091              		.loc 1 512 25 is_stmt 0 view .LVU249
 1092 0084 0C93     		str	r3, [sp, #48]
 513:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1093              		.loc 1 513 3 is_stmt 1 view .LVU250
 513:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1094              		.loc 1 513 24 is_stmt 0 view .LVU251
 1095 0086 0D93     		str	r3, [sp, #52]
 514:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1096              		.loc 1 514 3 is_stmt 1 view .LVU252
 514:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1097              		.loc 1 514 25 is_stmt 0 view .LVU253
 1098 0088 0E93     		str	r3, [sp, #56]
 515:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1099              		.loc 1 515 3 is_stmt 1 view .LVU254
 515:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
ARM GAS  /tmp/cc2NrRsB.s 			page 37


 1100              		.loc 1 515 26 is_stmt 0 view .LVU255
 1101 008a 0F93     		str	r3, [sp, #60]
 516:Src/main.c    ****   {
 1102              		.loc 1 516 3 is_stmt 1 view .LVU256
 516:Src/main.c    ****   {
 1103              		.loc 1 516 7 is_stmt 0 view .LVU257
 1104 008c 1848     		ldr	r0, .L63
 1105 008e 0022     		movs	r2, #0
 1106 0090 09A9     		add	r1, sp, #36
 1107 0092 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1108              	.LVL65:
 516:Src/main.c    ****   {
 1109              		.loc 1 516 6 view .LVU258
 1110 0096 0028     		cmp	r0, #0
 1111 0098 23D1     		bne	.L60
 520:Src/main.c    ****   {
 1112              		.loc 1 520 3 is_stmt 1 view .LVU259
 520:Src/main.c    ****   {
 1113              		.loc 1 520 7 is_stmt 0 view .LVU260
 1114 009a 1548     		ldr	r0, .L63
 1115 009c 0422     		movs	r2, #4
 1116 009e 09A9     		add	r1, sp, #36
 1117 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1118              	.LVL66:
 520:Src/main.c    ****   {
 1119              		.loc 1 520 6 view .LVU261
 1120 00a4 0028     		cmp	r0, #0
 1121 00a6 1ED1     		bne	.L61
 524:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1122              		.loc 1 524 3 is_stmt 1 view .LVU262
 524:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1123              		.loc 1 524 40 is_stmt 0 view .LVU263
 1124 00a8 0023     		movs	r3, #0
 1125 00aa 0193     		str	r3, [sp, #4]
 525:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1126              		.loc 1 525 3 is_stmt 1 view .LVU264
 525:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1127              		.loc 1 525 41 is_stmt 0 view .LVU265
 1128 00ac 0293     		str	r3, [sp, #8]
 526:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1129              		.loc 1 526 3 is_stmt 1 view .LVU266
 526:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1130              		.loc 1 526 34 is_stmt 0 view .LVU267
 1131 00ae 0393     		str	r3, [sp, #12]
 527:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1132              		.loc 1 527 3 is_stmt 1 view .LVU268
 527:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1133              		.loc 1 527 33 is_stmt 0 view .LVU269
 1134 00b0 0493     		str	r3, [sp, #16]
 528:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1135              		.loc 1 528 3 is_stmt 1 view .LVU270
 528:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1136              		.loc 1 528 35 is_stmt 0 view .LVU271
 1137 00b2 0593     		str	r3, [sp, #20]
 529:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1138              		.loc 1 529 3 is_stmt 1 view .LVU272
 529:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
ARM GAS  /tmp/cc2NrRsB.s 			page 38


 1139              		.loc 1 529 38 is_stmt 0 view .LVU273
 1140 00b4 8022     		movs	r2, #128
 1141 00b6 9201     		lsls	r2, r2, #6
 1142 00b8 0692     		str	r2, [sp, #24]
 530:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1143              		.loc 1 530 3 is_stmt 1 view .LVU274
 530:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1144              		.loc 1 530 40 is_stmt 0 view .LVU275
 1145 00ba 0893     		str	r3, [sp, #32]
 531:Src/main.c    ****   {
 1146              		.loc 1 531 3 is_stmt 1 view .LVU276
 531:Src/main.c    ****   {
 1147              		.loc 1 531 7 is_stmt 0 view .LVU277
 1148 00bc 0C48     		ldr	r0, .L63
 1149 00be 01A9     		add	r1, sp, #4
 1150 00c0 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1151              	.LVL67:
 531:Src/main.c    ****   {
 1152              		.loc 1 531 6 view .LVU278
 1153 00c4 0028     		cmp	r0, #0
 1154 00c6 10D1     		bne	.L62
 538:Src/main.c    **** 
 1155              		.loc 1 538 3 is_stmt 1 view .LVU279
 1156 00c8 0948     		ldr	r0, .L63
 1157 00ca FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1158              	.LVL68:
 540:Src/main.c    **** 
 1159              		.loc 1 540 1 is_stmt 0 view .LVU280
 1160 00ce 17B0     		add	sp, sp, #92
 1161              		@ sp needed
 1162 00d0 00BD     		pop	{pc}
 1163              	.L56:
 492:Src/main.c    ****   }
 1164              		.loc 1 492 5 is_stmt 1 view .LVU281
 1165 00d2 FFF7FEFF 		bl	Error_Handler
 1166              	.LVL69:
 1167              	.L57:
 497:Src/main.c    ****   }
 1168              		.loc 1 497 5 view .LVU282
 1169 00d6 FFF7FEFF 		bl	Error_Handler
 1170              	.LVL70:
 1171              	.L58:
 501:Src/main.c    ****   }
 1172              		.loc 1 501 5 view .LVU283
 1173 00da FFF7FEFF 		bl	Error_Handler
 1174              	.LVL71:
 1175              	.L59:
 507:Src/main.c    ****   }
 1176              		.loc 1 507 5 view .LVU284
 1177 00de FFF7FEFF 		bl	Error_Handler
 1178              	.LVL72:
 1179              	.L60:
 518:Src/main.c    ****   }
 1180              		.loc 1 518 5 view .LVU285
 1181 00e2 FFF7FEFF 		bl	Error_Handler
 1182              	.LVL73:
 1183              	.L61:
ARM GAS  /tmp/cc2NrRsB.s 			page 39


 522:Src/main.c    ****   }
 1184              		.loc 1 522 5 view .LVU286
 1185 00e6 FFF7FEFF 		bl	Error_Handler
 1186              	.LVL74:
 1187              	.L62:
 533:Src/main.c    ****   }
 1188              		.loc 1 533 5 view .LVU287
 1189 00ea FFF7FEFF 		bl	Error_Handler
 1190              	.LVL75:
 1191              	.L64:
 1192 00ee C046     		.align	2
 1193              	.L63:
 1194 00f0 00000000 		.word	htim1
 1195 00f4 002C0140 		.word	1073818624
 1196 00f8 FFFF0000 		.word	65535
 1197              		.cfi_endproc
 1198              	.LFE54:
 1200              		.section	.text.SystemClock_Config,"ax",%progbits
 1201              		.align	1
 1202              		.global	SystemClock_Config
 1203              		.syntax unified
 1204              		.code	16
 1205              		.thumb_func
 1207              	SystemClock_Config:
 1208              	.LFB53:
 433:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1209              		.loc 1 433 1 view -0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 72
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213 0000 00B5     		push	{lr}
 1214              	.LCFI17:
 1215              		.cfi_def_cfa_offset 4
 1216              		.cfi_offset 14, -4
 1217 0002 93B0     		sub	sp, sp, #76
 1218              	.LCFI18:
 1219              		.cfi_def_cfa_offset 80
 434:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1220              		.loc 1 434 2 view .LVU289
 434:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1221              		.loc 1 434 21 is_stmt 0 view .LVU290
 1222 0004 3422     		movs	r2, #52
 1223 0006 0021     		movs	r1, #0
 1224 0008 05A8     		add	r0, sp, #20
 1225 000a FFF7FEFF 		bl	memset
 1226              	.LVL76:
 435:Src/main.c    **** 
 1227              		.loc 1 435 2 is_stmt 1 view .LVU291
 435:Src/main.c    **** 
 1228              		.loc 1 435 21 is_stmt 0 view .LVU292
 1229 000e 1022     		movs	r2, #16
 1230 0010 0021     		movs	r1, #0
 1231 0012 01A8     		add	r0, sp, #4
 1232 0014 FFF7FEFF 		bl	memset
 1233              	.LVL77:
 440:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1234              		.loc 1 440 2 is_stmt 1 view .LVU293
ARM GAS  /tmp/cc2NrRsB.s 			page 40


 440:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1235              		.loc 1 440 35 is_stmt 0 view .LVU294
 1236 0018 0223     		movs	r3, #2
 1237 001a 0593     		str	r3, [sp, #20]
 441:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1238              		.loc 1 441 2 is_stmt 1 view .LVU295
 441:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1239              		.loc 1 441 29 is_stmt 0 view .LVU296
 1240 001c 013B     		subs	r3, r3, #1
 1241 001e 0893     		str	r3, [sp, #32]
 442:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1242              		.loc 1 442 2 is_stmt 1 view .LVU297
 442:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1243              		.loc 1 442 40 is_stmt 0 view .LVU298
 1244 0020 0F33     		adds	r3, r3, #15
 1245 0022 0993     		str	r3, [sp, #36]
 443:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1246              		.loc 1 443 2 is_stmt 1 view .LVU299
 444:Src/main.c    **** 	{
 1247              		.loc 1 444 2 view .LVU300
 444:Src/main.c    **** 	{
 1248              		.loc 1 444 6 is_stmt 0 view .LVU301
 1249 0024 05A8     		add	r0, sp, #20
 1250 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1251              	.LVL78:
 444:Src/main.c    **** 	{
 1252              		.loc 1 444 5 view .LVU302
 1253 002a 0028     		cmp	r0, #0
 1254 002c 0DD1     		bne	.L68
 451:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1255              		.loc 1 451 2 is_stmt 1 view .LVU303
 451:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1256              		.loc 1 451 30 is_stmt 0 view .LVU304
 1257 002e 0723     		movs	r3, #7
 1258 0030 0193     		str	r3, [sp, #4]
 453:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1259              		.loc 1 453 2 is_stmt 1 view .LVU305
 453:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1260              		.loc 1 453 33 is_stmt 0 view .LVU306
 1261 0032 0023     		movs	r3, #0
 1262 0034 0293     		str	r3, [sp, #8]
 454:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1263              		.loc 1 454 2 is_stmt 1 view .LVU307
 454:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1264              		.loc 1 454 34 is_stmt 0 view .LVU308
 1265 0036 0393     		str	r3, [sp, #12]
 455:Src/main.c    **** 
 1266              		.loc 1 455 2 is_stmt 1 view .LVU309
 455:Src/main.c    **** 
 1267              		.loc 1 455 35 is_stmt 0 view .LVU310
 1268 0038 0493     		str	r3, [sp, #16]
 457:Src/main.c    **** 	{
 1269              		.loc 1 457 2 is_stmt 1 view .LVU311
 457:Src/main.c    **** 	{
 1270              		.loc 1 457 6 is_stmt 0 view .LVU312
 1271 003a 0021     		movs	r1, #0
 1272 003c 01A8     		add	r0, sp, #4
ARM GAS  /tmp/cc2NrRsB.s 			page 41


 1273 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1274              	.LVL79:
 457:Src/main.c    **** 	{
 1275              		.loc 1 457 5 view .LVU313
 1276 0042 0028     		cmp	r0, #0
 1277 0044 03D1     		bne	.L69
 461:Src/main.c    **** 
 1278              		.loc 1 461 1 view .LVU314
 1279 0046 13B0     		add	sp, sp, #76
 1280              		@ sp needed
 1281 0048 00BD     		pop	{pc}
 1282              	.L68:
 446:Src/main.c    **** 	}
 1283              		.loc 1 446 3 is_stmt 1 view .LVU315
 1284 004a FFF7FEFF 		bl	Error_Handler
 1285              	.LVL80:
 1286              	.L69:
 459:Src/main.c    **** 	}
 1287              		.loc 1 459 3 view .LVU316
 1288 004e FFF7FEFF 		bl	Error_Handler
 1289              	.LVL81:
 1290              		.cfi_endproc
 1291              	.LFE53:
 1293              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1294              		.align	2
 1295              	.LC47:
 1296 0000 257500   		.ascii	"%u\000"
 1297              		.section	.text.main,"ax",%progbits
 1298              		.align	1
 1299              		.global	main
 1300              		.syntax unified
 1301              		.code	16
 1302              		.thumb_func
 1304              	main:
 1305              	.LFB52:
 303:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1306              		.loc 1 303 1 view -0
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 40
 1309              		@ frame_needed = 0, uses_anonymous_args = 0
 1310 0000 10B5     		push	{r4, lr}
 1311              	.LCFI19:
 1312              		.cfi_def_cfa_offset 8
 1313              		.cfi_offset 4, -8
 1314              		.cfi_offset 14, -4
 1315 0002 8AB0     		sub	sp, sp, #40
 1316              	.LCFI20:
 1317              		.cfi_def_cfa_offset 48
 304:Src/main.c    ****     SystemClock_Config();
 1318              		.loc 1 304 2 view .LVU318
 1319 0004 FFF7FEFF 		bl	HAL_Init
 1320              	.LVL82:
 305:Src/main.c    ****     
 1321              		.loc 1 305 5 view .LVU319
 1322 0008 FFF7FEFF 		bl	SystemClock_Config
 1323              	.LVL83:
 308:Src/main.c    ****     USART_Init();
ARM GAS  /tmp/cc2NrRsB.s 			page 42


 1324              		.loc 1 308 5 view .LVU320
 1325 000c FFF7FEFF 		bl	GPIO_AF_Init
 1326              	.LVL84:
 309:Src/main.c    **** 
 1327              		.loc 1 309 5 view .LVU321
 1328 0010 FFF7FEFF 		bl	USART_Init
 1329              	.LVL85:
 311:Src/main.c    ****     
 1330              		.loc 1 311 5 view .LVU322
 1331 0014 FFF7FEFF 		bl	motor_init
 1332              	.LVL86:
 313:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 1333              		.loc 1 313 5 view .LVU323
 1334              	.LBB18:
 1335              	.LBI18:
 1336              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
ARM GAS  /tmp/cc2NrRsB.s 			page 43


  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
ARM GAS  /tmp/cc2NrRsB.s 			page 44


  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
ARM GAS  /tmp/cc2NrRsB.s 			page 45


 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
ARM GAS  /tmp/cc2NrRsB.s 			page 46


 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc2NrRsB.s 			page 47


 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/cc2NrRsB.s 			page 48


 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
ARM GAS  /tmp/cc2NrRsB.s 			page 49


 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
ARM GAS  /tmp/cc2NrRsB.s 			page 50


 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
ARM GAS  /tmp/cc2NrRsB.s 			page 51


 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
ARM GAS  /tmp/cc2NrRsB.s 			page 52


 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
ARM GAS  /tmp/cc2NrRsB.s 			page 53


 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1337              		.loc 3 623 22 view .LVU324
 1338              	.LBB19:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1339              		.loc 3 625 3 view .LVU325
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1340              		.loc 3 627 5 view .LVU326
 1341              		.loc 3 627 20 is_stmt 0 view .LVU327
 1342 0018 794B     		ldr	r3, .L90
 1343 001a 8022     		movs	r2, #128
 1344 001c 9205     		lsls	r2, r2, #22
 1345 001e 1A60     		str	r2, [r3]
 1346              	.LVL87:
 1347              		.loc 3 627 20 view .LVU328
 1348              	.LBE19:
 1349              	.LBE18:
 314:Src/main.c    **** 
 1350              		.loc 1 314 5 is_stmt 1 view .LVU329
 1351              	.LBB20:
 1352              	.LBI20:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc2NrRsB.s 			page 54


 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
ARM GAS  /tmp/cc2NrRsB.s 			page 55


 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1353              		.loc 3 730 22 view .LVU330
 1354              	.LBB21:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1355              		.loc 3 732 3 view .LVU331
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1356              		.loc 3 734 5 view .LVU332
 1357              		.loc 3 734 52 is_stmt 0 view .LVU333
 1358 0020 C720     		movs	r0, #199
 1359 0022 8000     		lsls	r0, r0, #2
 1360 0024 1958     		ldr	r1, [r3, r0]
 1361              		.loc 3 734 33 view .LVU334
 1362 0026 774A     		ldr	r2, .L90+4
 1363 0028 1140     		ands	r1, r2
 1364              		.loc 3 734 102 view .LVU335
 1365 002a 8022     		movs	r2, #128
 1366 002c D201     		lsls	r2, r2, #7
 1367 002e 0A43     		orrs	r2, r1
 1368              		.loc 3 734 30 view .LVU336
 1369 0030 1A50     		str	r2, [r3, r0]
 1370              	.LVL88:
 1371              		.loc 3 734 30 view .LVU337
 1372              	.LBE21:
 1373              	.LBE20:
 316:Src/main.c    ****     
 1374              		.loc 1 316 5 is_stmt 1 view .LVU338
 316:Src/main.c    ****     
 1375              		.loc 1 316 13 is_stmt 0 view .LVU339
 1376 0032 754B     		ldr	r3, .L90+8
 1377 0034 1A68     		ldr	r2, [r3]
 1378 0036 0892     		str	r2, [sp, #32]
 1379 0038 9A88     		ldrh	r2, [r3, #4]
 1380 003a 08AB     		add	r3, sp, #32
 1381 003c 9A80     		strh	r2, [r3, #4]
ARM GAS  /tmp/cc2NrRsB.s 			page 56


 319:Src/main.c    ****     MX_TIM1_Init();
 1382              		.loc 1 319 5 is_stmt 1 view .LVU340
 1383 003e FFF7FEFF 		bl	MX_GPIO_Init
 1384              	.LVL89:
 320:Src/main.c    ****     
 1385              		.loc 1 320 5 view .LVU341
 1386 0042 FFF7FEFF 		bl	MX_TIM1_Init
 1387              	.LVL90:
 322:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 1388              		.loc 1 322 5 view .LVU342
 1389 0046 7148     		ldr	r0, .L90+12
 1390 0048 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1391              	.LVL91:
 323:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1392              		.loc 1 323 5 view .LVU343
 1393 004c 8021     		movs	r1, #128
 1394 004e 704C     		ldr	r4, .L90+16
 1395 0050 0022     		movs	r2, #0
 1396 0052 0901     		lsls	r1, r1, #4
 1397 0054 2000     		movs	r0, r4
 1398 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1399              	.LVL92:
 324:Src/main.c    **** 	
 1400              		.loc 1 324 5 view .LVU344
 1401 005a 8021     		movs	r1, #128
 1402 005c 0022     		movs	r2, #0
 1403 005e 8901     		lsls	r1, r1, #6
 1404 0060 2000     		movs	r0, r4
 1405 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1406              	.LVL93:
 1407 0066 B8E0     		b	.L86
 1408              	.LVL94:
 1409              	.L89:
 1410              	.LBB22:
 335:Src/main.c    ****         
 1411              		.loc 1 335 9 view .LVU345
 1412 0068 8021     		movs	r1, #128
 1413 006a 0022     		movs	r2, #0
 1414 006c 0901     		lsls	r1, r1, #4
 1415 006e 6848     		ldr	r0, .L90+16
 1416 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1417              	.LVL95:
 338:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1418              		.loc 1 338 9 view .LVU346
 338:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1419              		.loc 1 338 21 is_stmt 0 view .LVU347
 1420 0074 FFF7FEFF 		bl	HAL_GetTick
 1421              	.LVL96:
 338:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1422              		.loc 1 338 19 view .LVU348
 1423 0078 80B2     		uxth	r0, r0
 1424 007a 664B     		ldr	r3, .L90+20
 1425 007c 1880     		strh	r0, [r3]
 339:Src/main.c    ****         
 1426              		.loc 1 339 9 is_stmt 1 view .LVU349
 339:Src/main.c    ****         
 1427              		.loc 1 339 19 is_stmt 0 view .LVU350
ARM GAS  /tmp/cc2NrRsB.s 			page 57


 1428 007e FFF7FEFF 		bl	HAL_GetTick
 1429              	.LVL97:
 339:Src/main.c    ****         
 1430              		.loc 1 339 17 view .LVU351
 1431 0082 654B     		ldr	r3, .L90+24
 1432 0084 1860     		str	r0, [r3]
 342:Src/main.c    ****         {
 1433              		.loc 1 342 9 is_stmt 1 view .LVU352
 1434              	.L74:
 345:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1435              		.loc 1 345 9 discriminator 2 view .LVU353
 342:Src/main.c    ****         {
 1436              		.loc 1 342 63 discriminator 2 view .LVU354
 342:Src/main.c    ****         {
 1437              		.loc 1 342 18 is_stmt 0 discriminator 2 view .LVU355
 1438 0086 8021     		movs	r1, #128
 1439 0088 4901     		lsls	r1, r1, #5
 1440 008a 6148     		ldr	r0, .L90+16
 1441 008c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1442              	.LVL98:
 342:Src/main.c    ****         {
 1443              		.loc 1 342 63 discriminator 2 view .LVU356
 1444 0090 0028     		cmp	r0, #0
 1445 0092 06D1     		bne	.L73
 342:Src/main.c    ****         {
 1446              		.loc 1 342 74 discriminator 1 view .LVU357
 1447 0094 604B     		ldr	r3, .L90+24
 1448 0096 1C68     		ldr	r4, [r3]
 1449 0098 0A34     		adds	r4, r4, #10
 342:Src/main.c    ****         {
 1450              		.loc 1 342 82 discriminator 1 view .LVU358
 1451 009a FFF7FEFF 		bl	HAL_GetTick
 1452              	.LVL99:
 342:Src/main.c    ****         {
 1453              		.loc 1 342 63 discriminator 1 view .LVU359
 1454 009e 8442     		cmp	r4, r0
 1455 00a0 F1D8     		bhi	.L74
 1456              	.L73:
 347:Src/main.c    ****         
 1457              		.loc 1 347 9 is_stmt 1 view .LVU360
 347:Src/main.c    ****         
 1458              		.loc 1 347 19 is_stmt 0 view .LVU361
 1459 00a2 FFF7FEFF 		bl	HAL_GetTick
 1460              	.LVL100:
 347:Src/main.c    ****         
 1461              		.loc 1 347 33 view .LVU362
 1462 00a6 5B4B     		ldr	r3, .L90+20
 1463 00a8 1B88     		ldrh	r3, [r3]
 1464 00aa C01A     		subs	r0, r0, r3
 1465 00ac 80B2     		uxth	r0, r0
 347:Src/main.c    ****         
 1466              		.loc 1 347 16 view .LVU363
 1467 00ae 5B4B     		ldr	r3, .L90+28
 1468 00b0 1880     		strh	r0, [r3]
 350:Src/main.c    ****       // wait for the echo pin to go low
 1469              		.loc 1 350 7 is_stmt 1 view .LVU364
 350:Src/main.c    ****       // wait for the echo pin to go low
ARM GAS  /tmp/cc2NrRsB.s 			page 58


 1470              		.loc 1 350 17 is_stmt 0 view .LVU365
 1471 00b2 FFF7FEFF 		bl	HAL_GetTick
 1472              	.LVL101:
 350:Src/main.c    ****       // wait for the echo pin to go low
 1473              		.loc 1 350 15 view .LVU366
 1474 00b6 584B     		ldr	r3, .L90+24
 1475 00b8 1860     		str	r0, [r3]
 352:Src/main.c    ****         {
 1476              		.loc 1 352 9 is_stmt 1 view .LVU367
 1477              	.L76:
 355:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1478              		.loc 1 355 9 discriminator 2 view .LVU368
 352:Src/main.c    ****         {
 1479              		.loc 1 352 62 discriminator 2 view .LVU369
 352:Src/main.c    ****         {
 1480              		.loc 1 352 17 is_stmt 0 discriminator 2 view .LVU370
 1481 00ba 8021     		movs	r1, #128
 1482 00bc 4901     		lsls	r1, r1, #5
 1483 00be 5448     		ldr	r0, .L90+16
 1484 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1485              	.LVL102:
 352:Src/main.c    ****         {
 1486              		.loc 1 352 62 discriminator 2 view .LVU371
 1487 00c4 0028     		cmp	r0, #0
 1488 00c6 06D0     		beq	.L75
 352:Src/main.c    ****         {
 1489              		.loc 1 352 73 discriminator 1 view .LVU372
 1490 00c8 534B     		ldr	r3, .L90+24
 1491 00ca 1C68     		ldr	r4, [r3]
 1492 00cc 3234     		adds	r4, r4, #50
 352:Src/main.c    ****         {
 1493              		.loc 1 352 80 discriminator 1 view .LVU373
 1494 00ce FFF7FEFF 		bl	HAL_GetTick
 1495              	.LVL103:
 352:Src/main.c    ****         {
 1496              		.loc 1 352 62 discriminator 1 view .LVU374
 1497 00d2 8442     		cmp	r4, r0
 1498 00d4 F1D8     		bhi	.L76
 1499              	.L75:
 357:Src/main.c    **** 
 1500              		.loc 1 357 9 is_stmt 1 view .LVU375
 357:Src/main.c    **** 
 1501              		.loc 1 357 19 is_stmt 0 view .LVU376
 1502 00d6 FFF7FEFF 		bl	HAL_GetTick
 1503              	.LVL104:
 357:Src/main.c    **** 
 1504              		.loc 1 357 33 view .LVU377
 1505 00da 4E4B     		ldr	r3, .L90+20
 1506 00dc 1B88     		ldrh	r3, [r3]
 1507 00de C01A     		subs	r0, r0, r3
 1508 00e0 80B2     		uxth	r0, r0
 357:Src/main.c    **** 
 1509              		.loc 1 357 16 view .LVU378
 1510 00e2 4F4B     		ldr	r3, .L90+32
 1511 00e4 1880     		strh	r0, [r3]
 360:Src/main.c    ****         if(leftDistance < 10)
 1512              		.loc 1 360 9 is_stmt 1 view .LVU379
ARM GAS  /tmp/cc2NrRsB.s 			page 59


 360:Src/main.c    ****         if(leftDistance < 10)
 1513              		.loc 1 360 32 is_stmt 0 view .LVU380
 1514 00e6 1B88     		ldrh	r3, [r3]
 1515 00e8 4C4A     		ldr	r2, .L90+28
 1516 00ea 1288     		ldrh	r2, [r2]
 1517 00ec 9B1A     		subs	r3, r3, r2
 1518 00ee 9BB2     		uxth	r3, r3
 360:Src/main.c    ****         if(leftDistance < 10)
 1519              		.loc 1 360 22 view .LVU381
 1520 00f0 4C4A     		ldr	r2, .L90+36
 1521 00f2 1380     		strh	r3, [r2]
 361:Src/main.c    ****         {
 1522              		.loc 1 361 9 is_stmt 1 view .LVU382
 361:Src/main.c    ****         {
 1523              		.loc 1 361 25 is_stmt 0 view .LVU383
 1524 00f4 1388     		ldrh	r3, [r2]
 1525 00f6 9BB2     		uxth	r3, r3
 361:Src/main.c    ****         {
 1526              		.loc 1 361 11 view .LVU384
 1527 00f8 092B     		cmp	r3, #9
 1528 00fa 07D9     		bls	.L87
 1529              	.L77:
 372:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1530              		.loc 1 372 9 is_stmt 1 view .LVU385
 1531              	.LVL105:
 373:Src/main.c    ****         
 1532              		.loc 1 373 9 view .LVU386
 1533 00fc 8021     		movs	r1, #128
 1534 00fe 0122     		movs	r2, #1
 1535 0100 8901     		lsls	r1, r1, #6
 1536 0102 4348     		ldr	r0, .L90+16
 1537 0104 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1538              	.LVL106:
 377:Src/main.c    ****             counter++;
 1539              		.loc 1 377 9 view .LVU387
 372:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1540              		.loc 1 372 17 is_stmt 0 view .LVU388
 1541 0108 0023     		movs	r3, #0
 377:Src/main.c    ****             counter++;
 1542              		.loc 1 377 15 view .LVU389
 1543 010a 07E0     		b	.L78
 1544              	.LVL107:
 1545              	.L87:
 1546              	.LBB23:
 363:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 1547              		.loc 1 363 13 is_stmt 1 view .LVU390
 364:Src/main.c    **** 			/*
 1548              		.loc 1 364 13 view .LVU391
 1549 010c 1288     		ldrh	r2, [r2]
 1550 010e 92B2     		uxth	r2, r2
 1551 0110 4549     		ldr	r1, .L90+40
 1552 0112 6846     		mov	r0, sp
 1553 0114 FFF7FEFF 		bl	sprintf
 1554              	.LVL108:
 1555 0118 F0E7     		b	.L77
 1556              	.LVL109:
 1557              	.L79:
ARM GAS  /tmp/cc2NrRsB.s 			page 60


 364:Src/main.c    **** 			/*
 1558              		.loc 1 364 13 is_stmt 0 view .LVU392
 1559              	.LBE23:
 378:Src/main.c    ****         }  // wait for 10 us
 1560              		.loc 1 378 13 is_stmt 1 view .LVU393
 378:Src/main.c    ****         }  // wait for 10 us
 1561              		.loc 1 378 20 is_stmt 0 view .LVU394
 1562 011a 0133     		adds	r3, r3, #1
 1563              	.LVL110:
 1564              	.L78:
 377:Src/main.c    ****             counter++;
 1565              		.loc 1 377 24 is_stmt 1 view .LVU395
 1566 011c 092B     		cmp	r3, #9
 1567 011e FCDD     		ble	.L79
 380:Src/main.c    ****         
 1568              		.loc 1 380 9 view .LVU396
 1569 0120 8021     		movs	r1, #128
 1570 0122 0022     		movs	r2, #0
 1571 0124 8901     		lsls	r1, r1, #6
 1572 0126 3A48     		ldr	r0, .L90+16
 1573 0128 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1574              	.LVL111:
 383:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1575              		.loc 1 383 9 view .LVU397
 383:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1576              		.loc 1 383 21 is_stmt 0 view .LVU398
 1577 012c FFF7FEFF 		bl	HAL_GetTick
 1578              	.LVL112:
 383:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1579              		.loc 1 383 19 view .LVU399
 1580 0130 80B2     		uxth	r0, r0
 1581 0132 384B     		ldr	r3, .L90+20
 1582 0134 1880     		strh	r0, [r3]
 384:Src/main.c    ****         
 1583              		.loc 1 384 9 is_stmt 1 view .LVU400
 384:Src/main.c    ****         
 1584              		.loc 1 384 19 is_stmt 0 view .LVU401
 1585 0136 FFF7FEFF 		bl	HAL_GetTick
 1586              	.LVL113:
 384:Src/main.c    ****         
 1587              		.loc 1 384 17 view .LVU402
 1588 013a 374B     		ldr	r3, .L90+24
 1589 013c 1860     		str	r0, [r3]
 387:Src/main.c    ****         {
 1590              		.loc 1 387 9 is_stmt 1 view .LVU403
 1591              	.L81:
 390:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1592              		.loc 1 390 9 discriminator 2 view .LVU404
 387:Src/main.c    ****         {
 1593              		.loc 1 387 64 discriminator 2 view .LVU405
 387:Src/main.c    ****         {
 1594              		.loc 1 387 18 is_stmt 0 discriminator 2 view .LVU406
 1595 013e 8021     		movs	r1, #128
 1596 0140 C901     		lsls	r1, r1, #7
 1597 0142 3348     		ldr	r0, .L90+16
 1598 0144 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1599              	.LVL114:
ARM GAS  /tmp/cc2NrRsB.s 			page 61


 387:Src/main.c    ****         {
 1600              		.loc 1 387 64 discriminator 2 view .LVU407
 1601 0148 0028     		cmp	r0, #0
 1602 014a 06D1     		bne	.L80
 387:Src/main.c    ****         {
 1603              		.loc 1 387 75 discriminator 1 view .LVU408
 1604 014c 324B     		ldr	r3, .L90+24
 1605 014e 1C68     		ldr	r4, [r3]
 1606 0150 0A34     		adds	r4, r4, #10
 387:Src/main.c    ****         {
 1607              		.loc 1 387 83 discriminator 1 view .LVU409
 1608 0152 FFF7FEFF 		bl	HAL_GetTick
 1609              	.LVL115:
 387:Src/main.c    ****         {
 1610              		.loc 1 387 64 discriminator 1 view .LVU410
 1611 0156 8442     		cmp	r4, r0
 1612 0158 F1D8     		bhi	.L81
 1613              	.L80:
 392:Src/main.c    ****         
 1614              		.loc 1 392 9 is_stmt 1 view .LVU411
 392:Src/main.c    ****         
 1615              		.loc 1 392 19 is_stmt 0 view .LVU412
 1616 015a FFF7FEFF 		bl	HAL_GetTick
 1617              	.LVL116:
 392:Src/main.c    ****         
 1618              		.loc 1 392 33 view .LVU413
 1619 015e 2D4B     		ldr	r3, .L90+20
 1620 0160 1B88     		ldrh	r3, [r3]
 1621 0162 C01A     		subs	r0, r0, r3
 1622 0164 80B2     		uxth	r0, r0
 392:Src/main.c    ****         
 1623              		.loc 1 392 16 view .LVU414
 1624 0166 2D4B     		ldr	r3, .L90+28
 1625 0168 1880     		strh	r0, [r3]
 395:Src/main.c    ****       // wait for the echo pin to go low
 1626              		.loc 1 395 7 is_stmt 1 view .LVU415
 395:Src/main.c    ****       // wait for the echo pin to go low
 1627              		.loc 1 395 17 is_stmt 0 view .LVU416
 1628 016a FFF7FEFF 		bl	HAL_GetTick
 1629              	.LVL117:
 395:Src/main.c    ****       // wait for the echo pin to go low
 1630              		.loc 1 395 15 view .LVU417
 1631 016e 2A4B     		ldr	r3, .L90+24
 1632 0170 1860     		str	r0, [r3]
 397:Src/main.c    ****         {
 1633              		.loc 1 397 9 is_stmt 1 view .LVU418
 1634              	.L83:
 400:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1635              		.loc 1 400 9 discriminator 2 view .LVU419
 397:Src/main.c    ****         {
 1636              		.loc 1 397 63 discriminator 2 view .LVU420
 397:Src/main.c    ****         {
 1637              		.loc 1 397 17 is_stmt 0 discriminator 2 view .LVU421
 1638 0172 8021     		movs	r1, #128
 1639 0174 C901     		lsls	r1, r1, #7
 1640 0176 2648     		ldr	r0, .L90+16
 1641 0178 FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  /tmp/cc2NrRsB.s 			page 62


 1642              	.LVL118:
 397:Src/main.c    ****         {
 1643              		.loc 1 397 63 discriminator 2 view .LVU422
 1644 017c 0028     		cmp	r0, #0
 1645 017e 06D0     		beq	.L82
 397:Src/main.c    ****         {
 1646              		.loc 1 397 74 discriminator 1 view .LVU423
 1647 0180 254B     		ldr	r3, .L90+24
 1648 0182 1C68     		ldr	r4, [r3]
 1649 0184 3234     		adds	r4, r4, #50
 397:Src/main.c    ****         {
 1650              		.loc 1 397 81 discriminator 1 view .LVU424
 1651 0186 FFF7FEFF 		bl	HAL_GetTick
 1652              	.LVL119:
 397:Src/main.c    ****         {
 1653              		.loc 1 397 63 discriminator 1 view .LVU425
 1654 018a 8442     		cmp	r4, r0
 1655 018c F1D8     		bhi	.L83
 1656              	.L82:
 402:Src/main.c    **** 
 1657              		.loc 1 402 9 is_stmt 1 view .LVU426
 402:Src/main.c    **** 
 1658              		.loc 1 402 19 is_stmt 0 view .LVU427
 1659 018e FFF7FEFF 		bl	HAL_GetTick
 1660              	.LVL120:
 402:Src/main.c    **** 
 1661              		.loc 1 402 33 view .LVU428
 1662 0192 204B     		ldr	r3, .L90+20
 1663 0194 1B88     		ldrh	r3, [r3]
 1664 0196 C01A     		subs	r0, r0, r3
 1665 0198 80B2     		uxth	r0, r0
 402:Src/main.c    **** 
 1666              		.loc 1 402 16 view .LVU429
 1667 019a 214B     		ldr	r3, .L90+32
 1668 019c 1880     		strh	r0, [r3]
 405:Src/main.c    ****         if(rightDistance < 10)
 1669              		.loc 1 405 9 is_stmt 1 view .LVU430
 405:Src/main.c    ****         if(rightDistance < 10)
 1670              		.loc 1 405 33 is_stmt 0 view .LVU431
 1671 019e 1B88     		ldrh	r3, [r3]
 1672 01a0 1E4A     		ldr	r2, .L90+28
 1673 01a2 1288     		ldrh	r2, [r2]
 1674 01a4 9B1A     		subs	r3, r3, r2
 1675 01a6 9BB2     		uxth	r3, r3
 405:Src/main.c    ****         if(rightDistance < 10)
 1676              		.loc 1 405 23 view .LVU432
 1677 01a8 204A     		ldr	r2, .L90+44
 1678 01aa 1380     		strh	r3, [r2]
 406:Src/main.c    ****         {
 1679              		.loc 1 406 9 is_stmt 1 view .LVU433
 406:Src/main.c    ****         {
 1680              		.loc 1 406 26 is_stmt 0 view .LVU434
 1681 01ac 1388     		ldrh	r3, [r2]
 1682 01ae 9BB2     		uxth	r3, r3
 406:Src/main.c    ****         {
 1683              		.loc 1 406 11 view .LVU435
 1684 01b0 092B     		cmp	r3, #9
ARM GAS  /tmp/cc2NrRsB.s 			page 63


 1685 01b2 1ED9     		bls	.L88
 1686              	.L84:
 417:Src/main.c    **** 		{
 1687              		.loc 1 417 3 is_stmt 1 view .LVU436
 417:Src/main.c    **** 		{
 1688              		.loc 1 417 6 is_stmt 0 view .LVU437
 1689 01b4 1E4B     		ldr	r3, .L90+48
 1690 01b6 1B78     		ldrb	r3, [r3]
 417:Src/main.c    **** 		{
 1691              		.loc 1 417 5 view .LVU438
 1692 01b8 002B     		cmp	r3, #0
 1693 01ba 0AD0     		beq	.L85
 419:Src/main.c    **** 			{
 1694              		.loc 1 419 4 is_stmt 1 view .LVU439
 419:Src/main.c    **** 			{
 1695              		.loc 1 419 14 is_stmt 0 view .LVU440
 1696 01bc 1D4B     		ldr	r3, .L90+52
 1697 01be 5B78     		ldrb	r3, [r3, #1]
 419:Src/main.c    **** 			{
 1698              		.loc 1 419 6 view .LVU441
 1699 01c0 002B     		cmp	r3, #0
 1700 01c2 06D0     		beq	.L85
 421:Src/main.c    **** 			}
 1701              		.loc 1 421 5 is_stmt 1 view .LVU442
 421:Src/main.c    **** 			}
 1702              		.loc 1 421 27 is_stmt 0 view .LVU443
 1703 01c4 1B4B     		ldr	r3, .L90+52
 1704 01c6 1878     		ldrb	r0, [r3]
 1705 01c8 C0B2     		uxtb	r0, r0
 421:Src/main.c    **** 			}
 1706              		.loc 1 421 39 view .LVU444
 1707 01ca 5978     		ldrb	r1, [r3, #1]
 1708 01cc C9B2     		uxtb	r1, r1
 421:Src/main.c    **** 			}
 1709              		.loc 1 421 5 view .LVU445
 1710 01ce FFF7FEFF 		bl	ProcessCommand
 1711              	.LVL121:
 1712              	.L85:
 424:Src/main.c    **** 	}
 1713              		.loc 1 424 3 is_stmt 1 view .LVU446
 1714 01d2 FA20     		movs	r0, #250
 1715 01d4 4000     		lsls	r0, r0, #1
 1716 01d6 FFF7FEFF 		bl	HAL_Delay
 1717              	.LVL122:
 1718              	.LBE22:
 326:Src/main.c    ****         int32_t counter = 0;
 1719              		.loc 1 326 8 view .LVU447
 1720              	.L86:
 326:Src/main.c    ****         int32_t counter = 0;
 1721              		.loc 1 326 2 view .LVU448
 1722              	.LBB25:
 327:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1723              		.loc 1 327 9 view .LVU449
 328:Src/main.c    ****         
 1724              		.loc 1 328 9 view .LVU450
 1725 01da 8021     		movs	r1, #128
 1726 01dc 0122     		movs	r2, #1
ARM GAS  /tmp/cc2NrRsB.s 			page 64


 1727 01de 0901     		lsls	r1, r1, #4
 1728 01e0 0B48     		ldr	r0, .L90+16
 1729 01e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1730              	.LVL123:
 332:Src/main.c    ****             counter++;
 1731              		.loc 1 332 9 view .LVU451
 327:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1732              		.loc 1 327 17 is_stmt 0 view .LVU452
 1733 01e6 0023     		movs	r3, #0
 1734              	.LVL124:
 1735              	.L71:
 332:Src/main.c    ****             counter++;
 1736              		.loc 1 332 24 is_stmt 1 view .LVU453
 1737 01e8 092B     		cmp	r3, #9
 1738 01ea 00DD     		ble	.LCB1411
 1739 01ec 3CE7     		b	.L89	@long jump
 1740              	.LCB1411:
 333:Src/main.c    ****         }  // wait for 10 us
 1741              		.loc 1 333 13 view .LVU454
 333:Src/main.c    ****         }  // wait for 10 us
 1742              		.loc 1 333 20 is_stmt 0 view .LVU455
 1743 01ee 0133     		adds	r3, r3, #1
 1744              	.LVL125:
 333:Src/main.c    ****         }  // wait for 10 us
 1745              		.loc 1 333 20 view .LVU456
 1746 01f0 FAE7     		b	.L71
 1747              	.LVL126:
 1748              	.L88:
 1749              	.LBB24:
 408:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 1750              		.loc 1 408 13 is_stmt 1 view .LVU457
 409:Src/main.c    **** 			/*
 1751              		.loc 1 409 13 view .LVU458
 1752 01f2 1288     		ldrh	r2, [r2]
 1753 01f4 92B2     		uxth	r2, r2
 1754 01f6 0C49     		ldr	r1, .L90+40
 1755 01f8 6846     		mov	r0, sp
 1756 01fa FFF7FEFF 		bl	sprintf
 1757              	.LVL127:
 1758 01fe D9E7     		b	.L84
 1759              	.L91:
 1760              		.align	2
 1761              	.L90:
 1762 0200 00E100E0 		.word	-536813312
 1763 0204 FF00FFFF 		.word	-65281
 1764 0208 00000000 		.word	.LC21
 1765 020c 00000000 		.word	htim1
 1766 0210 00040048 		.word	1207960576
 1767 0214 00000000 		.word	startTime
 1768 0218 00000000 		.word	pMillis
 1769 021c 00000000 		.word	Value1
 1770 0220 00000000 		.word	Value2
 1771 0224 00000000 		.word	leftDistance
 1772 0228 00000000 		.word	.LC47
 1773 022c 00000000 		.word	rightDistance
 1774 0230 00000000 		.word	incomingCommand
 1775 0234 00000000 		.word	command
ARM GAS  /tmp/cc2NrRsB.s 			page 65


 1776              	.LBE24:
 1777              	.LBE25:
 1778              		.cfi_endproc
 1779              	.LFE52:
 1781              		.global	incomingCommand
 1782              		.section	.bss.incomingCommand,"aw",%nobits
 1785              	incomingCommand:
 1786 0000 00       		.space	1
 1787              		.global	command
 1788              		.section	.bss.command,"aw",%nobits
 1789              		.align	2
 1792              	command:
 1793 0000 0000     		.space	2
 1794              		.global	rightDistance
 1795              		.section	.bss.rightDistance,"aw",%nobits
 1796              		.align	1
 1799              	rightDistance:
 1800 0000 0000     		.space	2
 1801              		.global	leftDistance
 1802              		.section	.bss.leftDistance,"aw",%nobits
 1803              		.align	1
 1806              	leftDistance:
 1807 0000 0000     		.space	2
 1808              		.global	Value2
 1809              		.section	.bss.Value2,"aw",%nobits
 1810              		.align	1
 1813              	Value2:
 1814 0000 0000     		.space	2
 1815              		.global	Value1
 1816              		.section	.bss.Value1,"aw",%nobits
 1817              		.align	1
 1820              	Value1:
 1821 0000 0000     		.space	2
 1822              		.global	startTime
 1823              		.section	.bss.startTime,"aw",%nobits
 1824              		.align	1
 1827              	startTime:
 1828 0000 0000     		.space	2
 1829              		.global	pMillis
 1830              		.section	.bss.pMillis,"aw",%nobits
 1831              		.align	2
 1834              	pMillis:
 1835 0000 00000000 		.space	4
 1836              		.global	htim1
 1837              		.section	.bss.htim1,"aw",%nobits
 1838              		.align	2
 1841              	htim1:
 1842 0000 00000000 		.space	64
 1842      00000000 
 1842      00000000 
 1842      00000000 
 1842      00000000 
 1843              		.text
 1844              	.Letext0:
 1845              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 1846              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1847              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
ARM GAS  /tmp/cc2NrRsB.s 			page 66


 1848              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1849              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1850              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1851              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1852              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1853              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1854              		.file 13 "Inc/pins.h"
 1855              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1856              		.file 15 "Inc/main.h"
 1857              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1858              		.file 17 "/usr/arm-none-eabi/include/stdio.h"
 1859              		.file 18 "/usr/arm-none-eabi/include/string.h"
 1860              		.file 19 "Inc/motor.h"
 1861              		.file 20 "<built-in>"
ARM GAS  /tmp/cc2NrRsB.s 			page 67


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc2NrRsB.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc2NrRsB.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc2NrRsB.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/cc2NrRsB.s:102    .text.LED_Init:00000000 $t
     /tmp/cc2NrRsB.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/cc2NrRsB.s:151    .text.LED_Init:00000024 $d
     /tmp/cc2NrRsB.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/cc2NrRsB.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/cc2NrRsB.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/cc2NrRsB.s:342    .text.USART_Init:00000000 $t
     /tmp/cc2NrRsB.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/cc2NrRsB.s:440    .text.USART_Init:0000005c $d
     /tmp/cc2NrRsB.s:447    .text.USART_SendChar:00000000 $t
     /tmp/cc2NrRsB.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/cc2NrRsB.s:479    .text.USART_SendChar:00000010 $d
     /tmp/cc2NrRsB.s:484    .text.USART_SendString:00000000 $t
     /tmp/cc2NrRsB.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/cc2NrRsB.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/cc2NrRsB.s:539    .text.ClearCommand:00000000 $t
     /tmp/cc2NrRsB.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/cc2NrRsB.s:585    .text.ClearCommand:00000024 $d
     /tmp/cc2NrRsB.s:1792   .bss.command:00000000 command
     /tmp/cc2NrRsB.s:1785   .bss.incomingCommand:00000000 incomingCommand
     /tmp/cc2NrRsB.s:592    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/cc2NrRsB.s:596    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/cc2NrRsB.s:602    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/cc2NrRsB.s:693    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/cc2NrRsB.s:701    .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/cc2NrRsB.s:717    .text.ProcessCommand:00000000 $t
     /tmp/cc2NrRsB.s:723    .text.ProcessCommand:00000000 ProcessCommand
     /tmp/cc2NrRsB.s:894    .text.ProcessCommand:000000b4 $d
     /tmp/cc2NrRsB.s:904    .text.GetDistance:00000000 $t
     /tmp/cc2NrRsB.s:910    .text.GetDistance:00000000 GetDistance
     /tmp/cc2NrRsB.s:924    .text.Error_Handler:00000000 $t
     /tmp/cc2NrRsB.s:930    .text.Error_Handler:00000000 Error_Handler
     /tmp/cc2NrRsB.s:962    .text.MX_TIM1_Init:00000000 $t
     /tmp/cc2NrRsB.s:967    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/cc2NrRsB.s:1194   .text.MX_TIM1_Init:000000f0 $d
     /tmp/cc2NrRsB.s:1841   .bss.htim1:00000000 htim1
     /tmp/cc2NrRsB.s:1201   .text.SystemClock_Config:00000000 $t
     /tmp/cc2NrRsB.s:1207   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc2NrRsB.s:1294   .rodata.main.str1.4:00000000 $d
     /tmp/cc2NrRsB.s:1298   .text.main:00000000 $t
     /tmp/cc2NrRsB.s:1304   .text.main:00000000 main
     /tmp/cc2NrRsB.s:1762   .text.main:00000200 $d
     /tmp/cc2NrRsB.s:1827   .bss.startTime:00000000 startTime
     /tmp/cc2NrRsB.s:1834   .bss.pMillis:00000000 pMillis
     /tmp/cc2NrRsB.s:1820   .bss.Value1:00000000 Value1
     /tmp/cc2NrRsB.s:1813   .bss.Value2:00000000 Value2
     /tmp/cc2NrRsB.s:1806   .bss.leftDistance:00000000 leftDistance
     /tmp/cc2NrRsB.s:1799   .bss.rightDistance:00000000 rightDistance
     /tmp/cc2NrRsB.s:1786   .bss.incomingCommand:00000000 $d
     /tmp/cc2NrRsB.s:1789   .bss.command:00000000 $d
     /tmp/cc2NrRsB.s:1796   .bss.rightDistance:00000000 $d
     /tmp/cc2NrRsB.s:1803   .bss.leftDistance:00000000 $d
ARM GAS  /tmp/cc2NrRsB.s 			page 68


     /tmp/cc2NrRsB.s:1810   .bss.Value2:00000000 $d
     /tmp/cc2NrRsB.s:1817   .bss.Value1:00000000 $d
     /tmp/cc2NrRsB.s:1824   .bss.startTime:00000000 $d
     /tmp/cc2NrRsB.s:1831   .bss.pMillis:00000000 $d
     /tmp/cc2NrRsB.s:1838   .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
sprintf
HAL_Delay
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
HAL_TIM_Base_Start
HAL_GetTick
HAL_GPIO_ReadPin
