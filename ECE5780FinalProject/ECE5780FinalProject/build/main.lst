ARM GAS  /tmp/ccE2jDiE.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB62:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****  * in the root directory of this software component.
  14:Src/main.c    ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  ******************************************************************************
  17:Src/main.c    ****  */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include <stdbool.h>
  24:Src/main.c    **** #include "motor.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccE2jDiE.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim1;
  49:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  50:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  51:Src/main.c    **** #define TRIG_PORT GPIOB
  52:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  53:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  54:Src/main.c    **** #define ECHO_PORT GPIOB
  55:Src/main.c    **** volatile uint32_t pMillis;
  56:Src/main.c    **** volatile uint16_t startTime;
  57:Src/main.c    **** volatile uint16_t Value1 = 0;
  58:Src/main.c    **** volatile uint16_t Value2 = 0;
  59:Src/main.c    **** volatile uint16_t leftDistance = 0;
  60:Src/main.c    **** volatile uint16_t rightDistance = 0;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** static void MX_GPIO_Init(void);
  69:Src/main.c    **** static void MX_TIM1_Init(void);
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** #define LED_RED GPIO_PIN_6
  77:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  78:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  79:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  80:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  81:Src/main.c    **** 
  82:Src/main.c    **** void LED_Init(uint32_t pins) {
  83:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  84:Src/main.c    **** 
  85:Src/main.c    **** 	GPIO_InitTypeDef gpio_led_init = {pins,
  86:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
  87:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
  88:Src/main.c    **** 		GPIO_NOPULL
  89:Src/main.c    **** 	};
  90:Src/main.c    **** 	HAL_GPIO_Init(GPIOC, &gpio_led_init);
ARM GAS  /tmp/ccE2jDiE.s 			page 3


  91:Src/main.c    **** }
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  95:Src/main.c    ****  *        functions appropriately.
  96:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  97:Src/main.c    ****  */
  98:Src/main.c    **** void GPIO_AF_Init() {
  99:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 100:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 101:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 102:Src/main.c    **** 
 103:Src/main.c    **** 	// uart_pins
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 105:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 106:Src/main.c    **** 
 107:Src/main.c    **** 	// motor_left_pins
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 113:Src/main.c    **** 
 114:Src/main.c    **** 	// motor_right_pins
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 119:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 120:Src/main.c    **** 
 121:Src/main.c    **** 	// ultrasonic_left_pins
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 123:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 124:Src/main.c    **** 
 125:Src/main.c    **** 	// ultrasonic_right_pins
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 127:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 128:Src/main.c    **** }
 129:Src/main.c    **** 
 130:Src/main.c    **** /**
 131:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 132:Src/main.c    ****  */
 133:Src/main.c    **** void USART_Init() {
 134:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 135:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	//Set baud rate
 138:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 139:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 140:Src/main.c    **** 												//use with the BT adapter
 141:Src/main.c    **** 
 142:Src/main.c    **** 												//Enable transmitter
 143:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	//Enable receiver
 146:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 147:Src/main.c    **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 4


 148:Src/main.c    **** 	//Enable the receive register not empty interrupt
 149:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	//Enable USART3
 152:Src/main.c    **** 	USART3->CR1 |= 1;
 153:Src/main.c    **** }
 154:Src/main.c    **** 
 155:Src/main.c    **** /**
 156:Src/main.c    ****  * @brief Sends a single character on the USART.
 157:Src/main.c    ****  *
 158:Src/main.c    ****  * @param c: the character to be sent
 159:Src/main.c    ****  */
 160:Src/main.c    **** void USART_SendChar(uint8_t c) {
 161:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 162:Src/main.c    **** 		;
 163:Src/main.c    **** 
 164:Src/main.c    **** 	USART3->TDR = c;
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** /**
 168:Src/main.c    ****  * @brief Sends a string on the USART.
 169:Src/main.c    ****  *
 170:Src/main.c    ****  * @param p_string: pointer to string to send
 171:Src/main.c    ****  */
 172:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 173:Src/main.c    **** 	while(*p_string != 0) {
 174:Src/main.c    **** 		USART_SendChar(*p_string);
 175:Src/main.c    **** 		p_string++;
 176:Src/main.c    **** 	}
 177:Src/main.c    **** 	USART_SendChar(0);
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** volatile uint8_t command[3];
 181:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 182:Src/main.c    **** 
 183:Src/main.c    **** void ClearCommand(){
 184:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 185:Src/main.c    **** 	memset(command, 0, sizeof(command));
 186:Src/main.c    **** 	incomingCommand = 0;
 187:Src/main.c    **** 	USART_SendString(prompt);
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** void USART3_4_IRQHandler(){
 191:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 192:Src/main.c    **** 	incomingCommand = 1;
 193:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 194:Src/main.c    **** 		;
 195:Src/main.c    **** 	if(command[0]){
 196:Src/main.c    **** 		if(command[1]){
 197:Src/main.c    **** 			USART_SendString(err);
 198:Src/main.c    **** 			ClearCommand();
 199:Src/main.c    **** 		}
 200:Src/main.c    **** 		else{
 201:Src/main.c    **** 			command[1] = USART3->RDR;
 202:Src/main.c    **** 		}
 203:Src/main.c    **** 	}
 204:Src/main.c    **** 	else{
ARM GAS  /tmp/ccE2jDiE.s 			page 5


 205:Src/main.c    **** 		command[0] = USART3->RDR;
 206:Src/main.c    **** 	}
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** uint8_t first_captured = 0;
 210:Src/main.c    **** uint32_t IC_Val1 = 0;
 211:Src/main.c    **** uint32_t IC_Val2 = 0;
 212:Src/main.c    **** uint32_t Difference = 0;
 213:Src/main.c    **** uint32_t distance = 0;
 214:Src/main.c    **** 
 215:Src/main.c    **** void TIM15_IRQHandler(void){
 216:Src/main.c    **** 	if(!first_captured){
 217:Src/main.c    **** 			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1); // read the first value
 218:Src/main.c    **** 
 219:Src/main.c    **** 	}
 220:Src/main.c    **** }
 221:Src/main.c    **** 
 222:Src/main.c    **** void TIM15_Init(){
 223:Src/main.c    **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 224:Src/main.c    **** 
 225:Src/main.c    **** 	TIM15->PSC = 71;
 226:Src/main.c    **** 	TIM15->ARR = 65535;
 227:Src/main.c    **** 	TIM15->DIER |= (1<<9);
 228:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
 229:Src/main.c    **** 
 230:Src/main.c    **** 	NVIC_EnableIRQ(TIM15_IRQn);
 231:Src/main.c    **** }
 232:Src/main.c    **** 
 233:Src/main.c    **** uint32_t Get_TIM15_Ticks(){
 234:Src/main.c    **** 	return TIM15->CNT;
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** void Set_TIM15_Ticks(uint32_t cnt){
 238:Src/main.c    **** 	TIM15->CR1 &= ~(TIM_CR1_CEN);
 239:Src/main.c    **** 	TIM15->CNT = cnt;
 240:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
 241:Src/main.c    **** }
 242:Src/main.c    **** 
 243:Src/main.c    **** uint32_t GetUltrasonic(ultrasonic_pins_t* ultrasonic){
 244:Src/main.c    **** 	volatile uint32_t counter = 0;
 245:Src/main.c    **** 
 246:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, 
 247:Src/main.c    **** 			ultrasonic->trig.pin.Pin,
 248:Src/main.c    **** 			GPIO_PIN_SET); //pull left TRIG high
 249:Src/main.c    **** 
 250:Src/main.c    **** 	//__HAL_TIM_SET_COUNTER(&htim1, 0);
 251:Src/main.c    **** 	Set_TIM15_Ticks(0);
 252:Src/main.c    **** 	while(Get_TIM15_Ticks() < 10){
 253:Src/main.c    **** 		/* uint8_t str_buff[32]; */
 254:Src/main.c    **** 		/* sprintf(str_buff, "ticks: %d\n", Get_TIM15_Ticks()); */
 255:Src/main.c    **** 		/* USART_SendString(str_buff); */
 256:Src/main.c    **** 		;
 257:Src/main.c    **** 	}
 258:Src/main.c    **** 	/* while (counter < 10){ */
 259:Src/main.c    **** 	/* 	counter++; */
 260:Src/main.c    **** 	/* }   */
 261:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, 
ARM GAS  /tmp/ccE2jDiE.s 			page 6


 262:Src/main.c    **** 			ultrasonic->trig.pin.Pin,
 263:Src/main.c    **** 			GPIO_PIN_RESET); //pull left TRIG low 
 264:Src/main.c    **** 
 265:Src/main.c    **** 	/* startTime = __HAL_TIM_GET_COUNTER(&htim1); */
 266:Src/main.c    **** 	/* pMillis = __HAL_TIM_GET_COUNTER(&htim1); // used this to avoid infinite while loop  (for timeou
 267:Src/main.c    **** 	startTime = Get_TIM15_Ticks();
 268:Src/main.c    **** 	pMillis = Get_TIM15_Ticks();
 269:Src/main.c    **** 
 270:Src/main.c    **** 	// wait for the echo pin to go high
 271:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, 
 272:Src/main.c    **** 					ultrasonic->echo.pin.Pin)) && 
 273:Src/main.c    **** 			pMillis + 10 > Get_TIM15_Ticks())
 274:Src/main.c    **** 		;
 275:Src/main.c    **** 
 276:Src/main.c    **** 	Value1 = Get_TIM15_Ticks();
 277:Src/main.c    **** 	/* Value1 = (HAL_GetTick() - startTime); */
 278:Src/main.c    **** 
 279:Src/main.c    **** 
 280:Src/main.c    **** 	/* pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout) */
 281:Src/main.c    **** 	/* pMillis = __HAL_TIM_GET_COUNTER(&htim1); */
 282:Src/main.c    **** 	pMillis = Get_TIM15_Ticks();
 283:Src/main.c    **** 							 // wait for the echo pin to go low
 284:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio,
 285:Src/main.c    **** 					ultrasonic->echo.pin.Pin)) && 
 286:Src/main.c    **** 			pMillis + 50 > Get_TIM15_Ticks())
 287:Src/main.c    **** 		;
 288:Src/main.c    **** 
 289:Src/main.c    **** 	/* Value2 = (HAL_GetTick() - startTime); */
 290:Src/main.c    **** 	/* Value2 = __HAL_TIM_GET_COUNTER(&htim1); */
 291:Src/main.c    **** 	Value2 = Get_TIM15_Ticks();
 292:Src/main.c    **** 
 293:Src/main.c    **** 	//Distance = ((Value2-Value1)* 0.034)/2;
 294:Src/main.c    **** 	uint32_t distance = (Value2 - Value1);
 295:Src/main.c    **** 	/*
 296:Src/main.c    **** 	if(leftDistance < 10)
 297:Src/main.c    **** 	{
 298:Src/main.c    **** 		char strLeft[32];
 299:Src/main.c    **** 		sprintf(strLeft, "%u", leftDistance);
 300:Src/main.c    **** 		   USART_SendString("Left Ultrasonic: ");
 301:Src/main.c    **** 		   USART_SendString(strLeft);
 302:Src/main.c    **** 		   USART_SendString("\n");
 303:Src/main.c    **** 	}
 304:Src/main.c    **** 	*/
 305:Src/main.c    **** 	return distance;
 306:Src/main.c    **** }
 307:Src/main.c    **** void Log(){
 308:Src/main.c    **** 	uint8_t str_buff[32];
 309:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic left: %d\n", GetUltrasonic(&ultrasonic_left_pins));
 310:Src/main.c    **** 	USART_SendString(str_buff);
 311:Src/main.c    **** 
 312:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic right: %d\n", GetUltrasonic(&ultrasonic_right_pins));
 313:Src/main.c    **** 	USART_SendString(str_buff);
 314:Src/main.c    **** }
 315:Src/main.c    **** 
 316:Src/main.c    **** void Proceed(){
 317:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 318:Src/main.c    **** 	USART_SendString(err);
ARM GAS  /tmp/ccE2jDiE.s 			page 7


 319:Src/main.c    **** }
 320:Src/main.c    **** 
 321:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 322:Src/main.c    **** 	uint32_t left_motor_pin;
 323:Src/main.c    **** 	uint32_t right_motor_pin;
 324:Src/main.c    **** 	int32_t CH1_DC = 65535;
 325:Src/main.c    **** 
 326:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 327:Src/main.c    **** 
 328:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 329:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 330:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 331:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 332:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 333:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 334:Src/main.c    **** 
 335:Src/main.c    **** 	MotorCommand motorcmd = {0};
 336:Src/main.c    **** 
 337:Src/main.c    **** 	uint8_t* part1;
 338:Src/main.c    **** 	uint8_t part2[15];
 339:Src/main.c    **** 	uint8_t zero = 0;
 340:Src/main.c    **** 	memcpy(part2, &zero, 15);
 341:Src/main.c    **** 
 342:Src/main.c    **** 	switch(direction){
 343:Src/main.c    **** 		case 'w':
 344:Src/main.c    **** 			part1 = forward;
 345:Src/main.c    **** 			motorcmd.dir = FORWARD;
 346:Src/main.c    **** 			break;
 347:Src/main.c    **** 		case 'a':
 348:Src/main.c    **** 			part1 = left;
 349:Src/main.c    **** 			motorcmd.dir = LEFT;
 350:Src/main.c    **** 			break;
 351:Src/main.c    **** 		case 'd':
 352:Src/main.c    **** 			part1 = right;
 353:Src/main.c    **** 			motorcmd.dir = RIGHT;
 354:Src/main.c    **** 			break;
 355:Src/main.c    **** 		case 'l':
 356:Src/main.c    **** 			part1 = log;
 357:Src/main.c    **** 			USART_SendString(part1);
 358:Src/main.c    **** 			Log();
 359:Src/main.c    **** 			ClearCommand();
 360:Src/main.c    **** 			return;
 361:Src/main.c    **** 		case 'p':
 362:Src/main.c    **** 			part1 = proceed;
 363:Src/main.c    **** 			USART_SendString(part1);
 364:Src/main.c    **** 			Proceed();
 365:Src/main.c    **** 			ClearCommand();
 366:Src/main.c    **** 			return;
 367:Src/main.c    **** 		case 'x':
 368:Src/main.c    **** 			part1 = stop;
 369:Src/main.c    **** 			USART_SendString(part1);
 370:Src/main.c    **** 			motorcmd.dir = OFF;
 371:Src/main.c    **** 			ClearCommand();
 372:Src/main.c    **** 			MoveMotors(&motorcmd);
 373:Src/main.c    **** 			return;
 374:Src/main.c    **** 		default:
 375:Src/main.c    **** 			USART_SendString(err);
ARM GAS  /tmp/ccE2jDiE.s 			page 8


 376:Src/main.c    **** 			ClearCommand();
 377:Src/main.c    **** 			return;
 378:Src/main.c    **** 	}
 379:Src/main.c    **** 
 380:Src/main.c    **** 	//these are for "vector commands" only:
 381:Src/main.c    **** 
 382:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 383:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 384:Src/main.c    **** 		motorcmd.amount = 0;
 385:Src/main.c    **** 	}
 386:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 387:Src/main.c    **** 		USART_SendString(err);
 388:Src/main.c    **** 		ClearCommand();
 389:Src/main.c    **** 		return;
 390:Src/main.c    **** 	}
 391:Src/main.c    **** 	else{
 392:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 393:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 394:Src/main.c    **** 		motorcmd.amount = dist;
 395:Src/main.c    **** 	}
 396:Src/main.c    **** 
 397:Src/main.c    **** 
 398:Src/main.c    **** 	USART_SendString(part1);
 399:Src/main.c    **** 	USART_SendString(part2);
 400:Src/main.c    **** 
 401:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 402:Src/main.c    **** 	HAL_Delay(1000);
 403:Src/main.c    **** 	TIM2->CCR1 = 0;
 404:Src/main.c    **** 
 405:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 406:Src/main.c    **** 	USART_SendString(result);
 407:Src/main.c    **** 
 408:Src/main.c    **** 	ClearCommand();
 409:Src/main.c    **** 
 410:Src/main.c    **** 
 411:Src/main.c    **** 	// Example code while loop
 412:Src/main.c    **** 	//    while (1)
 413:Src/main.c    **** 	//    {
 414:Src/main.c    **** 	//        while(CH1_DC < 65535)
 415:Src/main.c    **** 	//        {
 416:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 417:Src/main.c    **** 	//            CH1_DC += 70;
 418:Src/main.c    **** 	//            HAL_Delay(1);
 419:Src/main.c    **** 	//        }
 420:Src/main.c    **** 	//        while(CH1_DC > 0)
 421:Src/main.c    **** 	//        {
 422:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 423:Src/main.c    **** 	//            CH1_DC -= 70;
 424:Src/main.c    **** 	//            HAL_Delay(1);
 425:Src/main.c    **** 	//        }
 426:Src/main.c    **** 	//    }
 427:Src/main.c    **** }
 428:Src/main.c    **** 
 429:Src/main.c    **** /*
 430:Src/main.c    ****    void ProcessCommandPWM(uint8_t side, uint8_t amt){
 431:Src/main.c    ****    MotorCommand motorcmd = {0};
 432:Src/main.c    ****    motorcmd.dir = FORWARD;
ARM GAS  /tmp/ccE2jDiE.s 			page 9


 433:Src/main.c    ****    motorcmd.amount = 9;
 434:Src/main.c    ****    switch(side){
 435:Src/main.c    ****    case 'l':
 436:Src/main.c    ****    pwm_left = amt;
 437:Src/main.c    ****    break;
 438:Src/main.c    ****    case 'r':
 439:Src/main.c    ****    pwm_right = amt;
 440:Src/main.c    ****    break;
 441:Src/main.c    ****    case 'x':
 442:Src/main.c    ****    motorcmd.dir = OFF;
 443:Src/main.c    ****    break;
 444:Src/main.c    ****    default:
 445:Src/main.c    ****    break;
 446:Src/main.c    ****    }
 447:Src/main.c    ****    MoveMotors(&motorcmd);
 448:Src/main.c    ****    ClearCommand();
 449:Src/main.c    ****    }
 450:Src/main.c    ****    */
 451:Src/main.c    **** 
 452:Src/main.c    **** /*
 453:Src/main.c    ****    void Ultrasonic_Init(uint32_t pins)
 454:Src/main.c    ****    {
 455:Src/main.c    ****    __HAL_RCC_GPIOA_CLK_ENABLE();
 456:Src/main.c    **** 
 457:Src/main.c    ****    GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 458:Src/main.c    ****    GPIO_MODE_INPUT,
 459:Src/main.c    ****    GPIO_SPEED_FREQ_LOW,
 460:Src/main.c    ****    GPIO_NOPULL
 461:Src/main.c    ****    };
 462:Src/main.c    ****    HAL_GPIO_Init(GPIOA, &gpio_init);
 463:Src/main.c    ****    }
 464:Src/main.c    ****    */
 465:Src/main.c    **** 
 466:Src/main.c    **** void PrintDistance()
 467:Src/main.c    **** {
 468:Src/main.c    **** 	char dist[32] = "";
 469:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 470:Src/main.c    **** 	USART_SendString(dist);
 471:Src/main.c    **** }
 472:Src/main.c    **** 
 473:Src/main.c    **** 
 474:Src/main.c    **** /* USER CODE END 0 */
 475:Src/main.c    **** 
 476:Src/main.c    **** /**
 477:Src/main.c    ****  * @brief  The application entry point.
 478:Src/main.c    ****  * @retval int
 479:Src/main.c    ****  */
 480:Src/main.c    **** int main(void)
 481:Src/main.c    **** {
 482:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 483:Src/main.c    **** 	SystemClock_Config();
 484:Src/main.c    **** 
 485:Src/main.c    **** 	//USART Initalizations
 486:Src/main.c    **** 	GPIO_AF_Init();
 487:Src/main.c    **** 	USART_Init();
 488:Src/main.c    **** 	TIM15_Init();
 489:Src/main.c    **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 10


 490:Src/main.c    **** 	motor_init();                           // Initialize motor code
 491:Src/main.c    **** 
 492:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 493:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 494:Src/main.c    **** 
 495:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 496:Src/main.c    **** 
 497:Src/main.c    **** 	//PWM and Ultrasonic Initalizations
 498:Src/main.c    **** 	MX_GPIO_Init();
 499:Src/main.c    **** 	/* MX_TIM1_Init(); */
 500:Src/main.c    **** 
 501:Src/main.c    **** 	/* HAL_TIM_Base_Start(&htim1); */
 502:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 503:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 504:Src/main.c    **** 
 505:Src/main.c    **** 	while (1) {
 506:Src/main.c    **** 		if(incomingCommand)
 507:Src/main.c    **** 		{
 508:Src/main.c    **** 			if(command[0] != 'w' &&
 509:Src/main.c    **** 					command[0] != 'a' &&
 510:Src/main.c    **** 					command[0] != 'd'){
 511:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 512:Src/main.c    **** 			}
 513:Src/main.c    **** 			if(command[1])
 514:Src/main.c    **** 			{
 515:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 516:Src/main.c    **** 			}
 517:Src/main.c    **** 		}
 518:Src/main.c    **** 		/*
 519:Src/main.c    **** 		   if(incomingCommand){
 520:Src/main.c    **** 		   if(command[2]){
 521:Src/main.c    **** 		   uint8_t tens = command[1] - '0';
 522:Src/main.c    **** 		   uint8_t huns = command[2] - '0';
 523:Src/main.c    **** 		   ProcessCommandPWM(command[0], 10*tens + huns);
 524:Src/main.c    **** 		   }
 525:Src/main.c    **** 		   }
 526:Src/main.c    **** 		   */
 527:Src/main.c    **** 		HAL_Delay(500);
 528:Src/main.c    **** 	}
 529:Src/main.c    **** }
 530:Src/main.c    **** 
 531:Src/main.c    **** /**
 532:Src/main.c    ****  * @brief System Clock Configuration
 533:Src/main.c    ****  * @retval None
 534:Src/main.c    ****  */
 535:Src/main.c    **** void SystemClock_Config(void)
 536:Src/main.c    **** {
 537:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 538:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 539:Src/main.c    **** 
 540:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 541:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 542:Src/main.c    **** 	 */
 543:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 544:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 545:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 546:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
ARM GAS  /tmp/ccE2jDiE.s 			page 11


 547:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 548:Src/main.c    **** 	{
 549:Src/main.c    **** 		Error_Handler();
 550:Src/main.c    **** 	}
 551:Src/main.c    **** 
 552:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 553:Src/main.c    **** 	*/
 554:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 555:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 556:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 557:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 558:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 559:Src/main.c    **** 
 560:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 561:Src/main.c    **** 	{
 562:Src/main.c    **** 		Error_Handler();
 563:Src/main.c    **** 	}
 564:Src/main.c    **** }
 565:Src/main.c    **** 
 566:Src/main.c    **** /**
 567:Src/main.c    ****  * @brief TIM2 Initialization Function
 568:Src/main.c    ****  * @param None
 569:Src/main.c    ****  * @retval None
 570:Src/main.c    ****  */
 571:Src/main.c    **** static void MX_TIM1_Init(void)
 572:Src/main.c    **** {
 573:Src/main.c    **** 
 574:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 0 */
 575:Src/main.c    **** 
 576:Src/main.c    **** 	/* USER CODE END TIM1_Init 0 */
 577:Src/main.c    **** 
 578:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 579:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 580:Src/main.c    **** 	TIM_IC_InitTypeDef sConfigIC = {0};
 581:Src/main.c    **** 	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 582:Src/main.c    **** 
 583:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 1 */
 584:Src/main.c    **** 
 585:Src/main.c    **** 	/* USER CODE END TIM1_Init 1 */
 586:Src/main.c    **** 	htim1.Instance = TIM15;
 587:Src/main.c    **** 	htim1.Init.Prescaler = 71;
 588:Src/main.c    **** 	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 589:Src/main.c    **** 	htim1.Init.Period = 65534;
 590:Src/main.c    **** 	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 591:Src/main.c    **** 	htim1.Init.RepetitionCounter = 0;
 592:Src/main.c    **** 	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 593:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 594:Src/main.c    **** 	{
 595:Src/main.c    **** 		Error_Handler();
 596:Src/main.c    **** 	}
 597:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 598:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 599:Src/main.c    **** 	{
 600:Src/main.c    **** 		Error_Handler();
 601:Src/main.c    **** 	}
 602:Src/main.c    **** 	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 603:Src/main.c    **** 	{
ARM GAS  /tmp/ccE2jDiE.s 			page 12


 604:Src/main.c    **** 		Error_Handler();
 605:Src/main.c    **** 	}
 606:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 607:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 608:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 609:Src/main.c    **** 	{
 610:Src/main.c    **** 		Error_Handler();
 611:Src/main.c    **** 	}
 612:Src/main.c    **** 	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 613:Src/main.c    **** 	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 614:Src/main.c    **** 	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 615:Src/main.c    **** 	sConfigIC.ICFilter = 0;
 616:Src/main.c    **** 	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 617:Src/main.c    **** 	{
 618:Src/main.c    **** 		Error_Handler();
 619:Src/main.c    **** 	}
 620:Src/main.c    **** 	/*
 621:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 622:Src/main.c    **** 	sConfigOC.Pulse = 0;
 623:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 624:Src/main.c    **** 	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 625:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 626:Src/main.c    **** 	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 627:Src/main.c    **** 	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 628:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 629:Src/main.c    **** 	{
 630:Src/main.c    **** 		Error_Handler();
 631:Src/main.c    **** 	}
 632:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 633:Src/main.c    **** 	{
 634:Src/main.c    **** 		Error_Handler();
 635:Src/main.c    **** 	}
 636:Src/main.c    **** 	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 637:Src/main.c    **** 	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 638:Src/main.c    **** 	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 639:Src/main.c    **** 	sBreakDeadTimeConfig.DeadTime = 0;
 640:Src/main.c    **** 	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 641:Src/main.c    **** 	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 642:Src/main.c    **** 	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 643:Src/main.c    **** 	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 644:Src/main.c    **** 	{
 645:Src/main.c    **** 		Error_Handler();
 646:Src/main.c    **** 	}
 647:Src/main.c    **** 	*/
 648:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 2 */
 649:Src/main.c    **** 
 650:Src/main.c    **** 	/* USER CODE END TIM1_Init 2 */
 651:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim1);
 652:Src/main.c    **** 
 653:Src/main.c    **** }
 654:Src/main.c    **** 
 655:Src/main.c    **** /**
 656:Src/main.c    ****  * @brief GPIO Initialization Function
 657:Src/main.c    ****  * @param None
 658:Src/main.c    ****  * @retval None
 659:Src/main.c    ****  */
 660:Src/main.c    **** static void MX_GPIO_Init(void)
ARM GAS  /tmp/ccE2jDiE.s 			page 13


 661:Src/main.c    **** {
  26              		.loc 1 661 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 662:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 662 2 view .LVU1
  39              		.loc 1 662 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 663:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 664:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 665:Src/main.c    **** 
 666:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 667:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 667 2 is_stmt 1 view .LVU3
  46              	.LBB10:
  47              		.loc 1 667 2 view .LVU4
  48              		.loc 1 667 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 667 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 667 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE10:
  62              		.loc 1 667 2 view .LVU8
 668:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 669:Src/main.c    **** 
 670:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 671:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 671 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
 672:Src/main.c    **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 14


 673:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 674:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 674 2 view .LVU10
  72              		.loc 1 674 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 675:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 675 2 is_stmt 1 view .LVU12
  76              		.loc 1 675 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 676:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 676 2 is_stmt 1 view .LVU14
  79              		.loc 1 676 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 677:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 677 2 is_stmt 1 view .LVU16
  83              		.loc 1 677 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 678:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 678 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 679:Src/main.c    **** 
 680:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 681:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 682:Src/main.c    **** }
  90              		.loc 1 682 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE62:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 82 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 82 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
ARM GAS  /tmp/ccE2jDiE.s 			page 15


 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 85 2 is_stmt 1 view .LVU22
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 85 19 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 131              		.loc 1 85 19 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  90:Src/main.c    **** }
 137              		.loc 1 90 2 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  91:Src/main.c    **** 
 142              		.loc 1 91 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  91:Src/main.c    **** 
 146              		.loc 1 91 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  98:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 98 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
ARM GAS  /tmp/ccE2jDiE.s 			page 16


 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 99 2 view .LVU29
 177              	.LBB11:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 99 2 view .LVU30
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 99 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 99 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 99 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE11:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 99 2 view .LVU34
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 100 2 view .LVU35
 195              	.LBB12:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 100 2 view .LVU36
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 100 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 100 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 100 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE12:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 100 2 view .LVU40
 101:Src/main.c    **** 
 211              		.loc 1 101 2 view .LVU41
 212              	.LBB13:
 101:Src/main.c    **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 17


 213              		.loc 1 101 2 view .LVU42
 101:Src/main.c    **** 
 214              		.loc 1 101 2 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
 101:Src/main.c    **** 
 220              		.loc 1 101 2 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
 101:Src/main.c    **** 
 224              		.loc 1 101 2 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
 226              	.LBE13:
 101:Src/main.c    **** 
 227              		.loc 1 101 2 view .LVU46
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 104 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
 105:Src/main.c    **** 
 234              		.loc 1 105 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 108 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 109 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 110 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 258              		.loc 1 111 2 view .LVU52
 259 006e 2100     		movs	r1, r4
ARM GAS  /tmp/ccE2jDiE.s 			page 18


 260 0070 4C31     		adds	r1, r1, #76
 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 112:Src/main.c    **** 
 264              		.loc 1 112 2 view .LVU53
 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 115 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 116 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 117 2 view .LVU56
 283 0096 2100     		movs	r1, r4
 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 118 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 119:Src/main.c    **** 
 294              		.loc 1 119 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 122 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 123:Src/main.c    **** 
 306              		.loc 1 123 2 view .LVU60
 307 00be 2100     		movs	r1, r4
 308 00c0 1C31     		adds	r1, r1, #28
ARM GAS  /tmp/ccE2jDiE.s 			page 19


 309 00c2 A069     		ldr	r0, [r4, #24]
 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 126 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 127:Src/main.c    **** }
 318              		.loc 1 127 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL23:
 128:Src/main.c    **** 
 324              		.loc 1 128 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 133:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 133 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 362              		.loc 1 134 2 view .LVU65
ARM GAS  /tmp/ccE2jDiE.s 			page 20


 363              	.LBB14:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 134 2 view .LVU66
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 134 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 134 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 134 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE14:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 134 2 view .LVU70
 135:Src/main.c    **** 
 380              		.loc 1 135 2 view .LVU71
 135:Src/main.c    **** 
 381              		.loc 1 135 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 135:Src/main.c    **** 
 383              		.loc 1 135 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 138 2 is_stmt 1 view .LVU74
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 138 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 138 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 139:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 139 2 is_stmt 1 view .LVU77
 139:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 139 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 139:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 139 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 139:Src/main.c    **** 												//use with the BT adapter
 403              		.loc 1 139 14 view .LVU80
 404 0034 E060     		str	r0, [r4, #12]
ARM GAS  /tmp/ccE2jDiE.s 			page 21


 143:Src/main.c    **** 
 405              		.loc 1 143 2 is_stmt 1 view .LVU81
 143:Src/main.c    **** 
 406              		.loc 1 143 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 143:Src/main.c    **** 
 408              		.loc 1 143 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 146:Src/main.c    **** 
 412              		.loc 1 146 2 is_stmt 1 view .LVU84
 146:Src/main.c    **** 
 413              		.loc 1 146 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 146:Src/main.c    **** 
 415              		.loc 1 146 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 149:Src/main.c    **** 
 419              		.loc 1 149 2 is_stmt 1 view .LVU87
 149:Src/main.c    **** 
 420              		.loc 1 149 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
 149:Src/main.c    **** 
 422              		.loc 1 149 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 152:Src/main.c    **** }
 426              		.loc 1 152 2 is_stmt 1 view .LVU90
 152:Src/main.c    **** }
 427              		.loc 1 152 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 152:Src/main.c    **** }
 429              		.loc 1 152 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 153:Src/main.c    **** 
 433              		.loc 1 153 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
 448              		.global	USART_SendChar
 449              		.syntax unified
ARM GAS  /tmp/ccE2jDiE.s 			page 22


 450              		.code	16
 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 160:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 160 32 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 161:Src/main.c    **** 		;
 462              		.loc 1 161 8 discriminator 1 view .LVU95
 161:Src/main.c    **** 		;
 463              		.loc 1 161 16 is_stmt 0 discriminator 1 view .LVU96
 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 161:Src/main.c    **** 		;
 466              		.loc 1 161 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 164:Src/main.c    **** }
 469              		.loc 1 164 2 is_stmt 1 view .LVU98
 164:Src/main.c    **** }
 470              		.loc 1 164 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
 165:Src/main.c    **** 
 473              		.loc 1 165 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 172:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 172 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 172:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 172 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccE2jDiE.s 			page 23


 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 173 2 is_stmt 1 view .LVU103
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 505              		.loc 1 173 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 174:Src/main.c    **** 		p_string++;
 509              		.loc 1 174 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 175:Src/main.c    **** 	}
 512              		.loc 1 175 3 view .LVU106
 175:Src/main.c    **** 	}
 513              		.loc 1 175 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 173 18 is_stmt 1 view .LVU108
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 173 8 is_stmt 0 view .LVU109
 519 000c 2078     		ldrb	r0, [r4]
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 173 18 view .LVU110
 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 177:Src/main.c    **** }
 523              		.loc 1 177 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 178:Src/main.c    **** 
 526              		.loc 1 178 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 178:Src/main.c    **** 
 529              		.loc 1 178 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
 546              	.LFB48:
 183:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
ARM GAS  /tmp/ccE2jDiE.s 			page 24


 547              		.loc 1 183 20 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 184 2 view .LVU115
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 184 10 is_stmt 0 view .LVU116
 560 0004 094B     		ldr	r3, .L22
 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 185:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 185 2 is_stmt 1 view .LVU117
 567 0010 0748     		ldr	r0, .L22+4
 568 0012 0322     		movs	r2, #3
 569 0014 0021     		movs	r1, #0
 570 0016 FFF7FEFF 		bl	memset
 571              	.LVL33:
 186:Src/main.c    **** 	USART_SendString(prompt);
 572              		.loc 1 186 2 view .LVU118
 186:Src/main.c    **** 	USART_SendString(prompt);
 573              		.loc 1 186 18 is_stmt 0 view .LVU119
 574 001a 064B     		ldr	r3, .L22+8
 575 001c 0022     		movs	r2, #0
 576 001e 1A70     		strb	r2, [r3]
 187:Src/main.c    **** }
 577              		.loc 1 187 2 is_stmt 1 view .LVU120
 578 0020 6846     		mov	r0, sp
 579 0022 FFF7FEFF 		bl	USART_SendString
 580              	.LVL34:
 188:Src/main.c    **** 
 581              		.loc 1 188 1 is_stmt 0 view .LVU121
 582 0026 03B0     		add	sp, sp, #12
 583              		@ sp needed
 584 0028 00BD     		pop	{pc}
 585              	.L23:
 586 002a C046     		.align	2
 587              	.L22:
 588 002c 00000000 		.word	.LC21
 589 0030 00000000 		.word	command
 590 0034 00000000 		.word	incomingCommand
 591              		.cfi_endproc
 592              	.LFE48:
 594              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 595              		.align	2
 596              	.LC25:
 597 0000 436F6D6D 		.ascii	"Command too long!\012\000"
ARM GAS  /tmp/ccE2jDiE.s 			page 25


 597      616E6420 
 597      746F6F20 
 597      6C6F6E67 
 597      210A00
 598              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 599              		.align	1
 600              		.global	USART3_4_IRQHandler
 601              		.syntax unified
 602              		.code	16
 603              		.thumb_func
 605              	USART3_4_IRQHandler:
 606              	.LFB49:
 190:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 607              		.loc 1 190 27 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 24
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 30B5     		push	{r4, r5, lr}
 612              	.LCFI11:
 613              		.cfi_def_cfa_offset 12
 614              		.cfi_offset 4, -12
 615              		.cfi_offset 5, -8
 616              		.cfi_offset 14, -4
 617 0002 87B0     		sub	sp, sp, #28
 618              	.LCFI12:
 619              		.cfi_def_cfa_offset 40
 191:Src/main.c    **** 	incomingCommand = 1;
 620              		.loc 1 191 2 view .LVU123
 191:Src/main.c    **** 	incomingCommand = 1;
 621              		.loc 1 191 10 is_stmt 0 view .LVU124
 622 0004 01AA     		add	r2, sp, #4
 623 0006 164B     		ldr	r3, .L31
 624 0008 1800     		movs	r0, r3
 625 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 626 000c 38C2     		stmia	r2!, {r3, r4, r5}
 627 000e 0368     		ldr	r3, [r0]
 628 0010 1360     		str	r3, [r2]
 629 0012 8388     		ldrh	r3, [r0, #4]
 630 0014 9380     		strh	r3, [r2, #4]
 631 0016 8379     		ldrb	r3, [r0, #6]
 632 0018 9371     		strb	r3, [r2, #6]
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 633              		.loc 1 192 2 is_stmt 1 view .LVU125
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 634              		.loc 1 192 18 is_stmt 0 view .LVU126
 635 001a 124B     		ldr	r3, .L31+4
 636 001c 0122     		movs	r2, #1
 637 001e 1A70     		strb	r2, [r3]
 193:Src/main.c    **** 		;
 638              		.loc 1 193 2 is_stmt 1 view .LVU127
 639              	.L25:
 193:Src/main.c    **** 		;
 640              		.loc 1 193 8 discriminator 1 view .LVU128
 193:Src/main.c    **** 		;
 641              		.loc 1 193 16 is_stmt 0 discriminator 1 view .LVU129
 642 0020 114B     		ldr	r3, .L31+8
 643 0022 DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccE2jDiE.s 			page 26


 193:Src/main.c    **** 		;
 644              		.loc 1 193 8 discriminator 1 view .LVU130
 645 0024 9B06     		lsls	r3, r3, #26
 646 0026 FBD5     		bpl	.L25
 195:Src/main.c    **** 		if(command[1]){
 647              		.loc 1 195 2 is_stmt 1 view .LVU131
 195:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 195 12 is_stmt 0 view .LVU132
 649 0028 104B     		ldr	r3, .L31+12
 650 002a 1B78     		ldrb	r3, [r3]
 195:Src/main.c    **** 		if(command[1]){
 651              		.loc 1 195 4 view .LVU133
 652 002c 002B     		cmp	r3, #0
 653 002e 0FD0     		beq	.L26
 196:Src/main.c    **** 			USART_SendString(err);
 654              		.loc 1 196 3 is_stmt 1 view .LVU134
 196:Src/main.c    **** 			USART_SendString(err);
 655              		.loc 1 196 13 is_stmt 0 view .LVU135
 656 0030 0E4B     		ldr	r3, .L31+12
 657 0032 5B78     		ldrb	r3, [r3, #1]
 196:Src/main.c    **** 			USART_SendString(err);
 658              		.loc 1 196 5 view .LVU136
 659 0034 002B     		cmp	r3, #0
 660 0036 05D1     		bne	.L30
 201:Src/main.c    **** 		}
 661              		.loc 1 201 4 is_stmt 1 view .LVU137
 201:Src/main.c    **** 		}
 662              		.loc 1 201 23 is_stmt 0 view .LVU138
 663 0038 0B4B     		ldr	r3, .L31+8
 664 003a 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** 		}
 665              		.loc 1 201 15 view .LVU139
 666 003c DBB2     		uxtb	r3, r3
 667 003e 0B4A     		ldr	r2, .L31+12
 668 0040 5370     		strb	r3, [r2, #1]
 669 0042 0AE0     		b	.L24
 670              	.L30:
 197:Src/main.c    **** 			ClearCommand();
 671              		.loc 1 197 4 is_stmt 1 view .LVU140
 672 0044 01A8     		add	r0, sp, #4
 673 0046 FFF7FEFF 		bl	USART_SendString
 674              	.LVL35:
 198:Src/main.c    **** 		}
 675              		.loc 1 198 4 view .LVU141
 676 004a FFF7FEFF 		bl	ClearCommand
 677              	.LVL36:
 678 004e 04E0     		b	.L24
 679              	.L26:
 205:Src/main.c    **** 	}
 680              		.loc 1 205 3 view .LVU142
 205:Src/main.c    **** 	}
 681              		.loc 1 205 22 is_stmt 0 view .LVU143
 682 0050 054B     		ldr	r3, .L31+8
 683 0052 9B8C     		ldrh	r3, [r3, #36]
 205:Src/main.c    **** 	}
 684              		.loc 1 205 14 view .LVU144
 685 0054 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccE2jDiE.s 			page 27


 686 0056 054A     		ldr	r2, .L31+12
 687 0058 1370     		strb	r3, [r2]
 688              	.L24:
 207:Src/main.c    **** 
 689              		.loc 1 207 1 view .LVU145
 690 005a 07B0     		add	sp, sp, #28
 691              		@ sp needed
 692 005c 30BD     		pop	{r4, r5, pc}
 693              	.L32:
 694 005e C046     		.align	2
 695              	.L31:
 696 0060 00000000 		.word	.LC25
 697 0064 00000000 		.word	incomingCommand
 698 0068 00480040 		.word	1073760256
 699 006c 00000000 		.word	command
 700              		.cfi_endproc
 701              	.LFE49:
 703              		.section	.text.TIM15_IRQHandler,"ax",%progbits
 704              		.align	1
 705              		.global	TIM15_IRQHandler
 706              		.syntax unified
 707              		.code	16
 708              		.thumb_func
 710              	TIM15_IRQHandler:
 711              	.LFB50:
 215:Src/main.c    **** 	if(!first_captured){
 712              		.loc 1 215 28 is_stmt 1 view -0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716 0000 10B5     		push	{r4, lr}
 717              	.LCFI13:
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 4, -8
 720              		.cfi_offset 14, -4
 216:Src/main.c    **** 			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1); // read the first value
 721              		.loc 1 216 2 view .LVU147
 216:Src/main.c    **** 			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1); // read the first value
 722              		.loc 1 216 5 is_stmt 0 view .LVU148
 723 0002 064B     		ldr	r3, .L36
 724 0004 1B78     		ldrb	r3, [r3]
 216:Src/main.c    **** 			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1); // read the first value
 725              		.loc 1 216 4 view .LVU149
 726 0006 002B     		cmp	r3, #0
 727 0008 00D0     		beq	.L35
 728              	.L33:
 220:Src/main.c    **** 
 729              		.loc 1 220 1 view .LVU150
 730              		@ sp needed
 731 000a 10BD     		pop	{r4, pc}
 732              	.L35:
 217:Src/main.c    **** 
 733              		.loc 1 217 4 is_stmt 1 view .LVU151
 217:Src/main.c    **** 
 734              		.loc 1 217 14 is_stmt 0 view .LVU152
 735 000c 0448     		ldr	r0, .L36+4
 736 000e 0021     		movs	r1, #0
ARM GAS  /tmp/ccE2jDiE.s 			page 28


 737 0010 FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 738              	.LVL37:
 217:Src/main.c    **** 
 739              		.loc 1 217 12 view .LVU153
 740 0014 034B     		ldr	r3, .L36+8
 741 0016 1860     		str	r0, [r3]
 220:Src/main.c    **** 
 742              		.loc 1 220 1 view .LVU154
 743 0018 F7E7     		b	.L33
 744              	.L37:
 745 001a C046     		.align	2
 746              	.L36:
 747 001c 00000000 		.word	first_captured
 748 0020 00000000 		.word	htim1
 749 0024 00000000 		.word	IC_Val1
 750              		.cfi_endproc
 751              	.LFE50:
 753              		.section	.text.TIM15_Init,"ax",%progbits
 754              		.align	1
 755              		.global	TIM15_Init
 756              		.syntax unified
 757              		.code	16
 758              		.thumb_func
 760              	TIM15_Init:
 761              	.LFB51:
 222:Src/main.c    **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 762              		.loc 1 222 18 is_stmt 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 223:Src/main.c    **** 
 767              		.loc 1 223 2 view .LVU156
 223:Src/main.c    **** 
 768              		.loc 1 223 5 is_stmt 0 view .LVU157
 769 0000 0C4A     		ldr	r2, .L39
 770 0002 9169     		ldr	r1, [r2, #24]
 223:Src/main.c    **** 
 771              		.loc 1 223 15 view .LVU158
 772 0004 8023     		movs	r3, #128
 773 0006 5B02     		lsls	r3, r3, #9
 774 0008 0B43     		orrs	r3, r1
 775 000a 9361     		str	r3, [r2, #24]
 225:Src/main.c    **** 	TIM15->ARR = 65535;
 776              		.loc 1 225 2 is_stmt 1 view .LVU159
 225:Src/main.c    **** 	TIM15->ARR = 65535;
 777              		.loc 1 225 13 is_stmt 0 view .LVU160
 778 000c 0A4B     		ldr	r3, .L39+4
 779 000e 4722     		movs	r2, #71
 780 0010 9A62     		str	r2, [r3, #40]
 226:Src/main.c    **** 	TIM15->DIER |= (1<<9);
 781              		.loc 1 226 2 is_stmt 1 view .LVU161
 226:Src/main.c    **** 	TIM15->DIER |= (1<<9);
 782              		.loc 1 226 13 is_stmt 0 view .LVU162
 783 0012 0A4A     		ldr	r2, .L39+8
 784 0014 DA62     		str	r2, [r3, #44]
 227:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
ARM GAS  /tmp/ccE2jDiE.s 			page 29


 785              		.loc 1 227 2 is_stmt 1 view .LVU163
 227:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
 786              		.loc 1 227 7 is_stmt 0 view .LVU164
 787 0016 D968     		ldr	r1, [r3, #12]
 227:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
 788              		.loc 1 227 14 view .LVU165
 789 0018 8022     		movs	r2, #128
 790 001a 9200     		lsls	r2, r2, #2
 791 001c 0A43     		orrs	r2, r1
 792 001e DA60     		str	r2, [r3, #12]
 228:Src/main.c    **** 
 793              		.loc 1 228 2 is_stmt 1 view .LVU166
 228:Src/main.c    **** 
 794              		.loc 1 228 7 is_stmt 0 view .LVU167
 795 0020 1A68     		ldr	r2, [r3]
 228:Src/main.c    **** 
 796              		.loc 1 228 13 view .LVU168
 797 0022 0121     		movs	r1, #1
 798 0024 0A43     		orrs	r2, r1
 799 0026 1A60     		str	r2, [r3]
 230:Src/main.c    **** }
 800              		.loc 1 230 2 is_stmt 1 view .LVU169
 801              	.LVL38:
 802              	.LBB15:
 803              	.LBI15:
 804              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
ARM GAS  /tmp/ccE2jDiE.s 			page 30


  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
ARM GAS  /tmp/ccE2jDiE.s 			page 31


  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
ARM GAS  /tmp/ccE2jDiE.s 			page 32


 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /tmp/ccE2jDiE.s 			page 33


 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/ccE2jDiE.s 			page 34


 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
ARM GAS  /tmp/ccE2jDiE.s 			page 35


 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 36


 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 37


 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
ARM GAS  /tmp/ccE2jDiE.s 			page 38


 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
ARM GAS  /tmp/ccE2jDiE.s 			page 39


 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 40


 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 805              		.loc 2 623 22 view .LVU170
 806              	.LBB16:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 807              		.loc 2 625 3 view .LVU171
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 808              		.loc 2 627 5 view .LVU172
 809              		.loc 2 627 20 is_stmt 0 view .LVU173
 810 0028 054B     		ldr	r3, .L39+12
 811 002a 8022     		movs	r2, #128
 812 002c 5203     		lsls	r2, r2, #13
 813 002e 1A60     		str	r2, [r3]
 814              	.LVL39:
 815              		.loc 2 627 20 view .LVU174
 816              	.LBE16:
 817              	.LBE15:
 231:Src/main.c    **** 
 818              		.loc 1 231 1 view .LVU175
 819              		@ sp needed
 820 0030 7047     		bx	lr
 821              	.L40:
 822 0032 C046     		.align	2
 823              	.L39:
 824 0034 00100240 		.word	1073876992
 825 0038 00400140 		.word	1073823744
 826 003c FFFF0000 		.word	65535
 827 0040 00E100E0 		.word	-536813312
 828              		.cfi_endproc
 829              	.LFE51:
 831              		.section	.text.Get_TIM15_Ticks,"ax",%progbits
 832              		.align	1
 833              		.global	Get_TIM15_Ticks
 834              		.syntax unified
 835              		.code	16
ARM GAS  /tmp/ccE2jDiE.s 			page 41


 836              		.thumb_func
 838              	Get_TIM15_Ticks:
 839              	.LFB52:
 233:Src/main.c    **** 	return TIM15->CNT;
 840              		.loc 1 233 27 is_stmt 1 view -0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              		@ link register save eliminated.
 234:Src/main.c    **** }
 845              		.loc 1 234 2 view .LVU177
 234:Src/main.c    **** }
 846              		.loc 1 234 14 is_stmt 0 view .LVU178
 847 0000 014B     		ldr	r3, .L42
 848 0002 586A     		ldr	r0, [r3, #36]
 235:Src/main.c    **** 
 849              		.loc 1 235 1 view .LVU179
 850              		@ sp needed
 851 0004 7047     		bx	lr
 852              	.L43:
 853 0006 C046     		.align	2
 854              	.L42:
 855 0008 00400140 		.word	1073823744
 856              		.cfi_endproc
 857              	.LFE52:
 859              		.section	.text.Set_TIM15_Ticks,"ax",%progbits
 860              		.align	1
 861              		.global	Set_TIM15_Ticks
 862              		.syntax unified
 863              		.code	16
 864              		.thumb_func
 866              	Set_TIM15_Ticks:
 867              	.LVL40:
 868              	.LFB53:
 237:Src/main.c    **** 	TIM15->CR1 &= ~(TIM_CR1_CEN);
 869              		.loc 1 237 35 is_stmt 1 view -0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              		@ link register save eliminated.
 238:Src/main.c    **** 	TIM15->CNT = cnt;
 874              		.loc 1 238 2 view .LVU181
 238:Src/main.c    **** 	TIM15->CNT = cnt;
 875              		.loc 1 238 7 is_stmt 0 view .LVU182
 876 0000 044B     		ldr	r3, .L45
 877 0002 1A68     		ldr	r2, [r3]
 238:Src/main.c    **** 	TIM15->CNT = cnt;
 878              		.loc 1 238 13 view .LVU183
 879 0004 0121     		movs	r1, #1
 880 0006 8A43     		bics	r2, r1
 881 0008 1A60     		str	r2, [r3]
 239:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
 882              		.loc 1 239 2 is_stmt 1 view .LVU184
 239:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
 883              		.loc 1 239 13 is_stmt 0 view .LVU185
 884 000a 5862     		str	r0, [r3, #36]
 240:Src/main.c    **** }
ARM GAS  /tmp/ccE2jDiE.s 			page 42


 885              		.loc 1 240 2 is_stmt 1 view .LVU186
 240:Src/main.c    **** }
 886              		.loc 1 240 7 is_stmt 0 view .LVU187
 887 000c 1A68     		ldr	r2, [r3]
 240:Src/main.c    **** }
 888              		.loc 1 240 13 view .LVU188
 889 000e 0A43     		orrs	r2, r1
 890 0010 1A60     		str	r2, [r3]
 241:Src/main.c    **** 
 891              		.loc 1 241 1 view .LVU189
 892              		@ sp needed
 893 0012 7047     		bx	lr
 894              	.L46:
 895              		.align	2
 896              	.L45:
 897 0014 00400140 		.word	1073823744
 898              		.cfi_endproc
 899              	.LFE53:
 901              		.section	.text.GetUltrasonic,"ax",%progbits
 902              		.align	1
 903              		.global	GetUltrasonic
 904              		.syntax unified
 905              		.code	16
 906              		.thumb_func
 908              	GetUltrasonic:
 909              	.LVL41:
 910              	.LFB54:
 243:Src/main.c    **** 	volatile uint32_t counter = 0;
 911              		.loc 1 243 54 is_stmt 1 view -0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 8
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 243:Src/main.c    **** 	volatile uint32_t counter = 0;
 915              		.loc 1 243 54 is_stmt 0 view .LVU191
 916 0000 30B5     		push	{r4, r5, lr}
 917              	.LCFI14:
 918              		.cfi_def_cfa_offset 12
 919              		.cfi_offset 4, -12
 920              		.cfi_offset 5, -8
 921              		.cfi_offset 14, -4
 922 0002 83B0     		sub	sp, sp, #12
 923              	.LCFI15:
 924              		.cfi_def_cfa_offset 24
 925 0004 0400     		movs	r4, r0
 244:Src/main.c    **** 
 926              		.loc 1 244 2 is_stmt 1 view .LVU192
 244:Src/main.c    **** 
 927              		.loc 1 244 20 is_stmt 0 view .LVU193
 928 0006 0023     		movs	r3, #0
 929 0008 0193     		str	r3, [sp, #4]
 246:Src/main.c    **** 			ultrasonic->trig.pin.Pin,
 930              		.loc 1 246 2 is_stmt 1 view .LVU194
 931 000a 818B     		ldrh	r1, [r0, #28]
 932 000c 8069     		ldr	r0, [r0, #24]
 933              	.LVL42:
 246:Src/main.c    **** 			ultrasonic->trig.pin.Pin,
 934              		.loc 1 246 2 is_stmt 0 view .LVU195
ARM GAS  /tmp/ccE2jDiE.s 			page 43


 935 000e 0122     		movs	r2, #1
 936 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 937              	.LVL43:
 251:Src/main.c    **** 	while(Get_TIM15_Ticks() < 10){
 938              		.loc 1 251 2 is_stmt 1 view .LVU196
 939 0014 0020     		movs	r0, #0
 940 0016 FFF7FEFF 		bl	Set_TIM15_Ticks
 941              	.LVL44:
 252:Src/main.c    **** 		/* uint8_t str_buff[32]; */
 942              		.loc 1 252 2 view .LVU197
 943              	.L48:
 256:Src/main.c    **** 	}
 944              		.loc 1 256 3 discriminator 1 view .LVU198
 252:Src/main.c    **** 		/* uint8_t str_buff[32]; */
 945              		.loc 1 252 26 discriminator 1 view .LVU199
 252:Src/main.c    **** 		/* uint8_t str_buff[32]; */
 946              		.loc 1 252 8 is_stmt 0 discriminator 1 view .LVU200
 947 001a FFF7FEFF 		bl	Get_TIM15_Ticks
 948              	.LVL45:
 252:Src/main.c    **** 		/* uint8_t str_buff[32]; */
 949              		.loc 1 252 26 discriminator 1 view .LVU201
 950 001e 0928     		cmp	r0, #9
 951 0020 FBD9     		bls	.L48
 261:Src/main.c    **** 			ultrasonic->trig.pin.Pin,
 952              		.loc 1 261 2 is_stmt 1 view .LVU202
 953 0022 A18B     		ldrh	r1, [r4, #28]
 954 0024 A069     		ldr	r0, [r4, #24]
 955 0026 0022     		movs	r2, #0
 956 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 957              	.LVL46:
 267:Src/main.c    **** 	pMillis = Get_TIM15_Ticks();
 958              		.loc 1 267 2 view .LVU203
 267:Src/main.c    **** 	pMillis = Get_TIM15_Ticks();
 959              		.loc 1 267 14 is_stmt 0 view .LVU204
 960 002c FFF7FEFF 		bl	Get_TIM15_Ticks
 961              	.LVL47:
 267:Src/main.c    **** 	pMillis = Get_TIM15_Ticks();
 962              		.loc 1 267 12 view .LVU205
 963 0030 80B2     		uxth	r0, r0
 964 0032 1A4B     		ldr	r3, .L53
 965 0034 1880     		strh	r0, [r3]
 268:Src/main.c    **** 
 966              		.loc 1 268 2 is_stmt 1 view .LVU206
 268:Src/main.c    **** 
 967              		.loc 1 268 12 is_stmt 0 view .LVU207
 968 0036 FFF7FEFF 		bl	Get_TIM15_Ticks
 969              	.LVL48:
 268:Src/main.c    **** 
 970              		.loc 1 268 10 view .LVU208
 971 003a 194B     		ldr	r3, .L53+4
 972 003c 1860     		str	r0, [r3]
 271:Src/main.c    **** 					ultrasonic->echo.pin.Pin)) && 
 973              		.loc 1 271 2 is_stmt 1 view .LVU209
 974              	.L50:
 272:Src/main.c    **** 			pMillis + 10 > Get_TIM15_Ticks())
 975              		.loc 1 272 33 discriminator 2 view .LVU210
 271:Src/main.c    **** 					ultrasonic->echo.pin.Pin)) && 
ARM GAS  /tmp/ccE2jDiE.s 			page 44


 976              		.loc 1 271 11 is_stmt 0 discriminator 2 view .LVU211
 977 003e A188     		ldrh	r1, [r4, #4]
 978 0040 2068     		ldr	r0, [r4]
 979 0042 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 980              	.LVL49:
 272:Src/main.c    **** 			pMillis + 10 > Get_TIM15_Ticks())
 981              		.loc 1 272 33 discriminator 2 view .LVU212
 982 0046 0028     		cmp	r0, #0
 983 0048 06D1     		bne	.L49
 273:Src/main.c    **** 		;
 984              		.loc 1 273 12 discriminator 1 view .LVU213
 985 004a 154B     		ldr	r3, .L53+4
 986 004c 1D68     		ldr	r5, [r3]
 987 004e 0A35     		adds	r5, r5, #10
 273:Src/main.c    **** 		;
 988              		.loc 1 273 19 discriminator 1 view .LVU214
 989 0050 FFF7FEFF 		bl	Get_TIM15_Ticks
 990              	.LVL50:
 272:Src/main.c    **** 			pMillis + 10 > Get_TIM15_Ticks())
 991              		.loc 1 272 33 discriminator 1 view .LVU215
 992 0054 8542     		cmp	r5, r0
 993 0056 F2D8     		bhi	.L50
 994              	.L49:
 276:Src/main.c    **** 	/* Value1 = (HAL_GetTick() - startTime); */
 995              		.loc 1 276 2 is_stmt 1 view .LVU216
 276:Src/main.c    **** 	/* Value1 = (HAL_GetTick() - startTime); */
 996              		.loc 1 276 11 is_stmt 0 view .LVU217
 997 0058 FFF7FEFF 		bl	Get_TIM15_Ticks
 998              	.LVL51:
 276:Src/main.c    **** 	/* Value1 = (HAL_GetTick() - startTime); */
 999              		.loc 1 276 9 view .LVU218
 1000 005c 80B2     		uxth	r0, r0
 1001 005e 114B     		ldr	r3, .L53+8
 1002 0060 1880     		strh	r0, [r3]
 282:Src/main.c    **** 							 // wait for the echo pin to go low
 1003              		.loc 1 282 2 is_stmt 1 view .LVU219
 282:Src/main.c    **** 							 // wait for the echo pin to go low
 1004              		.loc 1 282 12 is_stmt 0 view .LVU220
 1005 0062 FFF7FEFF 		bl	Get_TIM15_Ticks
 1006              	.LVL52:
 282:Src/main.c    **** 							 // wait for the echo pin to go low
 1007              		.loc 1 282 10 view .LVU221
 1008 0066 0E4B     		ldr	r3, .L53+4
 1009 0068 1860     		str	r0, [r3]
 284:Src/main.c    **** 					ultrasonic->echo.pin.Pin)) && 
 1010              		.loc 1 284 2 is_stmt 1 view .LVU222
 1011              	.L52:
 285:Src/main.c    **** 			pMillis + 50 > Get_TIM15_Ticks())
 1012              		.loc 1 285 33 discriminator 2 view .LVU223
 284:Src/main.c    **** 					ultrasonic->echo.pin.Pin)) && 
 1013              		.loc 1 284 10 is_stmt 0 discriminator 2 view .LVU224
 1014 006a A188     		ldrh	r1, [r4, #4]
 1015 006c 2068     		ldr	r0, [r4]
 1016 006e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1017              	.LVL53:
 285:Src/main.c    **** 			pMillis + 50 > Get_TIM15_Ticks())
 1018              		.loc 1 285 33 discriminator 2 view .LVU225
ARM GAS  /tmp/ccE2jDiE.s 			page 45


 1019 0072 0028     		cmp	r0, #0
 1020 0074 06D0     		beq	.L51
 286:Src/main.c    **** 		;
 1021              		.loc 1 286 12 discriminator 1 view .LVU226
 1022 0076 0A4B     		ldr	r3, .L53+4
 1023 0078 1D68     		ldr	r5, [r3]
 1024 007a 3235     		adds	r5, r5, #50
 286:Src/main.c    **** 		;
 1025              		.loc 1 286 19 discriminator 1 view .LVU227
 1026 007c FFF7FEFF 		bl	Get_TIM15_Ticks
 1027              	.LVL54:
 285:Src/main.c    **** 			pMillis + 50 > Get_TIM15_Ticks())
 1028              		.loc 1 285 33 discriminator 1 view .LVU228
 1029 0080 8542     		cmp	r5, r0
 1030 0082 F2D8     		bhi	.L52
 1031              	.L51:
 291:Src/main.c    **** 
 1032              		.loc 1 291 2 is_stmt 1 view .LVU229
 291:Src/main.c    **** 
 1033              		.loc 1 291 11 is_stmt 0 view .LVU230
 1034 0084 FFF7FEFF 		bl	Get_TIM15_Ticks
 1035              	.LVL55:
 291:Src/main.c    **** 
 1036              		.loc 1 291 9 view .LVU231
 1037 0088 80B2     		uxth	r0, r0
 1038 008a 074B     		ldr	r3, .L53+12
 1039 008c 1880     		strh	r0, [r3]
 294:Src/main.c    **** 	/*
 1040              		.loc 1 294 2 is_stmt 1 view .LVU232
 294:Src/main.c    **** 	/*
 1041              		.loc 1 294 30 is_stmt 0 view .LVU233
 1042 008e 1888     		ldrh	r0, [r3]
 1043 0090 044B     		ldr	r3, .L53+8
 1044 0092 1B88     		ldrh	r3, [r3]
 1045 0094 C01A     		subs	r0, r0, r3
 1046              	.LVL56:
 305:Src/main.c    **** }
 1047              		.loc 1 305 2 is_stmt 1 view .LVU234
 306:Src/main.c    **** void Log(){
 1048              		.loc 1 306 1 is_stmt 0 view .LVU235
 1049 0096 03B0     		add	sp, sp, #12
 1050              		@ sp needed
 1051              	.LVL57:
 306:Src/main.c    **** void Log(){
 1052              		.loc 1 306 1 view .LVU236
 1053 0098 30BD     		pop	{r4, r5, pc}
 1054              	.L54:
 1055 009a C046     		.align	2
 1056              	.L53:
 1057 009c 00000000 		.word	startTime
 1058 00a0 00000000 		.word	pMillis
 1059 00a4 00000000 		.word	Value1
 1060 00a8 00000000 		.word	Value2
 1061              		.cfi_endproc
 1062              	.LFE54:
 1064              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 1065              		.align	2
ARM GAS  /tmp/ccE2jDiE.s 			page 46


 1066              	.LC37:
 1067 0000 556C7472 		.ascii	"Ultrasonic left: %d\012\000"
 1067      61736F6E 
 1067      6963206C 
 1067      6566743A 
 1067      2025640A 
 1068 0015 000000   		.align	2
 1069              	.LC40:
 1070 0018 556C7472 		.ascii	"Ultrasonic right: %d\012\000"
 1070      61736F6E 
 1070      69632072 
 1070      69676874 
 1070      3A202564 
 1071              		.section	.text.Log,"ax",%progbits
 1072              		.align	1
 1073              		.global	Log
 1074              		.syntax unified
 1075              		.code	16
 1076              		.thumb_func
 1078              	Log:
 1079              	.LFB55:
 307:Src/main.c    **** 	uint8_t str_buff[32];
 1080              		.loc 1 307 11 is_stmt 1 view -0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 32
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084 0000 00B5     		push	{lr}
 1085              	.LCFI16:
 1086              		.cfi_def_cfa_offset 4
 1087              		.cfi_offset 14, -4
 1088 0002 89B0     		sub	sp, sp, #36
 1089              	.LCFI17:
 1090              		.cfi_def_cfa_offset 40
 308:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic left: %d\n", GetUltrasonic(&ultrasonic_left_pins));
 1091              		.loc 1 308 2 view .LVU238
 309:Src/main.c    **** 	USART_SendString(str_buff);
 1092              		.loc 1 309 2 view .LVU239
 1093 0004 0B48     		ldr	r0, .L56
 1094 0006 FFF7FEFF 		bl	GetUltrasonic
 1095              	.LVL58:
 1096 000a 0200     		movs	r2, r0
 1097 000c 0A49     		ldr	r1, .L56+4
 1098 000e 6846     		mov	r0, sp
 1099 0010 FFF7FEFF 		bl	sprintf
 1100              	.LVL59:
 310:Src/main.c    **** 
 1101              		.loc 1 310 2 view .LVU240
 1102 0014 6846     		mov	r0, sp
 1103 0016 FFF7FEFF 		bl	USART_SendString
 1104              	.LVL60:
 312:Src/main.c    **** 	USART_SendString(str_buff);
 1105              		.loc 1 312 2 view .LVU241
 1106 001a 0848     		ldr	r0, .L56+8
 1107 001c FFF7FEFF 		bl	GetUltrasonic
 1108              	.LVL61:
 1109 0020 0200     		movs	r2, r0
 1110 0022 0749     		ldr	r1, .L56+12
ARM GAS  /tmp/ccE2jDiE.s 			page 47


 1111 0024 6846     		mov	r0, sp
 1112 0026 FFF7FEFF 		bl	sprintf
 1113              	.LVL62:
 313:Src/main.c    **** }
 1114              		.loc 1 313 2 view .LVU242
 1115 002a 6846     		mov	r0, sp
 1116 002c FFF7FEFF 		bl	USART_SendString
 1117              	.LVL63:
 314:Src/main.c    **** 
 1118              		.loc 1 314 1 is_stmt 0 view .LVU243
 1119 0030 09B0     		add	sp, sp, #36
 1120              		@ sp needed
 1121 0032 00BD     		pop	{pc}
 1122              	.L57:
 1123              		.align	2
 1124              	.L56:
 1125 0034 00000000 		.word	ultrasonic_left_pins
 1126 0038 00000000 		.word	.LC37
 1127 003c 00000000 		.word	ultrasonic_right_pins
 1128 0040 18000000 		.word	.LC40
 1129              		.cfi_endproc
 1130              	.LFE55:
 1132              		.section	.rodata.Proceed.str1.4,"aMS",%progbits,1
 1133              		.align	2
 1134              	.LC42:
 1135 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 1135      79657420 
 1135      696D706C 
 1135      656D656E 
 1135      7465640A 
 1136              		.section	.text.Proceed,"ax",%progbits
 1137              		.align	1
 1138              		.global	Proceed
 1139              		.syntax unified
 1140              		.code	16
 1141              		.thumb_func
 1143              	Proceed:
 1144              	.LFB56:
 316:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 1145              		.loc 1 316 15 is_stmt 1 view -0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149 0000 10B5     		push	{r4, lr}
 1150              	.LCFI18:
 1151              		.cfi_def_cfa_offset 8
 1152              		.cfi_offset 4, -8
 1153              		.cfi_offset 14, -4
 317:Src/main.c    **** 	USART_SendString(err);
 1154              		.loc 1 317 2 view .LVU245
 1155              	.LVL64:
 318:Src/main.c    **** }
 1156              		.loc 1 318 2 view .LVU246
 1157 0002 0248     		ldr	r0, .L59
 1158 0004 FFF7FEFF 		bl	USART_SendString
 1159              	.LVL65:
 319:Src/main.c    **** 
ARM GAS  /tmp/ccE2jDiE.s 			page 48


 1160              		.loc 1 319 1 is_stmt 0 view .LVU247
 1161              		@ sp needed
 1162 0008 10BD     		pop	{r4, pc}
 1163              	.L60:
 1164 000a C046     		.align	2
 1165              	.L59:
 1166 000c 00000000 		.word	.LC42
 1167              		.cfi_endproc
 1168              	.LFE56:
 1170              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 1171              		.align	2
 1172              	.LC59:
 1173 0000 696E6465 		.ascii	"indefinitely\012\000"
 1173      66696E69 
 1173      74656C79 
 1173      0A00
 1174 000e 0000     		.align	2
 1175              	.LC61:
 1176 0010 25640A00 		.ascii	"%d\012\000"
 1177              		.align	2
 1178              	.LC44:
 1179 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 1179      523A2049 
 1179      6E76616C 
 1179      69642063 
 1179      6F6D6D61 
 1180 002d 000000   		.align	2
 1181              	.LC46:
 1182 0030 4D6F7669 		.ascii	"Moving forward \000"
 1182      6E672066 
 1182      6F727761 
 1182      72642000 
 1183              		.align	2
 1184              	.LC48:
 1185 0040 5475726E 		.ascii	"Turning left \000"
 1185      696E6720 
 1185      6C656674 
 1185      2000
 1186 004e 0000     		.align	2
 1187              	.LC50:
 1188 0050 5475726E 		.ascii	"Turning right \000"
 1188      696E6720 
 1188      72696768 
 1188      742000
 1189 005f 00       		.align	2
 1190              	.LC52:
 1191 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 1191      696E6720 
 1191      73656E73 
 1191      6F722064 
 1191      6174610A 
 1192 0075 000000   		.align	2
 1193              	.LC54:
 1194 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 1194      72696E67 
 1194      20617574 
 1194      6F6E6F6D 
ARM GAS  /tmp/ccE2jDiE.s 			page 49


 1194      6F757320 
 1195 0095 000000   		.align	2
 1196              	.LC56:
 1197 0098 53746F70 		.ascii	"Stopping all motors!\012\000"
 1197      70696E67 
 1197      20616C6C 
 1197      206D6F74 
 1197      6F727321 
 1198              		.section	.text.ProcessCommand,"ax",%progbits
 1199              		.align	1
 1200              		.global	ProcessCommand
 1201              		.syntax unified
 1202              		.code	16
 1203              		.thumb_func
 1205              	ProcessCommand:
 1206              	.LVL66:
 1207              	.LFB57:
 321:Src/main.c    **** 	uint32_t left_motor_pin;
 1208              		.loc 1 321 57 is_stmt 1 view -0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 184
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 321:Src/main.c    **** 	uint32_t left_motor_pin;
 1212              		.loc 1 321 57 is_stmt 0 view .LVU249
 1213 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1214              	.LCFI19:
 1215              		.cfi_def_cfa_offset 20
 1216              		.cfi_offset 4, -20
 1217              		.cfi_offset 5, -16
 1218              		.cfi_offset 6, -12
 1219              		.cfi_offset 7, -8
 1220              		.cfi_offset 14, -4
 1221 0002 AFB0     		sub	sp, sp, #188
 1222              	.LCFI20:
 1223              		.cfi_def_cfa_offset 208
 1224 0004 0400     		movs	r4, r0
 1225 0006 0D00     		movs	r5, r1
 322:Src/main.c    **** 	uint32_t right_motor_pin;
 1226              		.loc 1 322 2 is_stmt 1 view .LVU250
 323:Src/main.c    **** 	int32_t CH1_DC = 65535;
 1227              		.loc 1 323 2 view .LVU251
 324:Src/main.c    **** 
 1228              		.loc 1 324 2 view .LVU252
 1229              	.LVL67:
 326:Src/main.c    **** 
 1230              		.loc 1 326 2 view .LVU253
 326:Src/main.c    **** 
 1231              		.loc 1 326 10 is_stmt 0 view .LVU254
 1232 0008 27A9     		add	r1, sp, #156
 1233              	.LVL68:
 326:Src/main.c    **** 
 1234              		.loc 1 326 10 view .LVU255
 1235 000a 5C4B     		ldr	r3, .L78
 1236 000c 0A00     		movs	r2, r1
 1237 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 1238 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 1239              	.LVL69:
ARM GAS  /tmp/ccE2jDiE.s 			page 50


 326:Src/main.c    **** 
 1240              		.loc 1 326 10 view .LVU256
 1241 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 1242 0014 43C2     		stmia	r2!, {r0, r1, r6}
 1243 0016 1B78     		ldrb	r3, [r3]
 1244 0018 1370     		strb	r3, [r2]
 328:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1245              		.loc 1 328 2 is_stmt 1 view .LVU257
 328:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1246              		.loc 1 328 10 is_stmt 0 view .LVU258
 1247 001a 23AA     		add	r2, sp, #140
 1248 001c 584B     		ldr	r3, .L78+4
 1249 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 1250 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 1251 0022 1B68     		ldr	r3, [r3]
 1252 0024 1360     		str	r3, [r2]
 329:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1253              		.loc 1 329 2 is_stmt 1 view .LVU259
 329:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1254              		.loc 1 329 10 is_stmt 0 view .LVU260
 1255 0026 1FAA     		add	r2, sp, #124
 1256 0028 564B     		ldr	r3, .L78+8
 1257 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 1258 002c C1C2     		stmia	r2!, {r0, r6, r7}
 1259 002e 1B88     		ldrh	r3, [r3]
 1260 0030 1380     		strh	r3, [r2]
 330:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1261              		.loc 1 330 2 is_stmt 1 view .LVU261
 330:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1262              		.loc 1 330 10 is_stmt 0 view .LVU262
 1263 0032 1BAA     		add	r2, sp, #108
 1264 0034 544B     		ldr	r3, .L78+12
 1265 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 1266 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 1267 003a 1100     		movs	r1, r2
 1268 003c 1A88     		ldrh	r2, [r3]
 1269 003e 0A80     		strh	r2, [r1]
 1270 0040 9B78     		ldrb	r3, [r3, #2]
 1271 0042 8B70     		strb	r3, [r1, #2]
 331:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1272              		.loc 1 331 2 is_stmt 1 view .LVU263
 331:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1273              		.loc 1 331 10 is_stmt 0 view .LVU264
 1274 0044 15A9     		add	r1, sp, #84
 1275 0046 514B     		ldr	r3, .L78+16
 1276 0048 0A00     		movs	r2, r1
 1277 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 1278 004c C1C2     		stmia	r2!, {r0, r6, r7}
 1279 004e 03CB     		ldmia	r3!, {r0, r1}
 1280 0050 03C2     		stmia	r2!, {r0, r1}
 1281 0052 1B78     		ldrb	r3, [r3]
 1282 0054 1370     		strb	r3, [r2]
 332:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1283              		.loc 1 332 2 is_stmt 1 view .LVU265
 332:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1284              		.loc 1 332 10 is_stmt 0 view .LVU266
 1285 0056 0DA9     		add	r1, sp, #52
ARM GAS  /tmp/ccE2jDiE.s 			page 51


 1286 0058 4D4B     		ldr	r3, .L78+20
 1287 005a 0A00     		movs	r2, r1
 1288 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 1289 005e C1C2     		stmia	r2!, {r0, r6, r7}
 1290 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 1291 0062 43C2     		stmia	r2!, {r0, r1, r6}
 1292 0064 1968     		ldr	r1, [r3]
 1293 0066 1160     		str	r1, [r2]
 1294 0068 1B79     		ldrb	r3, [r3, #4]
 1295 006a 1371     		strb	r3, [r2, #4]
 333:Src/main.c    **** 
 1296              		.loc 1 333 2 is_stmt 1 view .LVU267
 333:Src/main.c    **** 
 1297              		.loc 1 333 10 is_stmt 0 view .LVU268
 1298 006c 07A9     		add	r1, sp, #28
 1299 006e 494B     		ldr	r3, .L78+24
 1300 0070 0A00     		movs	r2, r1
 1301 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 1302 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 1303 0076 03CB     		ldmia	r3!, {r0, r1}
 1304 0078 03C2     		stmia	r2!, {r0, r1}
 1305 007a 1B88     		ldrh	r3, [r3]
 1306 007c 1380     		strh	r3, [r2]
 335:Src/main.c    **** 
 1307              		.loc 1 335 2 is_stmt 1 view .LVU269
 335:Src/main.c    **** 
 1308              		.loc 1 335 15 is_stmt 0 view .LVU270
 1309 007e 06AB     		add	r3, sp, #24
 1310 0080 0022     		movs	r2, #0
 1311 0082 1A80     		strh	r2, [r3]
 337:Src/main.c    **** 	uint8_t part2[15];
 1312              		.loc 1 337 2 is_stmt 1 view .LVU271
 338:Src/main.c    **** 	uint8_t zero = 0;
 1313              		.loc 1 338 2 view .LVU272
 339:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1314              		.loc 1 339 2 view .LVU273
 339:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1315              		.loc 1 339 10 is_stmt 0 view .LVU274
 1316 0084 6B46     		mov	r3, sp
 1317 0086 D91D     		adds	r1, r3, #7
 1318 0088 0023     		movs	r3, #0
 1319 008a 0B70     		strb	r3, [r1]
 340:Src/main.c    **** 
 1320              		.loc 1 340 2 is_stmt 1 view .LVU275
 1321 008c 0F32     		adds	r2, r2, #15
 1322 008e 02A8     		add	r0, sp, #8
 1323 0090 FFF7FEFF 		bl	memcpy
 1324              	.LVL70:
 342:Src/main.c    **** 		case 'w':
 1325              		.loc 1 342 2 view .LVU276
 1326 0094 2300     		movs	r3, r4
 1327 0096 613B     		subs	r3, r3, #97
 1328 0098 DAB2     		uxtb	r2, r3
 1329 009a 172A     		cmp	r2, #23
 1330 009c 53D8     		bhi	.L62
 1331 009e 9300     		lsls	r3, r2, #2
 1332 00a0 3D4A     		ldr	r2, .L78+28
ARM GAS  /tmp/ccE2jDiE.s 			page 52


 1333 00a2 D358     		ldr	r3, [r2, r3]
 1334 00a4 9F46     		mov	pc, r3
 1335              		.section	.rodata.ProcessCommand,"a",%progbits
 1336              		.align	2
 1337              	.L64:
 1338 0000 A6000000 		.word	.L69
 1339 0004 46010000 		.word	.L62
 1340 0008 46010000 		.word	.L62
 1341 000c 04010000 		.word	.L68
 1342 0010 46010000 		.word	.L62
 1343 0014 46010000 		.word	.L62
 1344 0018 46010000 		.word	.L62
 1345 001c 46010000 		.word	.L62
 1346 0020 46010000 		.word	.L62
 1347 0024 46010000 		.word	.L62
 1348 0028 46010000 		.word	.L62
 1349 002c 0E010000 		.word	.L67
 1350 0030 46010000 		.word	.L62
 1351 0034 46010000 		.word	.L62
 1352 0038 46010000 		.word	.L62
 1353 003c 1E010000 		.word	.L66
 1354 0040 46010000 		.word	.L62
 1355 0044 46010000 		.word	.L62
 1356 0048 46010000 		.word	.L62
 1357 004c 46010000 		.word	.L62
 1358 0050 46010000 		.word	.L62
 1359 0054 46010000 		.word	.L62
 1360 0058 52010000 		.word	.L75
 1361 005c 2E010000 		.word	.L63
 1362              		.section	.text.ProcessCommand
 1363              	.L69:
 348:Src/main.c    **** 			motorcmd.dir = LEFT;
 1364              		.loc 1 348 4 view .LVU277
 1365              	.LVL71:
 349:Src/main.c    **** 			break;
 1366              		.loc 1 349 4 view .LVU278
 349:Src/main.c    **** 			break;
 1367              		.loc 1 349 17 is_stmt 0 view .LVU279
 1368 00a6 06AB     		add	r3, sp, #24
 1369 00a8 0122     		movs	r2, #1
 1370 00aa 1A70     		strb	r2, [r3]
 350:Src/main.c    **** 		case 'd':
 1371              		.loc 1 350 4 is_stmt 1 view .LVU280
 348:Src/main.c    **** 			motorcmd.dir = LEFT;
 1372              		.loc 1 348 10 is_stmt 0 view .LVU281
 1373 00ac 1FAE     		add	r6, sp, #124
 1374              	.LVL72:
 1375              	.L65:
 382:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1376              		.loc 1 382 2 is_stmt 1 view .LVU282
 382:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1377              		.loc 1 382 4 is_stmt 0 view .LVU283
 1378 00ae 302D     		cmp	r5, #48
 1379 00b0 51D0     		beq	.L76
 1380              	.L71:
 386:Src/main.c    **** 		USART_SendString(err);
 1381              		.loc 1 386 7 is_stmt 1 view .LVU284
ARM GAS  /tmp/ccE2jDiE.s 			page 53


 386:Src/main.c    **** 		USART_SendString(err);
 1382              		.loc 1 386 25 is_stmt 0 view .LVU285
 1383 00b2 2B00     		movs	r3, r5
 1384 00b4 313B     		subs	r3, r3, #49
 1385 00b6 DBB2     		uxtb	r3, r3
 386:Src/main.c    **** 		USART_SendString(err);
 1386              		.loc 1 386 9 view .LVU286
 1387 00b8 082B     		cmp	r3, #8
 1388 00ba 58D8     		bhi	.L77
 1389              	.LBB17:
 392:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1390              		.loc 1 392 3 is_stmt 1 view .LVU287
 392:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1391              		.loc 1 392 11 is_stmt 0 view .LVU288
 1392 00bc 1424     		movs	r4, #20
 1393 00be 6C43     		muls	r4, r5
 1394 00c0 4034     		adds	r4, r4, #64
 1395 00c2 E4B2     		uxtb	r4, r4
 1396              	.LVL73:
 393:Src/main.c    **** 		motorcmd.amount = dist;
 1397              		.loc 1 393 3 is_stmt 1 view .LVU289
 1398 00c4 3549     		ldr	r1, .L78+32
 1399 00c6 2200     		movs	r2, r4
 1400 00c8 02A8     		add	r0, sp, #8
 1401 00ca FFF7FEFF 		bl	sprintf
 1402              	.LVL74:
 394:Src/main.c    **** 	}
 1403              		.loc 1 394 3 view .LVU290
 394:Src/main.c    **** 	}
 1404              		.loc 1 394 19 is_stmt 0 view .LVU291
 1405 00ce 06AB     		add	r3, sp, #24
 1406 00d0 5C70     		strb	r4, [r3, #1]
 1407              	.LVL75:
 1408              	.L72:
 394:Src/main.c    **** 	}
 1409              		.loc 1 394 19 view .LVU292
 1410              	.LBE17:
 398:Src/main.c    **** 	USART_SendString(part2);
 1411              		.loc 1 398 2 is_stmt 1 view .LVU293
 1412 00d2 3000     		movs	r0, r6
 1413 00d4 FFF7FEFF 		bl	USART_SendString
 1414              	.LVL76:
 399:Src/main.c    **** 
 1415              		.loc 1 399 2 view .LVU294
 1416 00d8 02A8     		add	r0, sp, #8
 1417 00da FFF7FEFF 		bl	USART_SendString
 1418              	.LVL77:
 401:Src/main.c    **** 	HAL_Delay(1000);
 1419              		.loc 1 401 2 view .LVU295
 401:Src/main.c    **** 	HAL_Delay(1000);
 1420              		.loc 1 401 13 is_stmt 0 view .LVU296
 1421 00de 8024     		movs	r4, #128
 1422 00e0 E405     		lsls	r4, r4, #23
 1423 00e2 2F4B     		ldr	r3, .L78+36
 1424 00e4 6363     		str	r3, [r4, #52]
 402:Src/main.c    **** 	TIM2->CCR1 = 0;
 1425              		.loc 1 402 2 is_stmt 1 view .LVU297
ARM GAS  /tmp/ccE2jDiE.s 			page 54


 1426 00e6 FA20     		movs	r0, #250
 1427 00e8 8000     		lsls	r0, r0, #2
 1428 00ea FFF7FEFF 		bl	HAL_Delay
 1429              	.LVL78:
 403:Src/main.c    **** 
 1430              		.loc 1 403 2 view .LVU298
 403:Src/main.c    **** 
 1431              		.loc 1 403 13 is_stmt 0 view .LVU299
 1432 00ee 0023     		movs	r3, #0
 1433 00f0 6363     		str	r3, [r4, #52]
 405:Src/main.c    **** 	USART_SendString(result);
 1434              		.loc 1 405 2 is_stmt 1 view .LVU300
 405:Src/main.c    **** 	USART_SendString(result);
 1435              		.loc 1 405 20 is_stmt 0 view .LVU301
 1436 00f2 06A8     		add	r0, sp, #24
 1437 00f4 FFF7FEFF 		bl	MoveMotors
 1438              	.LVL79:
 406:Src/main.c    **** 
 1439              		.loc 1 406 2 is_stmt 1 view .LVU302
 1440 00f8 FFF7FEFF 		bl	USART_SendString
 1441              	.LVL80:
 408:Src/main.c    **** 
 1442              		.loc 1 408 2 view .LVU303
 1443 00fc FFF7FEFF 		bl	ClearCommand
 1444              	.LVL81:
 1445              	.L61:
 427:Src/main.c    **** 
 1446              		.loc 1 427 1 is_stmt 0 view .LVU304
 1447 0100 2FB0     		add	sp, sp, #188
 1448              		@ sp needed
 1449 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 1450              	.L68:
 352:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1451              		.loc 1 352 4 is_stmt 1 view .LVU305
 1452              	.LVL82:
 353:Src/main.c    **** 			break;
 1453              		.loc 1 353 4 view .LVU306
 353:Src/main.c    **** 			break;
 1454              		.loc 1 353 17 is_stmt 0 view .LVU307
 1455 0104 06AB     		add	r3, sp, #24
 1456 0106 0222     		movs	r2, #2
 1457 0108 1A70     		strb	r2, [r3]
 354:Src/main.c    **** 		case 'l':
 1458              		.loc 1 354 4 is_stmt 1 view .LVU308
 352:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1459              		.loc 1 352 10 is_stmt 0 view .LVU309
 1460 010a 1BAE     		add	r6, sp, #108
 1461              	.LVL83:
 354:Src/main.c    **** 		case 'l':
 1462              		.loc 1 354 4 view .LVU310
 1463 010c CFE7     		b	.L65
 1464              	.LVL84:
 1465              	.L67:
 356:Src/main.c    **** 			USART_SendString(part1);
 1466              		.loc 1 356 4 is_stmt 1 view .LVU311
 357:Src/main.c    **** 			Log();
 1467              		.loc 1 357 4 view .LVU312
ARM GAS  /tmp/ccE2jDiE.s 			page 55


 1468 010e 15A8     		add	r0, sp, #84
 1469              	.LVL85:
 357:Src/main.c    **** 			Log();
 1470              		.loc 1 357 4 is_stmt 0 view .LVU313
 1471 0110 FFF7FEFF 		bl	USART_SendString
 1472              	.LVL86:
 358:Src/main.c    **** 			ClearCommand();
 1473              		.loc 1 358 4 is_stmt 1 view .LVU314
 1474 0114 FFF7FEFF 		bl	Log
 1475              	.LVL87:
 359:Src/main.c    **** 			return;
 1476              		.loc 1 359 4 view .LVU315
 1477 0118 FFF7FEFF 		bl	ClearCommand
 1478              	.LVL88:
 360:Src/main.c    **** 		case 'p':
 1479              		.loc 1 360 4 view .LVU316
 1480 011c F0E7     		b	.L61
 1481              	.LVL89:
 1482              	.L66:
 362:Src/main.c    **** 			USART_SendString(part1);
 1483              		.loc 1 362 4 view .LVU317
 363:Src/main.c    **** 			Proceed();
 1484              		.loc 1 363 4 view .LVU318
 1485 011e 0DA8     		add	r0, sp, #52
 1486              	.LVL90:
 363:Src/main.c    **** 			Proceed();
 1487              		.loc 1 363 4 is_stmt 0 view .LVU319
 1488 0120 FFF7FEFF 		bl	USART_SendString
 1489              	.LVL91:
 364:Src/main.c    **** 			ClearCommand();
 1490              		.loc 1 364 4 is_stmt 1 view .LVU320
 1491 0124 FFF7FEFF 		bl	Proceed
 1492              	.LVL92:
 365:Src/main.c    **** 			return;
 1493              		.loc 1 365 4 view .LVU321
 1494 0128 FFF7FEFF 		bl	ClearCommand
 1495              	.LVL93:
 366:Src/main.c    **** 		case 'x':
 1496              		.loc 1 366 4 view .LVU322
 1497 012c E8E7     		b	.L61
 1498              	.LVL94:
 1499              	.L63:
 368:Src/main.c    **** 			USART_SendString(part1);
 1500              		.loc 1 368 4 view .LVU323
 369:Src/main.c    **** 			motorcmd.dir = OFF;
 1501              		.loc 1 369 4 view .LVU324
 1502 012e 07A8     		add	r0, sp, #28
 1503              	.LVL95:
 369:Src/main.c    **** 			motorcmd.dir = OFF;
 1504              		.loc 1 369 4 is_stmt 0 view .LVU325
 1505 0130 FFF7FEFF 		bl	USART_SendString
 1506              	.LVL96:
 370:Src/main.c    **** 			ClearCommand();
 1507              		.loc 1 370 4 is_stmt 1 view .LVU326
 370:Src/main.c    **** 			ClearCommand();
 1508              		.loc 1 370 17 is_stmt 0 view .LVU327
 1509 0134 06AC     		add	r4, sp, #24
ARM GAS  /tmp/ccE2jDiE.s 			page 56


 1510 0136 0423     		movs	r3, #4
 1511 0138 2370     		strb	r3, [r4]
 371:Src/main.c    **** 			MoveMotors(&motorcmd);
 1512              		.loc 1 371 4 is_stmt 1 view .LVU328
 1513 013a FFF7FEFF 		bl	ClearCommand
 1514              	.LVL97:
 372:Src/main.c    **** 			return;
 1515              		.loc 1 372 4 view .LVU329
 1516 013e 2000     		movs	r0, r4
 1517 0140 FFF7FEFF 		bl	MoveMotors
 1518              	.LVL98:
 373:Src/main.c    **** 		default:
 1519              		.loc 1 373 4 view .LVU330
 1520 0144 DCE7     		b	.L61
 1521              	.LVL99:
 1522              	.L62:
 375:Src/main.c    **** 			ClearCommand();
 1523              		.loc 1 375 4 view .LVU331
 1524 0146 27A8     		add	r0, sp, #156
 1525 0148 FFF7FEFF 		bl	USART_SendString
 1526              	.LVL100:
 376:Src/main.c    **** 			return;
 1527              		.loc 1 376 4 view .LVU332
 1528 014c FFF7FEFF 		bl	ClearCommand
 1529              	.LVL101:
 377:Src/main.c    **** 	}
 1530              		.loc 1 377 4 view .LVU333
 1531 0150 D6E7     		b	.L61
 1532              	.L75:
 342:Src/main.c    **** 		case 'w':
 1533              		.loc 1 342 2 is_stmt 0 view .LVU334
 1534 0152 23AE     		add	r6, sp, #140
 1535 0154 ABE7     		b	.L65
 1536              	.LVL102:
 1537              	.L76:
 382:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1538              		.loc 1 382 21 discriminator 1 view .LVU335
 1539 0156 772C     		cmp	r4, #119
 1540 0158 ABD1     		bne	.L71
 383:Src/main.c    **** 		motorcmd.amount = 0;
 1541              		.loc 1 383 3 is_stmt 1 view .LVU336
 1542 015a 02AA     		add	r2, sp, #8
 1543 015c 114B     		ldr	r3, .L78+40
 1544 015e 31CB     		ldmia	r3!, {r0, r4, r5}
 1545 0160 31C2     		stmia	r2!, {r0, r4, r5}
 1546 0162 1B88     		ldrh	r3, [r3]
 1547 0164 1380     		strh	r3, [r2]
 384:Src/main.c    **** 	}
 1548              		.loc 1 384 3 view .LVU337
 384:Src/main.c    **** 	}
 1549              		.loc 1 384 19 is_stmt 0 view .LVU338
 1550 0166 06AB     		add	r3, sp, #24
 1551 0168 0022     		movs	r2, #0
 1552 016a 5A70     		strb	r2, [r3, #1]
 1553 016c B1E7     		b	.L72
 1554              	.L77:
 387:Src/main.c    **** 		ClearCommand();
ARM GAS  /tmp/ccE2jDiE.s 			page 57


 1555              		.loc 1 387 3 is_stmt 1 view .LVU339
 1556 016e 27A8     		add	r0, sp, #156
 1557 0170 FFF7FEFF 		bl	USART_SendString
 1558              	.LVL103:
 388:Src/main.c    **** 		return;
 1559              		.loc 1 388 3 view .LVU340
 1560 0174 FFF7FEFF 		bl	ClearCommand
 1561              	.LVL104:
 389:Src/main.c    **** 	}
 1562              		.loc 1 389 3 view .LVU341
 1563 0178 C2E7     		b	.L61
 1564              	.L79:
 1565 017a C046     		.align	2
 1566              	.L78:
 1567 017c 14000000 		.word	.LC44
 1568 0180 30000000 		.word	.LC46
 1569 0184 40000000 		.word	.LC48
 1570 0188 50000000 		.word	.LC50
 1571 018c 60000000 		.word	.LC52
 1572 0190 78000000 		.word	.LC54
 1573 0194 98000000 		.word	.LC56
 1574 0198 00000000 		.word	.L64
 1575 019c 10000000 		.word	.LC61
 1576 01a0 FFFF0000 		.word	65535
 1577 01a4 00000000 		.word	.LC59
 1578              		.cfi_endproc
 1579              	.LFE57:
 1581              		.global	__aeabi_f2d
 1582              		.section	.rodata.PrintDistance.str1.4,"aMS",%progbits,1
 1583              		.align	2
 1584              	.LC63:
 1585 0000 25660A00 		.ascii	"%f\012\000"
 1586              		.section	.text.PrintDistance,"ax",%progbits
 1587              		.align	1
 1588              		.global	PrintDistance
 1589              		.syntax unified
 1590              		.code	16
 1591              		.thumb_func
 1593              	PrintDistance:
 1594              	.LFB58:
 467:Src/main.c    **** 	char dist[32] = "";
 1595              		.loc 1 467 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 32
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 1599 0000 00B5     		push	{lr}
 1600              	.LCFI21:
 1601              		.cfi_def_cfa_offset 4
 1602              		.cfi_offset 14, -4
 1603 0002 89B0     		sub	sp, sp, #36
 1604              	.LCFI22:
 1605              		.cfi_def_cfa_offset 40
 468:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 1606              		.loc 1 468 2 view .LVU343
 468:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 1607              		.loc 1 468 7 is_stmt 0 view .LVU344
 1608 0004 0023     		movs	r3, #0
ARM GAS  /tmp/ccE2jDiE.s 			page 58


 1609 0006 0093     		str	r3, [sp]
 1610 0008 1C22     		movs	r2, #28
 1611 000a 0021     		movs	r1, #0
 1612 000c 01A8     		add	r0, sp, #4
 1613 000e FFF7FEFF 		bl	memset
 1614              	.LVL105:
 469:Src/main.c    **** 	USART_SendString(dist);
 1615              		.loc 1 469 2 is_stmt 1 view .LVU345
 469:Src/main.c    **** 	USART_SendString(dist);
 1616              		.loc 1 469 24 is_stmt 0 view .LVU346
 1617 0012 FFF7FEFF 		bl	get_distance
 1618              	.LVL106:
 469:Src/main.c    **** 	USART_SendString(dist);
 1619              		.loc 1 469 2 view .LVU347
 1620 0016 FFF7FEFF 		bl	__aeabi_f2d
 1621              	.LVL107:
 1622 001a 0200     		movs	r2, r0
 1623 001c 0B00     		movs	r3, r1
 1624 001e 0449     		ldr	r1, .L81
 1625 0020 6846     		mov	r0, sp
 1626 0022 FFF7FEFF 		bl	sprintf
 1627              	.LVL108:
 470:Src/main.c    **** }
 1628              		.loc 1 470 2 is_stmt 1 view .LVU348
 1629 0026 6846     		mov	r0, sp
 1630 0028 FFF7FEFF 		bl	USART_SendString
 1631              	.LVL109:
 471:Src/main.c    **** 
 1632              		.loc 1 471 1 is_stmt 0 view .LVU349
 1633 002c 09B0     		add	sp, sp, #36
 1634              		@ sp needed
 1635 002e 00BD     		pop	{pc}
 1636              	.L82:
 1637              		.align	2
 1638              	.L81:
 1639 0030 00000000 		.word	.LC63
 1640              		.cfi_endproc
 1641              	.LFE58:
 1643              		.section	.text.Error_Handler,"ax",%progbits
 1644              		.align	1
 1645              		.global	Error_Handler
 1646              		.syntax unified
 1647              		.code	16
 1648              		.thumb_func
 1650              	Error_Handler:
 1651              	.LFB63:
 683:Src/main.c    **** 
 684:Src/main.c    **** /* USER CODE BEGIN 4 */
 685:Src/main.c    **** 
 686:Src/main.c    **** /* USER CODE END 4 */
 687:Src/main.c    **** 
 688:Src/main.c    **** /**
 689:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 690:Src/main.c    ****  * @retval None
 691:Src/main.c    ****  */
 692:Src/main.c    **** void Error_Handler(void)
 693:Src/main.c    **** {
ARM GAS  /tmp/ccE2jDiE.s 			page 59


 1652              		.loc 1 693 1 is_stmt 1 view -0
 1653              		.cfi_startproc
 1654              		@ Volatile: function does not return.
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657              		@ link register save eliminated.
 694:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 695:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 696:Src/main.c    **** 	__disable_irq();
 1658              		.loc 1 696 2 view .LVU351
 1659              	.LBB18:
 1660              	.LBI18:
 1661              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
ARM GAS  /tmp/ccE2jDiE.s 			page 60


  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccE2jDiE.s 			page 61


 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1662              		.loc 3 140 27 view .LVU352
 1663              	.LBB19:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1664              		.loc 3 142 3 view .LVU353
 1665              		.syntax divided
 1666              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1667 0000 72B6     		cpsid i
 1668              	@ 0 "" 2
 1669              		.thumb
 1670              		.syntax unified
 1671              	.L84:
 1672              	.LBE19:
 1673              	.LBE18:
 697:Src/main.c    **** 	while (1)
 1674              		.loc 1 697 2 discriminator 1 view .LVU354
 698:Src/main.c    **** 	{
 699:Src/main.c    **** 	}
ARM GAS  /tmp/ccE2jDiE.s 			page 62


 1675              		.loc 1 699 2 discriminator 1 view .LVU355
 697:Src/main.c    **** 	while (1)
 1676              		.loc 1 697 8 discriminator 1 view .LVU356
 1677 0002 FEE7     		b	.L84
 1678              		.cfi_endproc
 1679              	.LFE63:
 1681              		.section	.text.SystemClock_Config,"ax",%progbits
 1682              		.align	1
 1683              		.global	SystemClock_Config
 1684              		.syntax unified
 1685              		.code	16
 1686              		.thumb_func
 1688              	SystemClock_Config:
 1689              	.LFB60:
 536:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1690              		.loc 1 536 1 view -0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 72
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694 0000 00B5     		push	{lr}
 1695              	.LCFI23:
 1696              		.cfi_def_cfa_offset 4
 1697              		.cfi_offset 14, -4
 1698 0002 93B0     		sub	sp, sp, #76
 1699              	.LCFI24:
 1700              		.cfi_def_cfa_offset 80
 537:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1701              		.loc 1 537 2 view .LVU358
 537:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1702              		.loc 1 537 21 is_stmt 0 view .LVU359
 1703 0004 3422     		movs	r2, #52
 1704 0006 0021     		movs	r1, #0
 1705 0008 05A8     		add	r0, sp, #20
 1706 000a FFF7FEFF 		bl	memset
 1707              	.LVL110:
 538:Src/main.c    **** 
 1708              		.loc 1 538 2 is_stmt 1 view .LVU360
 538:Src/main.c    **** 
 1709              		.loc 1 538 21 is_stmt 0 view .LVU361
 1710 000e 1022     		movs	r2, #16
 1711 0010 0021     		movs	r1, #0
 1712 0012 01A8     		add	r0, sp, #4
 1713 0014 FFF7FEFF 		bl	memset
 1714              	.LVL111:
 543:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1715              		.loc 1 543 2 is_stmt 1 view .LVU362
 543:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1716              		.loc 1 543 35 is_stmt 0 view .LVU363
 1717 0018 0223     		movs	r3, #2
 1718 001a 0593     		str	r3, [sp, #20]
 544:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1719              		.loc 1 544 2 is_stmt 1 view .LVU364
 544:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1720              		.loc 1 544 29 is_stmt 0 view .LVU365
 1721 001c 013B     		subs	r3, r3, #1
 1722 001e 0893     		str	r3, [sp, #32]
 545:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
ARM GAS  /tmp/ccE2jDiE.s 			page 63


 1723              		.loc 1 545 2 is_stmt 1 view .LVU366
 545:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1724              		.loc 1 545 40 is_stmt 0 view .LVU367
 1725 0020 0F33     		adds	r3, r3, #15
 1726 0022 0993     		str	r3, [sp, #36]
 546:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1727              		.loc 1 546 2 is_stmt 1 view .LVU368
 547:Src/main.c    **** 	{
 1728              		.loc 1 547 2 view .LVU369
 547:Src/main.c    **** 	{
 1729              		.loc 1 547 6 is_stmt 0 view .LVU370
 1730 0024 05A8     		add	r0, sp, #20
 1731 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1732              	.LVL112:
 547:Src/main.c    **** 	{
 1733              		.loc 1 547 5 view .LVU371
 1734 002a 0028     		cmp	r0, #0
 1735 002c 0DD1     		bne	.L88
 554:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1736              		.loc 1 554 2 is_stmt 1 view .LVU372
 554:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1737              		.loc 1 554 30 is_stmt 0 view .LVU373
 1738 002e 0723     		movs	r3, #7
 1739 0030 0193     		str	r3, [sp, #4]
 556:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1740              		.loc 1 556 2 is_stmt 1 view .LVU374
 556:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1741              		.loc 1 556 33 is_stmt 0 view .LVU375
 1742 0032 0023     		movs	r3, #0
 1743 0034 0293     		str	r3, [sp, #8]
 557:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1744              		.loc 1 557 2 is_stmt 1 view .LVU376
 557:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1745              		.loc 1 557 34 is_stmt 0 view .LVU377
 1746 0036 0393     		str	r3, [sp, #12]
 558:Src/main.c    **** 
 1747              		.loc 1 558 2 is_stmt 1 view .LVU378
 558:Src/main.c    **** 
 1748              		.loc 1 558 35 is_stmt 0 view .LVU379
 1749 0038 0493     		str	r3, [sp, #16]
 560:Src/main.c    **** 	{
 1750              		.loc 1 560 2 is_stmt 1 view .LVU380
 560:Src/main.c    **** 	{
 1751              		.loc 1 560 6 is_stmt 0 view .LVU381
 1752 003a 0021     		movs	r1, #0
 1753 003c 01A8     		add	r0, sp, #4
 1754 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1755              	.LVL113:
 560:Src/main.c    **** 	{
 1756              		.loc 1 560 5 view .LVU382
 1757 0042 0028     		cmp	r0, #0
 1758 0044 03D1     		bne	.L89
 564:Src/main.c    **** 
 1759              		.loc 1 564 1 view .LVU383
 1760 0046 13B0     		add	sp, sp, #76
 1761              		@ sp needed
 1762 0048 00BD     		pop	{pc}
ARM GAS  /tmp/ccE2jDiE.s 			page 64


 1763              	.L88:
 549:Src/main.c    **** 	}
 1764              		.loc 1 549 3 is_stmt 1 view .LVU384
 1765 004a FFF7FEFF 		bl	Error_Handler
 1766              	.LVL114:
 1767              	.L89:
 562:Src/main.c    **** 	}
 1768              		.loc 1 562 3 view .LVU385
 1769 004e FFF7FEFF 		bl	Error_Handler
 1770              	.LVL115:
 1771              		.cfi_endproc
 1772              	.LFE60:
 1774              		.section	.text.main,"ax",%progbits
 1775              		.align	1
 1776              		.global	main
 1777              		.syntax unified
 1778              		.code	16
 1779              		.thumb_func
 1781              	main:
 1782              	.LFB59:
 481:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1783              		.loc 1 481 1 view -0
 1784              		.cfi_startproc
 1785              		@ Volatile: function does not return.
 1786              		@ args = 0, pretend = 0, frame = 8
 1787              		@ frame_needed = 0, uses_anonymous_args = 0
 1788 0000 10B5     		push	{r4, lr}
 1789              	.LCFI25:
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 4, -8
 1792              		.cfi_offset 14, -4
 1793 0002 82B0     		sub	sp, sp, #8
 1794              	.LCFI26:
 1795              		.cfi_def_cfa_offset 16
 482:Src/main.c    **** 	SystemClock_Config();
 1796              		.loc 1 482 2 view .LVU387
 1797 0004 FFF7FEFF 		bl	HAL_Init
 1798              	.LVL116:
 483:Src/main.c    **** 
 1799              		.loc 1 483 2 view .LVU388
 1800 0008 FFF7FEFF 		bl	SystemClock_Config
 1801              	.LVL117:
 486:Src/main.c    **** 	USART_Init();
 1802              		.loc 1 486 2 view .LVU389
 1803 000c FFF7FEFF 		bl	GPIO_AF_Init
 1804              	.LVL118:
 487:Src/main.c    **** 	TIM15_Init();
 1805              		.loc 1 487 2 view .LVU390
 1806 0010 FFF7FEFF 		bl	USART_Init
 1807              	.LVL119:
 488:Src/main.c    **** 
 1808              		.loc 1 488 2 view .LVU391
 1809 0014 FFF7FEFF 		bl	TIM15_Init
 1810              	.LVL120:
 490:Src/main.c    **** 
 1811              		.loc 1 490 2 view .LVU392
 1812 0018 FFF7FEFF 		bl	motor_init
ARM GAS  /tmp/ccE2jDiE.s 			page 65


 1813              	.LVL121:
 492:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 1814              		.loc 1 492 2 view .LVU393
 1815              	.LBB20:
 1816              	.LBI20:
 623:Drivers/CMSIS/Include/core_cm0.h **** {
 1817              		.loc 2 623 22 view .LVU394
 1818              	.LBB21:
 625:Drivers/CMSIS/Include/core_cm0.h ****   {
 1819              		.loc 2 625 3 view .LVU395
 1820              		.loc 2 627 5 view .LVU396
 1821              		.loc 2 627 20 is_stmt 0 view .LVU397
 1822 001c 244B     		ldr	r3, .L94
 1823 001e 8022     		movs	r2, #128
 1824 0020 9205     		lsls	r2, r2, #22
 1825 0022 1A60     		str	r2, [r3]
 1826              	.LVL122:
 1827              		.loc 2 627 20 view .LVU398
 1828              	.LBE21:
 1829              	.LBE20:
 493:Src/main.c    **** 
 1830              		.loc 1 493 2 is_stmt 1 view .LVU399
 1831              	.LBB22:
 1832              	.LBI22:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  /tmp/ccE2jDiE.s 			page 66


 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/ccE2jDiE.s 			page 67


 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1833              		.loc 2 730 22 view .LVU400
 1834              	.LBB23:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1835              		.loc 2 732 3 view .LVU401
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1836              		.loc 2 734 5 view .LVU402
 1837              		.loc 2 734 52 is_stmt 0 view .LVU403
 1838 0024 C720     		movs	r0, #199
 1839 0026 8000     		lsls	r0, r0, #2
 1840 0028 1958     		ldr	r1, [r3, r0]
 1841              		.loc 2 734 33 view .LVU404
 1842 002a 224A     		ldr	r2, .L94+4
 1843 002c 1140     		ands	r1, r2
 1844              		.loc 2 734 102 view .LVU405
 1845 002e 8022     		movs	r2, #128
 1846 0030 D201     		lsls	r2, r2, #7
 1847 0032 0A43     		orrs	r2, r1
 1848              		.loc 2 734 30 view .LVU406
 1849 0034 1A50     		str	r2, [r3, r0]
 1850              	.LVL123:
 1851              		.loc 2 734 30 view .LVU407
 1852              	.LBE23:
 1853              	.LBE22:
 495:Src/main.c    **** 
 1854              		.loc 1 495 2 is_stmt 1 view .LVU408
 495:Src/main.c    **** 
 1855              		.loc 1 495 10 is_stmt 0 view .LVU409
 1856 0036 204B     		ldr	r3, .L94+8
 1857 0038 1A68     		ldr	r2, [r3]
 1858 003a 0092     		str	r2, [sp]
 1859 003c 9B88     		ldrh	r3, [r3, #4]
 1860 003e 6A46     		mov	r2, sp
 1861 0040 9380     		strh	r3, [r2, #4]
 498:Src/main.c    **** 	/* MX_TIM1_Init(); */
 1862              		.loc 1 498 2 is_stmt 1 view .LVU410
 1863 0042 FFF7FEFF 		bl	MX_GPIO_Init
 1864              	.LVL124:
 502:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1865              		.loc 1 502 2 view .LVU411
 1866 0046 8021     		movs	r1, #128
 1867 0048 1C4C     		ldr	r4, .L94+12
 1868 004a 0022     		movs	r2, #0
ARM GAS  /tmp/ccE2jDiE.s 			page 68


 1869 004c 0901     		lsls	r1, r1, #4
 1870 004e 2000     		movs	r0, r4
 1871 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1872              	.LVL125:
 503:Src/main.c    **** 
 1873              		.loc 1 503 2 view .LVU412
 1874 0054 8021     		movs	r1, #128
 1875 0056 0022     		movs	r2, #0
 1876 0058 8901     		lsls	r1, r1, #6
 1877 005a 2000     		movs	r0, r4
 1878 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1879              	.LVL126:
 1880 0060 0EE0     		b	.L93
 1881              	.L92:
 513:Src/main.c    **** 			{
 1882              		.loc 1 513 4 view .LVU413
 513:Src/main.c    **** 			{
 1883              		.loc 1 513 14 is_stmt 0 view .LVU414
 1884 0062 174B     		ldr	r3, .L94+16
 1885 0064 5B78     		ldrb	r3, [r3, #1]
 513:Src/main.c    **** 			{
 1886              		.loc 1 513 6 view .LVU415
 1887 0066 002B     		cmp	r3, #0
 1888 0068 06D0     		beq	.L91
 515:Src/main.c    **** 			}
 1889              		.loc 1 515 5 is_stmt 1 view .LVU416
 515:Src/main.c    **** 			}
 1890              		.loc 1 515 27 is_stmt 0 view .LVU417
 1891 006a 154B     		ldr	r3, .L94+16
 1892 006c 1878     		ldrb	r0, [r3]
 1893 006e C0B2     		uxtb	r0, r0
 515:Src/main.c    **** 			}
 1894              		.loc 1 515 39 view .LVU418
 1895 0070 5978     		ldrb	r1, [r3, #1]
 1896 0072 C9B2     		uxtb	r1, r1
 515:Src/main.c    **** 			}
 1897              		.loc 1 515 5 view .LVU419
 1898 0074 FFF7FEFF 		bl	ProcessCommand
 1899              	.LVL127:
 1900              	.L91:
 527:Src/main.c    **** 	}
 1901              		.loc 1 527 3 is_stmt 1 view .LVU420
 1902 0078 FA20     		movs	r0, #250
 1903 007a 4000     		lsls	r0, r0, #1
 1904 007c FFF7FEFF 		bl	HAL_Delay
 1905              	.LVL128:
 505:Src/main.c    **** 		if(incomingCommand)
 1906              		.loc 1 505 8 view .LVU421
 1907              	.L93:
 505:Src/main.c    **** 		if(incomingCommand)
 1908              		.loc 1 505 2 view .LVU422
 506:Src/main.c    **** 		{
 1909              		.loc 1 506 3 view .LVU423
 506:Src/main.c    **** 		{
 1910              		.loc 1 506 6 is_stmt 0 view .LVU424
 1911 0080 104B     		ldr	r3, .L94+20
 1912 0082 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/ccE2jDiE.s 			page 69


 506:Src/main.c    **** 		{
 1913              		.loc 1 506 5 view .LVU425
 1914 0084 002B     		cmp	r3, #0
 1915 0086 F7D0     		beq	.L91
 508:Src/main.c    **** 					command[0] != 'a' &&
 1916              		.loc 1 508 4 is_stmt 1 view .LVU426
 508:Src/main.c    **** 					command[0] != 'a' &&
 1917              		.loc 1 508 14 is_stmt 0 view .LVU427
 1918 0088 0D4B     		ldr	r3, .L94+16
 1919 008a 1B78     		ldrb	r3, [r3]
 508:Src/main.c    **** 					command[0] != 'a' &&
 1920              		.loc 1 508 6 view .LVU428
 1921 008c 772B     		cmp	r3, #119
 1922 008e E8D0     		beq	.L92
 509:Src/main.c    **** 					command[0] != 'd'){
 1923              		.loc 1 509 13 discriminator 1 view .LVU429
 1924 0090 0B4B     		ldr	r3, .L94+16
 1925 0092 1B78     		ldrb	r3, [r3]
 508:Src/main.c    **** 					command[0] != 'a' &&
 1926              		.loc 1 508 25 discriminator 1 view .LVU430
 1927 0094 612B     		cmp	r3, #97
 1928 0096 E4D0     		beq	.L92
 510:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 1929              		.loc 1 510 13 view .LVU431
 1930 0098 094B     		ldr	r3, .L94+16
 1931 009a 1B78     		ldrb	r3, [r3]
 509:Src/main.c    **** 					command[0] != 'd'){
 1932              		.loc 1 509 24 view .LVU432
 1933 009c 642B     		cmp	r3, #100
 1934 009e E0D0     		beq	.L92
 511:Src/main.c    **** 			}
 1935              		.loc 1 511 5 is_stmt 1 view .LVU433
 511:Src/main.c    **** 			}
 1936              		.loc 1 511 27 is_stmt 0 view .LVU434
 1937 00a0 074B     		ldr	r3, .L94+16
 1938 00a2 1878     		ldrb	r0, [r3]
 1939 00a4 C0B2     		uxtb	r0, r0
 511:Src/main.c    **** 			}
 1940              		.loc 1 511 5 view .LVU435
 1941 00a6 0021     		movs	r1, #0
 1942 00a8 FFF7FEFF 		bl	ProcessCommand
 1943              	.LVL129:
 1944 00ac D9E7     		b	.L92
 1945              	.L95:
 1946 00ae C046     		.align	2
 1947              	.L94:
 1948 00b0 00E100E0 		.word	-536813312
 1949 00b4 FF00FFFF 		.word	-65281
 1950 00b8 00000000 		.word	.LC21
 1951 00bc 00040048 		.word	1207960576
 1952 00c0 00000000 		.word	command
 1953 00c4 00000000 		.word	incomingCommand
 1954              		.cfi_endproc
 1955              	.LFE59:
 1957              		.global	distance
 1958              		.section	.bss.distance,"aw",%nobits
 1959              		.align	2
ARM GAS  /tmp/ccE2jDiE.s 			page 70


 1962              	distance:
 1963 0000 00000000 		.space	4
 1964              		.global	Difference
 1965              		.section	.bss.Difference,"aw",%nobits
 1966              		.align	2
 1969              	Difference:
 1970 0000 00000000 		.space	4
 1971              		.global	IC_Val2
 1972              		.section	.bss.IC_Val2,"aw",%nobits
 1973              		.align	2
 1976              	IC_Val2:
 1977 0000 00000000 		.space	4
 1978              		.global	IC_Val1
 1979              		.section	.bss.IC_Val1,"aw",%nobits
 1980              		.align	2
 1983              	IC_Val1:
 1984 0000 00000000 		.space	4
 1985              		.global	first_captured
 1986              		.section	.bss.first_captured,"aw",%nobits
 1989              	first_captured:
 1990 0000 00       		.space	1
 1991              		.global	incomingCommand
 1992              		.section	.bss.incomingCommand,"aw",%nobits
 1995              	incomingCommand:
 1996 0000 00       		.space	1
 1997              		.global	command
 1998              		.section	.bss.command,"aw",%nobits
 1999              		.align	2
 2002              	command:
 2003 0000 000000   		.space	3
 2004              		.global	rightDistance
 2005              		.section	.bss.rightDistance,"aw",%nobits
 2006              		.align	1
 2009              	rightDistance:
 2010 0000 0000     		.space	2
 2011              		.global	leftDistance
 2012              		.section	.bss.leftDistance,"aw",%nobits
 2013              		.align	1
 2016              	leftDistance:
 2017 0000 0000     		.space	2
 2018              		.global	Value2
 2019              		.section	.bss.Value2,"aw",%nobits
 2020              		.align	1
 2023              	Value2:
 2024 0000 0000     		.space	2
 2025              		.global	Value1
 2026              		.section	.bss.Value1,"aw",%nobits
 2027              		.align	1
 2030              	Value1:
 2031 0000 0000     		.space	2
 2032              		.global	startTime
 2033              		.section	.bss.startTime,"aw",%nobits
 2034              		.align	1
 2037              	startTime:
 2038 0000 0000     		.space	2
 2039              		.global	pMillis
 2040              		.section	.bss.pMillis,"aw",%nobits
ARM GAS  /tmp/ccE2jDiE.s 			page 71


 2041              		.align	2
 2044              	pMillis:
 2045 0000 00000000 		.space	4
 2046              		.global	htim1
 2047              		.section	.bss.htim1,"aw",%nobits
 2048              		.align	2
 2051              	htim1:
 2052 0000 00000000 		.space	64
 2052      00000000 
 2052      00000000 
 2052      00000000 
 2052      00000000 
 2053              		.text
 2054              	.Letext0:
 2055              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2056              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2057              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2058              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2059              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2060              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2061              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2062              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2063              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2064              		.file 13 "Inc/pins.h"
 2065              		.file 14 "Inc/motor.h"
 2066              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2067              		.file 16 "/usr/arm-none-eabi/include/string.h"
 2068              		.file 17 "/usr/arm-none-eabi/include/stdio.h"
 2069              		.file 18 "<built-in>"
ARM GAS  /tmp/ccE2jDiE.s 			page 72


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccE2jDiE.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccE2jDiE.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccE2jDiE.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/ccE2jDiE.s:102    .text.LED_Init:00000000 $t
     /tmp/ccE2jDiE.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/ccE2jDiE.s:151    .text.LED_Init:00000024 $d
     /tmp/ccE2jDiE.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccE2jDiE.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccE2jDiE.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/ccE2jDiE.s:342    .text.USART_Init:00000000 $t
     /tmp/ccE2jDiE.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/ccE2jDiE.s:440    .text.USART_Init:0000005c $d
     /tmp/ccE2jDiE.s:447    .text.USART_SendChar:00000000 $t
     /tmp/ccE2jDiE.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccE2jDiE.s:479    .text.USART_SendChar:00000010 $d
     /tmp/ccE2jDiE.s:484    .text.USART_SendString:00000000 $t
     /tmp/ccE2jDiE.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccE2jDiE.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccE2jDiE.s:539    .text.ClearCommand:00000000 $t
     /tmp/ccE2jDiE.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccE2jDiE.s:588    .text.ClearCommand:0000002c $d
     /tmp/ccE2jDiE.s:2002   .bss.command:00000000 command
     /tmp/ccE2jDiE.s:1995   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccE2jDiE.s:595    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccE2jDiE.s:599    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccE2jDiE.s:605    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccE2jDiE.s:696    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/ccE2jDiE.s:704    .text.TIM15_IRQHandler:00000000 $t
     /tmp/ccE2jDiE.s:710    .text.TIM15_IRQHandler:00000000 TIM15_IRQHandler
     /tmp/ccE2jDiE.s:747    .text.TIM15_IRQHandler:0000001c $d
     /tmp/ccE2jDiE.s:1989   .bss.first_captured:00000000 first_captured
     /tmp/ccE2jDiE.s:2051   .bss.htim1:00000000 htim1
     /tmp/ccE2jDiE.s:1983   .bss.IC_Val1:00000000 IC_Val1
     /tmp/ccE2jDiE.s:754    .text.TIM15_Init:00000000 $t
     /tmp/ccE2jDiE.s:760    .text.TIM15_Init:00000000 TIM15_Init
     /tmp/ccE2jDiE.s:824    .text.TIM15_Init:00000034 $d
     /tmp/ccE2jDiE.s:832    .text.Get_TIM15_Ticks:00000000 $t
     /tmp/ccE2jDiE.s:838    .text.Get_TIM15_Ticks:00000000 Get_TIM15_Ticks
     /tmp/ccE2jDiE.s:855    .text.Get_TIM15_Ticks:00000008 $d
     /tmp/ccE2jDiE.s:860    .text.Set_TIM15_Ticks:00000000 $t
     /tmp/ccE2jDiE.s:866    .text.Set_TIM15_Ticks:00000000 Set_TIM15_Ticks
     /tmp/ccE2jDiE.s:897    .text.Set_TIM15_Ticks:00000014 $d
     /tmp/ccE2jDiE.s:902    .text.GetUltrasonic:00000000 $t
     /tmp/ccE2jDiE.s:908    .text.GetUltrasonic:00000000 GetUltrasonic
     /tmp/ccE2jDiE.s:1057   .text.GetUltrasonic:0000009c $d
     /tmp/ccE2jDiE.s:2037   .bss.startTime:00000000 startTime
     /tmp/ccE2jDiE.s:2044   .bss.pMillis:00000000 pMillis
     /tmp/ccE2jDiE.s:2030   .bss.Value1:00000000 Value1
     /tmp/ccE2jDiE.s:2023   .bss.Value2:00000000 Value2
     /tmp/ccE2jDiE.s:1065   .rodata.Log.str1.4:00000000 $d
     /tmp/ccE2jDiE.s:1072   .text.Log:00000000 $t
     /tmp/ccE2jDiE.s:1078   .text.Log:00000000 Log
     /tmp/ccE2jDiE.s:1125   .text.Log:00000034 $d
     /tmp/ccE2jDiE.s:1133   .rodata.Proceed.str1.4:00000000 $d
     /tmp/ccE2jDiE.s:1137   .text.Proceed:00000000 $t
ARM GAS  /tmp/ccE2jDiE.s 			page 73


     /tmp/ccE2jDiE.s:1143   .text.Proceed:00000000 Proceed
     /tmp/ccE2jDiE.s:1166   .text.Proceed:0000000c $d
     /tmp/ccE2jDiE.s:1171   .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccE2jDiE.s:1199   .text.ProcessCommand:00000000 $t
     /tmp/ccE2jDiE.s:1205   .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccE2jDiE.s:1336   .rodata.ProcessCommand:00000000 $d
     /tmp/ccE2jDiE.s:1567   .text.ProcessCommand:0000017c $d
     /tmp/ccE2jDiE.s:1583   .rodata.PrintDistance.str1.4:00000000 $d
     /tmp/ccE2jDiE.s:1587   .text.PrintDistance:00000000 $t
     /tmp/ccE2jDiE.s:1593   .text.PrintDistance:00000000 PrintDistance
     /tmp/ccE2jDiE.s:1639   .text.PrintDistance:00000030 $d
     /tmp/ccE2jDiE.s:1644   .text.Error_Handler:00000000 $t
     /tmp/ccE2jDiE.s:1650   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccE2jDiE.s:1682   .text.SystemClock_Config:00000000 $t
     /tmp/ccE2jDiE.s:1688   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccE2jDiE.s:1775   .text.main:00000000 $t
     /tmp/ccE2jDiE.s:1781   .text.main:00000000 main
     /tmp/ccE2jDiE.s:1948   .text.main:000000b0 $d
     /tmp/ccE2jDiE.s:1962   .bss.distance:00000000 distance
     /tmp/ccE2jDiE.s:1959   .bss.distance:00000000 $d
     /tmp/ccE2jDiE.s:1969   .bss.Difference:00000000 Difference
     /tmp/ccE2jDiE.s:1966   .bss.Difference:00000000 $d
     /tmp/ccE2jDiE.s:1976   .bss.IC_Val2:00000000 IC_Val2
     /tmp/ccE2jDiE.s:1973   .bss.IC_Val2:00000000 $d
     /tmp/ccE2jDiE.s:1980   .bss.IC_Val1:00000000 $d
     /tmp/ccE2jDiE.s:1990   .bss.first_captured:00000000 $d
     /tmp/ccE2jDiE.s:1996   .bss.incomingCommand:00000000 $d
     /tmp/ccE2jDiE.s:1999   .bss.command:00000000 $d
     /tmp/ccE2jDiE.s:2009   .bss.rightDistance:00000000 rightDistance
     /tmp/ccE2jDiE.s:2006   .bss.rightDistance:00000000 $d
     /tmp/ccE2jDiE.s:2016   .bss.leftDistance:00000000 leftDistance
     /tmp/ccE2jDiE.s:2013   .bss.leftDistance:00000000 $d
     /tmp/ccE2jDiE.s:2020   .bss.Value2:00000000 $d
     /tmp/ccE2jDiE.s:2027   .bss.Value1:00000000 $d
     /tmp/ccE2jDiE.s:2034   .bss.startTime:00000000 $d
     /tmp/ccE2jDiE.s:2041   .bss.pMillis:00000000 $d
     /tmp/ccE2jDiE.s:2048   .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
HAL_TIM_ReadCapturedValue
HAL_GPIO_ReadPin
sprintf
memcpy
HAL_Delay
MoveMotors
__aeabi_f2d
get_distance
ARM GAS  /tmp/ccE2jDiE.s 			page 74


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
