ARM GAS  /tmp/ccT7NbC0.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_TIM15_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_TIM15_Init:
  25              	.LFB57:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****  * in the root directory of this software component.
  14:Src/main.c    ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  ******************************************************************************
  17:Src/main.c    ****  */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include <stdbool.h>
  24:Src/main.c    **** #include "motor.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccT7NbC0.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim15;
  49:Src/main.c    **** volatile uint32_t pMillis;
  50:Src/main.c    **** volatile uint16_t startTime;
  51:Src/main.c    **** volatile uint16_t Value1 = 0;
  52:Src/main.c    **** volatile uint16_t Value2 = 0;
  53:Src/main.c    **** volatile uint16_t leftDistance = 0;
  54:Src/main.c    **** volatile uint16_t rightDistance = 0;
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** static void MX_TIM15_Init(void);
  64:Src/main.c    **** /* USER CODE BEGIN PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PFP */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  69:Src/main.c    **** /* USER CODE BEGIN 0 */
  70:Src/main.c    **** #define LED_RED GPIO_PIN_6
  71:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  72:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  73:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  74:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  75:Src/main.c    **** 
  76:Src/main.c    **** void LED_Init(uint32_t pins) {
  77:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  78:Src/main.c    **** 
  79:Src/main.c    **** 	GPIO_InitTypeDef gpio_led_init = {pins,
  80:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
  81:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
  82:Src/main.c    **** 		GPIO_NOPULL
  83:Src/main.c    **** 	};
  84:Src/main.c    **** 	HAL_GPIO_Init(GPIOC, &gpio_led_init);
  85:Src/main.c    **** }
  86:Src/main.c    **** 
  87:Src/main.c    **** /**
  88:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  89:Src/main.c    ****  *        functions appropriately.
  90:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
ARM GAS  /tmp/ccT7NbC0.s 			page 3


  91:Src/main.c    ****  */
  92:Src/main.c    **** void GPIO_AF_Init() {
  93:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  94:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  95:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
  96:Src/main.c    **** 
  97:Src/main.c    **** 	// uart_pins
  98:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
  99:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 100:Src/main.c    **** 
 101:Src/main.c    **** 	// motor_left_pins
 102:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 103:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 104:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 105:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 107:Src/main.c    **** 
 108:Src/main.c    **** 	// motor_right_pins
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 114:Src/main.c    **** 
 115:Src/main.c    **** 	// ultrasonic_left_pins
 116:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 118:Src/main.c    **** 
 119:Src/main.c    **** 	// ultrasonic_right_pins
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 121:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 122:Src/main.c    **** }
 123:Src/main.c    **** 
 124:Src/main.c    **** /**
 125:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 126:Src/main.c    ****  */
 127:Src/main.c    **** void USART_Init() {
 128:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 129:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 130:Src/main.c    **** 
 131:Src/main.c    **** 	//Set baud rate
 132:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 133:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 134:Src/main.c    **** 												//use with the BT adapter
 135:Src/main.c    **** 
 136:Src/main.c    **** 	//Enable transmitter
 137:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 138:Src/main.c    **** 
 139:Src/main.c    **** 	//Enable receiver
 140:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 141:Src/main.c    **** 
 142:Src/main.c    **** 	//Enable the receive register not empty interrupt
 143:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 144:Src/main.c    **** 
 145:Src/main.c    **** 	//Enable USART3
 146:Src/main.c    **** 	USART3->CR1 |= 1;
 147:Src/main.c    **** }
ARM GAS  /tmp/ccT7NbC0.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    **** /**
 150:Src/main.c    ****  * @brief Sends a single character on the USART.
 151:Src/main.c    ****  *
 152:Src/main.c    ****  * @param c: the character to be sent
 153:Src/main.c    ****  */
 154:Src/main.c    **** void USART_SendChar(uint8_t c) {
 155:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 156:Src/main.c    **** 		;
 157:Src/main.c    **** 
 158:Src/main.c    **** 	USART3->TDR = c;
 159:Src/main.c    **** }
 160:Src/main.c    **** 
 161:Src/main.c    **** /**
 162:Src/main.c    ****  * @brief Sends a string on the USART.
 163:Src/main.c    ****  *
 164:Src/main.c    ****  * @param p_string: pointer to string to send
 165:Src/main.c    ****  */
 166:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 167:Src/main.c    **** 	while(*p_string != 0) {
 168:Src/main.c    **** 		USART_SendChar(*p_string);
 169:Src/main.c    **** 		p_string++;
 170:Src/main.c    **** 	}
 171:Src/main.c    **** 	USART_SendChar(0);
 172:Src/main.c    **** }
 173:Src/main.c    **** 
 174:Src/main.c    **** volatile uint8_t command[3];
 175:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 176:Src/main.c    **** 
 177:Src/main.c    **** void ClearCommand(){
 178:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 179:Src/main.c    **** 	memset(command, 0, sizeof(command));
 180:Src/main.c    **** 	incomingCommand = 0;
 181:Src/main.c    **** 	USART_SendString(prompt);
 182:Src/main.c    **** }
 183:Src/main.c    **** 
 184:Src/main.c    **** void USART3_4_IRQHandler(){
 185:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 186:Src/main.c    **** 	incomingCommand = 1;
 187:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 188:Src/main.c    **** 	}
 189:Src/main.c    **** 	if(command[0]){
 190:Src/main.c    **** 		if(command[1]){
 191:Src/main.c    **** 			USART_SendString(err);
 192:Src/main.c    **** 			ClearCommand();
 193:Src/main.c    **** 		}
 194:Src/main.c    **** 		else{
 195:Src/main.c    **** 			command[1] = USART3->RDR;
 196:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 197:Src/main.c    **** 		}
 198:Src/main.c    **** 	}
 199:Src/main.c    **** 	else{
 200:Src/main.c    **** 		command[0] = USART3->RDR;
 201:Src/main.c    **** 		if(command[0] != 'w' &&
 202:Src/main.c    **** 				command[0] != 'a' &&
 203:Src/main.c    **** 				command[0] != 'd'){
 204:Src/main.c    **** 			ProcessCommand(command[0], NULL);
ARM GAS  /tmp/ccT7NbC0.s 			page 5


 205:Src/main.c    **** 		}
 206:Src/main.c    **** 	}
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** void Log(){
 210:Src/main.c    **** 	uint8_t str_buff[32];
 211:Src/main.c    **** 
 212:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic left: %d\n", GetUltrasonic(&ultrasonic_left_pins));
 213:Src/main.c    **** 	USART_SendString(str_buff);
 214:Src/main.c    **** 
 215:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic right: %d\n", GetUltrasonic(&ultrasonic_right_pins));
 216:Src/main.c    **** 	USART_SendString(str_buff);
 217:Src/main.c    **** 
 218:Src/main.c    **** 	sprintf(str_buff, "Distance travelled: %d\n", (int)get_distance());
 219:Src/main.c    **** 	USART_SendString(str_buff);
 220:Src/main.c    **** 
 221:Src/main.c    **** 	sprintf(str_buff, "Heading: %d\n", (int)get_heading());
 222:Src/main.c    **** 	USART_SendString(str_buff);
 223:Src/main.c    **** 
 224:Src/main.c    **** }
 225:Src/main.c    **** 
 226:Src/main.c    **** void Proceed(){
 227:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 228:Src/main.c    **** 	USART_SendString(err);
 229:Src/main.c    **** }
 230:Src/main.c    **** 
 231:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 232:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 233:Src/main.c    **** 
 234:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 235:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 236:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 237:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 238:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 239:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 240:Src/main.c    **** 
 241:Src/main.c    **** 	MotorCommand motorcmd = {0};
 242:Src/main.c    **** 
 243:Src/main.c    **** 	uint8_t* part1;
 244:Src/main.c    **** 	uint8_t part2[15];
 245:Src/main.c    **** 	uint8_t zero = 0;
 246:Src/main.c    **** 	memcpy(part2, &zero, 15);
 247:Src/main.c    **** 
 248:Src/main.c    **** 	switch(direction){
 249:Src/main.c    **** 		case 'w':
 250:Src/main.c    **** 			part1 = forward;
 251:Src/main.c    **** 			motorcmd.dir = FORWARD;
 252:Src/main.c    **** 			break;
 253:Src/main.c    **** 		case 'a':
 254:Src/main.c    **** 			part1 = left;
 255:Src/main.c    **** 			motorcmd.dir = LEFT;
 256:Src/main.c    **** 			break;
 257:Src/main.c    **** 		case 'd':
 258:Src/main.c    **** 			part1 = right;
 259:Src/main.c    **** 			motorcmd.dir = RIGHT;
 260:Src/main.c    **** 			break;
 261:Src/main.c    **** 		case 'l':
ARM GAS  /tmp/ccT7NbC0.s 			page 6


 262:Src/main.c    **** 			part1 = log;
 263:Src/main.c    **** 			USART_SendString(part1);
 264:Src/main.c    **** 			Log();
 265:Src/main.c    **** 			ClearCommand();
 266:Src/main.c    **** 			return;
 267:Src/main.c    **** 		case 'p':
 268:Src/main.c    **** 			part1 = proceed;
 269:Src/main.c    **** 			USART_SendString(part1);
 270:Src/main.c    **** 			Proceed();
 271:Src/main.c    **** 			ClearCommand();
 272:Src/main.c    **** 			return;
 273:Src/main.c    **** 		case 'x':
 274:Src/main.c    **** 			part1 = stop;
 275:Src/main.c    **** 			USART_SendString(part1);
 276:Src/main.c    **** 			motorcmd.dir = OFF;
 277:Src/main.c    **** 			MoveMotors(&motorcmd);
 278:Src/main.c    **** 			ClearCommand();
 279:Src/main.c    **** 			return;
 280:Src/main.c    **** 		default:
 281:Src/main.c    **** 			USART_SendString(err);
 282:Src/main.c    **** 			ClearCommand();
 283:Src/main.c    **** 			return;
 284:Src/main.c    **** 	}
 285:Src/main.c    **** 
 286:Src/main.c    **** 	//these are for "vector commands" only:
 287:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 288:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 289:Src/main.c    **** 		motorcmd.amount = 0;
 290:Src/main.c    **** 	}
 291:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 292:Src/main.c    **** 		USART_SendString(err);
 293:Src/main.c    **** 		ClearCommand();
 294:Src/main.c    **** 		return;
 295:Src/main.c    **** 	}
 296:Src/main.c    **** 	else{
 297:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 298:Src/main.c    **** 		if(dist == 80)
 299:Src/main.c    **** 			dist = 90; //support for 90-degree turns
 300:Src/main.c    **** 		motorcmd.amount = dist;
 301:Src/main.c    **** 	}
 302:Src/main.c    **** 
 303:Src/main.c    **** 
 304:Src/main.c    **** 	USART_SendString(part1);
 305:Src/main.c    **** 	USART_SendString(part2);
 306:Src/main.c    **** 
 307:Src/main.c    **** 	/* anyone know what this does?? or why it's in process command lol
 308:Src/main.c    **** 	 * HAL_Delay hangs when in an interrupt context, due to SysTick being
 309:Src/main.c    **** 	 * lower priority.
 310:Src/main.c    **** 	 * This is called from the USART interrupt, so this can't be here.
 311:Src/main.c    **** 	 * If you need it, use timers instead.
 312:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 313:Src/main.c    **** 	HAL_Delay(1000);
 314:Src/main.c    **** 	TIM2->CCR1 = 0;
 315:Src/main.c    **** 	*/
 316:Src/main.c    **** 
 317:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 318:Src/main.c    **** 	USART_SendString(result);
ARM GAS  /tmp/ccT7NbC0.s 			page 7


 319:Src/main.c    **** 
 320:Src/main.c    **** 	ClearCommand();
 321:Src/main.c    **** 
 322:Src/main.c    **** }
 323:Src/main.c    **** 
 324:Src/main.c    **** void PrintDistance()
 325:Src/main.c    **** {
 326:Src/main.c    **** 	char dist[32] = "";
 327:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 328:Src/main.c    **** 	USART_SendString(dist);
 329:Src/main.c    **** }
 330:Src/main.c    **** 
 331:Src/main.c    **** uint32_t GetUltrasonic(ultrasonic_pins_t* ultrasonic){
 332:Src/main.c    **** 	uint32_t i = 0, j = 0;
 333:Src/main.c    **** 	TIM15->EGR |= 1; //clears counter
 334:Src/main.c    **** 	while(TIM15->EGR & 1)
 335:Src/main.c    **** 		;
 336:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_SET);
 337:Src/main.c    **** 	while (TIM15->CNT < 200){
 338:Src/main.c    **** 	}
 339:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 340:Src/main.c    **** 
 341:Src/main.c    **** 	pMillis = TIM15->CNT;
 342:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 343:Src/main.c    **** 		i++;
 344:Src/main.c    **** 	}
 345:Src/main.c    **** 	uint32_t val1 = TIM15->CNT;
 346:Src/main.c    **** 
 347:Src/main.c    **** 	pMillis = val1;
 348:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 349:Src/main.c    **** 		j++;
 350:Src/main.c    **** 	}
 351:Src/main.c    **** 
 352:Src/main.c    **** 	uint32_t val2 = TIM15->CNT;
 353:Src/main.c    **** 	if(val2-val1 == 1200)
 354:Src/main.c    **** 		return -1;
 355:Src/main.c    **** 	return (val2-val1)/4.42; //this is a magic number that gives us centimeters with our prescaler val
 356:Src/main.c    **** }
 357:Src/main.c    **** /* USER CODE END 0 */
 358:Src/main.c    **** 
 359:Src/main.c    **** /**
 360:Src/main.c    ****  * @brief  The application entry point.
 361:Src/main.c    ****  * @retval int
 362:Src/main.c    ****  */
 363:Src/main.c    **** int main(void)
 364:Src/main.c    **** {
 365:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 366:Src/main.c    **** 	SystemClock_Config();
 367:Src/main.c    **** 
 368:Src/main.c    **** 	//USART Initalizations
 369:Src/main.c    **** 	GPIO_AF_Init();
 370:Src/main.c    **** 	USART_Init();
 371:Src/main.c    **** 
 372:Src/main.c    **** 	motor_init();                           // Initialize motor code
 373:Src/main.c    **** 
 374:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 375:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,2);
ARM GAS  /tmp/ccT7NbC0.s 			page 8


 376:Src/main.c    **** 
 377:Src/main.c    **** 	//PWM and Ultrasonic Initalizations
 378:Src/main.c    **** 	MX_GPIO_Init();
 379:Src/main.c    **** 	MX_TIM15_Init(); 
 380:Src/main.c    **** 
 381:Src/main.c    **** 	while (1) {
 382:Src/main.c    **** 		//Handled in interrupts.
 383:Src/main.c    **** 	}
 384:Src/main.c    **** }
 385:Src/main.c    **** 
 386:Src/main.c    **** /**
 387:Src/main.c    ****  * @brief System Clock Configuration
 388:Src/main.c    ****  * @retval None
 389:Src/main.c    ****  */
 390:Src/main.c    **** void SystemClock_Config(void)
 391:Src/main.c    **** {
 392:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 393:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 394:Src/main.c    **** 
 395:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 396:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 397:Src/main.c    **** 	 */
 398:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 399:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 400:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 401:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 402:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 403:Src/main.c    **** 	{
 404:Src/main.c    **** 		Error_Handler();
 405:Src/main.c    **** 	}
 406:Src/main.c    **** 
 407:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 408:Src/main.c    **** 	*/
 409:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 410:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 411:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 412:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 413:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 414:Src/main.c    **** 
 415:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 416:Src/main.c    **** 	{
 417:Src/main.c    **** 		Error_Handler();
 418:Src/main.c    **** 	}
 419:Src/main.c    **** }
 420:Src/main.c    **** 
 421:Src/main.c    **** /**
 422:Src/main.c    ****  * @brief TIM15 Initialization Function
 423:Src/main.c    ****  * @param None
 424:Src/main.c    ****  * @retval None
 425:Src/main.c    ****  */
 426:Src/main.c    **** static void MX_TIM15_Init(void)
 427:Src/main.c    **** {
  26              		.loc 1 427 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
ARM GAS  /tmp/ccT7NbC0.s 			page 9


 428:Src/main.c    **** 	//hal machine Broke
 429:Src/main.c    **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
  31              		.loc 1 429 2 view .LVU1
  32              		.loc 1 429 5 is_stmt 0 view .LVU2
  33 0000 074A     		ldr	r2, .L2
  34 0002 9169     		ldr	r1, [r2, #24]
  35              		.loc 1 429 15 view .LVU3
  36 0004 8023     		movs	r3, #128
  37 0006 5B02     		lsls	r3, r3, #9
  38 0008 0B43     		orrs	r3, r1
  39 000a 9361     		str	r3, [r2, #24]
 430:Src/main.c    **** 	TIM15->PSC |= 100;
  40              		.loc 1 430 2 is_stmt 1 view .LVU4
  41              		.loc 1 430 7 is_stmt 0 view .LVU5
  42 000c 054B     		ldr	r3, .L2+4
  43 000e 9A6A     		ldr	r2, [r3, #40]
  44              		.loc 1 430 13 view .LVU6
  45 0010 6421     		movs	r1, #100
  46 0012 0A43     		orrs	r2, r1
  47 0014 9A62     		str	r2, [r3, #40]
 431:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
  48              		.loc 1 431 2 is_stmt 1 view .LVU7
  49              		.loc 1 431 7 is_stmt 0 view .LVU8
  50 0016 1A68     		ldr	r2, [r3]
  51              		.loc 1 431 13 view .LVU9
  52 0018 6339     		subs	r1, r1, #99
  53 001a 0A43     		orrs	r2, r1
  54 001c 1A60     		str	r2, [r3]
 432:Src/main.c    **** }
  55              		.loc 1 432 1 view .LVU10
  56              		@ sp needed
  57 001e 7047     		bx	lr
  58              	.L3:
  59              		.align	2
  60              	.L2:
  61 0020 00100240 		.word	1073876992
  62 0024 00400140 		.word	1073823744
  63              		.cfi_endproc
  64              	.LFE57:
  66              		.section	.text.MX_GPIO_Init,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.code	16
  70              		.thumb_func
  72              	MX_GPIO_Init:
  73              	.LFB58:
 433:Src/main.c    **** 
 434:Src/main.c    **** /**
 435:Src/main.c    ****  * @brief GPIO Initialization Function
 436:Src/main.c    ****  * @param None
 437:Src/main.c    ****  * @retval None
 438:Src/main.c    ****  */
 439:Src/main.c    **** static void MX_GPIO_Init(void)
 440:Src/main.c    **** {
  74              		.loc 1 440 1 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 24
ARM GAS  /tmp/ccT7NbC0.s 			page 10


  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 86B0     		sub	sp, sp, #24
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 32
 441:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  86              		.loc 1 441 2 view .LVU12
  87              		.loc 1 441 19 is_stmt 0 view .LVU13
  88 0004 1422     		movs	r2, #20
  89 0006 0021     		movs	r1, #0
  90 0008 01A8     		add	r0, sp, #4
  91 000a FFF7FEFF 		bl	memset
  92              	.LVL0:
 442:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 443:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 444:Src/main.c    **** 
 445:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 446:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  93              		.loc 1 446 2 is_stmt 1 view .LVU14
  94              	.LBB8:
  95              		.loc 1 446 2 view .LVU15
  96              		.loc 1 446 2 view .LVU16
  97 000e 0E4B     		ldr	r3, .L5
  98 0010 5A69     		ldr	r2, [r3, #20]
  99 0012 8021     		movs	r1, #128
 100 0014 C903     		lsls	r1, r1, #15
 101 0016 0A43     		orrs	r2, r1
 102 0018 5A61     		str	r2, [r3, #20]
 103              		.loc 1 446 2 view .LVU17
 104 001a 5B69     		ldr	r3, [r3, #20]
 105 001c 0B40     		ands	r3, r1
 106 001e 0093     		str	r3, [sp]
 107              		.loc 1 446 2 view .LVU18
 108 0020 009B     		ldr	r3, [sp]
 109              	.LBE8:
 110              		.loc 1 446 2 view .LVU19
 447:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 448:Src/main.c    **** 
 449:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 450:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 111              		.loc 1 450 2 view .LVU20
 112 0022 9024     		movs	r4, #144
 113 0024 E405     		lsls	r4, r4, #23
 114 0026 0022     		movs	r2, #0
 115 0028 0121     		movs	r1, #1
 116 002a 2000     		movs	r0, r4
 117 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL1:
 451:Src/main.c    **** 
 452:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 453:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
 119              		.loc 1 453 2 view .LVU21
 120              		.loc 1 453 22 is_stmt 0 view .LVU22
ARM GAS  /tmp/ccT7NbC0.s 			page 11


 121 0030 0123     		movs	r3, #1
 122 0032 0193     		str	r3, [sp, #4]
 454:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 123              		.loc 1 454 2 is_stmt 1 view .LVU23
 124              		.loc 1 454 23 is_stmt 0 view .LVU24
 125 0034 0293     		str	r3, [sp, #8]
 455:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 126              		.loc 1 455 2 is_stmt 1 view .LVU25
 127              		.loc 1 455 23 is_stmt 0 view .LVU26
 128 0036 0023     		movs	r3, #0
 129 0038 0393     		str	r3, [sp, #12]
 456:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 456 2 is_stmt 1 view .LVU27
 131              		.loc 1 456 24 is_stmt 0 view .LVU28
 132 003a 0493     		str	r3, [sp, #16]
 457:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 133              		.loc 1 457 2 is_stmt 1 view .LVU29
 134 003c 01A9     		add	r1, sp, #4
 135 003e 2000     		movs	r0, r4
 136 0040 FFF7FEFF 		bl	HAL_GPIO_Init
 137              	.LVL2:
 458:Src/main.c    **** 
 459:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 460:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 461:Src/main.c    **** }
 138              		.loc 1 461 1 is_stmt 0 view .LVU30
 139 0044 06B0     		add	sp, sp, #24
 140              		@ sp needed
 141 0046 10BD     		pop	{r4, pc}
 142              	.L6:
 143              		.align	2
 144              	.L5:
 145 0048 00100240 		.word	1073876992
 146              		.cfi_endproc
 147              	.LFE58:
 149              		.section	.text.LED_Init,"ax",%progbits
 150              		.align	1
 151              		.global	LED_Init
 152              		.syntax unified
 153              		.code	16
 154              		.thumb_func
 156              	LED_Init:
 157              	.LVL3:
 158              	.LFB43:
  76:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 159              		.loc 1 76 30 is_stmt 1 view -0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 24
 162              		@ frame_needed = 0, uses_anonymous_args = 0
  76:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 163              		.loc 1 76 30 is_stmt 0 view .LVU32
 164 0000 10B5     		push	{r4, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccT7NbC0.s 			page 12


 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 32
 172 0004 0400     		movs	r4, r0
  79:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 173              		.loc 1 79 2 is_stmt 1 view .LVU33
  79:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 174              		.loc 1 79 19 is_stmt 0 view .LVU34
 175 0006 1422     		movs	r2, #20
 176 0008 0021     		movs	r1, #0
 177 000a 01A8     		add	r0, sp, #4
 178              	.LVL4:
  79:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 179              		.loc 1 79 19 view .LVU35
 180 000c FFF7FEFF 		bl	memset
 181              	.LVL5:
 182 0010 0194     		str	r4, [sp, #4]
 183 0012 0123     		movs	r3, #1
 184 0014 0293     		str	r3, [sp, #8]
  84:Src/main.c    **** }
 185              		.loc 1 84 2 is_stmt 1 view .LVU36
 186 0016 01A9     		add	r1, sp, #4
 187 0018 0248     		ldr	r0, .L8
 188 001a FFF7FEFF 		bl	HAL_GPIO_Init
 189              	.LVL6:
  85:Src/main.c    **** 
 190              		.loc 1 85 1 is_stmt 0 view .LVU37
 191 001e 06B0     		add	sp, sp, #24
 192              		@ sp needed
 193              	.LVL7:
  85:Src/main.c    **** 
 194              		.loc 1 85 1 view .LVU38
 195 0020 10BD     		pop	{r4, pc}
 196              	.L9:
 197 0022 C046     		.align	2
 198              	.L8:
 199 0024 00080048 		.word	1207961600
 200              		.cfi_endproc
 201              	.LFE43:
 203              		.section	.text.GPIO_AF_Init,"ax",%progbits
 204              		.align	1
 205              		.global	GPIO_AF_Init
 206              		.syntax unified
 207              		.code	16
 208              		.thumb_func
 210              	GPIO_AF_Init:
 211              	.LFB44:
  92:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 212              		.loc 1 92 21 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 16
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              	.LCFI4:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 4, -8
 220              		.cfi_offset 14, -4
 221 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccT7NbC0.s 			page 13


 222              	.LCFI5:
 223              		.cfi_def_cfa_offset 24
  93:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 224              		.loc 1 93 2 view .LVU40
 225              	.LBB9:
  93:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 226              		.loc 1 93 2 view .LVU41
  93:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 227              		.loc 1 93 2 view .LVU42
 228 0004 364B     		ldr	r3, .L11
 229 0006 5A69     		ldr	r2, [r3, #20]
 230 0008 8021     		movs	r1, #128
 231 000a 8902     		lsls	r1, r1, #10
 232 000c 0A43     		orrs	r2, r1
 233 000e 5A61     		str	r2, [r3, #20]
  93:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 234              		.loc 1 93 2 view .LVU43
 235 0010 5A69     		ldr	r2, [r3, #20]
 236 0012 0A40     		ands	r2, r1
 237 0014 0192     		str	r2, [sp, #4]
  93:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 238              		.loc 1 93 2 view .LVU44
 239 0016 019A     		ldr	r2, [sp, #4]
 240              	.LBE9:
  93:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 241              		.loc 1 93 2 view .LVU45
  94:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 242              		.loc 1 94 2 view .LVU46
 243              	.LBB10:
  94:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 244              		.loc 1 94 2 view .LVU47
  94:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 245              		.loc 1 94 2 view .LVU48
 246 0018 5A69     		ldr	r2, [r3, #20]
 247 001a 8021     		movs	r1, #128
 248 001c C902     		lsls	r1, r1, #11
 249 001e 0A43     		orrs	r2, r1
 250 0020 5A61     		str	r2, [r3, #20]
  94:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 251              		.loc 1 94 2 view .LVU49
 252 0022 5A69     		ldr	r2, [r3, #20]
 253 0024 0A40     		ands	r2, r1
 254 0026 0292     		str	r2, [sp, #8]
  94:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 255              		.loc 1 94 2 view .LVU50
 256 0028 029A     		ldr	r2, [sp, #8]
 257              	.LBE10:
  94:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 258              		.loc 1 94 2 view .LVU51
  95:Src/main.c    **** 
 259              		.loc 1 95 2 view .LVU52
 260              	.LBB11:
  95:Src/main.c    **** 
 261              		.loc 1 95 2 view .LVU53
  95:Src/main.c    **** 
 262              		.loc 1 95 2 view .LVU54
 263 002a 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccT7NbC0.s 			page 14


 264 002c 8021     		movs	r1, #128
 265 002e 0903     		lsls	r1, r1, #12
 266 0030 0A43     		orrs	r2, r1
 267 0032 5A61     		str	r2, [r3, #20]
  95:Src/main.c    **** 
 268              		.loc 1 95 2 view .LVU55
 269 0034 5B69     		ldr	r3, [r3, #20]
 270 0036 0B40     		ands	r3, r1
 271 0038 0393     		str	r3, [sp, #12]
  95:Src/main.c    **** 
 272              		.loc 1 95 2 view .LVU56
 273 003a 039B     		ldr	r3, [sp, #12]
 274              	.LBE11:
  95:Src/main.c    **** 
 275              		.loc 1 95 2 view .LVU57
  98:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 276              		.loc 1 98 2 view .LVU58
 277 003c 2949     		ldr	r1, .L11+4
 278 003e 0C1F     		subs	r4, r1, #4
 279 0040 2068     		ldr	r0, [r4]
 280 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL8:
  99:Src/main.c    **** 
 282              		.loc 1 99 2 view .LVU59
 283 0046 2100     		movs	r1, r4
 284 0048 1C31     		adds	r1, r1, #28
 285 004a A069     		ldr	r0, [r4, #24]
 286 004c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL9:
 102:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 288              		.loc 1 102 2 view .LVU60
 289 0050 2549     		ldr	r1, .L11+8
 290 0052 0C1F     		subs	r4, r1, #4
 291 0054 2068     		ldr	r0, [r4]
 292 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL10:
 103:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 294              		.loc 1 103 2 view .LVU61
 295 005a 2100     		movs	r1, r4
 296 005c 1C31     		adds	r1, r1, #28
 297 005e A069     		ldr	r0, [r4, #24]
 298 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL11:
 104:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 300              		.loc 1 104 2 view .LVU62
 301 0064 2100     		movs	r1, r4
 302 0066 3431     		adds	r1, r1, #52
 303 0068 206B     		ldr	r0, [r4, #48]
 304 006a FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL12:
 105:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 306              		.loc 1 105 2 view .LVU63
 307 006e 2100     		movs	r1, r4
 308 0070 4C31     		adds	r1, r1, #76
 309 0072 A06C     		ldr	r0, [r4, #72]
 310 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL13:
ARM GAS  /tmp/ccT7NbC0.s 			page 15


 106:Src/main.c    **** 
 312              		.loc 1 106 2 view .LVU64
 313 0078 2100     		movs	r1, r4
 314 007a 6431     		adds	r1, r1, #100
 315 007c 206E     		ldr	r0, [r4, #96]
 316 007e FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL14:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 318              		.loc 1 109 2 view .LVU65
 319 0082 1A49     		ldr	r1, .L11+12
 320 0084 0C1F     		subs	r4, r1, #4
 321 0086 2068     		ldr	r0, [r4]
 322 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL15:
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 324              		.loc 1 110 2 view .LVU66
 325 008c 2100     		movs	r1, r4
 326 008e 1C31     		adds	r1, r1, #28
 327 0090 A069     		ldr	r0, [r4, #24]
 328 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 329              	.LVL16:
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 330              		.loc 1 111 2 view .LVU67
 331 0096 2100     		movs	r1, r4
 332 0098 3431     		adds	r1, r1, #52
 333 009a 206B     		ldr	r0, [r4, #48]
 334 009c FFF7FEFF 		bl	HAL_GPIO_Init
 335              	.LVL17:
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 336              		.loc 1 112 2 view .LVU68
 337 00a0 2100     		movs	r1, r4
 338 00a2 4C31     		adds	r1, r1, #76
 339 00a4 A06C     		ldr	r0, [r4, #72]
 340 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 341              	.LVL18:
 113:Src/main.c    **** 
 342              		.loc 1 113 2 view .LVU69
 343 00aa 2100     		movs	r1, r4
 344 00ac 6431     		adds	r1, r1, #100
 345 00ae 206E     		ldr	r0, [r4, #96]
 346 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 347              	.LVL19:
 116:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 348              		.loc 1 116 2 view .LVU70
 349 00b4 0E49     		ldr	r1, .L11+16
 350 00b6 0C1F     		subs	r4, r1, #4
 351 00b8 2068     		ldr	r0, [r4]
 352 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 353              	.LVL20:
 117:Src/main.c    **** 
 354              		.loc 1 117 2 view .LVU71
 355 00be 2100     		movs	r1, r4
 356 00c0 1C31     		adds	r1, r1, #28
 357 00c2 A069     		ldr	r0, [r4, #24]
 358 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 359              	.LVL21:
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
ARM GAS  /tmp/ccT7NbC0.s 			page 16


 360              		.loc 1 120 2 view .LVU72
 361 00c8 0A49     		ldr	r1, .L11+20
 362 00ca 0C1F     		subs	r4, r1, #4
 363 00cc 2068     		ldr	r0, [r4]
 364 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 365              	.LVL22:
 121:Src/main.c    **** }
 366              		.loc 1 121 2 view .LVU73
 367 00d2 2100     		movs	r1, r4
 368 00d4 1C31     		adds	r1, r1, #28
 369 00d6 A069     		ldr	r0, [r4, #24]
 370 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 371              	.LVL23:
 122:Src/main.c    **** 
 372              		.loc 1 122 1 is_stmt 0 view .LVU74
 373 00dc 04B0     		add	sp, sp, #16
 374              		@ sp needed
 375 00de 10BD     		pop	{r4, pc}
 376              	.L12:
 377              		.align	2
 378              	.L11:
 379 00e0 00100240 		.word	1073876992
 380 00e4 04000000 		.word	uart_pins+4
 381 00e8 04000000 		.word	motor_left_pins+4
 382 00ec 04000000 		.word	motor_right_pins+4
 383 00f0 04000000 		.word	ultrasonic_left_pins+4
 384 00f4 04000000 		.word	ultrasonic_right_pins+4
 385              		.cfi_endproc
 386              	.LFE44:
 388              		.global	__aeabi_uidiv
 389              		.section	.text.USART_Init,"ax",%progbits
 390              		.align	1
 391              		.global	USART_Init
 392              		.syntax unified
 393              		.code	16
 394              		.thumb_func
 396              	USART_Init:
 397              	.LFB45:
 127:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 398              		.loc 1 127 19 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402 0000 10B5     		push	{r4, lr}
 403              	.LCFI6:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 4, -8
 406              		.cfi_offset 14, -4
 407 0002 82B0     		sub	sp, sp, #8
 408              	.LCFI7:
 409              		.cfi_def_cfa_offset 16
 128:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 410              		.loc 1 128 2 view .LVU76
 411              	.LBB12:
 128:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 412              		.loc 1 128 2 view .LVU77
 128:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
ARM GAS  /tmp/ccT7NbC0.s 			page 17


 413              		.loc 1 128 2 view .LVU78
 414 0004 154B     		ldr	r3, .L14
 415 0006 D969     		ldr	r1, [r3, #28]
 416 0008 8022     		movs	r2, #128
 417 000a D202     		lsls	r2, r2, #11
 418 000c 1143     		orrs	r1, r2
 419 000e D961     		str	r1, [r3, #28]
 128:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 420              		.loc 1 128 2 view .LVU79
 421 0010 D969     		ldr	r1, [r3, #28]
 422 0012 1140     		ands	r1, r2
 423 0014 0191     		str	r1, [sp, #4]
 128:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 424              		.loc 1 128 2 view .LVU80
 425 0016 0199     		ldr	r1, [sp, #4]
 426              	.LBE12:
 128:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 427              		.loc 1 128 2 view .LVU81
 129:Src/main.c    **** 
 428              		.loc 1 129 2 view .LVU82
 129:Src/main.c    **** 
 429              		.loc 1 129 5 is_stmt 0 view .LVU83
 430 0018 D969     		ldr	r1, [r3, #28]
 129:Src/main.c    **** 
 431              		.loc 1 129 15 view .LVU84
 432 001a 0A43     		orrs	r2, r1
 433 001c DA61     		str	r2, [r3, #28]
 132:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 434              		.loc 1 132 2 is_stmt 1 view .LVU85
 132:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 435              		.loc 1 132 8 is_stmt 0 view .LVU86
 436 001e 104C     		ldr	r4, .L14+4
 437 0020 2368     		ldr	r3, [r4]
 132:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 438              		.loc 1 132 14 view .LVU87
 439 0022 104A     		ldr	r2, .L14+8
 440 0024 1340     		ands	r3, r2
 441 0026 2360     		str	r3, [r4]
 133:Src/main.c    **** 												//use with the BT adapter
 442              		.loc 1 133 2 is_stmt 1 view .LVU88
 133:Src/main.c    **** 												//use with the BT adapter
 443              		.loc 1 133 16 is_stmt 0 view .LVU89
 444 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 445              	.LVL24:
 133:Src/main.c    **** 												//use with the BT adapter
 446              		.loc 1 133 38 view .LVU90
 447 002c 9621     		movs	r1, #150
 448 002e 8901     		lsls	r1, r1, #6
 449 0030 FFF7FEFF 		bl	__aeabi_uidiv
 450              	.LVL25:
 133:Src/main.c    **** 												//use with the BT adapter
 451              		.loc 1 133 14 view .LVU91
 452 0034 E060     		str	r0, [r4, #12]
 137:Src/main.c    **** 
 453              		.loc 1 137 2 is_stmt 1 view .LVU92
 137:Src/main.c    **** 
 454              		.loc 1 137 8 is_stmt 0 view .LVU93
ARM GAS  /tmp/ccT7NbC0.s 			page 18


 455 0036 2368     		ldr	r3, [r4]
 137:Src/main.c    **** 
 456              		.loc 1 137 14 view .LVU94
 457 0038 0822     		movs	r2, #8
 458 003a 1343     		orrs	r3, r2
 459 003c 2360     		str	r3, [r4]
 140:Src/main.c    **** 
 460              		.loc 1 140 2 is_stmt 1 view .LVU95
 140:Src/main.c    **** 
 461              		.loc 1 140 8 is_stmt 0 view .LVU96
 462 003e 2368     		ldr	r3, [r4]
 140:Src/main.c    **** 
 463              		.loc 1 140 14 view .LVU97
 464 0040 043A     		subs	r2, r2, #4
 465 0042 1343     		orrs	r3, r2
 466 0044 2360     		str	r3, [r4]
 143:Src/main.c    **** 
 467              		.loc 1 143 2 is_stmt 1 view .LVU98
 143:Src/main.c    **** 
 468              		.loc 1 143 8 is_stmt 0 view .LVU99
 469 0046 2368     		ldr	r3, [r4]
 143:Src/main.c    **** 
 470              		.loc 1 143 14 view .LVU100
 471 0048 1C32     		adds	r2, r2, #28
 472 004a 1343     		orrs	r3, r2
 473 004c 2360     		str	r3, [r4]
 146:Src/main.c    **** }
 474              		.loc 1 146 2 is_stmt 1 view .LVU101
 146:Src/main.c    **** }
 475              		.loc 1 146 8 is_stmt 0 view .LVU102
 476 004e 2368     		ldr	r3, [r4]
 146:Src/main.c    **** }
 477              		.loc 1 146 14 view .LVU103
 478 0050 1F3A     		subs	r2, r2, #31
 479 0052 1343     		orrs	r3, r2
 480 0054 2360     		str	r3, [r4]
 147:Src/main.c    **** 
 481              		.loc 1 147 1 view .LVU104
 482 0056 02B0     		add	sp, sp, #8
 483              		@ sp needed
 484 0058 10BD     		pop	{r4, pc}
 485              	.L15:
 486 005a C046     		.align	2
 487              	.L14:
 488 005c 00100240 		.word	1073876992
 489 0060 00480040 		.word	1073760256
 490 0064 FF7FFFFF 		.word	-32769
 491              		.cfi_endproc
 492              	.LFE45:
 494              		.section	.text.USART_SendChar,"ax",%progbits
 495              		.align	1
 496              		.global	USART_SendChar
 497              		.syntax unified
 498              		.code	16
 499              		.thumb_func
 501              	USART_SendChar:
 502              	.LFB46:
ARM GAS  /tmp/ccT7NbC0.s 			page 19


 154:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 503              		.loc 1 154 32 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508              	.LVL26:
 509              	.L17:
 155:Src/main.c    **** 		;
 510              		.loc 1 155 8 discriminator 1 view .LVU106
 155:Src/main.c    **** 		;
 511              		.loc 1 155 16 is_stmt 0 discriminator 1 view .LVU107
 512 0000 034B     		ldr	r3, .L19
 513 0002 DB69     		ldr	r3, [r3, #28]
 155:Src/main.c    **** 		;
 514              		.loc 1 155 8 discriminator 1 view .LVU108
 515 0004 1B06     		lsls	r3, r3, #24
 516 0006 FBD5     		bpl	.L17
 158:Src/main.c    **** }
 517              		.loc 1 158 2 is_stmt 1 view .LVU109
 158:Src/main.c    **** }
 518              		.loc 1 158 14 is_stmt 0 view .LVU110
 519 0008 014B     		ldr	r3, .L19
 520 000a 1885     		strh	r0, [r3, #40]
 159:Src/main.c    **** 
 521              		.loc 1 159 1 view .LVU111
 522              		@ sp needed
 523 000c 7047     		bx	lr
 524              	.L20:
 525 000e C046     		.align	2
 526              	.L19:
 527 0010 00480040 		.word	1073760256
 528              		.cfi_endproc
 529              	.LFE46:
 531              		.section	.text.USART_SendString,"ax",%progbits
 532              		.align	1
 533              		.global	USART_SendString
 534              		.syntax unified
 535              		.code	16
 536              		.thumb_func
 538              	USART_SendString:
 539              	.LVL27:
 540              	.LFB47:
 166:Src/main.c    **** 	while(*p_string != 0) {
 541              		.loc 1 166 42 is_stmt 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 166:Src/main.c    **** 	while(*p_string != 0) {
 545              		.loc 1 166 42 is_stmt 0 view .LVU113
 546 0000 10B5     		push	{r4, lr}
 547              	.LCFI8:
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 4, -8
 550              		.cfi_offset 14, -4
 551 0002 0400     		movs	r4, r0
 167:Src/main.c    **** 		USART_SendChar(*p_string);
ARM GAS  /tmp/ccT7NbC0.s 			page 20


 552              		.loc 1 167 2 is_stmt 1 view .LVU114
 167:Src/main.c    **** 		USART_SendChar(*p_string);
 553              		.loc 1 167 7 is_stmt 0 view .LVU115
 554 0004 02E0     		b	.L22
 555              	.LVL28:
 556              	.L23:
 168:Src/main.c    **** 		p_string++;
 557              		.loc 1 168 3 is_stmt 1 view .LVU116
 558 0006 FFF7FEFF 		bl	USART_SendChar
 559              	.LVL29:
 169:Src/main.c    **** 	}
 560              		.loc 1 169 3 view .LVU117
 169:Src/main.c    **** 	}
 561              		.loc 1 169 11 is_stmt 0 view .LVU118
 562 000a 0134     		adds	r4, r4, #1
 563              	.LVL30:
 564              	.L22:
 167:Src/main.c    **** 		USART_SendChar(*p_string);
 565              		.loc 1 167 18 is_stmt 1 view .LVU119
 167:Src/main.c    **** 		USART_SendChar(*p_string);
 566              		.loc 1 167 8 is_stmt 0 view .LVU120
 567 000c 2078     		ldrb	r0, [r4]
 167:Src/main.c    **** 		USART_SendChar(*p_string);
 568              		.loc 1 167 18 view .LVU121
 569 000e 0028     		cmp	r0, #0
 570 0010 F9D1     		bne	.L23
 171:Src/main.c    **** }
 571              		.loc 1 171 2 is_stmt 1 view .LVU122
 572 0012 FFF7FEFF 		bl	USART_SendChar
 573              	.LVL31:
 172:Src/main.c    **** 
 574              		.loc 1 172 1 is_stmt 0 view .LVU123
 575              		@ sp needed
 576              	.LVL32:
 172:Src/main.c    **** 
 577              		.loc 1 172 1 view .LVU124
 578 0016 10BD     		pop	{r4, pc}
 579              		.cfi_endproc
 580              	.LFE47:
 582              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 583              		.align	2
 584              	.LC21:
 585 0000 434D443E 		.ascii	"CMD> \000"
 585      2000
 586              		.section	.text.ClearCommand,"ax",%progbits
 587              		.align	1
 588              		.global	ClearCommand
 589              		.syntax unified
 590              		.code	16
 591              		.thumb_func
 593              	ClearCommand:
 594              	.LFB48:
 177:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 595              		.loc 1 177 20 is_stmt 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 8
 598              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccT7NbC0.s 			page 21


 599 0000 00B5     		push	{lr}
 600              	.LCFI9:
 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 14, -4
 603 0002 83B0     		sub	sp, sp, #12
 604              	.LCFI10:
 605              		.cfi_def_cfa_offset 16
 178:Src/main.c    **** 	memset(command, 0, sizeof(command));
 606              		.loc 1 178 2 view .LVU126
 178:Src/main.c    **** 	memset(command, 0, sizeof(command));
 607              		.loc 1 178 10 is_stmt 0 view .LVU127
 608 0004 094B     		ldr	r3, .L25
 609 0006 1A68     		ldr	r2, [r3]
 610 0008 0092     		str	r2, [sp]
 611 000a 9B88     		ldrh	r3, [r3, #4]
 612 000c 6A46     		mov	r2, sp
 613 000e 9380     		strh	r3, [r2, #4]
 179:Src/main.c    **** 	incomingCommand = 0;
 614              		.loc 1 179 2 is_stmt 1 view .LVU128
 615 0010 0748     		ldr	r0, .L25+4
 616 0012 0322     		movs	r2, #3
 617 0014 0021     		movs	r1, #0
 618 0016 FFF7FEFF 		bl	memset
 619              	.LVL33:
 180:Src/main.c    **** 	USART_SendString(prompt);
 620              		.loc 1 180 2 view .LVU129
 180:Src/main.c    **** 	USART_SendString(prompt);
 621              		.loc 1 180 18 is_stmt 0 view .LVU130
 622 001a 064B     		ldr	r3, .L25+8
 623 001c 0022     		movs	r2, #0
 624 001e 1A70     		strb	r2, [r3]
 181:Src/main.c    **** }
 625              		.loc 1 181 2 is_stmt 1 view .LVU131
 626 0020 6846     		mov	r0, sp
 627 0022 FFF7FEFF 		bl	USART_SendString
 628              	.LVL34:
 182:Src/main.c    **** 
 629              		.loc 1 182 1 is_stmt 0 view .LVU132
 630 0026 03B0     		add	sp, sp, #12
 631              		@ sp needed
 632 0028 00BD     		pop	{pc}
 633              	.L26:
 634 002a C046     		.align	2
 635              	.L25:
 636 002c 00000000 		.word	.LC21
 637 0030 00000000 		.word	command
 638 0034 00000000 		.word	incomingCommand
 639              		.cfi_endproc
 640              	.LFE48:
 642              		.section	.rodata.Proceed.str1.4,"aMS",%progbits,1
 643              		.align	2
 644              	.LC25:
 645 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 645      79657420 
 645      696D706C 
 645      656D656E 
 645      7465640A 
ARM GAS  /tmp/ccT7NbC0.s 			page 22


 646              		.section	.text.Proceed,"ax",%progbits
 647              		.align	1
 648              		.global	Proceed
 649              		.syntax unified
 650              		.code	16
 651              		.thumb_func
 653              	Proceed:
 654              	.LFB51:
 226:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 655              		.loc 1 226 15 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659 0000 10B5     		push	{r4, lr}
 660              	.LCFI11:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 4, -8
 663              		.cfi_offset 14, -4
 227:Src/main.c    **** 	USART_SendString(err);
 664              		.loc 1 227 2 view .LVU134
 665              	.LVL35:
 228:Src/main.c    **** }
 666              		.loc 1 228 2 view .LVU135
 667 0002 0248     		ldr	r0, .L28
 668 0004 FFF7FEFF 		bl	USART_SendString
 669              	.LVL36:
 229:Src/main.c    **** 
 670              		.loc 1 229 1 is_stmt 0 view .LVU136
 671              		@ sp needed
 672 0008 10BD     		pop	{r4, pc}
 673              	.L29:
 674 000a C046     		.align	2
 675              	.L28:
 676 000c 00000000 		.word	.LC25
 677              		.cfi_endproc
 678              	.LFE51:
 680              		.global	__aeabi_f2d
 681              		.section	.rodata.PrintDistance.str1.4,"aMS",%progbits,1
 682              		.align	2
 683              	.LC27:
 684 0000 25660A00 		.ascii	"%f\012\000"
 685              		.section	.text.PrintDistance,"ax",%progbits
 686              		.align	1
 687              		.global	PrintDistance
 688              		.syntax unified
 689              		.code	16
 690              		.thumb_func
 692              	PrintDistance:
 693              	.LFB53:
 325:Src/main.c    **** 	char dist[32] = "";
 694              		.loc 1 325 1 is_stmt 1 view -0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 32
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698 0000 00B5     		push	{lr}
 699              	.LCFI12:
 700              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccT7NbC0.s 			page 23


 701              		.cfi_offset 14, -4
 702 0002 89B0     		sub	sp, sp, #36
 703              	.LCFI13:
 704              		.cfi_def_cfa_offset 40
 326:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 705              		.loc 1 326 2 view .LVU138
 326:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 706              		.loc 1 326 7 is_stmt 0 view .LVU139
 707 0004 0023     		movs	r3, #0
 708 0006 0093     		str	r3, [sp]
 709 0008 1C22     		movs	r2, #28
 710 000a 0021     		movs	r1, #0
 711 000c 01A8     		add	r0, sp, #4
 712 000e FFF7FEFF 		bl	memset
 713              	.LVL37:
 327:Src/main.c    **** 	USART_SendString(dist);
 714              		.loc 1 327 2 is_stmt 1 view .LVU140
 327:Src/main.c    **** 	USART_SendString(dist);
 715              		.loc 1 327 24 is_stmt 0 view .LVU141
 716 0012 FFF7FEFF 		bl	get_distance
 717              	.LVL38:
 327:Src/main.c    **** 	USART_SendString(dist);
 718              		.loc 1 327 2 view .LVU142
 719 0016 FFF7FEFF 		bl	__aeabi_f2d
 720              	.LVL39:
 721 001a 0200     		movs	r2, r0
 722 001c 0B00     		movs	r3, r1
 723 001e 0449     		ldr	r1, .L31
 724 0020 6846     		mov	r0, sp
 725 0022 FFF7FEFF 		bl	sprintf
 726              	.LVL40:
 328:Src/main.c    **** }
 727              		.loc 1 328 2 is_stmt 1 view .LVU143
 728 0026 6846     		mov	r0, sp
 729 0028 FFF7FEFF 		bl	USART_SendString
 730              	.LVL41:
 329:Src/main.c    **** 
 731              		.loc 1 329 1 is_stmt 0 view .LVU144
 732 002c 09B0     		add	sp, sp, #36
 733              		@ sp needed
 734 002e 00BD     		pop	{pc}
 735              	.L32:
 736              		.align	2
 737              	.L31:
 738 0030 00000000 		.word	.LC27
 739              		.cfi_endproc
 740              	.LFE53:
 742              		.global	__aeabi_ui2d
 743              		.global	__aeabi_ddiv
 744              		.global	__aeabi_d2uiz
 745              		.section	.text.GetUltrasonic,"ax",%progbits
 746              		.align	1
 747              		.global	GetUltrasonic
 748              		.syntax unified
 749              		.code	16
 750              		.thumb_func
 752              	GetUltrasonic:
ARM GAS  /tmp/ccT7NbC0.s 			page 24


 753              	.LVL42:
 754              	.LFB54:
 331:Src/main.c    **** 	uint32_t i = 0, j = 0;
 755              		.loc 1 331 54 is_stmt 1 view -0
 756              		.cfi_startproc
 757              		@ args = 0, pretend = 0, frame = 0
 758              		@ frame_needed = 0, uses_anonymous_args = 0
 331:Src/main.c    **** 	uint32_t i = 0, j = 0;
 759              		.loc 1 331 54 is_stmt 0 view .LVU146
 760 0000 70B5     		push	{r4, r5, r6, lr}
 761              	.LCFI14:
 762              		.cfi_def_cfa_offset 16
 763              		.cfi_offset 4, -16
 764              		.cfi_offset 5, -12
 765              		.cfi_offset 6, -8
 766              		.cfi_offset 14, -4
 767 0002 0400     		movs	r4, r0
 332:Src/main.c    **** 	TIM15->EGR |= 1; //clears counter
 768              		.loc 1 332 2 is_stmt 1 view .LVU147
 769              	.LVL43:
 333:Src/main.c    **** 	while(TIM15->EGR & 1)
 770              		.loc 1 333 2 view .LVU148
 333:Src/main.c    **** 	while(TIM15->EGR & 1)
 771              		.loc 1 333 7 is_stmt 0 view .LVU149
 772 0004 274A     		ldr	r2, .L43
 773 0006 5369     		ldr	r3, [r2, #20]
 333:Src/main.c    **** 	while(TIM15->EGR & 1)
 774              		.loc 1 333 13 view .LVU150
 775 0008 0121     		movs	r1, #1
 776 000a 0B43     		orrs	r3, r1
 777 000c 5361     		str	r3, [r2, #20]
 334:Src/main.c    **** 		;
 778              		.loc 1 334 2 is_stmt 1 view .LVU151
 779              	.L34:
 334:Src/main.c    **** 		;
 780              		.loc 1 334 8 discriminator 1 view .LVU152
 334:Src/main.c    **** 		;
 781              		.loc 1 334 13 is_stmt 0 discriminator 1 view .LVU153
 782 000e 254B     		ldr	r3, .L43
 783 0010 5B69     		ldr	r3, [r3, #20]
 334:Src/main.c    **** 		;
 784              		.loc 1 334 8 discriminator 1 view .LVU154
 785 0012 DB07     		lsls	r3, r3, #31
 786 0014 FBD4     		bmi	.L34
 336:Src/main.c    **** 	while (TIM15->CNT < 200){
 787              		.loc 1 336 2 is_stmt 1 view .LVU155
 788 0016 A18B     		ldrh	r1, [r4, #28]
 789 0018 A069     		ldr	r0, [r4, #24]
 790              	.LVL44:
 336:Src/main.c    **** 	while (TIM15->CNT < 200){
 791              		.loc 1 336 2 is_stmt 0 view .LVU156
 792 001a 0122     		movs	r2, #1
 793 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 794              	.LVL45:
 337:Src/main.c    **** 	}
 795              		.loc 1 337 2 is_stmt 1 view .LVU157
 796              	.L35:
ARM GAS  /tmp/ccT7NbC0.s 			page 25


 338:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 797              		.loc 1 338 2 discriminator 1 view .LVU158
 337:Src/main.c    **** 	}
 798              		.loc 1 337 20 discriminator 1 view .LVU159
 337:Src/main.c    **** 	}
 799              		.loc 1 337 14 is_stmt 0 discriminator 1 view .LVU160
 800 0020 204B     		ldr	r3, .L43
 801 0022 5B6A     		ldr	r3, [r3, #36]
 337:Src/main.c    **** 	}
 802              		.loc 1 337 20 discriminator 1 view .LVU161
 803 0024 C72B     		cmp	r3, #199
 804 0026 FBD9     		bls	.L35
 339:Src/main.c    **** 
 805              		.loc 1 339 2 is_stmt 1 view .LVU162
 806 0028 A18B     		ldrh	r1, [r4, #28]
 807 002a A069     		ldr	r0, [r4, #24]
 808 002c 0022     		movs	r2, #0
 809 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 810              	.LVL46:
 341:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 811              		.loc 1 341 2 view .LVU163
 341:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 812              		.loc 1 341 17 is_stmt 0 view .LVU164
 813 0032 1C4B     		ldr	r3, .L43
 814 0034 5A6A     		ldr	r2, [r3, #36]
 341:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 815              		.loc 1 341 10 view .LVU165
 816 0036 1C4B     		ldr	r3, .L43+4
 817 0038 1A60     		str	r2, [r3]
 342:Src/main.c    **** 		i++;
 818              		.loc 1 342 2 is_stmt 1 view .LVU166
 819              	.LVL47:
 820              	.L37:
 342:Src/main.c    **** 		i++;
 821              		.loc 1 342 79 view .LVU167
 342:Src/main.c    **** 		i++;
 822              		.loc 1 342 11 is_stmt 0 view .LVU168
 823 003a A188     		ldrh	r1, [r4, #4]
 824 003c 2068     		ldr	r0, [r4]
 825 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 826              	.LVL48:
 342:Src/main.c    **** 		i++;
 827              		.loc 1 342 79 view .LVU169
 828 0042 0028     		cmp	r0, #0
 829 0044 06D1     		bne	.L36
 342:Src/main.c    **** 		i++;
 830              		.loc 1 342 90 discriminator 1 view .LVU170
 831 0046 184B     		ldr	r3, .L43+4
 832 0048 1B68     		ldr	r3, [r3]
 833 004a C833     		adds	r3, r3, #200
 342:Src/main.c    **** 		i++;
 834              		.loc 1 342 104 discriminator 1 view .LVU171
 835 004c 154A     		ldr	r2, .L43
 836 004e 526A     		ldr	r2, [r2, #36]
 342:Src/main.c    **** 		i++;
 837              		.loc 1 342 79 discriminator 1 view .LVU172
 838 0050 9342     		cmp	r3, r2
ARM GAS  /tmp/ccT7NbC0.s 			page 26


 839 0052 F2D8     		bhi	.L37
 840              	.L36:
 345:Src/main.c    **** 
 841              		.loc 1 345 2 is_stmt 1 view .LVU173
 345:Src/main.c    **** 
 842              		.loc 1 345 11 is_stmt 0 view .LVU174
 843 0054 134B     		ldr	r3, .L43
 844 0056 5D6A     		ldr	r5, [r3, #36]
 845              	.LVL49:
 347:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 846              		.loc 1 347 2 is_stmt 1 view .LVU175
 347:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 847              		.loc 1 347 10 is_stmt 0 view .LVU176
 848 0058 134B     		ldr	r3, .L43+4
 849 005a 1D60     		str	r5, [r3]
 348:Src/main.c    **** 		j++;
 850              		.loc 1 348 2 is_stmt 1 view .LVU177
 851              	.LVL50:
 852              	.L39:
 348:Src/main.c    **** 		j++;
 853              		.loc 1 348 78 view .LVU178
 348:Src/main.c    **** 		j++;
 854              		.loc 1 348 10 is_stmt 0 view .LVU179
 855 005c A188     		ldrh	r1, [r4, #4]
 856 005e 2068     		ldr	r0, [r4]
 857 0060 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 858              	.LVL51:
 348:Src/main.c    **** 		j++;
 859              		.loc 1 348 78 view .LVU180
 860 0064 0028     		cmp	r0, #0
 861 0066 09D0     		beq	.L38
 348:Src/main.c    **** 		j++;
 862              		.loc 1 348 89 discriminator 1 view .LVU181
 863 0068 0F4B     		ldr	r3, .L43+4
 864 006a 1B68     		ldr	r3, [r3]
 865 006c 9622     		movs	r2, #150
 866 006e D200     		lsls	r2, r2, #3
 867 0070 9446     		mov	ip, r2
 868 0072 6344     		add	r3, r3, ip
 348:Src/main.c    **** 		j++;
 869              		.loc 1 348 103 discriminator 1 view .LVU182
 870 0074 0B4A     		ldr	r2, .L43
 871 0076 526A     		ldr	r2, [r2, #36]
 348:Src/main.c    **** 		j++;
 872              		.loc 1 348 78 discriminator 1 view .LVU183
 873 0078 9342     		cmp	r3, r2
 874 007a EFD8     		bhi	.L39
 875              	.L38:
 352:Src/main.c    **** 	if(val2-val1 == 1200)
 876              		.loc 1 352 2 is_stmt 1 view .LVU184
 352:Src/main.c    **** 	if(val2-val1 == 1200)
 877              		.loc 1 352 11 is_stmt 0 view .LVU185
 878 007c 094B     		ldr	r3, .L43
 879 007e 586A     		ldr	r0, [r3, #36]
 880              	.LVL52:
 353:Src/main.c    **** 		return -1;
 881              		.loc 1 353 2 is_stmt 1 view .LVU186
ARM GAS  /tmp/ccT7NbC0.s 			page 27


 353:Src/main.c    **** 		return -1;
 882              		.loc 1 353 9 is_stmt 0 view .LVU187
 883 0080 401B     		subs	r0, r0, r5
 884              	.LVL53:
 353:Src/main.c    **** 		return -1;
 885              		.loc 1 353 4 view .LVU188
 886 0082 9623     		movs	r3, #150
 887 0084 DB00     		lsls	r3, r3, #3
 888 0086 9842     		cmp	r0, r3
 889 0088 08D0     		beq	.L41
 355:Src/main.c    **** }
 890              		.loc 1 355 2 is_stmt 1 view .LVU189
 355:Src/main.c    **** }
 891              		.loc 1 355 20 is_stmt 0 view .LVU190
 892 008a FFF7FEFF 		bl	__aeabi_ui2d
 893              	.LVL54:
 894 008e 074A     		ldr	r2, .L43+8
 895 0090 074B     		ldr	r3, .L43+12
 896 0092 FFF7FEFF 		bl	__aeabi_ddiv
 897              	.LVL55:
 898 0096 FFF7FEFF 		bl	__aeabi_d2uiz
 899              	.LVL56:
 900              	.L33:
 356:Src/main.c    **** /* USER CODE END 0 */
 901              		.loc 1 356 1 view .LVU191
 902              		@ sp needed
 903              	.LVL57:
 904              	.LVL58:
 356:Src/main.c    **** /* USER CODE END 0 */
 905              		.loc 1 356 1 view .LVU192
 906 009a 70BD     		pop	{r4, r5, r6, pc}
 907              	.LVL59:
 908              	.L41:
 354:Src/main.c    **** 	return (val2-val1)/4.42; //this is a magic number that gives us centimeters with our prescaler val
 909              		.loc 1 354 10 view .LVU193
 910 009c 0120     		movs	r0, #1
 911 009e 4042     		rsbs	r0, r0, #0
 912 00a0 FBE7     		b	.L33
 913              	.L44:
 914 00a2 C046     		.align	2
 915              	.L43:
 916 00a4 00400140 		.word	1073823744
 917 00a8 00000000 		.word	pMillis
 918 00ac AE47E17A 		.word	2061584302
 919 00b0 14AE1140 		.word	1074900500
 920              		.cfi_endproc
 921              	.LFE54:
 923              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 924              		.align	2
 925              	.LC31:
 926 0000 556C7472 		.ascii	"Ultrasonic left: %d\012\000"
 926      61736F6E 
 926      6963206C 
 926      6566743A 
 926      2025640A 
 927 0015 000000   		.align	2
 928              	.LC34:
ARM GAS  /tmp/ccT7NbC0.s 			page 28


 929 0018 556C7472 		.ascii	"Ultrasonic right: %d\012\000"
 929      61736F6E 
 929      69632072 
 929      69676874 
 929      3A202564 
 930              		.global	__aeabi_f2iz
 931 002e 0000     		.align	2
 932              	.LC36:
 933 0030 44697374 		.ascii	"Distance travelled: %d\012\000"
 933      616E6365 
 933      20747261 
 933      76656C6C 
 933      65643A20 
 934              		.align	2
 935              	.LC38:
 936 0048 48656164 		.ascii	"Heading: %d\012\000"
 936      696E673A 
 936      2025640A 
 936      00
 937              		.section	.text.Log,"ax",%progbits
 938              		.align	1
 939              		.global	Log
 940              		.syntax unified
 941              		.code	16
 942              		.thumb_func
 944              	Log:
 945              	.LFB50:
 209:Src/main.c    **** 	uint8_t str_buff[32];
 946              		.loc 1 209 11 is_stmt 1 view -0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 32
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950 0000 00B5     		push	{lr}
 951              	.LCFI15:
 952              		.cfi_def_cfa_offset 4
 953              		.cfi_offset 14, -4
 954 0002 89B0     		sub	sp, sp, #36
 955              	.LCFI16:
 956              		.cfi_def_cfa_offset 40
 210:Src/main.c    **** 
 957              		.loc 1 210 2 view .LVU195
 212:Src/main.c    **** 	USART_SendString(str_buff);
 958              		.loc 1 212 2 view .LVU196
 959 0004 1648     		ldr	r0, .L46
 960 0006 FFF7FEFF 		bl	GetUltrasonic
 961              	.LVL60:
 962 000a 0200     		movs	r2, r0
 963 000c 1549     		ldr	r1, .L46+4
 964 000e 6846     		mov	r0, sp
 965 0010 FFF7FEFF 		bl	sprintf
 966              	.LVL61:
 213:Src/main.c    **** 
 967              		.loc 1 213 2 view .LVU197
 968 0014 6846     		mov	r0, sp
 969 0016 FFF7FEFF 		bl	USART_SendString
 970              	.LVL62:
 215:Src/main.c    **** 	USART_SendString(str_buff);
ARM GAS  /tmp/ccT7NbC0.s 			page 29


 971              		.loc 1 215 2 view .LVU198
 972 001a 1348     		ldr	r0, .L46+8
 973 001c FFF7FEFF 		bl	GetUltrasonic
 974              	.LVL63:
 975 0020 0200     		movs	r2, r0
 976 0022 1249     		ldr	r1, .L46+12
 977 0024 6846     		mov	r0, sp
 978 0026 FFF7FEFF 		bl	sprintf
 979              	.LVL64:
 216:Src/main.c    **** 
 980              		.loc 1 216 2 view .LVU199
 981 002a 6846     		mov	r0, sp
 982 002c FFF7FEFF 		bl	USART_SendString
 983              	.LVL65:
 218:Src/main.c    **** 	USART_SendString(str_buff);
 984              		.loc 1 218 2 view .LVU200
 218:Src/main.c    **** 	USART_SendString(str_buff);
 985              		.loc 1 218 53 is_stmt 0 view .LVU201
 986 0030 FFF7FEFF 		bl	get_distance
 987              	.LVL66:
 218:Src/main.c    **** 	USART_SendString(str_buff);
 988              		.loc 1 218 2 view .LVU202
 989 0034 FFF7FEFF 		bl	__aeabi_f2iz
 990              	.LVL67:
 991 0038 0200     		movs	r2, r0
 992 003a 0D49     		ldr	r1, .L46+16
 993 003c 6846     		mov	r0, sp
 994 003e FFF7FEFF 		bl	sprintf
 995              	.LVL68:
 219:Src/main.c    **** 
 996              		.loc 1 219 2 is_stmt 1 view .LVU203
 997 0042 6846     		mov	r0, sp
 998 0044 FFF7FEFF 		bl	USART_SendString
 999              	.LVL69:
 221:Src/main.c    **** 	USART_SendString(str_buff);
 1000              		.loc 1 221 2 view .LVU204
 221:Src/main.c    **** 	USART_SendString(str_buff);
 1001              		.loc 1 221 42 is_stmt 0 view .LVU205
 1002 0048 FFF7FEFF 		bl	get_heading
 1003              	.LVL70:
 1004 004c 0200     		movs	r2, r0
 221:Src/main.c    **** 	USART_SendString(str_buff);
 1005              		.loc 1 221 2 view .LVU206
 1006 004e 0949     		ldr	r1, .L46+20
 1007 0050 6846     		mov	r0, sp
 1008 0052 FFF7FEFF 		bl	sprintf
 1009              	.LVL71:
 222:Src/main.c    **** 
 1010              		.loc 1 222 2 is_stmt 1 view .LVU207
 1011 0056 6846     		mov	r0, sp
 1012 0058 FFF7FEFF 		bl	USART_SendString
 1013              	.LVL72:
 224:Src/main.c    **** 
 1014              		.loc 1 224 1 is_stmt 0 view .LVU208
 1015 005c 09B0     		add	sp, sp, #36
 1016              		@ sp needed
 1017 005e 00BD     		pop	{pc}
ARM GAS  /tmp/ccT7NbC0.s 			page 30


 1018              	.L47:
 1019              		.align	2
 1020              	.L46:
 1021 0060 00000000 		.word	ultrasonic_left_pins
 1022 0064 00000000 		.word	.LC31
 1023 0068 00000000 		.word	ultrasonic_right_pins
 1024 006c 18000000 		.word	.LC34
 1025 0070 30000000 		.word	.LC36
 1026 0074 48000000 		.word	.LC38
 1027              		.cfi_endproc
 1028              	.LFE50:
 1030              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 1031              		.align	2
 1032              	.LC55:
 1033 0000 696E6465 		.ascii	"indefinitely\012\000"
 1033      66696E69 
 1033      74656C79 
 1033      0A00
 1034              		.global	__aeabi_ui2f
 1035 000e 0000     		.align	2
 1036              	.LC40:
 1037 0010 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 1037      523A2049 
 1037      6E76616C 
 1037      69642063 
 1037      6F6D6D61 
 1038 0029 000000   		.align	2
 1039              	.LC42:
 1040 002c 4D6F7669 		.ascii	"Moving forward \000"
 1040      6E672066 
 1040      6F727761 
 1040      72642000 
 1041              		.align	2
 1042              	.LC44:
 1043 003c 5475726E 		.ascii	"Turning left \000"
 1043      696E6720 
 1043      6C656674 
 1043      2000
 1044 004a 0000     		.align	2
 1045              	.LC46:
 1046 004c 5475726E 		.ascii	"Turning right \000"
 1046      696E6720 
 1046      72696768 
 1046      742000
 1047 005b 00       		.align	2
 1048              	.LC48:
 1049 005c 4C6F6767 		.ascii	"Logging sensor data\012\000"
 1049      696E6720 
 1049      73656E73 
 1049      6F722064 
 1049      6174610A 
 1050 0071 000000   		.align	2
 1051              	.LC50:
 1052 0074 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 1052      72696E67 
 1052      20617574 
 1052      6F6E6F6D 
ARM GAS  /tmp/ccT7NbC0.s 			page 31


 1052      6F757320 
 1053 0091 000000   		.align	2
 1054              	.LC52:
 1055 0094 53746F70 		.ascii	"Stopping all motors!\012\000"
 1055      70696E67 
 1055      20616C6C 
 1055      206D6F74 
 1055      6F727321 
 1056              		.section	.text.ProcessCommand,"ax",%progbits
 1057              		.align	1
 1058              		.global	ProcessCommand
 1059              		.syntax unified
 1060              		.code	16
 1061              		.thumb_func
 1063              	ProcessCommand:
 1064              	.LVL73:
 1065              	.LFB52:
 231:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 1066              		.loc 1 231 57 is_stmt 1 view -0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 184
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
 231:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 1070              		.loc 1 231 57 is_stmt 0 view .LVU210
 1071 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1072              	.LCFI17:
 1073              		.cfi_def_cfa_offset 20
 1074              		.cfi_offset 4, -20
 1075              		.cfi_offset 5, -16
 1076              		.cfi_offset 6, -12
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 1079 0002 AFB0     		sub	sp, sp, #188
 1080              	.LCFI18:
 1081              		.cfi_def_cfa_offset 208
 1082 0004 0500     		movs	r5, r0
 1083 0006 0C00     		movs	r4, r1
 232:Src/main.c    **** 
 1084              		.loc 1 232 2 is_stmt 1 view .LVU211
 232:Src/main.c    **** 
 1085              		.loc 1 232 10 is_stmt 0 view .LVU212
 1086 0008 27A9     		add	r1, sp, #156
 1087              	.LVL74:
 232:Src/main.c    **** 
 1088              		.loc 1 232 10 view .LVU213
 1089 000a 574B     		ldr	r3, .L68
 1090 000c 0A00     		movs	r2, r1
 1091 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 1092 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 1093              	.LVL75:
 232:Src/main.c    **** 
 1094              		.loc 1 232 10 view .LVU214
 1095 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 1096 0014 43C2     		stmia	r2!, {r0, r1, r6}
 1097 0016 1B78     		ldrb	r3, [r3]
 1098 0018 1370     		strb	r3, [r2]
 234:Src/main.c    **** 	uint8_t left[] = "Turning left ";
ARM GAS  /tmp/ccT7NbC0.s 			page 32


 1099              		.loc 1 234 2 is_stmt 1 view .LVU215
 234:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1100              		.loc 1 234 10 is_stmt 0 view .LVU216
 1101 001a 23AA     		add	r2, sp, #140
 1102 001c 534B     		ldr	r3, .L68+4
 1103 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 1104 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 1105 0022 1B68     		ldr	r3, [r3]
 1106 0024 1360     		str	r3, [r2]
 235:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1107              		.loc 1 235 2 is_stmt 1 view .LVU217
 235:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1108              		.loc 1 235 10 is_stmt 0 view .LVU218
 1109 0026 1FAA     		add	r2, sp, #124
 1110 0028 514B     		ldr	r3, .L68+8
 1111 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 1112 002c C1C2     		stmia	r2!, {r0, r6, r7}
 1113 002e 1B88     		ldrh	r3, [r3]
 1114 0030 1380     		strh	r3, [r2]
 236:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1115              		.loc 1 236 2 is_stmt 1 view .LVU219
 236:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1116              		.loc 1 236 10 is_stmt 0 view .LVU220
 1117 0032 1BAA     		add	r2, sp, #108
 1118 0034 4F4B     		ldr	r3, .L68+12
 1119 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 1120 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 1121 003a 1100     		movs	r1, r2
 1122 003c 1A88     		ldrh	r2, [r3]
 1123 003e 0A80     		strh	r2, [r1]
 1124 0040 9B78     		ldrb	r3, [r3, #2]
 1125 0042 8B70     		strb	r3, [r1, #2]
 237:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1126              		.loc 1 237 2 is_stmt 1 view .LVU221
 237:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1127              		.loc 1 237 10 is_stmt 0 view .LVU222
 1128 0044 15A9     		add	r1, sp, #84
 1129 0046 4C4B     		ldr	r3, .L68+16
 1130 0048 0A00     		movs	r2, r1
 1131 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 1132 004c C1C2     		stmia	r2!, {r0, r6, r7}
 1133 004e 03CB     		ldmia	r3!, {r0, r1}
 1134 0050 03C2     		stmia	r2!, {r0, r1}
 1135 0052 1B78     		ldrb	r3, [r3]
 1136 0054 1370     		strb	r3, [r2]
 238:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1137              		.loc 1 238 2 is_stmt 1 view .LVU223
 238:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1138              		.loc 1 238 10 is_stmt 0 view .LVU224
 1139 0056 0DA9     		add	r1, sp, #52
 1140 0058 484B     		ldr	r3, .L68+20
 1141 005a 0A00     		movs	r2, r1
 1142 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 1143 005e C1C2     		stmia	r2!, {r0, r6, r7}
 1144 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 1145 0062 43C2     		stmia	r2!, {r0, r1, r6}
 1146 0064 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccT7NbC0.s 			page 33


 1147 0066 1160     		str	r1, [r2]
 1148 0068 1B79     		ldrb	r3, [r3, #4]
 1149 006a 1371     		strb	r3, [r2, #4]
 239:Src/main.c    **** 
 1150              		.loc 1 239 2 is_stmt 1 view .LVU225
 239:Src/main.c    **** 
 1151              		.loc 1 239 10 is_stmt 0 view .LVU226
 1152 006c 07A9     		add	r1, sp, #28
 1153 006e 444B     		ldr	r3, .L68+24
 1154 0070 0A00     		movs	r2, r1
 1155 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 1156 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 1157 0076 03CB     		ldmia	r3!, {r0, r1}
 1158 0078 03C2     		stmia	r2!, {r0, r1}
 1159 007a 1B88     		ldrh	r3, [r3]
 1160 007c 1380     		strh	r3, [r2]
 241:Src/main.c    **** 
 1161              		.loc 1 241 2 is_stmt 1 view .LVU227
 241:Src/main.c    **** 
 1162              		.loc 1 241 15 is_stmt 0 view .LVU228
 1163 007e 0822     		movs	r2, #8
 1164 0080 0021     		movs	r1, #0
 1165 0082 05A8     		add	r0, sp, #20
 1166 0084 FFF7FEFF 		bl	memset
 1167              	.LVL76:
 243:Src/main.c    **** 	uint8_t part2[15];
 1168              		.loc 1 243 2 is_stmt 1 view .LVU229
 244:Src/main.c    **** 	uint8_t zero = 0;
 1169              		.loc 1 244 2 view .LVU230
 245:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1170              		.loc 1 245 2 view .LVU231
 245:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1171              		.loc 1 245 10 is_stmt 0 view .LVU232
 1172 0088 6B46     		mov	r3, sp
 1173 008a D91C     		adds	r1, r3, #3
 1174 008c 0023     		movs	r3, #0
 1175 008e 0B70     		strb	r3, [r1]
 246:Src/main.c    **** 
 1176              		.loc 1 246 2 is_stmt 1 view .LVU233
 1177 0090 0F22     		movs	r2, #15
 1178 0092 01A8     		add	r0, sp, #4
 1179 0094 FFF7FEFF 		bl	memcpy
 1180              	.LVL77:
 248:Src/main.c    **** 		case 'w':
 1181              		.loc 1 248 2 view .LVU234
 1182 0098 2B00     		movs	r3, r5
 1183 009a 613B     		subs	r3, r3, #97
 1184 009c DAB2     		uxtb	r2, r3
 1185 009e 172A     		cmp	r2, #23
 1186 00a0 46D8     		bhi	.L49
 1187 00a2 9300     		lsls	r3, r2, #2
 1188 00a4 374A     		ldr	r2, .L68+28
 1189 00a6 D358     		ldr	r3, [r2, r3]
 1190 00a8 9F46     		mov	pc, r3
 1191              		.section	.rodata.ProcessCommand,"a",%progbits
 1192              		.align	2
 1193              	.L51:
ARM GAS  /tmp/ccT7NbC0.s 			page 34


 1194 0000 AA000000 		.word	.L56
 1195 0004 30010000 		.word	.L49
 1196 0008 30010000 		.word	.L49
 1197 000c F0000000 		.word	.L55
 1198 0010 30010000 		.word	.L49
 1199 0014 30010000 		.word	.L49
 1200 0018 30010000 		.word	.L49
 1201 001c 30010000 		.word	.L49
 1202 0020 30010000 		.word	.L49
 1203 0024 30010000 		.word	.L49
 1204 0028 30010000 		.word	.L49
 1205 002c FA000000 		.word	.L54
 1206 0030 30010000 		.word	.L49
 1207 0034 30010000 		.word	.L49
 1208 0038 30010000 		.word	.L49
 1209 003c 0A010000 		.word	.L53
 1210 0040 30010000 		.word	.L49
 1211 0044 30010000 		.word	.L49
 1212 0048 30010000 		.word	.L49
 1213 004c 30010000 		.word	.L49
 1214 0050 30010000 		.word	.L49
 1215 0054 30010000 		.word	.L49
 1216 0058 3C010000 		.word	.L63
 1217 005c 1A010000 		.word	.L50
 1218              		.section	.text.ProcessCommand
 1219              	.L56:
 254:Src/main.c    **** 			motorcmd.dir = LEFT;
 1220              		.loc 1 254 4 view .LVU235
 1221              	.LVL78:
 255:Src/main.c    **** 			break;
 1222              		.loc 1 255 4 view .LVU236
 255:Src/main.c    **** 			break;
 1223              		.loc 1 255 17 is_stmt 0 view .LVU237
 1224 00aa 05AB     		add	r3, sp, #20
 1225 00ac 0122     		movs	r2, #1
 1226 00ae 1A70     		strb	r2, [r3]
 256:Src/main.c    **** 		case 'd':
 1227              		.loc 1 256 4 is_stmt 1 view .LVU238
 254:Src/main.c    **** 			motorcmd.dir = LEFT;
 1228              		.loc 1 254 10 is_stmt 0 view .LVU239
 1229 00b0 1FAE     		add	r6, sp, #124
 1230              	.LVL79:
 1231              	.L52:
 287:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1232              		.loc 1 287 2 is_stmt 1 view .LVU240
 287:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1233              		.loc 1 287 4 is_stmt 0 view .LVU241
 1234 00b2 302C     		cmp	r4, #48
 1235 00b4 44D0     		beq	.L65
 1236              	.L58:
 291:Src/main.c    **** 		USART_SendString(err);
 1237              		.loc 1 291 7 is_stmt 1 view .LVU242
 291:Src/main.c    **** 		USART_SendString(err);
 1238              		.loc 1 291 25 is_stmt 0 view .LVU243
 1239 00b6 2300     		movs	r3, r4
 1240 00b8 313B     		subs	r3, r3, #49
 1241 00ba DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccT7NbC0.s 			page 35


 291:Src/main.c    **** 		USART_SendString(err);
 1242              		.loc 1 291 9 view .LVU244
 1243 00bc 082B     		cmp	r3, #8
 1244 00be 4AD8     		bhi	.L66
 1245              	.LBB13:
 297:Src/main.c    **** 		if(dist == 80)
 1246              		.loc 1 297 3 is_stmt 1 view .LVU245
 297:Src/main.c    **** 		if(dist == 80)
 1247              		.loc 1 297 11 is_stmt 0 view .LVU246
 1248 00c0 1420     		movs	r0, #20
 1249 00c2 6043     		muls	r0, r4
 1250 00c4 4030     		adds	r0, r0, #64
 1251 00c6 C0B2     		uxtb	r0, r0
 1252              	.LVL80:
 298:Src/main.c    **** 			dist = 90; //support for 90-degree turns
 1253              		.loc 1 298 3 is_stmt 1 view .LVU247
 298:Src/main.c    **** 			dist = 90; //support for 90-degree turns
 1254              		.loc 1 298 5 is_stmt 0 view .LVU248
 1255 00c8 5028     		cmp	r0, #80
 1256 00ca 4AD0     		beq	.L67
 1257              	.LVL81:
 1258              	.L61:
 300:Src/main.c    **** 	}
 1259              		.loc 1 300 3 is_stmt 1 view .LVU249
 300:Src/main.c    **** 	}
 1260              		.loc 1 300 19 is_stmt 0 view .LVU250
 1261 00cc FFF7FEFF 		bl	__aeabi_ui2f
 1262              	.LVL82:
 300:Src/main.c    **** 	}
 1263              		.loc 1 300 19 view .LVU251
 1264 00d0 0690     		str	r0, [sp, #24]
 1265              	.LVL83:
 1266              	.L59:
 300:Src/main.c    **** 	}
 1267              		.loc 1 300 19 view .LVU252
 1268              	.LBE13:
 304:Src/main.c    **** 	USART_SendString(part2);
 1269              		.loc 1 304 2 is_stmt 1 view .LVU253
 1270 00d2 3000     		movs	r0, r6
 1271 00d4 FFF7FEFF 		bl	USART_SendString
 1272              	.LVL84:
 305:Src/main.c    **** 
 1273              		.loc 1 305 2 view .LVU254
 1274 00d8 01A8     		add	r0, sp, #4
 1275 00da FFF7FEFF 		bl	USART_SendString
 1276              	.LVL85:
 317:Src/main.c    **** 	USART_SendString(result);
 1277              		.loc 1 317 2 view .LVU255
 317:Src/main.c    **** 	USART_SendString(result);
 1278              		.loc 1 317 20 is_stmt 0 view .LVU256
 1279 00de 05A8     		add	r0, sp, #20
 1280 00e0 FFF7FEFF 		bl	MoveMotors
 1281              	.LVL86:
 318:Src/main.c    **** 
 1282              		.loc 1 318 2 is_stmt 1 view .LVU257
 1283 00e4 FFF7FEFF 		bl	USART_SendString
 1284              	.LVL87:
ARM GAS  /tmp/ccT7NbC0.s 			page 36


 320:Src/main.c    **** 
 1285              		.loc 1 320 2 view .LVU258
 1286 00e8 FFF7FEFF 		bl	ClearCommand
 1287              	.LVL88:
 1288              	.L48:
 322:Src/main.c    **** 
 1289              		.loc 1 322 1 is_stmt 0 view .LVU259
 1290 00ec 2FB0     		add	sp, sp, #188
 1291              		@ sp needed
 1292 00ee F0BD     		pop	{r4, r5, r6, r7, pc}
 1293              	.L55:
 258:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1294              		.loc 1 258 4 is_stmt 1 view .LVU260
 1295              	.LVL89:
 259:Src/main.c    **** 			break;
 1296              		.loc 1 259 4 view .LVU261
 259:Src/main.c    **** 			break;
 1297              		.loc 1 259 17 is_stmt 0 view .LVU262
 1298 00f0 05AB     		add	r3, sp, #20
 1299 00f2 0222     		movs	r2, #2
 1300 00f4 1A70     		strb	r2, [r3]
 260:Src/main.c    **** 		case 'l':
 1301              		.loc 1 260 4 is_stmt 1 view .LVU263
 258:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1302              		.loc 1 258 10 is_stmt 0 view .LVU264
 1303 00f6 1BAE     		add	r6, sp, #108
 1304              	.LVL90:
 260:Src/main.c    **** 		case 'l':
 1305              		.loc 1 260 4 view .LVU265
 1306 00f8 DBE7     		b	.L52
 1307              	.LVL91:
 1308              	.L54:
 262:Src/main.c    **** 			USART_SendString(part1);
 1309              		.loc 1 262 4 is_stmt 1 view .LVU266
 263:Src/main.c    **** 			Log();
 1310              		.loc 1 263 4 view .LVU267
 1311 00fa 15A8     		add	r0, sp, #84
 1312              	.LVL92:
 263:Src/main.c    **** 			Log();
 1313              		.loc 1 263 4 is_stmt 0 view .LVU268
 1314 00fc FFF7FEFF 		bl	USART_SendString
 1315              	.LVL93:
 264:Src/main.c    **** 			ClearCommand();
 1316              		.loc 1 264 4 is_stmt 1 view .LVU269
 1317 0100 FFF7FEFF 		bl	Log
 1318              	.LVL94:
 265:Src/main.c    **** 			return;
 1319              		.loc 1 265 4 view .LVU270
 1320 0104 FFF7FEFF 		bl	ClearCommand
 1321              	.LVL95:
 266:Src/main.c    **** 		case 'p':
 1322              		.loc 1 266 4 view .LVU271
 1323 0108 F0E7     		b	.L48
 1324              	.LVL96:
 1325              	.L53:
 268:Src/main.c    **** 			USART_SendString(part1);
 1326              		.loc 1 268 4 view .LVU272
ARM GAS  /tmp/ccT7NbC0.s 			page 37


 269:Src/main.c    **** 			Proceed();
 1327              		.loc 1 269 4 view .LVU273
 1328 010a 0DA8     		add	r0, sp, #52
 1329              	.LVL97:
 269:Src/main.c    **** 			Proceed();
 1330              		.loc 1 269 4 is_stmt 0 view .LVU274
 1331 010c FFF7FEFF 		bl	USART_SendString
 1332              	.LVL98:
 270:Src/main.c    **** 			ClearCommand();
 1333              		.loc 1 270 4 is_stmt 1 view .LVU275
 1334 0110 FFF7FEFF 		bl	Proceed
 1335              	.LVL99:
 271:Src/main.c    **** 			return;
 1336              		.loc 1 271 4 view .LVU276
 1337 0114 FFF7FEFF 		bl	ClearCommand
 1338              	.LVL100:
 272:Src/main.c    **** 		case 'x':
 1339              		.loc 1 272 4 view .LVU277
 1340 0118 E8E7     		b	.L48
 1341              	.LVL101:
 1342              	.L50:
 274:Src/main.c    **** 			USART_SendString(part1);
 1343              		.loc 1 274 4 view .LVU278
 275:Src/main.c    **** 			motorcmd.dir = OFF;
 1344              		.loc 1 275 4 view .LVU279
 1345 011a 07A8     		add	r0, sp, #28
 1346              	.LVL102:
 275:Src/main.c    **** 			motorcmd.dir = OFF;
 1347              		.loc 1 275 4 is_stmt 0 view .LVU280
 1348 011c FFF7FEFF 		bl	USART_SendString
 1349              	.LVL103:
 276:Src/main.c    **** 			MoveMotors(&motorcmd);
 1350              		.loc 1 276 4 is_stmt 1 view .LVU281
 276:Src/main.c    **** 			MoveMotors(&motorcmd);
 1351              		.loc 1 276 17 is_stmt 0 view .LVU282
 1352 0120 05A8     		add	r0, sp, #20
 1353 0122 0423     		movs	r3, #4
 1354 0124 0370     		strb	r3, [r0]
 277:Src/main.c    **** 			ClearCommand();
 1355              		.loc 1 277 4 is_stmt 1 view .LVU283
 1356 0126 FFF7FEFF 		bl	MoveMotors
 1357              	.LVL104:
 278:Src/main.c    **** 			return;
 1358              		.loc 1 278 4 view .LVU284
 1359 012a FFF7FEFF 		bl	ClearCommand
 1360              	.LVL105:
 279:Src/main.c    **** 		default:
 1361              		.loc 1 279 4 view .LVU285
 1362 012e DDE7     		b	.L48
 1363              	.LVL106:
 1364              	.L49:
 281:Src/main.c    **** 			ClearCommand();
 1365              		.loc 1 281 4 view .LVU286
 1366 0130 27A8     		add	r0, sp, #156
 1367 0132 FFF7FEFF 		bl	USART_SendString
 1368              	.LVL107:
 282:Src/main.c    **** 			return;
ARM GAS  /tmp/ccT7NbC0.s 			page 38


 1369              		.loc 1 282 4 view .LVU287
 1370 0136 FFF7FEFF 		bl	ClearCommand
 1371              	.LVL108:
 283:Src/main.c    **** 	}
 1372              		.loc 1 283 4 view .LVU288
 1373 013a D7E7     		b	.L48
 1374              	.L63:
 248:Src/main.c    **** 		case 'w':
 1375              		.loc 1 248 2 is_stmt 0 view .LVU289
 1376 013c 23AE     		add	r6, sp, #140
 1377 013e B8E7     		b	.L52
 1378              	.LVL109:
 1379              	.L65:
 287:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1380              		.loc 1 287 21 discriminator 1 view .LVU290
 1381 0140 772D     		cmp	r5, #119
 1382 0142 B8D1     		bne	.L58
 288:Src/main.c    **** 		motorcmd.amount = 0;
 1383              		.loc 1 288 3 is_stmt 1 view .LVU291
 1384 0144 01AA     		add	r2, sp, #4
 1385 0146 104B     		ldr	r3, .L68+32
 1386 0148 31CB     		ldmia	r3!, {r0, r4, r5}
 1387 014a 31C2     		stmia	r2!, {r0, r4, r5}
 1388 014c 1B88     		ldrh	r3, [r3]
 1389 014e 1380     		strh	r3, [r2]
 289:Src/main.c    **** 	}
 1390              		.loc 1 289 3 view .LVU292
 289:Src/main.c    **** 	}
 1391              		.loc 1 289 19 is_stmt 0 view .LVU293
 1392 0150 0023     		movs	r3, #0
 1393 0152 0693     		str	r3, [sp, #24]
 1394 0154 BDE7     		b	.L59
 1395              	.L66:
 292:Src/main.c    **** 		ClearCommand();
 1396              		.loc 1 292 3 is_stmt 1 view .LVU294
 1397 0156 27A8     		add	r0, sp, #156
 1398 0158 FFF7FEFF 		bl	USART_SendString
 1399              	.LVL110:
 293:Src/main.c    **** 		return;
 1400              		.loc 1 293 3 view .LVU295
 1401 015c FFF7FEFF 		bl	ClearCommand
 1402              	.LVL111:
 294:Src/main.c    **** 	}
 1403              		.loc 1 294 3 view .LVU296
 1404 0160 C4E7     		b	.L48
 1405              	.LVL112:
 1406              	.L67:
 1407              	.LBB14:
 299:Src/main.c    **** 		motorcmd.amount = dist;
 1408              		.loc 1 299 9 is_stmt 0 view .LVU297
 1409 0162 0A30     		adds	r0, r0, #10
 1410              	.LVL113:
 299:Src/main.c    **** 		motorcmd.amount = dist;
 1411              		.loc 1 299 9 view .LVU298
 1412 0164 B2E7     		b	.L61
 1413              	.L69:
 1414 0166 C046     		.align	2
ARM GAS  /tmp/ccT7NbC0.s 			page 39


 1415              	.L68:
 1416 0168 10000000 		.word	.LC40
 1417 016c 2C000000 		.word	.LC42
 1418 0170 3C000000 		.word	.LC44
 1419 0174 4C000000 		.word	.LC46
 1420 0178 5C000000 		.word	.LC48
 1421 017c 74000000 		.word	.LC50
 1422 0180 94000000 		.word	.LC52
 1423 0184 00000000 		.word	.L51
 1424 0188 00000000 		.word	.LC55
 1425              	.LBE14:
 1426              		.cfi_endproc
 1427              	.LFE52:
 1429              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1430              		.align	2
 1431              	.LC58:
 1432 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 1432      616E6420 
 1432      746F6F20 
 1432      6C6F6E67 
 1432      210A00
 1433              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 1434              		.align	1
 1435              		.global	USART3_4_IRQHandler
 1436              		.syntax unified
 1437              		.code	16
 1438              		.thumb_func
 1440              	USART3_4_IRQHandler:
 1441              	.LFB49:
 184:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 1442              		.loc 1 184 27 is_stmt 1 view -0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 24
 1445              		@ frame_needed = 0, uses_anonymous_args = 0
 1446 0000 30B5     		push	{r4, r5, lr}
 1447              	.LCFI19:
 1448              		.cfi_def_cfa_offset 12
 1449              		.cfi_offset 4, -12
 1450              		.cfi_offset 5, -8
 1451              		.cfi_offset 14, -4
 1452 0002 87B0     		sub	sp, sp, #28
 1453              	.LCFI20:
 1454              		.cfi_def_cfa_offset 40
 185:Src/main.c    **** 	incomingCommand = 1;
 1455              		.loc 1 185 2 view .LVU300
 185:Src/main.c    **** 	incomingCommand = 1;
 1456              		.loc 1 185 10 is_stmt 0 view .LVU301
 1457 0004 01AA     		add	r2, sp, #4
 1458 0006 204B     		ldr	r3, .L76
 1459 0008 1800     		movs	r0, r3
 1460 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 1461 000c 38C2     		stmia	r2!, {r3, r4, r5}
 1462 000e 0368     		ldr	r3, [r0]
 1463 0010 1360     		str	r3, [r2]
 1464 0012 8388     		ldrh	r3, [r0, #4]
 1465 0014 9380     		strh	r3, [r2, #4]
 1466 0016 8379     		ldrb	r3, [r0, #6]
ARM GAS  /tmp/ccT7NbC0.s 			page 40


 1467 0018 9371     		strb	r3, [r2, #6]
 186:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 1468              		.loc 1 186 2 is_stmt 1 view .LVU302
 186:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 1469              		.loc 1 186 18 is_stmt 0 view .LVU303
 1470 001a 1C4B     		ldr	r3, .L76+4
 1471 001c 0122     		movs	r2, #1
 1472 001e 1A70     		strb	r2, [r3]
 187:Src/main.c    **** 	}
 1473              		.loc 1 187 2 is_stmt 1 view .LVU304
 1474              	.L71:
 188:Src/main.c    **** 	if(command[0]){
 1475              		.loc 1 188 2 discriminator 1 view .LVU305
 187:Src/main.c    **** 	}
 1476              		.loc 1 187 8 discriminator 1 view .LVU306
 187:Src/main.c    **** 	}
 1477              		.loc 1 187 16 is_stmt 0 discriminator 1 view .LVU307
 1478 0020 1B4B     		ldr	r3, .L76+8
 1479 0022 DB69     		ldr	r3, [r3, #28]
 187:Src/main.c    **** 	}
 1480              		.loc 1 187 8 discriminator 1 view .LVU308
 1481 0024 9B06     		lsls	r3, r3, #26
 1482 0026 FBD5     		bpl	.L71
 189:Src/main.c    **** 		if(command[1]){
 1483              		.loc 1 189 2 is_stmt 1 view .LVU309
 189:Src/main.c    **** 		if(command[1]){
 1484              		.loc 1 189 12 is_stmt 0 view .LVU310
 1485 0028 1A4B     		ldr	r3, .L76+12
 1486 002a 1B78     		ldrb	r3, [r3]
 189:Src/main.c    **** 		if(command[1]){
 1487              		.loc 1 189 4 view .LVU311
 1488 002c 002B     		cmp	r3, #0
 1489 002e 16D0     		beq	.L72
 190:Src/main.c    **** 			USART_SendString(err);
 1490              		.loc 1 190 3 is_stmt 1 view .LVU312
 190:Src/main.c    **** 			USART_SendString(err);
 1491              		.loc 1 190 13 is_stmt 0 view .LVU313
 1492 0030 184B     		ldr	r3, .L76+12
 1493 0032 5B78     		ldrb	r3, [r3, #1]
 190:Src/main.c    **** 			USART_SendString(err);
 1494              		.loc 1 190 5 view .LVU314
 1495 0034 002B     		cmp	r3, #0
 1496 0036 06D0     		beq	.L73
 191:Src/main.c    **** 			ClearCommand();
 1497              		.loc 1 191 4 is_stmt 1 view .LVU315
 1498 0038 01A8     		add	r0, sp, #4
 1499 003a FFF7FEFF 		bl	USART_SendString
 1500              	.LVL114:
 192:Src/main.c    **** 		}
 1501              		.loc 1 192 4 view .LVU316
 1502 003e FFF7FEFF 		bl	ClearCommand
 1503              	.LVL115:
 1504              	.L70:
 207:Src/main.c    **** 
 1505              		.loc 1 207 1 is_stmt 0 view .LVU317
 1506 0042 07B0     		add	sp, sp, #28
 1507              		@ sp needed
ARM GAS  /tmp/ccT7NbC0.s 			page 41


 1508 0044 30BD     		pop	{r4, r5, pc}
 1509              	.L73:
 1510              	.LBB15:
 195:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 1511              		.loc 1 195 4 is_stmt 1 view .LVU318
 195:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 1512              		.loc 1 195 23 is_stmt 0 view .LVU319
 1513 0046 124B     		ldr	r3, .L76+8
 1514 0048 9A8C     		ldrh	r2, [r3, #36]
 195:Src/main.c    **** 			ProcessCommand(command[0], command[1]);
 1515              		.loc 1 195 15 view .LVU320
 1516 004a D2B2     		uxtb	r2, r2
 1517 004c 114B     		ldr	r3, .L76+12
 1518 004e 5A70     		strb	r2, [r3, #1]
 196:Src/main.c    **** 		}
 1519              		.loc 1 196 4 is_stmt 1 view .LVU321
 196:Src/main.c    **** 		}
 1520              		.loc 1 196 26 is_stmt 0 view .LVU322
 1521 0050 1878     		ldrb	r0, [r3]
 1522 0052 C0B2     		uxtb	r0, r0
 196:Src/main.c    **** 		}
 1523              		.loc 1 196 38 view .LVU323
 1524 0054 5978     		ldrb	r1, [r3, #1]
 1525 0056 C9B2     		uxtb	r1, r1
 196:Src/main.c    **** 		}
 1526              		.loc 1 196 4 view .LVU324
 1527 0058 FFF7FEFF 		bl	ProcessCommand
 1528              	.LVL116:
 1529 005c F1E7     		b	.L70
 1530              	.L72:
 1531              	.LBE15:
 200:Src/main.c    **** 		if(command[0] != 'w' &&
 1532              		.loc 1 200 3 is_stmt 1 view .LVU325
 200:Src/main.c    **** 		if(command[0] != 'w' &&
 1533              		.loc 1 200 22 is_stmt 0 view .LVU326
 1534 005e 0C4B     		ldr	r3, .L76+8
 1535 0060 9B8C     		ldrh	r3, [r3, #36]
 200:Src/main.c    **** 		if(command[0] != 'w' &&
 1536              		.loc 1 200 14 view .LVU327
 1537 0062 DBB2     		uxtb	r3, r3
 1538 0064 0B4A     		ldr	r2, .L76+12
 1539 0066 1370     		strb	r3, [r2]
 201:Src/main.c    **** 				command[0] != 'a' &&
 1540              		.loc 1 201 3 is_stmt 1 view .LVU328
 201:Src/main.c    **** 				command[0] != 'a' &&
 1541              		.loc 1 201 13 is_stmt 0 view .LVU329
 1542 0068 1378     		ldrb	r3, [r2]
 201:Src/main.c    **** 				command[0] != 'a' &&
 1543              		.loc 1 201 5 view .LVU330
 1544 006a 772B     		cmp	r3, #119
 1545 006c E9D0     		beq	.L70
 202:Src/main.c    **** 				command[0] != 'd'){
 1546              		.loc 1 202 12 discriminator 1 view .LVU331
 1547 006e 1378     		ldrb	r3, [r2]
 201:Src/main.c    **** 				command[0] != 'a' &&
 1548              		.loc 1 201 24 discriminator 1 view .LVU332
 1549 0070 612B     		cmp	r3, #97
ARM GAS  /tmp/ccT7NbC0.s 			page 42


 1550 0072 E6D0     		beq	.L70
 203:Src/main.c    **** 			ProcessCommand(command[0], NULL);
 1551              		.loc 1 203 12 view .LVU333
 1552 0074 1378     		ldrb	r3, [r2]
 202:Src/main.c    **** 				command[0] != 'd'){
 1553              		.loc 1 202 23 view .LVU334
 1554 0076 642B     		cmp	r3, #100
 1555 0078 E3D0     		beq	.L70
 1556              	.LBB16:
 204:Src/main.c    **** 		}
 1557              		.loc 1 204 4 is_stmt 1 view .LVU335
 204:Src/main.c    **** 		}
 1558              		.loc 1 204 26 is_stmt 0 view .LVU336
 1559 007a 1078     		ldrb	r0, [r2]
 1560 007c C0B2     		uxtb	r0, r0
 204:Src/main.c    **** 		}
 1561              		.loc 1 204 4 view .LVU337
 1562 007e 0021     		movs	r1, #0
 1563 0080 FFF7FEFF 		bl	ProcessCommand
 1564              	.LVL117:
 1565              	.LBE16:
 207:Src/main.c    **** 
 1566              		.loc 1 207 1 view .LVU338
 1567 0084 DDE7     		b	.L70
 1568              	.L77:
 1569 0086 C046     		.align	2
 1570              	.L76:
 1571 0088 00000000 		.word	.LC58
 1572 008c 00000000 		.word	incomingCommand
 1573 0090 00480040 		.word	1073760256
 1574 0094 00000000 		.word	command
 1575              		.cfi_endproc
 1576              	.LFE49:
 1578              		.section	.text.Error_Handler,"ax",%progbits
 1579              		.align	1
 1580              		.global	Error_Handler
 1581              		.syntax unified
 1582              		.code	16
 1583              		.thumb_func
 1585              	Error_Handler:
 1586              	.LFB59:
 462:Src/main.c    **** 
 463:Src/main.c    **** /* USER CODE BEGIN 4 */
 464:Src/main.c    **** 
 465:Src/main.c    **** /* USER CODE END 4 */
 466:Src/main.c    **** 
 467:Src/main.c    **** /**
 468:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 469:Src/main.c    ****  * @retval None
 470:Src/main.c    ****  */
 471:Src/main.c    **** void Error_Handler(void)
 472:Src/main.c    **** {
 1587              		.loc 1 472 1 is_stmt 1 view -0
 1588              		.cfi_startproc
 1589              		@ Volatile: function does not return.
 1590              		@ args = 0, pretend = 0, frame = 0
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccT7NbC0.s 			page 43


 1592              		@ link register save eliminated.
 473:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 474:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 475:Src/main.c    **** 	__disable_irq();
 1593              		.loc 1 475 2 view .LVU340
 1594              	.LBB17:
 1595              	.LBI17:
 1596              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
ARM GAS  /tmp/ccT7NbC0.s 			page 44


  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
ARM GAS  /tmp/ccT7NbC0.s 			page 45


 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1597              		.loc 2 140 27 view .LVU341
 1598              	.LBB18:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1599              		.loc 2 142 3 view .LVU342
 1600              		.syntax divided
 1601              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1602 0000 72B6     		cpsid i
 1603              	@ 0 "" 2
 1604              		.thumb
 1605              		.syntax unified
 1606              	.L79:
 1607              	.LBE18:
 1608              	.LBE17:
 476:Src/main.c    **** 	while (1)
 1609              		.loc 1 476 2 discriminator 1 view .LVU343
 477:Src/main.c    **** 	{
 478:Src/main.c    **** 	}
 1610              		.loc 1 478 2 discriminator 1 view .LVU344
 476:Src/main.c    **** 	while (1)
 1611              		.loc 1 476 8 discriminator 1 view .LVU345
 1612 0002 FEE7     		b	.L79
 1613              		.cfi_endproc
ARM GAS  /tmp/ccT7NbC0.s 			page 46


 1614              	.LFE59:
 1616              		.section	.text.SystemClock_Config,"ax",%progbits
 1617              		.align	1
 1618              		.global	SystemClock_Config
 1619              		.syntax unified
 1620              		.code	16
 1621              		.thumb_func
 1623              	SystemClock_Config:
 1624              	.LFB56:
 391:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1625              		.loc 1 391 1 view -0
 1626              		.cfi_startproc
 1627              		@ args = 0, pretend = 0, frame = 72
 1628              		@ frame_needed = 0, uses_anonymous_args = 0
 1629 0000 00B5     		push	{lr}
 1630              	.LCFI21:
 1631              		.cfi_def_cfa_offset 4
 1632              		.cfi_offset 14, -4
 1633 0002 93B0     		sub	sp, sp, #76
 1634              	.LCFI22:
 1635              		.cfi_def_cfa_offset 80
 392:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1636              		.loc 1 392 2 view .LVU347
 392:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1637              		.loc 1 392 21 is_stmt 0 view .LVU348
 1638 0004 3422     		movs	r2, #52
 1639 0006 0021     		movs	r1, #0
 1640 0008 05A8     		add	r0, sp, #20
 1641 000a FFF7FEFF 		bl	memset
 1642              	.LVL118:
 393:Src/main.c    **** 
 1643              		.loc 1 393 2 is_stmt 1 view .LVU349
 393:Src/main.c    **** 
 1644              		.loc 1 393 21 is_stmt 0 view .LVU350
 1645 000e 1022     		movs	r2, #16
 1646 0010 0021     		movs	r1, #0
 1647 0012 01A8     		add	r0, sp, #4
 1648 0014 FFF7FEFF 		bl	memset
 1649              	.LVL119:
 398:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1650              		.loc 1 398 2 is_stmt 1 view .LVU351
 398:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1651              		.loc 1 398 35 is_stmt 0 view .LVU352
 1652 0018 0223     		movs	r3, #2
 1653 001a 0593     		str	r3, [sp, #20]
 399:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1654              		.loc 1 399 2 is_stmt 1 view .LVU353
 399:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1655              		.loc 1 399 29 is_stmt 0 view .LVU354
 1656 001c 013B     		subs	r3, r3, #1
 1657 001e 0893     		str	r3, [sp, #32]
 400:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1658              		.loc 1 400 2 is_stmt 1 view .LVU355
 400:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1659              		.loc 1 400 40 is_stmt 0 view .LVU356
 1660 0020 0F33     		adds	r3, r3, #15
 1661 0022 0993     		str	r3, [sp, #36]
ARM GAS  /tmp/ccT7NbC0.s 			page 47


 401:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1662              		.loc 1 401 2 is_stmt 1 view .LVU357
 402:Src/main.c    **** 	{
 1663              		.loc 1 402 2 view .LVU358
 402:Src/main.c    **** 	{
 1664              		.loc 1 402 6 is_stmt 0 view .LVU359
 1665 0024 05A8     		add	r0, sp, #20
 1666 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1667              	.LVL120:
 402:Src/main.c    **** 	{
 1668              		.loc 1 402 5 view .LVU360
 1669 002a 0028     		cmp	r0, #0
 1670 002c 0DD1     		bne	.L83
 409:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1671              		.loc 1 409 2 is_stmt 1 view .LVU361
 409:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1672              		.loc 1 409 30 is_stmt 0 view .LVU362
 1673 002e 0723     		movs	r3, #7
 1674 0030 0193     		str	r3, [sp, #4]
 411:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1675              		.loc 1 411 2 is_stmt 1 view .LVU363
 411:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1676              		.loc 1 411 33 is_stmt 0 view .LVU364
 1677 0032 0023     		movs	r3, #0
 1678 0034 0293     		str	r3, [sp, #8]
 412:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1679              		.loc 1 412 2 is_stmt 1 view .LVU365
 412:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1680              		.loc 1 412 34 is_stmt 0 view .LVU366
 1681 0036 0393     		str	r3, [sp, #12]
 413:Src/main.c    **** 
 1682              		.loc 1 413 2 is_stmt 1 view .LVU367
 413:Src/main.c    **** 
 1683              		.loc 1 413 35 is_stmt 0 view .LVU368
 1684 0038 0493     		str	r3, [sp, #16]
 415:Src/main.c    **** 	{
 1685              		.loc 1 415 2 is_stmt 1 view .LVU369
 415:Src/main.c    **** 	{
 1686              		.loc 1 415 6 is_stmt 0 view .LVU370
 1687 003a 0021     		movs	r1, #0
 1688 003c 01A8     		add	r0, sp, #4
 1689 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1690              	.LVL121:
 415:Src/main.c    **** 	{
 1691              		.loc 1 415 5 view .LVU371
 1692 0042 0028     		cmp	r0, #0
 1693 0044 03D1     		bne	.L84
 419:Src/main.c    **** 
 1694              		.loc 1 419 1 view .LVU372
 1695 0046 13B0     		add	sp, sp, #76
 1696              		@ sp needed
 1697 0048 00BD     		pop	{pc}
 1698              	.L83:
 404:Src/main.c    **** 	}
 1699              		.loc 1 404 3 is_stmt 1 view .LVU373
 1700 004a FFF7FEFF 		bl	Error_Handler
 1701              	.LVL122:
ARM GAS  /tmp/ccT7NbC0.s 			page 48


 1702              	.L84:
 417:Src/main.c    **** 	}
 1703              		.loc 1 417 3 view .LVU374
 1704 004e FFF7FEFF 		bl	Error_Handler
 1705              	.LVL123:
 1706              		.cfi_endproc
 1707              	.LFE56:
 1709              		.section	.text.main,"ax",%progbits
 1710              		.align	1
 1711              		.global	main
 1712              		.syntax unified
 1713              		.code	16
 1714              		.thumb_func
 1716              	main:
 1717              	.LFB55:
 364:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1718              		.loc 1 364 1 view -0
 1719              		.cfi_startproc
 1720              		@ Volatile: function does not return.
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723 0000 10B5     		push	{r4, lr}
 1724              	.LCFI23:
 1725              		.cfi_def_cfa_offset 8
 1726              		.cfi_offset 4, -8
 1727              		.cfi_offset 14, -4
 365:Src/main.c    **** 	SystemClock_Config();
 1728              		.loc 1 365 2 view .LVU376
 1729 0002 FFF7FEFF 		bl	HAL_Init
 1730              	.LVL124:
 366:Src/main.c    **** 
 1731              		.loc 1 366 2 view .LVU377
 1732 0006 FFF7FEFF 		bl	SystemClock_Config
 1733              	.LVL125:
 369:Src/main.c    **** 	USART_Init();
 1734              		.loc 1 369 2 view .LVU378
 1735 000a FFF7FEFF 		bl	GPIO_AF_Init
 1736              	.LVL126:
 370:Src/main.c    **** 
 1737              		.loc 1 370 2 view .LVU379
 1738 000e FFF7FEFF 		bl	USART_Init
 1739              	.LVL127:
 372:Src/main.c    **** 
 1740              		.loc 1 372 2 view .LVU380
 1741 0012 FFF7FEFF 		bl	motor_init
 1742              	.LVL128:
 374:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,2);
 1743              		.loc 1 374 2 view .LVU381
 1744              	.LBB19:
 1745              	.LBI19:
 1746              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
ARM GAS  /tmp/ccT7NbC0.s 			page 49


   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
ARM GAS  /tmp/ccT7NbC0.s 			page 50


  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /tmp/ccT7NbC0.s 			page 51


 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
ARM GAS  /tmp/ccT7NbC0.s 			page 52


 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
ARM GAS  /tmp/ccT7NbC0.s 			page 53


 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
ARM GAS  /tmp/ccT7NbC0.s 			page 54


 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
ARM GAS  /tmp/ccT7NbC0.s 			page 55


 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
ARM GAS  /tmp/ccT7NbC0.s 			page 56


 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccT7NbC0.s 			page 57


 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
ARM GAS  /tmp/ccT7NbC0.s 			page 58


 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
ARM GAS  /tmp/ccT7NbC0.s 			page 59


 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1747              		.loc 3 623 22 view .LVU382
 1748              	.LBB20:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1749              		.loc 3 625 3 view .LVU383
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1750              		.loc 3 627 5 view .LVU384
 1751              		.loc 3 627 20 is_stmt 0 view .LVU385
 1752 0016 094B     		ldr	r3, .L87
ARM GAS  /tmp/ccT7NbC0.s 			page 60


 1753 0018 8022     		movs	r2, #128
 1754 001a 9205     		lsls	r2, r2, #22
 1755 001c 1A60     		str	r2, [r3]
 1756              	.LVL129:
 1757              		.loc 3 627 20 view .LVU386
 1758              	.LBE20:
 1759              	.LBE19:
 375:Src/main.c    **** 
 1760              		.loc 1 375 2 is_stmt 1 view .LVU387
 1761              	.LBB21:
 1762              	.LBI21:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
ARM GAS  /tmp/ccT7NbC0.s 			page 61


 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
ARM GAS  /tmp/ccT7NbC0.s 			page 62


 1763              		.loc 3 730 22 view .LVU388
 1764              	.LBB22:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1765              		.loc 3 732 3 view .LVU389
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1766              		.loc 3 734 5 view .LVU390
 1767              		.loc 3 734 52 is_stmt 0 view .LVU391
 1768 001e C720     		movs	r0, #199
 1769 0020 8000     		lsls	r0, r0, #2
 1770 0022 1958     		ldr	r1, [r3, r0]
 1771              		.loc 3 734 33 view .LVU392
 1772 0024 064A     		ldr	r2, .L87+4
 1773 0026 1140     		ands	r1, r2
 1774              		.loc 3 734 102 view .LVU393
 1775 0028 8022     		movs	r2, #128
 1776 002a 1202     		lsls	r2, r2, #8
 1777 002c 0A43     		orrs	r2, r1
 1778              		.loc 3 734 30 view .LVU394
 1779 002e 1A50     		str	r2, [r3, r0]
 1780              	.LVL130:
 1781              		.loc 3 734 30 view .LVU395
 1782              	.LBE22:
 1783              	.LBE21:
 378:Src/main.c    **** 	MX_TIM15_Init(); 
 1784              		.loc 1 378 2 is_stmt 1 view .LVU396
 1785 0030 FFF7FEFF 		bl	MX_GPIO_Init
 1786              	.LVL131:
 379:Src/main.c    **** 
 1787              		.loc 1 379 2 view .LVU397
 1788 0034 FFF7FEFF 		bl	MX_TIM15_Init
 1789              	.LVL132:
 1790              	.L86:
 381:Src/main.c    **** 		//Handled in interrupts.
 1791              		.loc 1 381 2 discriminator 1 view .LVU398
 383:Src/main.c    **** }
 1792              		.loc 1 383 2 discriminator 1 view .LVU399
 381:Src/main.c    **** 		//Handled in interrupts.
 1793              		.loc 1 381 8 discriminator 1 view .LVU400
 1794 0038 FEE7     		b	.L86
 1795              	.L88:
 1796 003a C046     		.align	2
 1797              	.L87:
 1798 003c 00E100E0 		.word	-536813312
 1799 0040 FF00FFFF 		.word	-65281
 1800              		.cfi_endproc
 1801              	.LFE55:
 1803              		.global	incomingCommand
 1804              		.section	.bss.incomingCommand,"aw",%nobits
 1807              	incomingCommand:
 1808 0000 00       		.space	1
 1809              		.global	command
 1810              		.section	.bss.command,"aw",%nobits
 1811              		.align	2
 1814              	command:
 1815 0000 000000   		.space	3
ARM GAS  /tmp/ccT7NbC0.s 			page 63


 1816              		.global	rightDistance
 1817              		.section	.bss.rightDistance,"aw",%nobits
 1818              		.align	1
 1821              	rightDistance:
 1822 0000 0000     		.space	2
 1823              		.global	leftDistance
 1824              		.section	.bss.leftDistance,"aw",%nobits
 1825              		.align	1
 1828              	leftDistance:
 1829 0000 0000     		.space	2
 1830              		.global	Value2
 1831              		.section	.bss.Value2,"aw",%nobits
 1832              		.align	1
 1835              	Value2:
 1836 0000 0000     		.space	2
 1837              		.global	Value1
 1838              		.section	.bss.Value1,"aw",%nobits
 1839              		.align	1
 1842              	Value1:
 1843 0000 0000     		.space	2
 1844              		.global	startTime
 1845              		.section	.bss.startTime,"aw",%nobits
 1846              		.align	1
 1849              	startTime:
 1850 0000 0000     		.space	2
 1851              		.global	pMillis
 1852              		.section	.bss.pMillis,"aw",%nobits
 1853              		.align	2
 1856              	pMillis:
 1857 0000 00000000 		.space	4
 1858              		.global	htim15
 1859              		.section	.bss.htim15,"aw",%nobits
 1860              		.align	2
 1863              	htim15:
 1864 0000 00000000 		.space	64
 1864      00000000 
 1864      00000000 
 1864      00000000 
 1864      00000000 
 1865              		.text
 1866              	.Letext0:
 1867              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 1868              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1869              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1870              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1871              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1872              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1873              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1874              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1875              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1876              		.file 13 "Inc/pins.h"
 1877              		.file 14 "Inc/motor.h"
 1878              		.file 15 "/usr/arm-none-eabi/include/string.h"
 1879              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1880              		.file 17 "/usr/arm-none-eabi/include/stdio.h"
 1881              		.file 18 "<built-in>"
ARM GAS  /tmp/ccT7NbC0.s 			page 64


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccT7NbC0.s:19     .text.MX_TIM15_Init:00000000 $t
     /tmp/ccT7NbC0.s:24     .text.MX_TIM15_Init:00000000 MX_TIM15_Init
     /tmp/ccT7NbC0.s:61     .text.MX_TIM15_Init:00000020 $d
     /tmp/ccT7NbC0.s:67     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccT7NbC0.s:72     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccT7NbC0.s:145    .text.MX_GPIO_Init:00000048 $d
     /tmp/ccT7NbC0.s:150    .text.LED_Init:00000000 $t
     /tmp/ccT7NbC0.s:156    .text.LED_Init:00000000 LED_Init
     /tmp/ccT7NbC0.s:199    .text.LED_Init:00000024 $d
     /tmp/ccT7NbC0.s:204    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccT7NbC0.s:210    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccT7NbC0.s:379    .text.GPIO_AF_Init:000000e0 $d
     /tmp/ccT7NbC0.s:390    .text.USART_Init:00000000 $t
     /tmp/ccT7NbC0.s:396    .text.USART_Init:00000000 USART_Init
     /tmp/ccT7NbC0.s:488    .text.USART_Init:0000005c $d
     /tmp/ccT7NbC0.s:495    .text.USART_SendChar:00000000 $t
     /tmp/ccT7NbC0.s:501    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccT7NbC0.s:527    .text.USART_SendChar:00000010 $d
     /tmp/ccT7NbC0.s:532    .text.USART_SendString:00000000 $t
     /tmp/ccT7NbC0.s:538    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccT7NbC0.s:583    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccT7NbC0.s:587    .text.ClearCommand:00000000 $t
     /tmp/ccT7NbC0.s:593    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccT7NbC0.s:636    .text.ClearCommand:0000002c $d
     /tmp/ccT7NbC0.s:1814   .bss.command:00000000 command
     /tmp/ccT7NbC0.s:1807   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccT7NbC0.s:643    .rodata.Proceed.str1.4:00000000 $d
     /tmp/ccT7NbC0.s:647    .text.Proceed:00000000 $t
     /tmp/ccT7NbC0.s:653    .text.Proceed:00000000 Proceed
     /tmp/ccT7NbC0.s:676    .text.Proceed:0000000c $d
     /tmp/ccT7NbC0.s:682    .rodata.PrintDistance.str1.4:00000000 $d
     /tmp/ccT7NbC0.s:686    .text.PrintDistance:00000000 $t
     /tmp/ccT7NbC0.s:692    .text.PrintDistance:00000000 PrintDistance
     /tmp/ccT7NbC0.s:738    .text.PrintDistance:00000030 $d
     /tmp/ccT7NbC0.s:746    .text.GetUltrasonic:00000000 $t
     /tmp/ccT7NbC0.s:752    .text.GetUltrasonic:00000000 GetUltrasonic
     /tmp/ccT7NbC0.s:916    .text.GetUltrasonic:000000a4 $d
     /tmp/ccT7NbC0.s:1856   .bss.pMillis:00000000 pMillis
     /tmp/ccT7NbC0.s:924    .rodata.Log.str1.4:00000000 $d
     /tmp/ccT7NbC0.s:938    .text.Log:00000000 $t
     /tmp/ccT7NbC0.s:944    .text.Log:00000000 Log
     /tmp/ccT7NbC0.s:1021   .text.Log:00000060 $d
     /tmp/ccT7NbC0.s:1031   .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccT7NbC0.s:1057   .text.ProcessCommand:00000000 $t
     /tmp/ccT7NbC0.s:1063   .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccT7NbC0.s:1192   .rodata.ProcessCommand:00000000 $d
     /tmp/ccT7NbC0.s:1416   .text.ProcessCommand:00000168 $d
     /tmp/ccT7NbC0.s:1430   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccT7NbC0.s:1434   .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccT7NbC0.s:1440   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccT7NbC0.s:1571   .text.USART3_4_IRQHandler:00000088 $d
     /tmp/ccT7NbC0.s:1579   .text.Error_Handler:00000000 $t
     /tmp/ccT7NbC0.s:1585   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccT7NbC0.s:1617   .text.SystemClock_Config:00000000 $t
     /tmp/ccT7NbC0.s:1623   .text.SystemClock_Config:00000000 SystemClock_Config
ARM GAS  /tmp/ccT7NbC0.s 			page 65


     /tmp/ccT7NbC0.s:1710   .text.main:00000000 $t
     /tmp/ccT7NbC0.s:1716   .text.main:00000000 main
     /tmp/ccT7NbC0.s:1798   .text.main:0000003c $d
     /tmp/ccT7NbC0.s:1808   .bss.incomingCommand:00000000 $d
     /tmp/ccT7NbC0.s:1811   .bss.command:00000000 $d
     /tmp/ccT7NbC0.s:1821   .bss.rightDistance:00000000 rightDistance
     /tmp/ccT7NbC0.s:1818   .bss.rightDistance:00000000 $d
     /tmp/ccT7NbC0.s:1828   .bss.leftDistance:00000000 leftDistance
     /tmp/ccT7NbC0.s:1825   .bss.leftDistance:00000000 $d
     /tmp/ccT7NbC0.s:1835   .bss.Value2:00000000 Value2
     /tmp/ccT7NbC0.s:1832   .bss.Value2:00000000 $d
     /tmp/ccT7NbC0.s:1842   .bss.Value1:00000000 Value1
     /tmp/ccT7NbC0.s:1839   .bss.Value1:00000000 $d
     /tmp/ccT7NbC0.s:1849   .bss.startTime:00000000 startTime
     /tmp/ccT7NbC0.s:1846   .bss.startTime:00000000 $d
     /tmp/ccT7NbC0.s:1853   .bss.pMillis:00000000 $d
     /tmp/ccT7NbC0.s:1863   .bss.htim15:00000000 htim15
     /tmp/ccT7NbC0.s:1860   .bss.htim15:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
__aeabi_f2d
get_distance
sprintf
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
HAL_GPIO_ReadPin
__aeabi_f2iz
get_heading
__aeabi_ui2f
memcpy
MoveMotors
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
