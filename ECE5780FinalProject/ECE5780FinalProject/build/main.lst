ARM GAS  /tmp/cc5vRBIH.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB53:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/cc5vRBIH.s 			page 2


  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* USER CODE END PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PM */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** TIM_HandleTypeDef htim2;
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN PV */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PV */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  52:Src/main.c    **** void SystemClock_Config(void);
  53:Src/main.c    **** static void MX_GPIO_Init(void);
  54:Src/main.c    **** static void MX_TIM2_Init(void);
  55:Src/main.c    **** /* USER CODE BEGIN PFP */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PFP */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN 0 */
  61:Src/main.c    **** #define LED_RED GPIO_PIN_6
  62:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  63:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  64:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  65:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  66:Src/main.c    **** 
  67:Src/main.c    **** void LED_Init(uint32_t pins) {
  68:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  69:Src/main.c    **** 
  70:Src/main.c    ****     GPIO_InitTypeDef gpio_led_init = {pins,
  71:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
  72:Src/main.c    ****         GPIO_SPEED_FREQ_LOW,
  73:Src/main.c    ****         GPIO_NOPULL
  74:Src/main.c    ****     };
  75:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpio_led_init);
  76:Src/main.c    **** }
  77:Src/main.c    **** 
  78:Src/main.c    **** /**
  79:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  80:Src/main.c    ****  *        functions appropriately.
  81:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  82:Src/main.c    ****  */
  83:Src/main.c    **** void GPIO_AF_Init() {
  84:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  85:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  86:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  87:Src/main.c    **** 
  88:Src/main.c    **** 	// uart_pins
  89:Src/main.c    **** 	HAL_GPIO_Init(&uart_pins.rx.gpio, &uart_pins.rx.pin);
  90:Src/main.c    **** 	HAL_GPIO_Init(&uart_pins.tx.gpio, &uart_pins.tx.pin);
ARM GAS  /tmp/cc5vRBIH.s 			page 3


  91:Src/main.c    **** 
  92:Src/main.c    **** 	// motor_left_pins
  93:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
  94:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
  95:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
  96:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
  97:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
  98:Src/main.c    **** 
  99:Src/main.c    **** 	// motor_right_pins
 100:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 101:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 102:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 103:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 104:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 105:Src/main.c    **** 
 106:Src/main.c    **** 	// ultrasonic_left_pins
 107:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 108:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 109:Src/main.c    **** 
 110:Src/main.c    **** 	// ultrasonic_right_pins
 111:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 113:Src/main.c    **** }
 114:Src/main.c    **** 
 115:Src/main.c    **** /**
 116:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 117:Src/main.c    ****  */
 118:Src/main.c    **** void USART_Init() {
 119:Src/main.c    **** 	//__HAL_RCC_USART3_CLK_ENABLE();
 120:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 121:Src/main.c    **** 
 122:Src/main.c    **** 	//Set baud rate
 123:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 124:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 115200;
 125:Src/main.c    **** 
 126:Src/main.c    **** 	//Enable transmitter
 127:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 128:Src/main.c    **** 
 129:Src/main.c    **** 	//Enable receiver
 130:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 131:Src/main.c    **** 
 132:Src/main.c    **** 	//Enable the receive register not empty interrupt
 133:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//Enable USART3
 136:Src/main.c    **** 	USART3->CR1 |= 1;
 137:Src/main.c    **** }
 138:Src/main.c    **** 
 139:Src/main.c    **** /**
 140:Src/main.c    ****  * @brief Sends a single character on the USART.
 141:Src/main.c    ****  *
 142:Src/main.c    ****  * @param c: the character to be sent
 143:Src/main.c    ****  */
 144:Src/main.c    **** void USART_SendChar(uint8_t c) {
 145:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 146:Src/main.c    **** 		;
 147:Src/main.c    **** 
ARM GAS  /tmp/cc5vRBIH.s 			page 4


 148:Src/main.c    **** 	USART3->TDR = c;
 149:Src/main.c    **** }
 150:Src/main.c    **** 
 151:Src/main.c    **** /**
 152:Src/main.c    ****  * @brief Sends a string on the USART.
 153:Src/main.c    ****  *
 154:Src/main.c    ****  * @param p_string: pointer to string to send
 155:Src/main.c    ****  */
 156:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 157:Src/main.c    **** 	while(*p_string != 0) {
 158:Src/main.c    **** 		USART_SendChar(*p_string);
 159:Src/main.c    **** 		p_string++;
 160:Src/main.c    **** 	}
 161:Src/main.c    **** 	USART_SendChar(0);
 162:Src/main.c    **** }
 163:Src/main.c    **** 
 164:Src/main.c    **** volatile uint8_t command[2];
 165:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 166:Src/main.c    **** 
 167:Src/main.c    **** void ClearCommand(){
 168:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 169:Src/main.c    **** 	memset(command, 0, sizeof(command));
 170:Src/main.c    **** 	incomingCommand = 0;
 171:Src/main.c    **** 	USART_SendString(prompt);
 172:Src/main.c    **** }
 173:Src/main.c    **** 
 174:Src/main.c    **** void USART3_4_IRQHandler(){
 175:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 176:Src/main.c    **** 	incomingCommand = 1;
 177:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 178:Src/main.c    **** 		;
 179:Src/main.c    **** 	if(command[0])
 180:Src/main.c    **** 		if(command[1]){
 181:Src/main.c    **** 			USART_SendString(err);
 182:Src/main.c    **** 			ClearCommand();
 183:Src/main.c    **** 		}
 184:Src/main.c    **** 		else
 185:Src/main.c    **** 			command[1] = USART3->RDR;
 186:Src/main.c    **** 	else
 187:Src/main.c    **** 		command[0] = USART3->RDR;
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 191:Src/main.c    **** 	uint32_t left_motor_pin;
 192:Src/main.c    **** 	uint32_t right_motor_pin;
 193:Src/main.c    **** 	int32_t CH1_DC = 65535;
 194:Src/main.c    **** 
 195:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 196:Src/main.c    **** 
 197:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 198:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 199:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 200:Src/main.c    **** 
 201:Src/main.c    **** 
 202:Src/main.c    **** 	uint8_t one[] = "20\n";
 203:Src/main.c    **** 	uint8_t two[] = "40\n";
 204:Src/main.c    **** 	uint8_t three[] = "60\n";
ARM GAS  /tmp/cc5vRBIH.s 			page 5


 205:Src/main.c    **** 	uint8_t four[] = "80\n";
 206:Src/main.c    **** 	uint8_t five[] = "100\n";
 207:Src/main.c    **** 	uint8_t six[] = "120\n";
 208:Src/main.c    **** 	uint8_t seven[] = "140\n";
 209:Src/main.c    **** 	uint8_t eight[] = "160\n";
 210:Src/main.c    **** 	uint8_t nine[] = "180\n";
 211:Src/main.c    **** 
 212:Src/main.c    **** 	if(direction != 'w' && direction != 'a' && direction != 'd'){
 213:Src/main.c    **** 		USART_SendString(err);
 214:Src/main.c    **** 		ClearCommand();
 215:Src/main.c    **** 		return;
 216:Src/main.c    **** 	}
 217:Src/main.c    **** 
 218:Src/main.c    **** 	uint8_t* part1;
 219:Src/main.c    **** 	uint8_t* part2;
 220:Src/main.c    **** 
 221:Src/main.c    **** 	switch(direction){
 222:Src/main.c    **** 		case 'w':
 223:Src/main.c    **** 			part1 = forward;
 224:Src/main.c    **** 			break;
 225:Src/main.c    **** 		case 'a':
 226:Src/main.c    **** 			part1 = left;
 227:Src/main.c    **** 			break;
 228:Src/main.c    **** 		case 'd':
 229:Src/main.c    **** 			part1 = right;
 230:Src/main.c    **** 			break;
 231:Src/main.c    **** 		default:
 232:Src/main.c    **** 			USART_SendString(err);
 233:Src/main.c    **** 			ClearCommand();
 234:Src/main.c    **** 	}
 235:Src/main.c    **** 
 236:Src/main.c    **** 	switch(distance){
 237:Src/main.c    **** 		case '1':
 238:Src/main.c    **** 			part2 = one;
 239:Src/main.c    **** 			//TODO: Change delay length
 240:Src/main.c    **** 			break;
 241:Src/main.c    **** 		case '2':
 242:Src/main.c    **** 			part2 = two;
 243:Src/main.c    **** 			break;
 244:Src/main.c    **** 		case '3':
 245:Src/main.c    **** 			part2 = three;
 246:Src/main.c    **** 			break;
 247:Src/main.c    **** 		case '4':
 248:Src/main.c    **** 			part2 = four;
 249:Src/main.c    **** 			break;
 250:Src/main.c    **** 		case '5':
 251:Src/main.c    **** 			part2 = five;
 252:Src/main.c    **** 			break;
 253:Src/main.c    **** 		case '6':
 254:Src/main.c    **** 			part2 = six;
 255:Src/main.c    **** 			break;
 256:Src/main.c    **** 		case '7':
 257:Src/main.c    **** 			part2 = seven;
 258:Src/main.c    **** 			break;
 259:Src/main.c    **** 		case '8':
 260:Src/main.c    **** 			part2 = eight;
 261:Src/main.c    **** 			break;
ARM GAS  /tmp/cc5vRBIH.s 			page 6


 262:Src/main.c    **** 		case '9':
 263:Src/main.c    **** 			part2 = nine;
 264:Src/main.c    **** 			break;
 265:Src/main.c    **** 		default:
 266:Src/main.c    **** 			USART_SendString(err);
 267:Src/main.c    **** 			ClearCommand();
 268:Src/main.c    **** 			return;
 269:Src/main.c    **** 	}
 270:Src/main.c    **** 
 271:Src/main.c    **** 	USART_SendString(part1);
 272:Src/main.c    **** 	USART_SendString(part2);
 273:Src/main.c    **** 
 274:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 275:Src/main.c    **** 	HAL_Delay(1000);
 276:Src/main.c    **** 	TIM2->CCR1 = 0;
 277:Src/main.c    **** 
 278:Src/main.c    **** 	ClearCommand();
 279:Src/main.c    **** 
 280:Src/main.c    **** 
 281:Src/main.c    **** 	// Example code while loop
 282:Src/main.c    **** 	//    while (1)
 283:Src/main.c    **** 	//    {
 284:Src/main.c    **** 	//        while(CH1_DC < 65535)
 285:Src/main.c    **** 	//        {
 286:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 287:Src/main.c    **** 	//            CH1_DC += 70;
 288:Src/main.c    **** 	//            HAL_Delay(1);
 289:Src/main.c    **** 	//        }
 290:Src/main.c    **** 	//        while(CH1_DC > 0)
 291:Src/main.c    **** 	//        {
 292:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 293:Src/main.c    **** 	//            CH1_DC -= 70;
 294:Src/main.c    **** 	//            HAL_Delay(1);
 295:Src/main.c    **** 	//        }
 296:Src/main.c    **** 	//    }
 297:Src/main.c    **** }
 298:Src/main.c    **** 
 299:Src/main.c    **** void Ultrasonic_Init(uint32_t pins)
 300:Src/main.c    **** {
 301:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 302:Src/main.c    **** 
 303:Src/main.c    **** 	GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 304:Src/main.c    **** 		GPIO_MODE_INPUT,
 305:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
 306:Src/main.c    **** 		GPIO_NOPULL
 307:Src/main.c    **** 	};
 308:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &gpio_init);
 309:Src/main.c    **** }
 310:Src/main.c    **** 
 311:Src/main.c    **** void GetDistance()
 312:Src/main.c    **** {
 313:Src/main.c    **** 
 314:Src/main.c    **** }
 315:Src/main.c    **** 
 316:Src/main.c    **** /* USER CODE END 0 */
 317:Src/main.c    **** 
 318:Src/main.c    **** /**
ARM GAS  /tmp/cc5vRBIH.s 			page 7


 319:Src/main.c    ****  * @brief  The application entry point.
 320:Src/main.c    ****  * @retval int
 321:Src/main.c    ****  */
 322:Src/main.c    **** int main(void)
 323:Src/main.c    **** {
 324:Src/main.c    **** 
 325:Src/main.c    **** 
 326:Src/main.c    **** 	HAL_Init();
 327:Src/main.c    **** 	SystemClock_Config();
 328:Src/main.c    **** 
 329:Src/main.c    **** 	//USART Initalizations
 330:Src/main.c    **** 	GPIO_AF_Init();
 331:Src/main.c    **** 	USART_Init();
 332:Src/main.c    **** 	LED_Init(LED_RED | LED_ORANGE | LED_GREEN | LED_BLUE);
 333:Src/main.c    **** 
 334:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 335:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 336:Src/main.c    **** 
 337:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 338:Src/main.c    **** 	//TODO: Replace status with actual ultrsonic sensor data.
 339:Src/main.c    **** 	uint8_t* status;
 340:Src/main.c    **** 	uint8_t* distance;
 341:Src/main.c    **** 
 342:Src/main.c    **** 	//PWM Initalizations
 343:Src/main.c    **** 	MX_GPIO_Init();
 344:Src/main.c    **** 	MX_TIM2_Init();
 345:Src/main.c    **** 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Initalized to GPIO pin PA5
 346:Src/main.c    **** 
 347:Src/main.c    **** 	USART_SendString(prompt);
 348:Src/main.c    **** 	int count = 0;
 349:Src/main.c    **** 	while (1)
 350:Src/main.c    **** 	{
 351:Src/main.c    **** 		if(count > 1000000)
 352:Src/main.c    **** 		{
 353:Src/main.c    **** 			count = 0;
 354:Src/main.c    **** 			status = "Ultrasonic Distance: ";
 355:Src/main.c    **** 			USART_SendString(status);
 356:Src/main.c    **** 			distance = 5;
 357:Src/main.c    **** 			USART_SendChar(command[0]);
 358:Src/main.c    **** 		}
 359:Src/main.c    **** 		else
 360:Src/main.c    **** 			count++;
 361:Src/main.c    **** 
 362:Src/main.c    **** 
 363:Src/main.c    **** 		if(incomingCommand){
 364:Src/main.c    **** 			if(command[1]){
 365:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 366:Src/main.c    **** 			}
 367:Src/main.c    **** 		}
 368:Src/main.c    **** 	}
 369:Src/main.c    **** }
 370:Src/main.c    **** 
 371:Src/main.c    **** /**
 372:Src/main.c    ****  * @brief System Clock Configuration
 373:Src/main.c    ****  * @retval None
 374:Src/main.c    ****  */
 375:Src/main.c    **** void SystemClock_Config(void)
ARM GAS  /tmp/cc5vRBIH.s 			page 8


 376:Src/main.c    **** {
 377:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 378:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 379:Src/main.c    **** 
 380:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 381:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 382:Src/main.c    **** 	 */
 383:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 384:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 385:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 386:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 387:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 388:Src/main.c    **** 	{
 389:Src/main.c    **** 		Error_Handler();
 390:Src/main.c    **** 	}
 391:Src/main.c    **** 
 392:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 393:Src/main.c    **** 	*/
 394:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 395:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 396:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 397:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 398:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 399:Src/main.c    **** 
 400:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 401:Src/main.c    **** 	{
 402:Src/main.c    **** 		Error_Handler();
 403:Src/main.c    **** 	}
 404:Src/main.c    **** }
 405:Src/main.c    **** 
 406:Src/main.c    **** /**
 407:Src/main.c    ****  * @brief TIM2 Initialization Function
 408:Src/main.c    ****  * @param None
 409:Src/main.c    ****  * @retval None
 410:Src/main.c    ****  */
 411:Src/main.c    **** static void MX_TIM2_Init(void)
 412:Src/main.c    **** {
 413:Src/main.c    **** 
 414:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 0 */
 415:Src/main.c    **** 
 416:Src/main.c    **** 	/* USER CODE END TIM2_Init 0 */
 417:Src/main.c    **** 
 418:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 419:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 420:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 421:Src/main.c    **** 
 422:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 1 */
 423:Src/main.c    **** 
 424:Src/main.c    **** 	/* USER CODE END TIM2_Init 1 */
 425:Src/main.c    **** 	htim2.Instance = TIM2;
 426:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 427:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 428:Src/main.c    **** 	htim2.Init.Period = 65535;
 429:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 430:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 431:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 432:Src/main.c    **** 	{
ARM GAS  /tmp/cc5vRBIH.s 			page 9


 433:Src/main.c    **** 		Error_Handler();
 434:Src/main.c    **** 	}
 435:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 436:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 437:Src/main.c    **** 	{
 438:Src/main.c    **** 		Error_Handler();
 439:Src/main.c    **** 	}
 440:Src/main.c    **** 	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 441:Src/main.c    **** 	{
 442:Src/main.c    **** 		Error_Handler();
 443:Src/main.c    **** 	}
 444:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 445:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 446:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 447:Src/main.c    **** 	{
 448:Src/main.c    **** 		Error_Handler();
 449:Src/main.c    **** 	}
 450:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 451:Src/main.c    **** 	sConfigOC.Pulse = 0;
 452:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 453:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 454:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 455:Src/main.c    **** 	{
 456:Src/main.c    **** 		Error_Handler();
 457:Src/main.c    **** 	}
 458:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 2 */
 459:Src/main.c    **** 
 460:Src/main.c    **** 	/* USER CODE END TIM2_Init 2 */
 461:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 462:Src/main.c    **** 
 463:Src/main.c    **** }
 464:Src/main.c    **** 
 465:Src/main.c    **** /**
 466:Src/main.c    ****  * @brief GPIO Initialization Function
 467:Src/main.c    ****  * @param None
 468:Src/main.c    ****  * @retval None
 469:Src/main.c    ****  */
 470:Src/main.c    **** static void MX_GPIO_Init(void)
 471:Src/main.c    **** {
  26              		.loc 1 471 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 88B0     		sub	sp, sp, #32
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 472:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 472 2 view .LVU1
  39              		.loc 1 472 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 03A8     		add	r0, sp, #12
ARM GAS  /tmp/cc5vRBIH.s 			page 10


  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 473:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 474:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 475:Src/main.c    **** 
 476:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 477:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 477 2 is_stmt 1 view .LVU3
  46              	.LBB8:
  47              		.loc 1 477 2 view .LVU4
  48              		.loc 1 477 2 view .LVU5
  49 000e 134B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 477 2 view .LVU6
  56 001a 5A69     		ldr	r2, [r3, #20]
  57 001c 0A40     		ands	r2, r1
  58 001e 0192     		str	r2, [sp, #4]
  59              		.loc 1 477 2 view .LVU7
  60 0020 019A     		ldr	r2, [sp, #4]
  61              	.LBE8:
  62              		.loc 1 477 2 view .LVU8
 478:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 478 2 view .LVU9
  64              	.LBB9:
  65              		.loc 1 478 2 view .LVU10
  66              		.loc 1 478 2 view .LVU11
  67 0022 5A69     		ldr	r2, [r3, #20]
  68 0024 8021     		movs	r1, #128
  69 0026 8902     		lsls	r1, r1, #10
  70 0028 0A43     		orrs	r2, r1
  71 002a 5A61     		str	r2, [r3, #20]
  72              		.loc 1 478 2 view .LVU12
  73 002c 5B69     		ldr	r3, [r3, #20]
  74 002e 0B40     		ands	r3, r1
  75 0030 0293     		str	r3, [sp, #8]
  76              		.loc 1 478 2 view .LVU13
  77 0032 029B     		ldr	r3, [sp, #8]
  78              	.LBE9:
  79              		.loc 1 478 2 view .LVU14
 479:Src/main.c    **** 
 480:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 481:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  80              		.loc 1 481 2 view .LVU15
  81 0034 9024     		movs	r4, #144
  82 0036 E405     		lsls	r4, r4, #23
  83 0038 0022     		movs	r2, #0
  84 003a 0121     		movs	r1, #1
  85 003c 2000     		movs	r0, r4
  86 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL1:
 482:Src/main.c    **** 
 483:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 484:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
ARM GAS  /tmp/cc5vRBIH.s 			page 11


  88              		.loc 1 484 2 view .LVU16
  89              		.loc 1 484 22 is_stmt 0 view .LVU17
  90 0042 0123     		movs	r3, #1
  91 0044 0393     		str	r3, [sp, #12]
 485:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  92              		.loc 1 485 2 is_stmt 1 view .LVU18
  93              		.loc 1 485 23 is_stmt 0 view .LVU19
  94 0046 0493     		str	r3, [sp, #16]
 486:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  95              		.loc 1 486 2 is_stmt 1 view .LVU20
  96              		.loc 1 486 23 is_stmt 0 view .LVU21
  97 0048 0023     		movs	r3, #0
  98 004a 0593     		str	r3, [sp, #20]
 487:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  99              		.loc 1 487 2 is_stmt 1 view .LVU22
 100              		.loc 1 487 24 is_stmt 0 view .LVU23
 101 004c 0693     		str	r3, [sp, #24]
 488:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 102              		.loc 1 488 2 is_stmt 1 view .LVU24
 103 004e 03A9     		add	r1, sp, #12
 104 0050 2000     		movs	r0, r4
 105 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL2:
 489:Src/main.c    **** 
 490:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 491:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 492:Src/main.c    **** }
 107              		.loc 1 492 1 is_stmt 0 view .LVU25
 108 0056 08B0     		add	sp, sp, #32
 109              		@ sp needed
 110 0058 10BD     		pop	{r4, pc}
 111              	.L3:
 112 005a C046     		.align	2
 113              	.L2:
 114 005c 00100240 		.word	1073876992
 115              		.cfi_endproc
 116              	.LFE53:
 118              		.section	.text.LED_Init,"ax",%progbits
 119              		.align	1
 120              		.global	LED_Init
 121              		.syntax unified
 122              		.code	16
 123              		.thumb_func
 125              	LED_Init:
 126              	.LVL3:
 127              	.LFB40:
  67:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 128              		.loc 1 67 30 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 24
 131              		@ frame_needed = 0, uses_anonymous_args = 0
  67:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 132              		.loc 1 67 30 is_stmt 0 view .LVU27
 133 0000 10B5     		push	{r4, lr}
 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 4, -8
ARM GAS  /tmp/cc5vRBIH.s 			page 12


 137              		.cfi_offset 14, -4
 138 0002 86B0     		sub	sp, sp, #24
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 32
 141 0004 0400     		movs	r4, r0
  68:Src/main.c    **** 
 142              		.loc 1 68 5 is_stmt 1 view .LVU28
 143              	.LBB10:
  68:Src/main.c    **** 
 144              		.loc 1 68 5 view .LVU29
  68:Src/main.c    **** 
 145              		.loc 1 68 5 view .LVU30
 146 0006 0C4B     		ldr	r3, .L5
 147 0008 5A69     		ldr	r2, [r3, #20]
 148 000a 8021     		movs	r1, #128
 149 000c 0903     		lsls	r1, r1, #12
 150 000e 0A43     		orrs	r2, r1
 151 0010 5A61     		str	r2, [r3, #20]
  68:Src/main.c    **** 
 152              		.loc 1 68 5 view .LVU31
 153 0012 5B69     		ldr	r3, [r3, #20]
 154 0014 0B40     		ands	r3, r1
 155 0016 0093     		str	r3, [sp]
  68:Src/main.c    **** 
 156              		.loc 1 68 5 view .LVU32
 157 0018 009B     		ldr	r3, [sp]
 158              	.LBE10:
  68:Src/main.c    **** 
 159              		.loc 1 68 5 view .LVU33
  70:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 160              		.loc 1 70 5 view .LVU34
  70:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 161              		.loc 1 70 22 is_stmt 0 view .LVU35
 162 001a 1422     		movs	r2, #20
 163 001c 0021     		movs	r1, #0
 164 001e 01A8     		add	r0, sp, #4
 165              	.LVL4:
  70:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 166              		.loc 1 70 22 view .LVU36
 167 0020 FFF7FEFF 		bl	memset
 168              	.LVL5:
 169 0024 0194     		str	r4, [sp, #4]
 170 0026 0123     		movs	r3, #1
 171 0028 0293     		str	r3, [sp, #8]
  75:Src/main.c    **** }
 172              		.loc 1 75 5 is_stmt 1 view .LVU37
 173 002a 01A9     		add	r1, sp, #4
 174 002c 0348     		ldr	r0, .L5+4
 175 002e FFF7FEFF 		bl	HAL_GPIO_Init
 176              	.LVL6:
  76:Src/main.c    **** 
 177              		.loc 1 76 1 is_stmt 0 view .LVU38
 178 0032 06B0     		add	sp, sp, #24
 179              		@ sp needed
 180              	.LVL7:
  76:Src/main.c    **** 
 181              		.loc 1 76 1 view .LVU39
ARM GAS  /tmp/cc5vRBIH.s 			page 13


 182 0034 10BD     		pop	{r4, pc}
 183              	.L6:
 184 0036 C046     		.align	2
 185              	.L5:
 186 0038 00100240 		.word	1073876992
 187 003c 00080048 		.word	1207961600
 188              		.cfi_endproc
 189              	.LFE40:
 191              		.section	.text.GPIO_AF_Init,"ax",%progbits
 192              		.align	1
 193              		.global	GPIO_AF_Init
 194              		.syntax unified
 195              		.code	16
 196              		.thumb_func
 198              	GPIO_AF_Init:
 199              	.LFB41:
  83:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 200              		.loc 1 83 21 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 16
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 10B5     		push	{r4, lr}
 205              	.LCFI4:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0002 84B0     		sub	sp, sp, #16
 210              	.LCFI5:
 211              		.cfi_def_cfa_offset 24
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 212              		.loc 1 84 2 view .LVU41
 213              	.LBB11:
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 214              		.loc 1 84 2 view .LVU42
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 215              		.loc 1 84 2 view .LVU43
 216 0004 3F4B     		ldr	r3, .L8
 217 0006 5A69     		ldr	r2, [r3, #20]
 218 0008 8021     		movs	r1, #128
 219 000a 8902     		lsls	r1, r1, #10
 220 000c 0A43     		orrs	r2, r1
 221 000e 5A61     		str	r2, [r3, #20]
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 222              		.loc 1 84 2 view .LVU44
 223 0010 5A69     		ldr	r2, [r3, #20]
 224 0012 0A40     		ands	r2, r1
 225 0014 0192     		str	r2, [sp, #4]
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 226              		.loc 1 84 2 view .LVU45
 227 0016 019A     		ldr	r2, [sp, #4]
 228              	.LBE11:
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 229              		.loc 1 84 2 view .LVU46
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 230              		.loc 1 85 2 view .LVU47
 231              	.LBB12:
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
ARM GAS  /tmp/cc5vRBIH.s 			page 14


 232              		.loc 1 85 2 view .LVU48
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 233              		.loc 1 85 2 view .LVU49
 234 0018 5A69     		ldr	r2, [r3, #20]
 235 001a 8021     		movs	r1, #128
 236 001c C902     		lsls	r1, r1, #11
 237 001e 0A43     		orrs	r2, r1
 238 0020 5A61     		str	r2, [r3, #20]
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 239              		.loc 1 85 2 view .LVU50
 240 0022 5A69     		ldr	r2, [r3, #20]
 241 0024 0A40     		ands	r2, r1
 242 0026 0292     		str	r2, [sp, #8]
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 243              		.loc 1 85 2 view .LVU51
 244 0028 029A     		ldr	r2, [sp, #8]
 245              	.LBE12:
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 246              		.loc 1 85 2 view .LVU52
  86:Src/main.c    **** 
 247              		.loc 1 86 5 view .LVU53
 248              	.LBB13:
  86:Src/main.c    **** 
 249              		.loc 1 86 5 view .LVU54
  86:Src/main.c    **** 
 250              		.loc 1 86 5 view .LVU55
 251 002a 5A69     		ldr	r2, [r3, #20]
 252 002c 8021     		movs	r1, #128
 253 002e 0903     		lsls	r1, r1, #12
 254 0030 0A43     		orrs	r2, r1
 255 0032 5A61     		str	r2, [r3, #20]
  86:Src/main.c    **** 
 256              		.loc 1 86 5 view .LVU56
 257 0034 5B69     		ldr	r3, [r3, #20]
 258 0036 0B40     		ands	r3, r1
 259 0038 0393     		str	r3, [sp, #12]
  86:Src/main.c    **** 
 260              		.loc 1 86 5 view .LVU57
 261 003a 039B     		ldr	r3, [sp, #12]
 262              	.LBE13:
  86:Src/main.c    **** 
 263              		.loc 1 86 5 view .LVU58
  89:Src/main.c    **** 	HAL_GPIO_Init(&uart_pins.tx.gpio, &uart_pins.tx.pin);
 264              		.loc 1 89 2 view .LVU59
 265 003c 3249     		ldr	r1, .L8+4
 266 003e 0C00     		movs	r4, r1
 267 0040 2C3C     		subs	r4, r4, #44
 268 0042 2000     		movs	r0, r4
 269 0044 FFF7FEFF 		bl	HAL_GPIO_Init
 270              	.LVL8:
  90:Src/main.c    **** 
 271              		.loc 1 90 2 view .LVU60
 272 0048 2100     		movs	r1, r4
 273 004a 6C31     		adds	r1, r1, #108
 274 004c 2000     		movs	r0, r4
 275 004e 4030     		adds	r0, r0, #64
 276 0050 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cc5vRBIH.s 			page 15


 277              	.LVL9:
  93:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 278              		.loc 1 93 2 view .LVU61
 279 0054 2D49     		ldr	r1, .L8+8
 280 0056 0C00     		movs	r4, r1
 281 0058 2C3C     		subs	r4, r4, #44
 282 005a 2000     		movs	r0, r4
 283 005c FFF7FEFF 		bl	HAL_GPIO_Init
 284              	.LVL10:
  94:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 285              		.loc 1 94 2 view .LVU62
 286 0060 2100     		movs	r1, r4
 287 0062 6C31     		adds	r1, r1, #108
 288 0064 2000     		movs	r0, r4
 289 0066 4030     		adds	r0, r0, #64
 290 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 291              	.LVL11:
  95:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 292              		.loc 1 95 2 view .LVU63
 293 006c 2100     		movs	r1, r4
 294 006e AC31     		adds	r1, r1, #172
 295 0070 2000     		movs	r0, r4
 296 0072 8030     		adds	r0, r0, #128
 297 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 298              	.LVL12:
  96:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 299              		.loc 1 96 2 view .LVU64
 300 0078 2100     		movs	r1, r4
 301 007a EC31     		adds	r1, r1, #236
 302 007c 2000     		movs	r0, r4
 303 007e C030     		adds	r0, r0, #192
 304 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL13:
  97:Src/main.c    **** 
 306              		.loc 1 97 2 view .LVU65
 307 0084 2100     		movs	r1, r4
 308 0086 2D31     		adds	r1, r1, #45
 309 0088 FF31     		adds	r1, r1, #255
 310 008a 601C     		adds	r0, r4, #1
 311 008c FF30     		adds	r0, r0, #255
 312 008e FFF7FEFF 		bl	HAL_GPIO_Init
 313              	.LVL14:
 100:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 314              		.loc 1 100 2 view .LVU66
 315 0092 1F49     		ldr	r1, .L8+12
 316 0094 0C00     		movs	r4, r1
 317 0096 2C3C     		subs	r4, r4, #44
 318 0098 2000     		movs	r0, r4
 319 009a FFF7FEFF 		bl	HAL_GPIO_Init
 320              	.LVL15:
 101:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 321              		.loc 1 101 2 view .LVU67
 322 009e 2100     		movs	r1, r4
 323 00a0 6C31     		adds	r1, r1, #108
 324 00a2 2000     		movs	r0, r4
 325 00a4 4030     		adds	r0, r0, #64
 326 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cc5vRBIH.s 			page 16


 327              	.LVL16:
 102:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 328              		.loc 1 102 2 view .LVU68
 329 00aa 2100     		movs	r1, r4
 330 00ac AC31     		adds	r1, r1, #172
 331 00ae 2000     		movs	r0, r4
 332 00b0 8030     		adds	r0, r0, #128
 333 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 334              	.LVL17:
 103:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 335              		.loc 1 103 2 view .LVU69
 336 00b6 2100     		movs	r1, r4
 337 00b8 EC31     		adds	r1, r1, #236
 338 00ba 2000     		movs	r0, r4
 339 00bc C030     		adds	r0, r0, #192
 340 00be FFF7FEFF 		bl	HAL_GPIO_Init
 341              	.LVL18:
 104:Src/main.c    **** 
 342              		.loc 1 104 2 view .LVU70
 343 00c2 2100     		movs	r1, r4
 344 00c4 2D31     		adds	r1, r1, #45
 345 00c6 FF31     		adds	r1, r1, #255
 346 00c8 601C     		adds	r0, r4, #1
 347 00ca FF30     		adds	r0, r0, #255
 348 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 349              	.LVL19:
 107:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 350              		.loc 1 107 2 view .LVU71
 351 00d0 1049     		ldr	r1, .L8+16
 352 00d2 0C00     		movs	r4, r1
 353 00d4 2C3C     		subs	r4, r4, #44
 354 00d6 2000     		movs	r0, r4
 355 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 356              	.LVL20:
 108:Src/main.c    **** 
 357              		.loc 1 108 2 view .LVU72
 358 00dc 2100     		movs	r1, r4
 359 00de 6C31     		adds	r1, r1, #108
 360 00e0 2000     		movs	r0, r4
 361 00e2 4030     		adds	r0, r0, #64
 362 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 363              	.LVL21:
 111:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 364              		.loc 1 111 2 view .LVU73
 365 00e8 0B49     		ldr	r1, .L8+20
 366 00ea 0C00     		movs	r4, r1
 367 00ec 2C3C     		subs	r4, r4, #44
 368 00ee 2000     		movs	r0, r4
 369 00f0 FFF7FEFF 		bl	HAL_GPIO_Init
 370              	.LVL22:
 112:Src/main.c    **** }
 371              		.loc 1 112 2 view .LVU74
 372 00f4 2100     		movs	r1, r4
 373 00f6 6C31     		adds	r1, r1, #108
 374 00f8 2000     		movs	r0, r4
 375 00fa 4030     		adds	r0, r0, #64
 376 00fc FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cc5vRBIH.s 			page 17


 377              	.LVL23:
 113:Src/main.c    **** 
 378              		.loc 1 113 1 is_stmt 0 view .LVU75
 379 0100 04B0     		add	sp, sp, #16
 380              		@ sp needed
 381 0102 10BD     		pop	{r4, pc}
 382              	.L9:
 383              		.align	2
 384              	.L8:
 385 0104 00100240 		.word	1073876992
 386 0108 2C000000 		.word	uart_pins+44
 387 010c 2C000000 		.word	motor_left_pins+44
 388 0110 2C000000 		.word	motor_right_pins+44
 389 0114 2C000000 		.word	ultrasonic_left_pins+44
 390 0118 2C000000 		.word	ultrasonic_right_pins+44
 391              		.cfi_endproc
 392              	.LFE41:
 394              		.global	__aeabi_uidiv
 395              		.section	.text.USART_Init,"ax",%progbits
 396              		.align	1
 397              		.global	USART_Init
 398              		.syntax unified
 399              		.code	16
 400              		.thumb_func
 402              	USART_Init:
 403              	.LFB42:
 118:Src/main.c    **** 	//__HAL_RCC_USART3_CLK_ENABLE();
 404              		.loc 1 118 19 is_stmt 1 view -0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408 0000 10B5     		push	{r4, lr}
 409              	.LCFI6:
 410              		.cfi_def_cfa_offset 8
 411              		.cfi_offset 4, -8
 412              		.cfi_offset 14, -4
 120:Src/main.c    **** 
 413              		.loc 1 120 2 view .LVU77
 120:Src/main.c    **** 
 414              		.loc 1 120 5 is_stmt 0 view .LVU78
 415 0002 114A     		ldr	r2, .L11
 416 0004 D169     		ldr	r1, [r2, #28]
 120:Src/main.c    **** 
 417              		.loc 1 120 15 view .LVU79
 418 0006 8023     		movs	r3, #128
 419 0008 DB02     		lsls	r3, r3, #11
 420 000a 0B43     		orrs	r3, r1
 421 000c D361     		str	r3, [r2, #28]
 123:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 115200;
 422              		.loc 1 123 2 is_stmt 1 view .LVU80
 123:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 115200;
 423              		.loc 1 123 8 is_stmt 0 view .LVU81
 424 000e 0F4C     		ldr	r4, .L11+4
 425 0010 2368     		ldr	r3, [r4]
 123:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 115200;
 426              		.loc 1 123 14 view .LVU82
 427 0012 0F4A     		ldr	r2, .L11+8
ARM GAS  /tmp/cc5vRBIH.s 			page 18


 428 0014 1340     		ands	r3, r2
 429 0016 2360     		str	r3, [r4]
 124:Src/main.c    **** 
 430              		.loc 1 124 2 is_stmt 1 view .LVU83
 124:Src/main.c    **** 
 431              		.loc 1 124 16 is_stmt 0 view .LVU84
 432 0018 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 433              	.LVL24:
 124:Src/main.c    **** 
 434              		.loc 1 124 38 view .LVU85
 435 001c E121     		movs	r1, #225
 436 001e 4902     		lsls	r1, r1, #9
 437 0020 FFF7FEFF 		bl	__aeabi_uidiv
 438              	.LVL25:
 124:Src/main.c    **** 
 439              		.loc 1 124 14 view .LVU86
 440 0024 E060     		str	r0, [r4, #12]
 127:Src/main.c    **** 
 441              		.loc 1 127 2 is_stmt 1 view .LVU87
 127:Src/main.c    **** 
 442              		.loc 1 127 8 is_stmt 0 view .LVU88
 443 0026 2368     		ldr	r3, [r4]
 127:Src/main.c    **** 
 444              		.loc 1 127 14 view .LVU89
 445 0028 0822     		movs	r2, #8
 446 002a 1343     		orrs	r3, r2
 447 002c 2360     		str	r3, [r4]
 130:Src/main.c    **** 
 448              		.loc 1 130 2 is_stmt 1 view .LVU90
 130:Src/main.c    **** 
 449              		.loc 1 130 8 is_stmt 0 view .LVU91
 450 002e 2368     		ldr	r3, [r4]
 130:Src/main.c    **** 
 451              		.loc 1 130 14 view .LVU92
 452 0030 043A     		subs	r2, r2, #4
 453 0032 1343     		orrs	r3, r2
 454 0034 2360     		str	r3, [r4]
 133:Src/main.c    **** 
 455              		.loc 1 133 2 is_stmt 1 view .LVU93
 133:Src/main.c    **** 
 456              		.loc 1 133 8 is_stmt 0 view .LVU94
 457 0036 2368     		ldr	r3, [r4]
 133:Src/main.c    **** 
 458              		.loc 1 133 14 view .LVU95
 459 0038 1C32     		adds	r2, r2, #28
 460 003a 1343     		orrs	r3, r2
 461 003c 2360     		str	r3, [r4]
 136:Src/main.c    **** }
 462              		.loc 1 136 2 is_stmt 1 view .LVU96
 136:Src/main.c    **** }
 463              		.loc 1 136 8 is_stmt 0 view .LVU97
 464 003e 2368     		ldr	r3, [r4]
 136:Src/main.c    **** }
 465              		.loc 1 136 14 view .LVU98
 466 0040 1F3A     		subs	r2, r2, #31
 467 0042 1343     		orrs	r3, r2
 468 0044 2360     		str	r3, [r4]
ARM GAS  /tmp/cc5vRBIH.s 			page 19


 137:Src/main.c    **** 
 469              		.loc 1 137 1 view .LVU99
 470              		@ sp needed
 471 0046 10BD     		pop	{r4, pc}
 472              	.L12:
 473              		.align	2
 474              	.L11:
 475 0048 00100240 		.word	1073876992
 476 004c 00480040 		.word	1073760256
 477 0050 FF7FFFFF 		.word	-32769
 478              		.cfi_endproc
 479              	.LFE42:
 481              		.section	.text.USART_SendChar,"ax",%progbits
 482              		.align	1
 483              		.global	USART_SendChar
 484              		.syntax unified
 485              		.code	16
 486              		.thumb_func
 488              	USART_SendChar:
 489              	.LFB43:
 144:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 490              		.loc 1 144 32 is_stmt 1 view -0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL26:
 496              	.L14:
 145:Src/main.c    **** 		;
 497              		.loc 1 145 8 discriminator 1 view .LVU101
 145:Src/main.c    **** 		;
 498              		.loc 1 145 16 is_stmt 0 discriminator 1 view .LVU102
 499 0000 034B     		ldr	r3, .L16
 500 0002 DB69     		ldr	r3, [r3, #28]
 145:Src/main.c    **** 		;
 501              		.loc 1 145 8 discriminator 1 view .LVU103
 502 0004 1B06     		lsls	r3, r3, #24
 503 0006 FBD5     		bpl	.L14
 148:Src/main.c    **** }
 504              		.loc 1 148 2 is_stmt 1 view .LVU104
 148:Src/main.c    **** }
 505              		.loc 1 148 14 is_stmt 0 view .LVU105
 506 0008 014B     		ldr	r3, .L16
 507 000a 1885     		strh	r0, [r3, #40]
 149:Src/main.c    **** 
 508              		.loc 1 149 1 view .LVU106
 509              		@ sp needed
 510 000c 7047     		bx	lr
 511              	.L17:
 512 000e C046     		.align	2
 513              	.L16:
 514 0010 00480040 		.word	1073760256
 515              		.cfi_endproc
 516              	.LFE43:
 518              		.section	.text.USART_SendString,"ax",%progbits
 519              		.align	1
 520              		.global	USART_SendString
ARM GAS  /tmp/cc5vRBIH.s 			page 20


 521              		.syntax unified
 522              		.code	16
 523              		.thumb_func
 525              	USART_SendString:
 526              	.LVL27:
 527              	.LFB44:
 156:Src/main.c    **** 	while(*p_string != 0) {
 528              		.loc 1 156 42 is_stmt 1 view -0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 156:Src/main.c    **** 	while(*p_string != 0) {
 532              		.loc 1 156 42 is_stmt 0 view .LVU108
 533 0000 10B5     		push	{r4, lr}
 534              	.LCFI7:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 4, -8
 537              		.cfi_offset 14, -4
 538 0002 0400     		movs	r4, r0
 157:Src/main.c    **** 		USART_SendChar(*p_string);
 539              		.loc 1 157 2 is_stmt 1 view .LVU109
 157:Src/main.c    **** 		USART_SendChar(*p_string);
 540              		.loc 1 157 7 is_stmt 0 view .LVU110
 541 0004 02E0     		b	.L19
 542              	.LVL28:
 543              	.L20:
 158:Src/main.c    **** 		p_string++;
 544              		.loc 1 158 3 is_stmt 1 view .LVU111
 545 0006 FFF7FEFF 		bl	USART_SendChar
 546              	.LVL29:
 159:Src/main.c    **** 	}
 547              		.loc 1 159 3 view .LVU112
 159:Src/main.c    **** 	}
 548              		.loc 1 159 11 is_stmt 0 view .LVU113
 549 000a 0134     		adds	r4, r4, #1
 550              	.LVL30:
 551              	.L19:
 157:Src/main.c    **** 		USART_SendChar(*p_string);
 552              		.loc 1 157 18 is_stmt 1 view .LVU114
 157:Src/main.c    **** 		USART_SendChar(*p_string);
 553              		.loc 1 157 8 is_stmt 0 view .LVU115
 554 000c 2078     		ldrb	r0, [r4]
 157:Src/main.c    **** 		USART_SendChar(*p_string);
 555              		.loc 1 157 18 view .LVU116
 556 000e 0028     		cmp	r0, #0
 557 0010 F9D1     		bne	.L20
 161:Src/main.c    **** }
 558              		.loc 1 161 2 is_stmt 1 view .LVU117
 559 0012 FFF7FEFF 		bl	USART_SendChar
 560              	.LVL31:
 162:Src/main.c    **** 
 561              		.loc 1 162 1 is_stmt 0 view .LVU118
 562              		@ sp needed
 563              	.LVL32:
 162:Src/main.c    **** 
 564              		.loc 1 162 1 view .LVU119
 565 0016 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cc5vRBIH.s 			page 21


 566              		.cfi_endproc
 567              	.LFE44:
 569              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 570              		.align	2
 571              	.LC32:
 572 0000 434D443E 		.ascii	"CMD> \000"
 572      2000
 573              		.section	.text.ClearCommand,"ax",%progbits
 574              		.align	1
 575              		.global	ClearCommand
 576              		.syntax unified
 577              		.code	16
 578              		.thumb_func
 580              	ClearCommand:
 581              	.LFB45:
 167:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 582              		.loc 1 167 20 is_stmt 1 view -0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 8
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586 0000 00B5     		push	{lr}
 587              	.LCFI8:
 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 14, -4
 590 0002 83B0     		sub	sp, sp, #12
 591              	.LCFI9:
 592              		.cfi_def_cfa_offset 16
 168:Src/main.c    **** 	memset(command, 0, sizeof(command));
 593              		.loc 1 168 2 view .LVU121
 168:Src/main.c    **** 	memset(command, 0, sizeof(command));
 594              		.loc 1 168 10 is_stmt 0 view .LVU122
 595 0004 074B     		ldr	r3, .L22
 596 0006 1A68     		ldr	r2, [r3]
 597 0008 0092     		str	r2, [sp]
 598 000a 9B88     		ldrh	r3, [r3, #4]
 599 000c 6A46     		mov	r2, sp
 600 000e 9380     		strh	r3, [r2, #4]
 169:Src/main.c    **** 	incomingCommand = 0;
 601              		.loc 1 169 2 is_stmt 1 view .LVU123
 602 0010 054B     		ldr	r3, .L22+4
 603 0012 0022     		movs	r2, #0
 604 0014 1A80     		strh	r2, [r3]
 170:Src/main.c    **** 	USART_SendString(prompt);
 605              		.loc 1 170 2 view .LVU124
 170:Src/main.c    **** 	USART_SendString(prompt);
 606              		.loc 1 170 18 is_stmt 0 view .LVU125
 607 0016 054B     		ldr	r3, .L22+8
 608 0018 1A70     		strb	r2, [r3]
 171:Src/main.c    **** }
 609              		.loc 1 171 2 is_stmt 1 view .LVU126
 610 001a 6846     		mov	r0, sp
 611 001c FFF7FEFF 		bl	USART_SendString
 612              	.LVL33:
 172:Src/main.c    **** 
 613              		.loc 1 172 1 is_stmt 0 view .LVU127
 614 0020 03B0     		add	sp, sp, #12
 615              		@ sp needed
ARM GAS  /tmp/cc5vRBIH.s 			page 22


 616 0022 00BD     		pop	{pc}
 617              	.L23:
 618              		.align	2
 619              	.L22:
 620 0024 00000000 		.word	.LC32
 621 0028 00000000 		.word	command
 622 002c 00000000 		.word	incomingCommand
 623              		.cfi_endproc
 624              	.LFE45:
 626              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 627              		.align	2
 628              	.LC36:
 629 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 629      616E6420 
 629      746F6F20 
 629      6C6F6E67 
 629      210A00
 630              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 631              		.align	1
 632              		.global	USART3_4_IRQHandler
 633              		.syntax unified
 634              		.code	16
 635              		.thumb_func
 637              	USART3_4_IRQHandler:
 638              	.LFB46:
 174:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 639              		.loc 1 174 27 is_stmt 1 view -0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 24
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643 0000 30B5     		push	{r4, r5, lr}
 644              	.LCFI10:
 645              		.cfi_def_cfa_offset 12
 646              		.cfi_offset 4, -12
 647              		.cfi_offset 5, -8
 648              		.cfi_offset 14, -4
 649 0002 87B0     		sub	sp, sp, #28
 650              	.LCFI11:
 651              		.cfi_def_cfa_offset 40
 175:Src/main.c    **** 	incomingCommand = 1;
 652              		.loc 1 175 2 view .LVU129
 175:Src/main.c    **** 	incomingCommand = 1;
 653              		.loc 1 175 10 is_stmt 0 view .LVU130
 654 0004 01AA     		add	r2, sp, #4
 655 0006 164B     		ldr	r3, .L31
 656 0008 1800     		movs	r0, r3
 657 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 658 000c 38C2     		stmia	r2!, {r3, r4, r5}
 659 000e 0368     		ldr	r3, [r0]
 660 0010 1360     		str	r3, [r2]
 661 0012 8388     		ldrh	r3, [r0, #4]
 662 0014 9380     		strh	r3, [r2, #4]
 663 0016 8379     		ldrb	r3, [r0, #6]
 664 0018 9371     		strb	r3, [r2, #6]
 176:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 665              		.loc 1 176 2 is_stmt 1 view .LVU131
 176:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
ARM GAS  /tmp/cc5vRBIH.s 			page 23


 666              		.loc 1 176 18 is_stmt 0 view .LVU132
 667 001a 124B     		ldr	r3, .L31+4
 668 001c 0122     		movs	r2, #1
 669 001e 1A70     		strb	r2, [r3]
 177:Src/main.c    **** 		;
 670              		.loc 1 177 2 is_stmt 1 view .LVU133
 671              	.L25:
 177:Src/main.c    **** 		;
 672              		.loc 1 177 8 discriminator 1 view .LVU134
 177:Src/main.c    **** 		;
 673              		.loc 1 177 16 is_stmt 0 discriminator 1 view .LVU135
 674 0020 114B     		ldr	r3, .L31+8
 675 0022 DB69     		ldr	r3, [r3, #28]
 177:Src/main.c    **** 		;
 676              		.loc 1 177 8 discriminator 1 view .LVU136
 677 0024 9B06     		lsls	r3, r3, #26
 678 0026 FBD5     		bpl	.L25
 179:Src/main.c    **** 		if(command[1]){
 679              		.loc 1 179 2 is_stmt 1 view .LVU137
 179:Src/main.c    **** 		if(command[1]){
 680              		.loc 1 179 12 is_stmt 0 view .LVU138
 681 0028 104B     		ldr	r3, .L31+12
 682 002a 1B78     		ldrb	r3, [r3]
 179:Src/main.c    **** 		if(command[1]){
 683              		.loc 1 179 4 view .LVU139
 684 002c 002B     		cmp	r3, #0
 685 002e 0FD0     		beq	.L26
 180:Src/main.c    **** 			USART_SendString(err);
 686              		.loc 1 180 3 is_stmt 1 view .LVU140
 180:Src/main.c    **** 			USART_SendString(err);
 687              		.loc 1 180 13 is_stmt 0 view .LVU141
 688 0030 0E4B     		ldr	r3, .L31+12
 689 0032 5B78     		ldrb	r3, [r3, #1]
 180:Src/main.c    **** 			USART_SendString(err);
 690              		.loc 1 180 5 view .LVU142
 691 0034 002B     		cmp	r3, #0
 692 0036 05D1     		bne	.L30
 185:Src/main.c    **** 	else
 693              		.loc 1 185 4 is_stmt 1 view .LVU143
 185:Src/main.c    **** 	else
 694              		.loc 1 185 23 is_stmt 0 view .LVU144
 695 0038 0B4B     		ldr	r3, .L31+8
 696 003a 9B8C     		ldrh	r3, [r3, #36]
 185:Src/main.c    **** 	else
 697              		.loc 1 185 15 view .LVU145
 698 003c DBB2     		uxtb	r3, r3
 699 003e 0B4A     		ldr	r2, .L31+12
 700 0040 5370     		strb	r3, [r2, #1]
 701 0042 0AE0     		b	.L24
 702              	.L30:
 181:Src/main.c    **** 			ClearCommand();
 703              		.loc 1 181 4 is_stmt 1 view .LVU146
 704 0044 01A8     		add	r0, sp, #4
 705 0046 FFF7FEFF 		bl	USART_SendString
 706              	.LVL34:
 182:Src/main.c    **** 		}
 707              		.loc 1 182 4 view .LVU147
ARM GAS  /tmp/cc5vRBIH.s 			page 24


 708 004a FFF7FEFF 		bl	ClearCommand
 709              	.LVL35:
 710 004e 04E0     		b	.L24
 711              	.L26:
 187:Src/main.c    **** }
 712              		.loc 1 187 3 view .LVU148
 187:Src/main.c    **** }
 713              		.loc 1 187 22 is_stmt 0 view .LVU149
 714 0050 054B     		ldr	r3, .L31+8
 715 0052 9B8C     		ldrh	r3, [r3, #36]
 187:Src/main.c    **** }
 716              		.loc 1 187 14 view .LVU150
 717 0054 DBB2     		uxtb	r3, r3
 718 0056 054A     		ldr	r2, .L31+12
 719 0058 1370     		strb	r3, [r2]
 720              	.L24:
 188:Src/main.c    **** 
 721              		.loc 1 188 1 view .LVU151
 722 005a 07B0     		add	sp, sp, #28
 723              		@ sp needed
 724 005c 30BD     		pop	{r4, r5, pc}
 725              	.L32:
 726 005e C046     		.align	2
 727              	.L31:
 728 0060 00000000 		.word	.LC36
 729 0064 00000000 		.word	incomingCommand
 730 0068 00480040 		.word	1073760256
 731 006c 00000000 		.word	command
 732              		.cfi_endproc
 733              	.LFE46:
 735              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 736              		.align	2
 737              	.LC40:
 738 0000 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 738      523A2049 
 738      6E76616C 
 738      69642063 
 738      6F6D6D61 
 739 0019 000000   		.align	2
 740              	.LC42:
 741 001c 4D6F7669 		.ascii	"Moving forward \000"
 741      6E672066 
 741      6F727761 
 741      72642000 
 742              		.align	2
 743              	.LC44:
 744 002c 5475726E 		.ascii	"Turning left \000"
 744      696E6720 
 744      6C656674 
 744      2000
 745 003a 0000     		.align	2
 746              	.LC46:
 747 003c 5475726E 		.ascii	"Turning right \000"
 747      696E6720 
 747      72696768 
 747      742000
 748 004b 00       		.align	2
ARM GAS  /tmp/cc5vRBIH.s 			page 25


 749              	.LC48:
 750 004c 3130300A 		.ascii	"100\012\000"
 750      00
 751 0051 000000   		.align	2
 752              	.LC50:
 753 0054 3132300A 		.ascii	"120\012\000"
 753      00
 754 0059 000000   		.align	2
 755              	.LC52:
 756 005c 3134300A 		.ascii	"140\012\000"
 756      00
 757 0061 000000   		.align	2
 758              	.LC54:
 759 0064 3136300A 		.ascii	"160\012\000"
 759      00
 760 0069 000000   		.align	2
 761              	.LC56:
 762 006c 3138300A 		.ascii	"180\012\000"
 762      00
 763              		.section	.text.ProcessCommand,"ax",%progbits
 764              		.align	1
 765              		.global	ProcessCommand
 766              		.syntax unified
 767              		.code	16
 768              		.thumb_func
 770              	ProcessCommand:
 771              	.LVL36:
 772              	.LFB47:
 190:Src/main.c    **** 	uint32_t left_motor_pin;
 773              		.loc 1 190 57 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 136
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 190:Src/main.c    **** 	uint32_t left_motor_pin;
 777              		.loc 1 190 57 is_stmt 0 view .LVU153
 778 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 779              	.LCFI12:
 780              		.cfi_def_cfa_offset 20
 781              		.cfi_offset 4, -20
 782              		.cfi_offset 5, -16
 783              		.cfi_offset 6, -12
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 A3B0     		sub	sp, sp, #140
 787              	.LCFI13:
 788              		.cfi_def_cfa_offset 160
 191:Src/main.c    **** 	uint32_t right_motor_pin;
 789              		.loc 1 191 2 is_stmt 1 view .LVU154
 192:Src/main.c    **** 	int32_t CH1_DC = 65535;
 790              		.loc 1 192 2 view .LVU155
 193:Src/main.c    **** 
 791              		.loc 1 193 2 view .LVU156
 792              	.LVL37:
 195:Src/main.c    **** 
 793              		.loc 1 195 2 view .LVU157
 195:Src/main.c    **** 
 794              		.loc 1 195 10 is_stmt 0 view .LVU158
ARM GAS  /tmp/cc5vRBIH.s 			page 26


 795 0004 1BAC     		add	r4, sp, #108
 796 0006 434B     		ldr	r3, .L53
 797 0008 2200     		movs	r2, r4
 798 000a E0CB     		ldmia	r3!, {r5, r6, r7}
 799 000c E0C2     		stmia	r2!, {r5, r6, r7}
 800 000e 70CB     		ldmia	r3!, {r4, r5, r6}
 801 0010 70C2     		stmia	r2!, {r4, r5, r6}
 802 0012 1B78     		ldrb	r3, [r3]
 803 0014 1370     		strb	r3, [r2]
 197:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 804              		.loc 1 197 2 is_stmt 1 view .LVU159
 197:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 805              		.loc 1 197 10 is_stmt 0 view .LVU160
 806 0016 17AA     		add	r2, sp, #92
 807 0018 3F4B     		ldr	r3, .L53+4
 808 001a E0CB     		ldmia	r3!, {r5, r6, r7}
 809 001c E0C2     		stmia	r2!, {r5, r6, r7}
 810 001e 1B68     		ldr	r3, [r3]
 811 0020 1360     		str	r3, [r2]
 198:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 812              		.loc 1 198 2 is_stmt 1 view .LVU161
 198:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 813              		.loc 1 198 10 is_stmt 0 view .LVU162
 814 0022 13AA     		add	r2, sp, #76
 815 0024 3D4B     		ldr	r3, .L53+8
 816 0026 E0CB     		ldmia	r3!, {r5, r6, r7}
 817 0028 E0C2     		stmia	r2!, {r5, r6, r7}
 818 002a 1B88     		ldrh	r3, [r3]
 819 002c 1380     		strh	r3, [r2]
 199:Src/main.c    **** 
 820              		.loc 1 199 2 is_stmt 1 view .LVU163
 199:Src/main.c    **** 
 821              		.loc 1 199 10 is_stmt 0 view .LVU164
 822 002e 0FAA     		add	r2, sp, #60
 823 0030 3B4B     		ldr	r3, .L53+12
 824 0032 E0CB     		ldmia	r3!, {r5, r6, r7}
 825 0034 E0C2     		stmia	r2!, {r5, r6, r7}
 826 0036 1400     		movs	r4, r2
 827 0038 1A88     		ldrh	r2, [r3]
 828 003a 2280     		strh	r2, [r4]
 829 003c 9B78     		ldrb	r3, [r3, #2]
 830 003e A370     		strb	r3, [r4, #2]
 202:Src/main.c    **** 	uint8_t two[] = "40\n";
 831              		.loc 1 202 2 is_stmt 1 view .LVU165
 202:Src/main.c    **** 	uint8_t two[] = "40\n";
 832              		.loc 1 202 10 is_stmt 0 view .LVU166
 833 0040 384B     		ldr	r3, .L53+16
 834 0042 0E93     		str	r3, [sp, #56]
 203:Src/main.c    **** 	uint8_t three[] = "60\n";
 835              		.loc 1 203 2 is_stmt 1 view .LVU167
 203:Src/main.c    **** 	uint8_t three[] = "60\n";
 836              		.loc 1 203 10 is_stmt 0 view .LVU168
 837 0044 384B     		ldr	r3, .L53+20
 838 0046 0D93     		str	r3, [sp, #52]
 204:Src/main.c    **** 	uint8_t four[] = "80\n";
 839              		.loc 1 204 2 is_stmt 1 view .LVU169
 204:Src/main.c    **** 	uint8_t four[] = "80\n";
ARM GAS  /tmp/cc5vRBIH.s 			page 27


 840              		.loc 1 204 10 is_stmt 0 view .LVU170
 841 0048 384B     		ldr	r3, .L53+24
 842 004a 0C93     		str	r3, [sp, #48]
 205:Src/main.c    **** 	uint8_t five[] = "100\n";
 843              		.loc 1 205 2 is_stmt 1 view .LVU171
 205:Src/main.c    **** 	uint8_t five[] = "100\n";
 844              		.loc 1 205 10 is_stmt 0 view .LVU172
 845 004c 384B     		ldr	r3, .L53+28
 846 004e 0B93     		str	r3, [sp, #44]
 206:Src/main.c    **** 	uint8_t six[] = "120\n";
 847              		.loc 1 206 2 is_stmt 1 view .LVU173
 206:Src/main.c    **** 	uint8_t six[] = "120\n";
 848              		.loc 1 206 10 is_stmt 0 view .LVU174
 849 0050 384B     		ldr	r3, .L53+32
 850 0052 1A68     		ldr	r2, [r3]
 851 0054 0992     		str	r2, [sp, #36]
 852 0056 1A79     		ldrb	r2, [r3, #4]
 853 0058 09AB     		add	r3, sp, #36
 854 005a 1A71     		strb	r2, [r3, #4]
 207:Src/main.c    **** 	uint8_t seven[] = "140\n";
 855              		.loc 1 207 2 is_stmt 1 view .LVU175
 207:Src/main.c    **** 	uint8_t seven[] = "140\n";
 856              		.loc 1 207 10 is_stmt 0 view .LVU176
 857 005c 364B     		ldr	r3, .L53+36
 858 005e 1A68     		ldr	r2, [r3]
 859 0060 0792     		str	r2, [sp, #28]
 860 0062 1A79     		ldrb	r2, [r3, #4]
 861 0064 07AB     		add	r3, sp, #28
 862 0066 1A71     		strb	r2, [r3, #4]
 208:Src/main.c    **** 	uint8_t eight[] = "160\n";
 863              		.loc 1 208 2 is_stmt 1 view .LVU177
 208:Src/main.c    **** 	uint8_t eight[] = "160\n";
 864              		.loc 1 208 10 is_stmt 0 view .LVU178
 865 0068 344B     		ldr	r3, .L53+40
 866 006a 1A68     		ldr	r2, [r3]
 867 006c 0592     		str	r2, [sp, #20]
 868 006e 1A79     		ldrb	r2, [r3, #4]
 869 0070 05AB     		add	r3, sp, #20
 870 0072 1A71     		strb	r2, [r3, #4]
 209:Src/main.c    **** 	uint8_t nine[] = "180\n";
 871              		.loc 1 209 2 is_stmt 1 view .LVU179
 209:Src/main.c    **** 	uint8_t nine[] = "180\n";
 872              		.loc 1 209 10 is_stmt 0 view .LVU180
 873 0074 324B     		ldr	r3, .L53+44
 874 0076 1A68     		ldr	r2, [r3]
 875 0078 0392     		str	r2, [sp, #12]
 876 007a 1A79     		ldrb	r2, [r3, #4]
 877 007c 03AB     		add	r3, sp, #12
 878 007e 1A71     		strb	r2, [r3, #4]
 210:Src/main.c    **** 
 879              		.loc 1 210 2 is_stmt 1 view .LVU181
 210:Src/main.c    **** 
 880              		.loc 1 210 10 is_stmt 0 view .LVU182
 881 0080 304B     		ldr	r3, .L53+48
 882 0082 1A68     		ldr	r2, [r3]
 883 0084 0192     		str	r2, [sp, #4]
 884 0086 1A79     		ldrb	r2, [r3, #4]
ARM GAS  /tmp/cc5vRBIH.s 			page 28


 885 0088 01AB     		add	r3, sp, #4
 886 008a 1A71     		strb	r2, [r3, #4]
 212:Src/main.c    **** 		USART_SendString(err);
 887              		.loc 1 212 2 is_stmt 1 view .LVU183
 212:Src/main.c    **** 		USART_SendString(err);
 888              		.loc 1 212 4 is_stmt 0 view .LVU184
 889 008c 7728     		cmp	r0, #119
 890 008e 0BD0     		beq	.L48
 212:Src/main.c    **** 		USART_SendString(err);
 891              		.loc 1 212 22 discriminator 1 view .LVU185
 892 0090 6128     		cmp	r0, #97
 893 0092 12D0     		beq	.L49
 212:Src/main.c    **** 		USART_SendString(err);
 894              		.loc 1 212 42 discriminator 2 view .LVU186
 895 0094 6428     		cmp	r0, #100
 896 0096 01D1     		bne	.L52
 229:Src/main.c    **** 			break;
 897              		.loc 1 229 10 view .LVU187
 898 0098 0FA8     		add	r0, sp, #60
 899              	.LVL38:
 229:Src/main.c    **** 			break;
 900              		.loc 1 229 10 view .LVU188
 901 009a 06E0     		b	.L34
 902              	.LVL39:
 903              	.L52:
 213:Src/main.c    **** 		ClearCommand();
 904              		.loc 1 213 3 is_stmt 1 view .LVU189
 905 009c 1BA8     		add	r0, sp, #108
 906              	.LVL40:
 213:Src/main.c    **** 		ClearCommand();
 907              		.loc 1 213 3 is_stmt 0 view .LVU190
 908 009e FFF7FEFF 		bl	USART_SendString
 909              	.LVL41:
 214:Src/main.c    **** 		return;
 910              		.loc 1 214 3 is_stmt 1 view .LVU191
 911 00a2 FFF7FEFF 		bl	ClearCommand
 912              	.LVL42:
 215:Src/main.c    **** 	}
 913              		.loc 1 215 3 view .LVU192
 914 00a6 30E0     		b	.L33
 915              	.LVL43:
 916              	.L48:
 223:Src/main.c    **** 			break;
 917              		.loc 1 223 10 is_stmt 0 view .LVU193
 918 00a8 17A8     		add	r0, sp, #92
 919              	.LVL44:
 920              	.L34:
 236:Src/main.c    **** 		case '1':
 921              		.loc 1 236 2 is_stmt 1 view .LVU194
 922 00aa 3139     		subs	r1, r1, #49
 923              	.LVL45:
 236:Src/main.c    **** 		case '1':
 924              		.loc 1 236 2 is_stmt 0 view .LVU195
 925 00ac CBB2     		uxtb	r3, r1
 926 00ae 082B     		cmp	r3, #8
 927 00b0 13D8     		bhi	.L36
 928 00b2 9900     		lsls	r1, r3, #2
ARM GAS  /tmp/cc5vRBIH.s 			page 29


 929 00b4 244B     		ldr	r3, .L53+52
 930 00b6 5B58     		ldr	r3, [r3, r1]
 931 00b8 9F46     		mov	pc, r3
 932              		.section	.rodata.ProcessCommand,"a",%progbits
 933              		.align	2
 934              	.L38:
 935 0000 E6000000 		.word	.L46
 936 0004 0E010000 		.word	.L51
 937 0008 BE000000 		.word	.L44
 938 000c C2000000 		.word	.L43
 939 0010 C6000000 		.word	.L42
 940 0014 CA000000 		.word	.L41
 941 0018 CE000000 		.word	.L40
 942 001c D2000000 		.word	.L39
 943 0020 D6000000 		.word	.L37
 944              		.section	.text.ProcessCommand
 945              	.LVL46:
 946              	.L49:
 226:Src/main.c    **** 			break;
 947              		.loc 1 226 10 view .LVU196
 948 00ba 13A8     		add	r0, sp, #76
 949              	.LVL47:
 226:Src/main.c    **** 			break;
 950              		.loc 1 226 10 view .LVU197
 951 00bc F5E7     		b	.L34
 952              	.LVL48:
 953              	.L44:
 245:Src/main.c    **** 			break;
 954              		.loc 1 245 4 is_stmt 1 view .LVU198
 246:Src/main.c    **** 		case '4':
 955              		.loc 1 246 4 view .LVU199
 245:Src/main.c    **** 			break;
 956              		.loc 1 245 10 is_stmt 0 view .LVU200
 957 00be 0CAC     		add	r4, sp, #48
 958              	.LVL49:
 246:Src/main.c    **** 		case '4':
 959              		.loc 1 246 4 view .LVU201
 960 00c0 12E0     		b	.L45
 961              	.LVL50:
 962              	.L43:
 248:Src/main.c    **** 			break;
 963              		.loc 1 248 4 is_stmt 1 view .LVU202
 249:Src/main.c    **** 		case '5':
 964              		.loc 1 249 4 view .LVU203
 248:Src/main.c    **** 			break;
 965              		.loc 1 248 10 is_stmt 0 view .LVU204
 966 00c2 0BAC     		add	r4, sp, #44
 967              	.LVL51:
 249:Src/main.c    **** 		case '5':
 968              		.loc 1 249 4 view .LVU205
 969 00c4 10E0     		b	.L45
 970              	.LVL52:
 971              	.L42:
 251:Src/main.c    **** 			break;
 972              		.loc 1 251 4 is_stmt 1 view .LVU206
 252:Src/main.c    **** 		case '6':
 973              		.loc 1 252 4 view .LVU207
ARM GAS  /tmp/cc5vRBIH.s 			page 30


 251:Src/main.c    **** 			break;
 974              		.loc 1 251 10 is_stmt 0 view .LVU208
 975 00c6 09AC     		add	r4, sp, #36
 976              	.LVL53:
 252:Src/main.c    **** 		case '6':
 977              		.loc 1 252 4 view .LVU209
 978 00c8 0EE0     		b	.L45
 979              	.LVL54:
 980              	.L41:
 254:Src/main.c    **** 			break;
 981              		.loc 1 254 4 is_stmt 1 view .LVU210
 255:Src/main.c    **** 		case '7':
 982              		.loc 1 255 4 view .LVU211
 254:Src/main.c    **** 			break;
 983              		.loc 1 254 10 is_stmt 0 view .LVU212
 984 00ca 07AC     		add	r4, sp, #28
 985              	.LVL55:
 255:Src/main.c    **** 		case '7':
 986              		.loc 1 255 4 view .LVU213
 987 00cc 0CE0     		b	.L45
 988              	.LVL56:
 989              	.L40:
 257:Src/main.c    **** 			break;
 990              		.loc 1 257 4 is_stmt 1 view .LVU214
 258:Src/main.c    **** 		case '8':
 991              		.loc 1 258 4 view .LVU215
 257:Src/main.c    **** 			break;
 992              		.loc 1 257 10 is_stmt 0 view .LVU216
 993 00ce 05AC     		add	r4, sp, #20
 994              	.LVL57:
 258:Src/main.c    **** 		case '8':
 995              		.loc 1 258 4 view .LVU217
 996 00d0 0AE0     		b	.L45
 997              	.LVL58:
 998              	.L39:
 260:Src/main.c    **** 			break;
 999              		.loc 1 260 4 is_stmt 1 view .LVU218
 261:Src/main.c    **** 		case '9':
 1000              		.loc 1 261 4 view .LVU219
 260:Src/main.c    **** 			break;
 1001              		.loc 1 260 10 is_stmt 0 view .LVU220
 1002 00d2 03AC     		add	r4, sp, #12
 1003              	.LVL59:
 261:Src/main.c    **** 		case '9':
 1004              		.loc 1 261 4 view .LVU221
 1005 00d4 08E0     		b	.L45
 1006              	.LVL60:
 1007              	.L37:
 263:Src/main.c    **** 			break;
 1008              		.loc 1 263 4 is_stmt 1 view .LVU222
 264:Src/main.c    **** 		default:
 1009              		.loc 1 264 4 view .LVU223
 263:Src/main.c    **** 			break;
 1010              		.loc 1 263 10 is_stmt 0 view .LVU224
 1011 00d6 01AC     		add	r4, sp, #4
 1012              	.LVL61:
 264:Src/main.c    **** 		default:
ARM GAS  /tmp/cc5vRBIH.s 			page 31


 1013              		.loc 1 264 4 view .LVU225
 1014 00d8 06E0     		b	.L45
 1015              	.LVL62:
 1016              	.L36:
 266:Src/main.c    **** 			ClearCommand();
 1017              		.loc 1 266 4 is_stmt 1 view .LVU226
 1018 00da 1BA8     		add	r0, sp, #108
 1019              	.LVL63:
 266:Src/main.c    **** 			ClearCommand();
 1020              		.loc 1 266 4 is_stmt 0 view .LVU227
 1021 00dc FFF7FEFF 		bl	USART_SendString
 1022              	.LVL64:
 267:Src/main.c    **** 			return;
 1023              		.loc 1 267 4 is_stmt 1 view .LVU228
 1024 00e0 FFF7FEFF 		bl	ClearCommand
 1025              	.LVL65:
 268:Src/main.c    **** 	}
 1026              		.loc 1 268 4 view .LVU229
 1027 00e4 11E0     		b	.L33
 1028              	.LVL66:
 1029              	.L46:
 236:Src/main.c    **** 		case '1':
 1030              		.loc 1 236 2 is_stmt 0 view .LVU230
 1031 00e6 0EAC     		add	r4, sp, #56
 1032              	.L45:
 1033              	.LVL67:
 271:Src/main.c    **** 	USART_SendString(part2);
 1034              		.loc 1 271 2 is_stmt 1 view .LVU231
 1035 00e8 FFF7FEFF 		bl	USART_SendString
 1036              	.LVL68:
 272:Src/main.c    **** 
 1037              		.loc 1 272 2 view .LVU232
 1038 00ec 2000     		movs	r0, r4
 1039 00ee FFF7FEFF 		bl	USART_SendString
 1040              	.LVL69:
 274:Src/main.c    **** 	HAL_Delay(1000);
 1041              		.loc 1 274 2 view .LVU233
 274:Src/main.c    **** 	HAL_Delay(1000);
 1042              		.loc 1 274 13 is_stmt 0 view .LVU234
 1043 00f2 8024     		movs	r4, #128
 1044              	.LVL70:
 274:Src/main.c    **** 	HAL_Delay(1000);
 1045              		.loc 1 274 13 view .LVU235
 1046 00f4 E405     		lsls	r4, r4, #23
 1047 00f6 154B     		ldr	r3, .L53+56
 1048 00f8 6363     		str	r3, [r4, #52]
 275:Src/main.c    **** 	TIM2->CCR1 = 0;
 1049              		.loc 1 275 2 is_stmt 1 view .LVU236
 1050 00fa FA20     		movs	r0, #250
 1051 00fc 8000     		lsls	r0, r0, #2
 1052 00fe FFF7FEFF 		bl	HAL_Delay
 1053              	.LVL71:
 276:Src/main.c    **** 
 1054              		.loc 1 276 2 view .LVU237
 276:Src/main.c    **** 
 1055              		.loc 1 276 13 is_stmt 0 view .LVU238
 1056 0102 0023     		movs	r3, #0
ARM GAS  /tmp/cc5vRBIH.s 			page 32


 1057 0104 6363     		str	r3, [r4, #52]
 278:Src/main.c    **** 
 1058              		.loc 1 278 2 is_stmt 1 view .LVU239
 1059 0106 FFF7FEFF 		bl	ClearCommand
 1060              	.LVL72:
 1061              	.L33:
 297:Src/main.c    **** 
 1062              		.loc 1 297 1 is_stmt 0 view .LVU240
 1063 010a 23B0     		add	sp, sp, #140
 1064              		@ sp needed
 1065 010c F0BD     		pop	{r4, r5, r6, r7, pc}
 1066              	.LVL73:
 1067              	.L51:
 242:Src/main.c    **** 			break;
 1068              		.loc 1 242 10 view .LVU241
 1069 010e 0DAC     		add	r4, sp, #52
 1070 0110 EAE7     		b	.L45
 1071              	.L54:
 1072 0112 C046     		.align	2
 1073              	.L53:
 1074 0114 00000000 		.word	.LC40
 1075 0118 1C000000 		.word	.LC42
 1076 011c 2C000000 		.word	.LC44
 1077 0120 3C000000 		.word	.LC46
 1078 0124 32300A00 		.word	667698
 1079 0128 34300A00 		.word	667700
 1080 012c 36300A00 		.word	667702
 1081 0130 38300A00 		.word	667704
 1082 0134 4C000000 		.word	.LC48
 1083 0138 54000000 		.word	.LC50
 1084 013c 5C000000 		.word	.LC52
 1085 0140 64000000 		.word	.LC54
 1086 0144 6C000000 		.word	.LC56
 1087 0148 00000000 		.word	.L38
 1088 014c FFFF0000 		.word	65535
 1089              		.cfi_endproc
 1090              	.LFE47:
 1092              		.section	.text.Ultrasonic_Init,"ax",%progbits
 1093              		.align	1
 1094              		.global	Ultrasonic_Init
 1095              		.syntax unified
 1096              		.code	16
 1097              		.thumb_func
 1099              	Ultrasonic_Init:
 1100              	.LVL74:
 1101              	.LFB48:
 300:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 1102              		.loc 1 300 1 is_stmt 1 view -0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 24
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 300:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 1106              		.loc 1 300 1 is_stmt 0 view .LVU243
 1107 0000 00B5     		push	{lr}
 1108              	.LCFI14:
 1109              		.cfi_def_cfa_offset 4
 1110              		.cfi_offset 14, -4
ARM GAS  /tmp/cc5vRBIH.s 			page 33


 1111 0002 87B0     		sub	sp, sp, #28
 1112              	.LCFI15:
 1113              		.cfi_def_cfa_offset 32
 301:Src/main.c    **** 
 1114              		.loc 1 301 2 is_stmt 1 view .LVU244
 1115              	.LBB14:
 301:Src/main.c    **** 
 1116              		.loc 1 301 2 view .LVU245
 301:Src/main.c    **** 
 1117              		.loc 1 301 2 view .LVU246
 1118 0004 0C4B     		ldr	r3, .L56
 1119 0006 5A69     		ldr	r2, [r3, #20]
 1120 0008 8021     		movs	r1, #128
 1121 000a 8902     		lsls	r1, r1, #10
 1122 000c 0A43     		orrs	r2, r1
 1123 000e 5A61     		str	r2, [r3, #20]
 301:Src/main.c    **** 
 1124              		.loc 1 301 2 view .LVU247
 1125 0010 5B69     		ldr	r3, [r3, #20]
 1126 0012 0B40     		ands	r3, r1
 1127 0014 0093     		str	r3, [sp]
 301:Src/main.c    **** 
 1128              		.loc 1 301 2 view .LVU248
 1129 0016 009B     		ldr	r3, [sp]
 1130              	.LBE14:
 301:Src/main.c    **** 
 1131              		.loc 1 301 2 view .LVU249
 303:Src/main.c    **** 		GPIO_MODE_INPUT,
 1132              		.loc 1 303 2 view .LVU250
 303:Src/main.c    **** 		GPIO_MODE_INPUT,
 1133              		.loc 1 303 19 is_stmt 0 view .LVU251
 1134 0018 1422     		movs	r2, #20
 1135 001a 0021     		movs	r1, #0
 1136 001c 01A8     		add	r0, sp, #4
 1137              	.LVL75:
 303:Src/main.c    **** 		GPIO_MODE_INPUT,
 1138              		.loc 1 303 19 view .LVU252
 1139 001e FFF7FEFF 		bl	memset
 1140              	.LVL76:
 1141 0022 C023     		movs	r3, #192
 1142 0024 9B00     		lsls	r3, r3, #2
 1143 0026 0193     		str	r3, [sp, #4]
 308:Src/main.c    **** }
 1144              		.loc 1 308 2 is_stmt 1 view .LVU253
 1145 0028 9020     		movs	r0, #144
 1146 002a 01A9     		add	r1, sp, #4
 1147 002c C005     		lsls	r0, r0, #23
 1148 002e FFF7FEFF 		bl	HAL_GPIO_Init
 1149              	.LVL77:
 309:Src/main.c    **** 
 1150              		.loc 1 309 1 is_stmt 0 view .LVU254
 1151 0032 07B0     		add	sp, sp, #28
 1152              		@ sp needed
 1153 0034 00BD     		pop	{pc}
 1154              	.L57:
 1155 0036 C046     		.align	2
 1156              	.L56:
ARM GAS  /tmp/cc5vRBIH.s 			page 34


 1157 0038 00100240 		.word	1073876992
 1158              		.cfi_endproc
 1159              	.LFE48:
 1161              		.section	.text.GetDistance,"ax",%progbits
 1162              		.align	1
 1163              		.global	GetDistance
 1164              		.syntax unified
 1165              		.code	16
 1166              		.thumb_func
 1168              	GetDistance:
 1169              	.LFB49:
 312:Src/main.c    **** 
 1170              		.loc 1 312 1 is_stmt 1 view -0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174              		@ link register save eliminated.
 314:Src/main.c    **** 
 1175              		.loc 1 314 1 view .LVU256
 1176              		@ sp needed
 1177 0000 7047     		bx	lr
 1178              		.cfi_endproc
 1179              	.LFE49:
 1181              		.section	.text.Error_Handler,"ax",%progbits
 1182              		.align	1
 1183              		.global	Error_Handler
 1184              		.syntax unified
 1185              		.code	16
 1186              		.thumb_func
 1188              	Error_Handler:
 1189              	.LFB54:
 493:Src/main.c    **** 
 494:Src/main.c    **** /* USER CODE BEGIN 4 */
 495:Src/main.c    **** 
 496:Src/main.c    **** /* USER CODE END 4 */
 497:Src/main.c    **** 
 498:Src/main.c    **** /**
 499:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 500:Src/main.c    ****  * @retval None
 501:Src/main.c    ****  */
 502:Src/main.c    **** void Error_Handler(void)
 503:Src/main.c    **** {
 1190              		.loc 1 503 1 view -0
 1191              		.cfi_startproc
 1192              		@ Volatile: function does not return.
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 0, uses_anonymous_args = 0
 1195              		@ link register save eliminated.
 504:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 505:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 506:Src/main.c    **** 	__disable_irq();
 1196              		.loc 1 506 2 view .LVU258
 1197              	.LBB15:
 1198              	.LBI15:
 1199              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  /tmp/cc5vRBIH.s 			page 35


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  /tmp/cc5vRBIH.s 			page 36


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc5vRBIH.s 			page 37


 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1200              		.loc 2 140 27 view .LVU259
 1201              	.LBB16:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1202              		.loc 2 142 3 view .LVU260
 1203              		.syntax divided
 1204              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1205 0000 72B6     		cpsid i
 1206              	@ 0 "" 2
 1207              		.thumb
 1208              		.syntax unified
 1209              	.L60:
 1210              	.LBE16:
 1211              	.LBE15:
 507:Src/main.c    **** 	while (1)
 1212              		.loc 1 507 2 discriminator 1 view .LVU261
 508:Src/main.c    **** 	{
 509:Src/main.c    **** 	}
 1213              		.loc 1 509 2 discriminator 1 view .LVU262
 507:Src/main.c    **** 	while (1)
 1214              		.loc 1 507 8 discriminator 1 view .LVU263
 1215 0002 FEE7     		b	.L60
 1216              		.cfi_endproc
 1217              	.LFE54:
 1219              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1220              		.align	1
 1221              		.syntax unified
 1222              		.code	16
 1223              		.thumb_func
 1225              	MX_TIM2_Init:
 1226              	.LFB52:
 412:Src/main.c    **** 
 1227              		.loc 1 412 1 view -0
ARM GAS  /tmp/cc5vRBIH.s 			page 38


 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 56
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231 0000 00B5     		push	{lr}
 1232              	.LCFI16:
 1233              		.cfi_def_cfa_offset 4
 1234              		.cfi_offset 14, -4
 1235 0002 8FB0     		sub	sp, sp, #60
 1236              	.LCFI17:
 1237              		.cfi_def_cfa_offset 64
 418:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1238              		.loc 1 418 2 view .LVU265
 418:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1239              		.loc 1 418 25 is_stmt 0 view .LVU266
 1240 0004 1022     		movs	r2, #16
 1241 0006 0021     		movs	r1, #0
 1242 0008 0AA8     		add	r0, sp, #40
 1243 000a FFF7FEFF 		bl	memset
 1244              	.LVL78:
 419:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1245              		.loc 1 419 2 is_stmt 1 view .LVU267
 419:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1246              		.loc 1 419 26 is_stmt 0 view .LVU268
 1247 000e 0822     		movs	r2, #8
 1248 0010 0021     		movs	r1, #0
 1249 0012 08A8     		add	r0, sp, #32
 1250 0014 FFF7FEFF 		bl	memset
 1251              	.LVL79:
 420:Src/main.c    **** 
 1252              		.loc 1 420 2 is_stmt 1 view .LVU269
 420:Src/main.c    **** 
 1253              		.loc 1 420 21 is_stmt 0 view .LVU270
 1254 0018 1C22     		movs	r2, #28
 1255 001a 0021     		movs	r1, #0
 1256 001c 01A8     		add	r0, sp, #4
 1257 001e FFF7FEFF 		bl	memset
 1258              	.LVL80:
 425:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 1259              		.loc 1 425 2 is_stmt 1 view .LVU271
 425:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 1260              		.loc 1 425 17 is_stmt 0 view .LVU272
 1261 0022 2148     		ldr	r0, .L72
 1262 0024 8023     		movs	r3, #128
 1263 0026 DB05     		lsls	r3, r3, #23
 1264 0028 0360     		str	r3, [r0]
 426:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1265              		.loc 1 426 2 is_stmt 1 view .LVU273
 426:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1266              		.loc 1 426 23 is_stmt 0 view .LVU274
 1267 002a 0023     		movs	r3, #0
 1268 002c 4360     		str	r3, [r0, #4]
 427:Src/main.c    **** 	htim2.Init.Period = 65535;
 1269              		.loc 1 427 2 is_stmt 1 view .LVU275
 427:Src/main.c    **** 	htim2.Init.Period = 65535;
 1270              		.loc 1 427 25 is_stmt 0 view .LVU276
 1271 002e 8360     		str	r3, [r0, #8]
 428:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/cc5vRBIH.s 			page 39


 1272              		.loc 1 428 2 is_stmt 1 view .LVU277
 428:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1273              		.loc 1 428 20 is_stmt 0 view .LVU278
 1274 0030 1E4A     		ldr	r2, .L72+4
 1275 0032 C260     		str	r2, [r0, #12]
 429:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1276              		.loc 1 429 2 is_stmt 1 view .LVU279
 429:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1277              		.loc 1 429 27 is_stmt 0 view .LVU280
 1278 0034 0361     		str	r3, [r0, #16]
 430:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1279              		.loc 1 430 2 is_stmt 1 view .LVU281
 430:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1280              		.loc 1 430 31 is_stmt 0 view .LVU282
 1281 0036 8033     		adds	r3, r3, #128
 1282 0038 8361     		str	r3, [r0, #24]
 431:Src/main.c    **** 	{
 1283              		.loc 1 431 2 is_stmt 1 view .LVU283
 431:Src/main.c    **** 	{
 1284              		.loc 1 431 6 is_stmt 0 view .LVU284
 1285 003a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1286              	.LVL81:
 431:Src/main.c    **** 	{
 1287              		.loc 1 431 5 view .LVU285
 1288 003e 0028     		cmp	r0, #0
 1289 0040 28D1     		bne	.L67
 435:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1290              		.loc 1 435 2 is_stmt 1 view .LVU286
 435:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1291              		.loc 1 435 33 is_stmt 0 view .LVU287
 1292 0042 8023     		movs	r3, #128
 1293 0044 5B01     		lsls	r3, r3, #5
 1294 0046 0A93     		str	r3, [sp, #40]
 436:Src/main.c    **** 	{
 1295              		.loc 1 436 2 is_stmt 1 view .LVU288
 436:Src/main.c    **** 	{
 1296              		.loc 1 436 6 is_stmt 0 view .LVU289
 1297 0048 1748     		ldr	r0, .L72
 1298 004a 0AA9     		add	r1, sp, #40
 1299 004c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1300              	.LVL82:
 436:Src/main.c    **** 	{
 1301              		.loc 1 436 5 view .LVU290
 1302 0050 0028     		cmp	r0, #0
 1303 0052 21D1     		bne	.L68
 440:Src/main.c    **** 	{
 1304              		.loc 1 440 2 is_stmt 1 view .LVU291
 440:Src/main.c    **** 	{
 1305              		.loc 1 440 6 is_stmt 0 view .LVU292
 1306 0054 1448     		ldr	r0, .L72
 1307 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1308              	.LVL83:
 440:Src/main.c    **** 	{
 1309              		.loc 1 440 5 view .LVU293
 1310 005a 0028     		cmp	r0, #0
 1311 005c 1ED1     		bne	.L69
 444:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/cc5vRBIH.s 			page 40


 1312              		.loc 1 444 2 is_stmt 1 view .LVU294
 444:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1313              		.loc 1 444 36 is_stmt 0 view .LVU295
 1314 005e 0023     		movs	r3, #0
 1315 0060 0893     		str	r3, [sp, #32]
 445:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1316              		.loc 1 445 2 is_stmt 1 view .LVU296
 445:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1317              		.loc 1 445 32 is_stmt 0 view .LVU297
 1318 0062 0993     		str	r3, [sp, #36]
 446:Src/main.c    **** 	{
 1319              		.loc 1 446 2 is_stmt 1 view .LVU298
 446:Src/main.c    **** 	{
 1320              		.loc 1 446 6 is_stmt 0 view .LVU299
 1321 0064 1048     		ldr	r0, .L72
 1322 0066 08A9     		add	r1, sp, #32
 1323 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1324              	.LVL84:
 446:Src/main.c    **** 	{
 1325              		.loc 1 446 5 view .LVU300
 1326 006c 0028     		cmp	r0, #0
 1327 006e 17D1     		bne	.L70
 450:Src/main.c    **** 	sConfigOC.Pulse = 0;
 1328              		.loc 1 450 2 is_stmt 1 view .LVU301
 450:Src/main.c    **** 	sConfigOC.Pulse = 0;
 1329              		.loc 1 450 19 is_stmt 0 view .LVU302
 1330 0070 6023     		movs	r3, #96
 1331 0072 0193     		str	r3, [sp, #4]
 451:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1332              		.loc 1 451 2 is_stmt 1 view .LVU303
 451:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1333              		.loc 1 451 18 is_stmt 0 view .LVU304
 1334 0074 0023     		movs	r3, #0
 1335 0076 0293     		str	r3, [sp, #8]
 452:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1336              		.loc 1 452 2 is_stmt 1 view .LVU305
 452:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1337              		.loc 1 452 23 is_stmt 0 view .LVU306
 1338 0078 0393     		str	r3, [sp, #12]
 453:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1339              		.loc 1 453 2 is_stmt 1 view .LVU307
 453:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1340              		.loc 1 453 23 is_stmt 0 view .LVU308
 1341 007a 0593     		str	r3, [sp, #20]
 454:Src/main.c    **** 	{
 1342              		.loc 1 454 2 is_stmt 1 view .LVU309
 454:Src/main.c    **** 	{
 1343              		.loc 1 454 6 is_stmt 0 view .LVU310
 1344 007c 0A48     		ldr	r0, .L72
 1345 007e 0022     		movs	r2, #0
 1346 0080 01A9     		add	r1, sp, #4
 1347 0082 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1348              	.LVL85:
 454:Src/main.c    **** 	{
 1349              		.loc 1 454 5 view .LVU311
 1350 0086 0028     		cmp	r0, #0
 1351 0088 0CD1     		bne	.L71
ARM GAS  /tmp/cc5vRBIH.s 			page 41


 461:Src/main.c    **** 
 1352              		.loc 1 461 2 is_stmt 1 view .LVU312
 1353 008a 0748     		ldr	r0, .L72
 1354 008c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1355              	.LVL86:
 463:Src/main.c    **** 
 1356              		.loc 1 463 1 is_stmt 0 view .LVU313
 1357 0090 0FB0     		add	sp, sp, #60
 1358              		@ sp needed
 1359 0092 00BD     		pop	{pc}
 1360              	.L67:
 433:Src/main.c    **** 	}
 1361              		.loc 1 433 3 is_stmt 1 view .LVU314
 1362 0094 FFF7FEFF 		bl	Error_Handler
 1363              	.LVL87:
 1364              	.L68:
 438:Src/main.c    **** 	}
 1365              		.loc 1 438 3 view .LVU315
 1366 0098 FFF7FEFF 		bl	Error_Handler
 1367              	.LVL88:
 1368              	.L69:
 442:Src/main.c    **** 	}
 1369              		.loc 1 442 3 view .LVU316
 1370 009c FFF7FEFF 		bl	Error_Handler
 1371              	.LVL89:
 1372              	.L70:
 448:Src/main.c    **** 	}
 1373              		.loc 1 448 3 view .LVU317
 1374 00a0 FFF7FEFF 		bl	Error_Handler
 1375              	.LVL90:
 1376              	.L71:
 456:Src/main.c    **** 	}
 1377              		.loc 1 456 3 view .LVU318
 1378 00a4 FFF7FEFF 		bl	Error_Handler
 1379              	.LVL91:
 1380              	.L73:
 1381              		.align	2
 1382              	.L72:
 1383 00a8 00000000 		.word	htim2
 1384 00ac FFFF0000 		.word	65535
 1385              		.cfi_endproc
 1386              	.LFE52:
 1388              		.section	.text.SystemClock_Config,"ax",%progbits
 1389              		.align	1
 1390              		.global	SystemClock_Config
 1391              		.syntax unified
 1392              		.code	16
 1393              		.thumb_func
 1395              	SystemClock_Config:
 1396              	.LFB51:
 376:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1397              		.loc 1 376 1 view -0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 72
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401 0000 00B5     		push	{lr}
 1402              	.LCFI18:
ARM GAS  /tmp/cc5vRBIH.s 			page 42


 1403              		.cfi_def_cfa_offset 4
 1404              		.cfi_offset 14, -4
 1405 0002 93B0     		sub	sp, sp, #76
 1406              	.LCFI19:
 1407              		.cfi_def_cfa_offset 80
 377:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1408              		.loc 1 377 2 view .LVU320
 377:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1409              		.loc 1 377 21 is_stmt 0 view .LVU321
 1410 0004 3422     		movs	r2, #52
 1411 0006 0021     		movs	r1, #0
 1412 0008 05A8     		add	r0, sp, #20
 1413 000a FFF7FEFF 		bl	memset
 1414              	.LVL92:
 378:Src/main.c    **** 
 1415              		.loc 1 378 2 is_stmt 1 view .LVU322
 378:Src/main.c    **** 
 1416              		.loc 1 378 21 is_stmt 0 view .LVU323
 1417 000e 1022     		movs	r2, #16
 1418 0010 0021     		movs	r1, #0
 1419 0012 01A8     		add	r0, sp, #4
 1420 0014 FFF7FEFF 		bl	memset
 1421              	.LVL93:
 383:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1422              		.loc 1 383 2 is_stmt 1 view .LVU324
 383:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1423              		.loc 1 383 35 is_stmt 0 view .LVU325
 1424 0018 0223     		movs	r3, #2
 1425 001a 0593     		str	r3, [sp, #20]
 384:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1426              		.loc 1 384 2 is_stmt 1 view .LVU326
 384:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1427              		.loc 1 384 29 is_stmt 0 view .LVU327
 1428 001c 013B     		subs	r3, r3, #1
 1429 001e 0893     		str	r3, [sp, #32]
 385:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1430              		.loc 1 385 2 is_stmt 1 view .LVU328
 385:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1431              		.loc 1 385 40 is_stmt 0 view .LVU329
 1432 0020 0F33     		adds	r3, r3, #15
 1433 0022 0993     		str	r3, [sp, #36]
 386:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1434              		.loc 1 386 2 is_stmt 1 view .LVU330
 387:Src/main.c    **** 	{
 1435              		.loc 1 387 2 view .LVU331
 387:Src/main.c    **** 	{
 1436              		.loc 1 387 6 is_stmt 0 view .LVU332
 1437 0024 05A8     		add	r0, sp, #20
 1438 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1439              	.LVL94:
 387:Src/main.c    **** 	{
 1440              		.loc 1 387 5 view .LVU333
 1441 002a 0028     		cmp	r0, #0
 1442 002c 0DD1     		bne	.L77
 394:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1443              		.loc 1 394 2 is_stmt 1 view .LVU334
 394:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
ARM GAS  /tmp/cc5vRBIH.s 			page 43


 1444              		.loc 1 394 30 is_stmt 0 view .LVU335
 1445 002e 0723     		movs	r3, #7
 1446 0030 0193     		str	r3, [sp, #4]
 396:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1447              		.loc 1 396 2 is_stmt 1 view .LVU336
 396:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1448              		.loc 1 396 33 is_stmt 0 view .LVU337
 1449 0032 0023     		movs	r3, #0
 1450 0034 0293     		str	r3, [sp, #8]
 397:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1451              		.loc 1 397 2 is_stmt 1 view .LVU338
 397:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1452              		.loc 1 397 34 is_stmt 0 view .LVU339
 1453 0036 0393     		str	r3, [sp, #12]
 398:Src/main.c    **** 
 1454              		.loc 1 398 2 is_stmt 1 view .LVU340
 398:Src/main.c    **** 
 1455              		.loc 1 398 35 is_stmt 0 view .LVU341
 1456 0038 0493     		str	r3, [sp, #16]
 400:Src/main.c    **** 	{
 1457              		.loc 1 400 2 is_stmt 1 view .LVU342
 400:Src/main.c    **** 	{
 1458              		.loc 1 400 6 is_stmt 0 view .LVU343
 1459 003a 0021     		movs	r1, #0
 1460 003c 01A8     		add	r0, sp, #4
 1461 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1462              	.LVL95:
 400:Src/main.c    **** 	{
 1463              		.loc 1 400 5 view .LVU344
 1464 0042 0028     		cmp	r0, #0
 1465 0044 03D1     		bne	.L78
 404:Src/main.c    **** 
 1466              		.loc 1 404 1 view .LVU345
 1467 0046 13B0     		add	sp, sp, #76
 1468              		@ sp needed
 1469 0048 00BD     		pop	{pc}
 1470              	.L77:
 389:Src/main.c    **** 	}
 1471              		.loc 1 389 3 is_stmt 1 view .LVU346
 1472 004a FFF7FEFF 		bl	Error_Handler
 1473              	.LVL96:
 1474              	.L78:
 402:Src/main.c    **** 	}
 1475              		.loc 1 402 3 view .LVU347
 1476 004e FFF7FEFF 		bl	Error_Handler
 1477              	.LVL97:
 1478              		.cfi_endproc
 1479              	.LFE51:
 1481              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1482              		.align	2
 1483              	.LC62:
 1484 0000 556C7472 		.ascii	"Ultrasonic Distance: \000"
 1484      61736F6E 
 1484      69632044 
 1484      69737461 
 1484      6E63653A 
 1485              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/cc5vRBIH.s 			page 44


 1486              		.align	1
 1487              		.global	main
 1488              		.syntax unified
 1489              		.code	16
 1490              		.thumb_func
 1492              	main:
 1493              	.LFB50:
 323:Src/main.c    **** 
 1494              		.loc 1 323 1 view -0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 8
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498 0000 10B5     		push	{r4, lr}
 1499              	.LCFI20:
 1500              		.cfi_def_cfa_offset 8
 1501              		.cfi_offset 4, -8
 1502              		.cfi_offset 14, -4
 1503 0002 82B0     		sub	sp, sp, #8
 1504              	.LCFI21:
 1505              		.cfi_def_cfa_offset 16
 326:Src/main.c    **** 	SystemClock_Config();
 1506              		.loc 1 326 2 view .LVU349
 1507 0004 FFF7FEFF 		bl	HAL_Init
 1508              	.LVL98:
 327:Src/main.c    **** 
 1509              		.loc 1 327 2 view .LVU350
 1510 0008 FFF7FEFF 		bl	SystemClock_Config
 1511              	.LVL99:
 330:Src/main.c    **** 	USART_Init();
 1512              		.loc 1 330 2 view .LVU351
 1513 000c FFF7FEFF 		bl	GPIO_AF_Init
 1514              	.LVL100:
 331:Src/main.c    **** 	LED_Init(LED_RED | LED_ORANGE | LED_GREEN | LED_BLUE);
 1515              		.loc 1 331 2 view .LVU352
 1516 0010 FFF7FEFF 		bl	USART_Init
 1517              	.LVL101:
 332:Src/main.c    **** 
 1518              		.loc 1 332 2 view .LVU353
 1519 0014 F020     		movs	r0, #240
 1520 0016 8000     		lsls	r0, r0, #2
 1521 0018 FFF7FEFF 		bl	LED_Init
 1522              	.LVL102:
 334:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 1523              		.loc 1 334 2 view .LVU354
 1524              	.LBB17:
 1525              	.LBI17:
 1526              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
ARM GAS  /tmp/cc5vRBIH.s 			page 45


  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
ARM GAS  /tmp/cc5vRBIH.s 			page 46


  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
ARM GAS  /tmp/cc5vRBIH.s 			page 47


 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
ARM GAS  /tmp/cc5vRBIH.s 			page 48


 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc5vRBIH.s 			page 49


 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
ARM GAS  /tmp/cc5vRBIH.s 			page 50


 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
ARM GAS  /tmp/cc5vRBIH.s 			page 51


 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
ARM GAS  /tmp/cc5vRBIH.s 			page 52


 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
ARM GAS  /tmp/cc5vRBIH.s 			page 53


 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
ARM GAS  /tmp/cc5vRBIH.s 			page 54


 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
ARM GAS  /tmp/cc5vRBIH.s 			page 55


 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1527              		.loc 3 623 22 view .LVU355
 1528              	.LBB18:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1529              		.loc 3 625 3 view .LVU356
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1530              		.loc 3 627 5 view .LVU357
 1531              		.loc 3 627 20 is_stmt 0 view .LVU358
 1532 001c 1E4B     		ldr	r3, .L85
 1533 001e 8022     		movs	r2, #128
 1534 0020 9205     		lsls	r2, r2, #22
 1535 0022 1A60     		str	r2, [r3]
 1536              	.LVL103:
ARM GAS  /tmp/cc5vRBIH.s 			page 56


 1537              		.loc 3 627 20 view .LVU359
 1538              	.LBE18:
 1539              	.LBE17:
 335:Src/main.c    **** 
 1540              		.loc 1 335 2 is_stmt 1 view .LVU360
 1541              	.LBB19:
 1542              	.LBI19:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/cc5vRBIH.s 			page 57


 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1543              		.loc 3 730 22 view .LVU361
 1544              	.LBB20:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/cc5vRBIH.s 			page 58


 1545              		.loc 3 732 3 view .LVU362
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1546              		.loc 3 734 5 view .LVU363
 1547              		.loc 3 734 52 is_stmt 0 view .LVU364
 1548 0024 C720     		movs	r0, #199
 1549 0026 8000     		lsls	r0, r0, #2
 1550 0028 1958     		ldr	r1, [r3, r0]
 1551              		.loc 3 734 33 view .LVU365
 1552 002a 1C4A     		ldr	r2, .L85+4
 1553 002c 1140     		ands	r1, r2
 1554              		.loc 3 734 102 view .LVU366
 1555 002e 8022     		movs	r2, #128
 1556 0030 D201     		lsls	r2, r2, #7
 1557 0032 0A43     		orrs	r2, r1
 1558              		.loc 3 734 30 view .LVU367
 1559 0034 1A50     		str	r2, [r3, r0]
 1560              	.LVL104:
 1561              		.loc 3 734 30 view .LVU368
 1562              	.LBE20:
 1563              	.LBE19:
 337:Src/main.c    **** 	//TODO: Replace status with actual ultrsonic sensor data.
 1564              		.loc 1 337 2 is_stmt 1 view .LVU369
 337:Src/main.c    **** 	//TODO: Replace status with actual ultrsonic sensor data.
 1565              		.loc 1 337 10 is_stmt 0 view .LVU370
 1566 0036 1A4B     		ldr	r3, .L85+8
 1567 0038 1A68     		ldr	r2, [r3]
 1568 003a 0092     		str	r2, [sp]
 1569 003c 9B88     		ldrh	r3, [r3, #4]
 1570 003e 6A46     		mov	r2, sp
 1571 0040 9380     		strh	r3, [r2, #4]
 339:Src/main.c    **** 	uint8_t* distance;
 1572              		.loc 1 339 2 is_stmt 1 view .LVU371
 340:Src/main.c    **** 
 1573              		.loc 1 340 2 view .LVU372
 343:Src/main.c    **** 	MX_TIM2_Init();
 1574              		.loc 1 343 2 view .LVU373
 1575 0042 FFF7FEFF 		bl	MX_GPIO_Init
 1576              	.LVL105:
 344:Src/main.c    **** 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Initalized to GPIO pin PA5
 1577              		.loc 1 344 2 view .LVU374
 1578 0046 FFF7FEFF 		bl	MX_TIM2_Init
 1579              	.LVL106:
 345:Src/main.c    **** 
 1580              		.loc 1 345 2 view .LVU375
 1581 004a 1648     		ldr	r0, .L85+12
 1582 004c 0021     		movs	r1, #0
 1583 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1584              	.LVL107:
 347:Src/main.c    **** 	int count = 0;
 1585              		.loc 1 347 2 view .LVU376
 1586 0052 6846     		mov	r0, sp
 1587 0054 FFF7FEFF 		bl	USART_SendString
 1588              	.LVL108:
 348:Src/main.c    **** 	while (1)
 1589              		.loc 1 348 2 view .LVU377
 348:Src/main.c    **** 	while (1)
ARM GAS  /tmp/cc5vRBIH.s 			page 59


 1590              		.loc 1 348 6 is_stmt 0 view .LVU378
 1591 0058 0024     		movs	r4, #0
 1592              	.LVL109:
 1593              	.L80:
 349:Src/main.c    **** 	{
 1594              		.loc 1 349 2 is_stmt 1 view .LVU379
 351:Src/main.c    **** 		{
 1595              		.loc 1 351 3 view .LVU380
 351:Src/main.c    **** 		{
 1596              		.loc 1 351 5 is_stmt 0 view .LVU381
 1597 005a 134B     		ldr	r3, .L85+16
 1598 005c 9C42     		cmp	r4, r3
 1599 005e 10DC     		bgt	.L84
 360:Src/main.c    **** 
 1600              		.loc 1 360 4 is_stmt 1 view .LVU382
 360:Src/main.c    **** 
 1601              		.loc 1 360 9 is_stmt 0 view .LVU383
 1602 0060 0134     		adds	r4, r4, #1
 1603              	.LVL110:
 1604              	.L82:
 363:Src/main.c    **** 			if(command[1]){
 1605              		.loc 1 363 3 is_stmt 1 view .LVU384
 363:Src/main.c    **** 			if(command[1]){
 1606              		.loc 1 363 6 is_stmt 0 view .LVU385
 1607 0062 124B     		ldr	r3, .L85+20
 1608 0064 1B78     		ldrb	r3, [r3]
 363:Src/main.c    **** 			if(command[1]){
 1609              		.loc 1 363 5 view .LVU386
 1610 0066 002B     		cmp	r3, #0
 1611 0068 F7D0     		beq	.L80
 364:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 1612              		.loc 1 364 4 is_stmt 1 view .LVU387
 364:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 1613              		.loc 1 364 14 is_stmt 0 view .LVU388
 1614 006a 114B     		ldr	r3, .L85+24
 1615 006c 5B78     		ldrb	r3, [r3, #1]
 364:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 1616              		.loc 1 364 6 view .LVU389
 1617 006e 002B     		cmp	r3, #0
 1618 0070 F3D0     		beq	.L80
 365:Src/main.c    **** 			}
 1619              		.loc 1 365 5 is_stmt 1 view .LVU390
 365:Src/main.c    **** 			}
 1620              		.loc 1 365 27 is_stmt 0 view .LVU391
 1621 0072 0F4B     		ldr	r3, .L85+24
 1622 0074 1878     		ldrb	r0, [r3]
 1623 0076 C0B2     		uxtb	r0, r0
 365:Src/main.c    **** 			}
 1624              		.loc 1 365 39 view .LVU392
 1625 0078 5978     		ldrb	r1, [r3, #1]
 1626 007a C9B2     		uxtb	r1, r1
 365:Src/main.c    **** 			}
 1627              		.loc 1 365 5 view .LVU393
 1628 007c FFF7FEFF 		bl	ProcessCommand
 1629              	.LVL111:
 1630 0080 EBE7     		b	.L80
 1631              	.L84:
ARM GAS  /tmp/cc5vRBIH.s 			page 60


 353:Src/main.c    **** 			status = "Ultrasonic Distance: ";
 1632              		.loc 1 353 4 is_stmt 1 view .LVU394
 1633              	.LVL112:
 354:Src/main.c    **** 			USART_SendString(status);
 1634              		.loc 1 354 4 view .LVU395
 355:Src/main.c    **** 			distance = 5;
 1635              		.loc 1 355 4 view .LVU396
 1636 0082 0C48     		ldr	r0, .L85+28
 1637 0084 FFF7FEFF 		bl	USART_SendString
 1638              	.LVL113:
 356:Src/main.c    **** 			USART_SendChar(command[0]);
 1639              		.loc 1 356 4 view .LVU397
 357:Src/main.c    **** 		}
 1640              		.loc 1 357 4 view .LVU398
 357:Src/main.c    **** 		}
 1641              		.loc 1 357 26 is_stmt 0 view .LVU399
 1642 0088 094B     		ldr	r3, .L85+24
 1643 008a 1878     		ldrb	r0, [r3]
 1644 008c C0B2     		uxtb	r0, r0
 357:Src/main.c    **** 		}
 1645              		.loc 1 357 4 view .LVU400
 1646 008e FFF7FEFF 		bl	USART_SendChar
 1647              	.LVL114:
 353:Src/main.c    **** 			status = "Ultrasonic Distance: ";
 1648              		.loc 1 353 10 view .LVU401
 1649 0092 0024     		movs	r4, #0
 1650 0094 E5E7     		b	.L82
 1651              	.L86:
 1652 0096 C046     		.align	2
 1653              	.L85:
 1654 0098 00E100E0 		.word	-536813312
 1655 009c FF00FFFF 		.word	-65281
 1656 00a0 00000000 		.word	.LC32
 1657 00a4 00000000 		.word	htim2
 1658 00a8 40420F00 		.word	1000000
 1659 00ac 00000000 		.word	incomingCommand
 1660 00b0 00000000 		.word	command
 1661 00b4 00000000 		.word	.LC62
 1662              		.cfi_endproc
 1663              	.LFE50:
 1665              		.global	incomingCommand
 1666              		.section	.bss.incomingCommand,"aw",%nobits
 1669              	incomingCommand:
 1670 0000 00       		.space	1
 1671              		.global	command
 1672              		.section	.bss.command,"aw",%nobits
 1673              		.align	2
 1676              	command:
 1677 0000 0000     		.space	2
 1678              		.global	htim2
 1679              		.section	.bss.htim2,"aw",%nobits
 1680              		.align	2
 1683              	htim2:
 1684 0000 00000000 		.space	64
 1684      00000000 
 1684      00000000 
 1684      00000000 
ARM GAS  /tmp/cc5vRBIH.s 			page 61


 1684      00000000 
 1685              		.text
 1686              	.Letext0:
 1687              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 1688              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1689              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1690              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1691              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1692              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1693              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1694              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1695              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1696              		.file 13 "Inc/pins.h"
 1697              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1698              		.file 15 "Inc/main.h"
 1699              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1700              		.file 17 "/usr/arm-none-eabi/include/string.h"
 1701              		.file 18 "<built-in>"
ARM GAS  /tmp/cc5vRBIH.s 			page 62


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc5vRBIH.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc5vRBIH.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc5vRBIH.s:114    .text.MX_GPIO_Init:0000005c $d
     /tmp/cc5vRBIH.s:119    .text.LED_Init:00000000 $t
     /tmp/cc5vRBIH.s:125    .text.LED_Init:00000000 LED_Init
     /tmp/cc5vRBIH.s:186    .text.LED_Init:00000038 $d
     /tmp/cc5vRBIH.s:192    .text.GPIO_AF_Init:00000000 $t
     /tmp/cc5vRBIH.s:198    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/cc5vRBIH.s:385    .text.GPIO_AF_Init:00000104 $d
     /tmp/cc5vRBIH.s:396    .text.USART_Init:00000000 $t
     /tmp/cc5vRBIH.s:402    .text.USART_Init:00000000 USART_Init
     /tmp/cc5vRBIH.s:475    .text.USART_Init:00000048 $d
     /tmp/cc5vRBIH.s:482    .text.USART_SendChar:00000000 $t
     /tmp/cc5vRBIH.s:488    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/cc5vRBIH.s:514    .text.USART_SendChar:00000010 $d
     /tmp/cc5vRBIH.s:519    .text.USART_SendString:00000000 $t
     /tmp/cc5vRBIH.s:525    .text.USART_SendString:00000000 USART_SendString
     /tmp/cc5vRBIH.s:570    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/cc5vRBIH.s:574    .text.ClearCommand:00000000 $t
     /tmp/cc5vRBIH.s:580    .text.ClearCommand:00000000 ClearCommand
     /tmp/cc5vRBIH.s:620    .text.ClearCommand:00000024 $d
     /tmp/cc5vRBIH.s:1676   .bss.command:00000000 command
     /tmp/cc5vRBIH.s:1669   .bss.incomingCommand:00000000 incomingCommand
     /tmp/cc5vRBIH.s:627    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/cc5vRBIH.s:631    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/cc5vRBIH.s:637    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/cc5vRBIH.s:728    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/cc5vRBIH.s:736    .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/cc5vRBIH.s:764    .text.ProcessCommand:00000000 $t
     /tmp/cc5vRBIH.s:770    .text.ProcessCommand:00000000 ProcessCommand
     /tmp/cc5vRBIH.s:933    .rodata.ProcessCommand:00000000 $d
     /tmp/cc5vRBIH.s:1074   .text.ProcessCommand:00000114 $d
     /tmp/cc5vRBIH.s:1093   .text.Ultrasonic_Init:00000000 $t
     /tmp/cc5vRBIH.s:1099   .text.Ultrasonic_Init:00000000 Ultrasonic_Init
     /tmp/cc5vRBIH.s:1157   .text.Ultrasonic_Init:00000038 $d
     /tmp/cc5vRBIH.s:1162   .text.GetDistance:00000000 $t
     /tmp/cc5vRBIH.s:1168   .text.GetDistance:00000000 GetDistance
     /tmp/cc5vRBIH.s:1182   .text.Error_Handler:00000000 $t
     /tmp/cc5vRBIH.s:1188   .text.Error_Handler:00000000 Error_Handler
     /tmp/cc5vRBIH.s:1220   .text.MX_TIM2_Init:00000000 $t
     /tmp/cc5vRBIH.s:1225   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
     /tmp/cc5vRBIH.s:1383   .text.MX_TIM2_Init:000000a8 $d
     /tmp/cc5vRBIH.s:1683   .bss.htim2:00000000 htim2
     /tmp/cc5vRBIH.s:1389   .text.SystemClock_Config:00000000 $t
     /tmp/cc5vRBIH.s:1395   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc5vRBIH.s:1482   .rodata.main.str1.4:00000000 $d
     /tmp/cc5vRBIH.s:1486   .text.main:00000000 $t
     /tmp/cc5vRBIH.s:1492   .text.main:00000000 main
     /tmp/cc5vRBIH.s:1654   .text.main:00000098 $d
     /tmp/cc5vRBIH.s:1670   .bss.incomingCommand:00000000 $d
     /tmp/cc5vRBIH.s:1673   .bss.command:00000000 $d
     /tmp/cc5vRBIH.s:1680   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
memset
ARM GAS  /tmp/cc5vRBIH.s 			page 63


HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
HAL_Delay
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_PWM_Start
