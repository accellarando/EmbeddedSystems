ARM GAS  /tmp/ccPzDniD.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB52:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccPzDniD.s 			page 2


  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* USER CODE END PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PM */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** TIM_HandleTypeDef htim2;
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN PV */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PV */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  52:Src/main.c    **** void SystemClock_Config(void);
  53:Src/main.c    **** static void MX_GPIO_Init(void);
  54:Src/main.c    **** static void MX_TIM2_Init(void);
  55:Src/main.c    **** /* USER CODE BEGIN PFP */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PFP */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN 0 */
  61:Src/main.c    **** #define LED_RED GPIO_PIN_6
  62:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  63:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  64:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  65:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  66:Src/main.c    **** 
  67:Src/main.c    **** void LED_Init(uint32_t pins) {
  68:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  69:Src/main.c    **** 
  70:Src/main.c    ****     GPIO_InitTypeDef gpio_led_init = {pins,
  71:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
  72:Src/main.c    ****         GPIO_SPEED_FREQ_LOW,
  73:Src/main.c    ****         GPIO_NOPULL
  74:Src/main.c    ****     };
  75:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpio_led_init);
  76:Src/main.c    **** }
  77:Src/main.c    **** 
  78:Src/main.c    **** /**
  79:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  80:Src/main.c    ****  *        functions appropriately.
  81:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  82:Src/main.c    ****  */
  83:Src/main.c    **** void GPIO_AF_Init() {
  84:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  85:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  86:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  87:Src/main.c    **** 
  88:Src/main.c    **** 	// uart_pins
  89:Src/main.c    **** 	HAL_GPIO_Init((uart_pins.rx.gpio), &(uart_pins.rx.pin));
  90:Src/main.c    **** 	HAL_GPIO_Init(&(uart_pins.tx.gpio), &(uart_pins.tx.pin));
ARM GAS  /tmp/ccPzDniD.s 			page 3


  91:Src/main.c    **** 
  92:Src/main.c    **** 	// motor_left_pins
  93:Src/main.c    **** 	/*
  94:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
  95:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
  96:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
  97:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
  98:Src/main.c    **** 	HAL_GPIO_Init(&motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
  99:Src/main.c    **** 
 100:Src/main.c    **** 	// motor_right_pins
 101:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 102:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 103:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 104:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 105:Src/main.c    **** 	HAL_GPIO_Init(&motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 106:Src/main.c    **** 
 107:Src/main.c    **** 	// ultrasonic_left_pins
 108:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 110:Src/main.c    **** 
 111:Src/main.c    **** 	// ultrasonic_right_pins
 112:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 113:Src/main.c    **** 	HAL_GPIO_Init(&ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 114:Src/main.c    **** 	*/
 115:Src/main.c    **** }
 116:Src/main.c    **** 
 117:Src/main.c    **** /**
 118:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 119:Src/main.c    ****  */
 120:Src/main.c    **** void USART_Init() {
 121:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 122:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 123:Src/main.c    **** 
 124:Src/main.c    **** 	//Set baud rate
 125:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 126:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 127:Src/main.c    **** 												//use with the BT adapter
 128:Src/main.c    **** 
 129:Src/main.c    **** 	//Enable transmitter
 130:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 131:Src/main.c    **** 
 132:Src/main.c    **** 	//Enable receiver
 133:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//Enable the receive register not empty interrupt
 136:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 137:Src/main.c    **** 
 138:Src/main.c    **** 	//Enable USART3
 139:Src/main.c    **** 	USART3->CR1 |= 1;
 140:Src/main.c    **** }
 141:Src/main.c    **** 
 142:Src/main.c    **** /**
 143:Src/main.c    ****  * @brief Sends a single character on the USART.
 144:Src/main.c    ****  *
 145:Src/main.c    ****  * @param c: the character to be sent
 146:Src/main.c    ****  */
 147:Src/main.c    **** void USART_SendChar(uint8_t c) {
ARM GAS  /tmp/ccPzDniD.s 			page 4


 148:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 149:Src/main.c    **** 		;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	USART3->TDR = c;
 152:Src/main.c    **** }
 153:Src/main.c    **** 
 154:Src/main.c    **** /**
 155:Src/main.c    ****  * @brief Sends a string on the USART.
 156:Src/main.c    ****  *
 157:Src/main.c    ****  * @param p_string: pointer to string to send
 158:Src/main.c    ****  */
 159:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 160:Src/main.c    **** 	while(*p_string != 0) {
 161:Src/main.c    **** 		USART_SendChar(*p_string);
 162:Src/main.c    **** 		p_string++;
 163:Src/main.c    **** 	}
 164:Src/main.c    **** 	USART_SendChar(0);
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** volatile uint8_t command[2];
 168:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 169:Src/main.c    **** 
 170:Src/main.c    **** void ClearCommand(){
 171:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 172:Src/main.c    **** 	memset(command, 0, sizeof(command));
 173:Src/main.c    **** 	incomingCommand = 0;
 174:Src/main.c    **** 	USART_SendString(prompt);
 175:Src/main.c    **** }
 176:Src/main.c    **** 
 177:Src/main.c    **** void USART3_4_IRQHandler(){
 178:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 179:Src/main.c    **** 	incomingCommand = 1;
 180:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 181:Src/main.c    **** 		;
 182:Src/main.c    **** 	if(command[0])
 183:Src/main.c    **** 		if(command[1]){
 184:Src/main.c    **** 			USART_SendString(err);
 185:Src/main.c    **** 			ClearCommand();
 186:Src/main.c    **** 		}
 187:Src/main.c    **** 		else
 188:Src/main.c    **** 			command[1] = USART3->RDR;
 189:Src/main.c    **** 	else
 190:Src/main.c    **** 		command[0] = USART3->RDR;
 191:Src/main.c    **** }
 192:Src/main.c    **** 
 193:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 194:Src/main.c    **** 	uint32_t left_motor_pin;
 195:Src/main.c    **** 	uint32_t right_motor_pin;
 196:Src/main.c    **** 	int32_t CH1_DC = 65535;
 197:Src/main.c    **** 
 198:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 199:Src/main.c    **** 
 200:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 201:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 202:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 203:Src/main.c    **** 
 204:Src/main.c    **** 
ARM GAS  /tmp/ccPzDniD.s 			page 5


 205:Src/main.c    **** 	uint8_t one[] = "20\n";
 206:Src/main.c    **** 	uint8_t two[] = "40\n";
 207:Src/main.c    **** 	uint8_t three[] = "60\n";
 208:Src/main.c    **** 	uint8_t four[] = "80\n";
 209:Src/main.c    **** 	uint8_t five[] = "100\n";
 210:Src/main.c    **** 	uint8_t six[] = "120\n";
 211:Src/main.c    **** 	uint8_t seven[] = "140\n";
 212:Src/main.c    **** 	uint8_t eight[] = "160\n";
 213:Src/main.c    **** 	uint8_t nine[] = "180\n";
 214:Src/main.c    **** 
 215:Src/main.c    **** 	if(direction != 'w' && direction != 'a' && direction != 'd'){
 216:Src/main.c    **** 		USART_SendString(err);
 217:Src/main.c    **** 		ClearCommand();
 218:Src/main.c    **** 		return;
 219:Src/main.c    **** 	}
 220:Src/main.c    **** 
 221:Src/main.c    **** 	uint8_t* part1;
 222:Src/main.c    **** 	uint8_t* part2;
 223:Src/main.c    **** 
 224:Src/main.c    **** 	switch(direction){
 225:Src/main.c    **** 		case 'w':
 226:Src/main.c    **** 			part1 = forward;
 227:Src/main.c    **** 			break;
 228:Src/main.c    **** 		case 'a':
 229:Src/main.c    **** 			part1 = left;
 230:Src/main.c    **** 			break;
 231:Src/main.c    **** 		case 'd':
 232:Src/main.c    **** 			part1 = right;
 233:Src/main.c    **** 			break;
 234:Src/main.c    **** 		default:
 235:Src/main.c    **** 			USART_SendString(err);
 236:Src/main.c    **** 			ClearCommand();
 237:Src/main.c    **** 	}
 238:Src/main.c    **** 
 239:Src/main.c    **** 	switch(distance){
 240:Src/main.c    **** 		case '1':
 241:Src/main.c    **** 			part2 = one;
 242:Src/main.c    **** 			//TODO: Change delay length
 243:Src/main.c    **** 			break;
 244:Src/main.c    **** 		case '2':
 245:Src/main.c    **** 			part2 = two;
 246:Src/main.c    **** 			break;
 247:Src/main.c    **** 		case '3':
 248:Src/main.c    **** 			part2 = three;
 249:Src/main.c    **** 			break;
 250:Src/main.c    **** 		case '4':
 251:Src/main.c    **** 			part2 = four;
 252:Src/main.c    **** 			break;
 253:Src/main.c    **** 		case '5':
 254:Src/main.c    **** 			part2 = five;
 255:Src/main.c    **** 			break;
 256:Src/main.c    **** 		case '6':
 257:Src/main.c    **** 			part2 = six;
 258:Src/main.c    **** 			break;
 259:Src/main.c    **** 		case '7':
 260:Src/main.c    **** 			part2 = seven;
 261:Src/main.c    **** 			break;
ARM GAS  /tmp/ccPzDniD.s 			page 6


 262:Src/main.c    **** 		case '8':
 263:Src/main.c    **** 			part2 = eight;
 264:Src/main.c    **** 			break;
 265:Src/main.c    **** 		case '9':
 266:Src/main.c    **** 			part2 = nine;
 267:Src/main.c    **** 			break;
 268:Src/main.c    **** 		default:
 269:Src/main.c    **** 			USART_SendString(err);
 270:Src/main.c    **** 			ClearCommand();
 271:Src/main.c    **** 			return;
 272:Src/main.c    **** 	}
 273:Src/main.c    **** 
 274:Src/main.c    **** 	USART_SendString(part1);
 275:Src/main.c    **** 	USART_SendString(part2);
 276:Src/main.c    **** 
 277:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 278:Src/main.c    **** 	HAL_Delay(1000);
 279:Src/main.c    **** 	TIM2->CCR1 = 0;
 280:Src/main.c    **** 
 281:Src/main.c    **** 	ClearCommand();
 282:Src/main.c    **** 
 283:Src/main.c    **** 
 284:Src/main.c    **** 	// Example code while loop
 285:Src/main.c    **** 	//    while (1)
 286:Src/main.c    **** 	//    {
 287:Src/main.c    **** 	//        while(CH1_DC < 65535)
 288:Src/main.c    **** 	//        {
 289:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 290:Src/main.c    **** 	//            CH1_DC += 70;
 291:Src/main.c    **** 	//            HAL_Delay(1);
 292:Src/main.c    **** 	//        }
 293:Src/main.c    **** 	//        while(CH1_DC > 0)
 294:Src/main.c    **** 	//        {
 295:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 296:Src/main.c    **** 	//            CH1_DC -= 70;
 297:Src/main.c    **** 	//            HAL_Delay(1);
 298:Src/main.c    **** 	//        }
 299:Src/main.c    **** 	//    }
 300:Src/main.c    **** }
 301:Src/main.c    **** 
 302:Src/main.c    **** /*
 303:Src/main.c    **** void Ultrasonic_Init(uint32_t pins)
 304:Src/main.c    **** {
 305:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 306:Src/main.c    **** 
 307:Src/main.c    **** 	GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 308:Src/main.c    **** 		GPIO_MODE_INPUT,
 309:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
 310:Src/main.c    **** 		GPIO_NOPULL
 311:Src/main.c    **** 	};
 312:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &gpio_init);
 313:Src/main.c    **** }
 314:Src/main.c    **** */
 315:Src/main.c    **** 
 316:Src/main.c    **** void GetDistance()
 317:Src/main.c    **** {
 318:Src/main.c    **** 
ARM GAS  /tmp/ccPzDniD.s 			page 7


 319:Src/main.c    **** }
 320:Src/main.c    **** 
 321:Src/main.c    **** /* USER CODE END 0 */
 322:Src/main.c    **** 
 323:Src/main.c    **** /**
 324:Src/main.c    ****  * @brief  The application entry point.
 325:Src/main.c    ****  * @retval int
 326:Src/main.c    ****  */
 327:Src/main.c    **** int main(void)
 328:Src/main.c    **** {
 329:Src/main.c    **** 	HAL_Init();
 330:Src/main.c    **** 	SystemClock_Config();
 331:Src/main.c    **** 
 332:Src/main.c    **** 	//USART Initalizations
 333:Src/main.c    **** 	GPIO_AF_Init();
 334:Src/main.c    **** 	USART_Init();
 335:Src/main.c    **** 	LED_Init(LED_RED | LED_ORANGE | LED_GREEN | LED_BLUE);
 336:Src/main.c    **** 
 337:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 338:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 339:Src/main.c    **** 
 340:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 341:Src/main.c    **** 	//TODO: Replace status with actual ultrsonic sensor data.
 342:Src/main.c    **** 	uint8_t* status;
 343:Src/main.c    **** 	uint8_t* distance;
 344:Src/main.c    **** 
 345:Src/main.c    **** 	//PWM Initalizations
 346:Src/main.c    **** 	MX_GPIO_Init();
 347:Src/main.c    **** 	MX_TIM2_Init();
 348:Src/main.c    **** 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Initalized to GPIO pin PA5
 349:Src/main.c    **** 
 350:Src/main.c    **** 	USART_SendString(prompt);
 351:Src/main.c    **** 	uint32_t count = 0;
 352:Src/main.c    **** 	while (1)
 353:Src/main.c    **** 	{
 354:Src/main.c    **** 		if(count > 1000000)
 355:Src/main.c    **** 		{
 356:Src/main.c    **** 			count = 0;
 357:Src/main.c    **** 			status = "Ultrasonic Distance: ";
 358:Src/main.c    **** 			USART_SendString(status);
 359:Src/main.c    **** 			distance = 5;
 360:Src/main.c    **** 			USART_SendChar(command[0]);
 361:Src/main.c    **** 		}
 362:Src/main.c    **** 		else
 363:Src/main.c    **** 			count++;
 364:Src/main.c    **** 
 365:Src/main.c    **** 
 366:Src/main.c    **** 		if(incomingCommand){
 367:Src/main.c    **** 			if(command[1]){
 368:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 369:Src/main.c    **** 			}
 370:Src/main.c    **** 		}
 371:Src/main.c    **** 	}
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** /**
 375:Src/main.c    ****  * @brief System Clock Configuration
ARM GAS  /tmp/ccPzDniD.s 			page 8


 376:Src/main.c    ****  * @retval None
 377:Src/main.c    ****  */
 378:Src/main.c    **** void SystemClock_Config(void)
 379:Src/main.c    **** {
 380:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 381:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 382:Src/main.c    **** 
 383:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 384:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 385:Src/main.c    **** 	 */
 386:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 387:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 388:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 389:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 390:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 391:Src/main.c    **** 	{
 392:Src/main.c    **** 		Error_Handler();
 393:Src/main.c    **** 	}
 394:Src/main.c    **** 
 395:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 396:Src/main.c    **** 	*/
 397:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 398:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 399:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 400:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 401:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 402:Src/main.c    **** 
 403:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 404:Src/main.c    **** 	{
 405:Src/main.c    **** 		Error_Handler();
 406:Src/main.c    **** 	}
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /**
 410:Src/main.c    ****  * @brief TIM2 Initialization Function
 411:Src/main.c    ****  * @param None
 412:Src/main.c    ****  * @retval None
 413:Src/main.c    ****  */
 414:Src/main.c    **** static void MX_TIM2_Init(void)
 415:Src/main.c    **** {
 416:Src/main.c    **** 
 417:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 0 */
 418:Src/main.c    **** 
 419:Src/main.c    **** 	/* USER CODE END TIM2_Init 0 */
 420:Src/main.c    **** 
 421:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 422:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 423:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 424:Src/main.c    **** 
 425:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 1 */
 426:Src/main.c    **** 
 427:Src/main.c    **** 	/* USER CODE END TIM2_Init 1 */
 428:Src/main.c    **** 	htim2.Instance = TIM2;
 429:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 430:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 431:Src/main.c    **** 	htim2.Init.Period = 65535;
 432:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccPzDniD.s 			page 9


 433:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 434:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 435:Src/main.c    **** 	{
 436:Src/main.c    **** 		Error_Handler();
 437:Src/main.c    **** 	}
 438:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 439:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 440:Src/main.c    **** 	{
 441:Src/main.c    **** 		Error_Handler();
 442:Src/main.c    **** 	}
 443:Src/main.c    **** 	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 444:Src/main.c    **** 	{
 445:Src/main.c    **** 		Error_Handler();
 446:Src/main.c    **** 	}
 447:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 448:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 449:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 450:Src/main.c    **** 	{
 451:Src/main.c    **** 		Error_Handler();
 452:Src/main.c    **** 	}
 453:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 454:Src/main.c    **** 	sConfigOC.Pulse = 0;
 455:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 456:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 457:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 458:Src/main.c    **** 	{
 459:Src/main.c    **** 		Error_Handler();
 460:Src/main.c    **** 	}
 461:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 2 */
 462:Src/main.c    **** 
 463:Src/main.c    **** 	/* USER CODE END TIM2_Init 2 */
 464:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 465:Src/main.c    **** 
 466:Src/main.c    **** }
 467:Src/main.c    **** 
 468:Src/main.c    **** /**
 469:Src/main.c    ****  * @brief GPIO Initialization Function
 470:Src/main.c    ****  * @param None
 471:Src/main.c    ****  * @retval None
 472:Src/main.c    ****  */
 473:Src/main.c    **** static void MX_GPIO_Init(void)
 474:Src/main.c    **** {
  26              		.loc 1 474 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 475:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 475 2 view .LVU1
  39              		.loc 1 475 19 is_stmt 0 view .LVU2
ARM GAS  /tmp/ccPzDniD.s 			page 10


  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 476:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 477:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 478:Src/main.c    **** 
 479:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 480:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 480 2 is_stmt 1 view .LVU3
  46              	.LBB8:
  47              		.loc 1 480 2 view .LVU4
  48              		.loc 1 480 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 480 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 480 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE8:
  62              		.loc 1 480 2 view .LVU8
 481:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 482:Src/main.c    **** 
 483:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 484:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 484 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
 485:Src/main.c    **** 
 486:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 487:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 487 2 view .LVU10
  72              		.loc 1 487 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 488:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 488 2 is_stmt 1 view .LVU12
  76              		.loc 1 488 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 489:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 489 2 is_stmt 1 view .LVU14
  79              		.loc 1 489 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 490:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccPzDniD.s 			page 11


  82              		.loc 1 490 2 is_stmt 1 view .LVU16
  83              		.loc 1 490 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 491:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 491 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 492:Src/main.c    **** 
 493:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 494:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 495:Src/main.c    **** }
  90              		.loc 1 495 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE52:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB40:
  67:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 67 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  67:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 67 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  70:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 70 5 is_stmt 1 view .LVU22
  70:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 70 22 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  70:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
ARM GAS  /tmp/ccPzDniD.s 			page 12


 131              		.loc 1 70 22 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  75:Src/main.c    **** }
 137              		.loc 1 75 5 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  76:Src/main.c    **** 
 142              		.loc 1 76 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  76:Src/main.c    **** 
 146              		.loc 1 76 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE40:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB41:
  83:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 83 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 84 2 view .LVU29
 177              	.LBB9:
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 84 2 view .LVU30
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 84 2 view .LVU31
 180 0004 144B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
ARM GAS  /tmp/ccPzDniD.s 			page 13


 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 84 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 84 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE9:
  84:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 84 2 view .LVU34
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 85 2 view .LVU35
 195              	.LBB10:
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 85 2 view .LVU36
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 85 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 85 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 85 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE10:
  85:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 85 2 view .LVU40
  86:Src/main.c    **** 
 211              		.loc 1 86 5 view .LVU41
 212              	.LBB11:
  86:Src/main.c    **** 
 213              		.loc 1 86 5 view .LVU42
  86:Src/main.c    **** 
 214              		.loc 1 86 5 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
  86:Src/main.c    **** 
 220              		.loc 1 86 5 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
  86:Src/main.c    **** 
 224              		.loc 1 86 5 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccPzDniD.s 			page 14


 226              	.LBE11:
  86:Src/main.c    **** 
 227              		.loc 1 86 5 view .LVU46
  89:Src/main.c    **** 	HAL_GPIO_Init(&(uart_pins.tx.gpio), &(uart_pins.tx.pin));
 228              		.loc 1 89 2 view .LVU47
 229 003c 0749     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
  90:Src/main.c    **** 
 234              		.loc 1 90 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a 2000     		movs	r0, r4
 238 004c 1830     		adds	r0, r0, #24
 239 004e FFF7FEFF 		bl	HAL_GPIO_Init
 240              	.LVL9:
 115:Src/main.c    **** 
 241              		.loc 1 115 1 is_stmt 0 view .LVU49
 242 0052 04B0     		add	sp, sp, #16
 243              		@ sp needed
 244 0054 10BD     		pop	{r4, pc}
 245              	.L9:
 246 0056 C046     		.align	2
 247              	.L8:
 248 0058 00100240 		.word	1073876992
 249 005c 04000000 		.word	uart_pins+4
 250              		.cfi_endproc
 251              	.LFE41:
 253              		.global	__aeabi_uidiv
 254              		.section	.text.USART_Init,"ax",%progbits
 255              		.align	1
 256              		.global	USART_Init
 257              		.syntax unified
 258              		.code	16
 259              		.thumb_func
 261              	USART_Init:
 262              	.LFB42:
 120:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 263              		.loc 1 120 19 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 8
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 10B5     		push	{r4, lr}
 268              	.LCFI6:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 4, -8
 271              		.cfi_offset 14, -4
 272 0002 82B0     		sub	sp, sp, #8
 273              	.LCFI7:
 274              		.cfi_def_cfa_offset 16
 121:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 275              		.loc 1 121 2 view .LVU51
 276              	.LBB12:
 121:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 277              		.loc 1 121 2 view .LVU52
ARM GAS  /tmp/ccPzDniD.s 			page 15


 121:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 278              		.loc 1 121 2 view .LVU53
 279 0004 154B     		ldr	r3, .L11
 280 0006 D969     		ldr	r1, [r3, #28]
 281 0008 8022     		movs	r2, #128
 282 000a D202     		lsls	r2, r2, #11
 283 000c 1143     		orrs	r1, r2
 284 000e D961     		str	r1, [r3, #28]
 121:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 285              		.loc 1 121 2 view .LVU54
 286 0010 D969     		ldr	r1, [r3, #28]
 287 0012 1140     		ands	r1, r2
 288 0014 0191     		str	r1, [sp, #4]
 121:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 289              		.loc 1 121 2 view .LVU55
 290 0016 0199     		ldr	r1, [sp, #4]
 291              	.LBE12:
 121:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 292              		.loc 1 121 2 view .LVU56
 122:Src/main.c    **** 
 293              		.loc 1 122 2 view .LVU57
 122:Src/main.c    **** 
 294              		.loc 1 122 5 is_stmt 0 view .LVU58
 295 0018 D969     		ldr	r1, [r3, #28]
 122:Src/main.c    **** 
 296              		.loc 1 122 15 view .LVU59
 297 001a 0A43     		orrs	r2, r1
 298 001c DA61     		str	r2, [r3, #28]
 125:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 299              		.loc 1 125 2 is_stmt 1 view .LVU60
 125:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 300              		.loc 1 125 8 is_stmt 0 view .LVU61
 301 001e 104C     		ldr	r4, .L11+4
 302 0020 2368     		ldr	r3, [r4]
 125:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 303              		.loc 1 125 14 view .LVU62
 304 0022 104A     		ldr	r2, .L11+8
 305 0024 1340     		ands	r3, r2
 306 0026 2360     		str	r3, [r4]
 126:Src/main.c    **** 												//use with the BT adapter
 307              		.loc 1 126 2 is_stmt 1 view .LVU63
 126:Src/main.c    **** 												//use with the BT adapter
 308              		.loc 1 126 16 is_stmt 0 view .LVU64
 309 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 310              	.LVL10:
 126:Src/main.c    **** 												//use with the BT adapter
 311              		.loc 1 126 38 view .LVU65
 312 002c 9621     		movs	r1, #150
 313 002e 8901     		lsls	r1, r1, #6
 314 0030 FFF7FEFF 		bl	__aeabi_uidiv
 315              	.LVL11:
 126:Src/main.c    **** 												//use with the BT adapter
 316              		.loc 1 126 14 view .LVU66
 317 0034 E060     		str	r0, [r4, #12]
 130:Src/main.c    **** 
 318              		.loc 1 130 2 is_stmt 1 view .LVU67
 130:Src/main.c    **** 
ARM GAS  /tmp/ccPzDniD.s 			page 16


 319              		.loc 1 130 8 is_stmt 0 view .LVU68
 320 0036 2368     		ldr	r3, [r4]
 130:Src/main.c    **** 
 321              		.loc 1 130 14 view .LVU69
 322 0038 0822     		movs	r2, #8
 323 003a 1343     		orrs	r3, r2
 324 003c 2360     		str	r3, [r4]
 133:Src/main.c    **** 
 325              		.loc 1 133 2 is_stmt 1 view .LVU70
 133:Src/main.c    **** 
 326              		.loc 1 133 8 is_stmt 0 view .LVU71
 327 003e 2368     		ldr	r3, [r4]
 133:Src/main.c    **** 
 328              		.loc 1 133 14 view .LVU72
 329 0040 043A     		subs	r2, r2, #4
 330 0042 1343     		orrs	r3, r2
 331 0044 2360     		str	r3, [r4]
 136:Src/main.c    **** 
 332              		.loc 1 136 2 is_stmt 1 view .LVU73
 136:Src/main.c    **** 
 333              		.loc 1 136 8 is_stmt 0 view .LVU74
 334 0046 2368     		ldr	r3, [r4]
 136:Src/main.c    **** 
 335              		.loc 1 136 14 view .LVU75
 336 0048 1C32     		adds	r2, r2, #28
 337 004a 1343     		orrs	r3, r2
 338 004c 2360     		str	r3, [r4]
 139:Src/main.c    **** }
 339              		.loc 1 139 2 is_stmt 1 view .LVU76
 139:Src/main.c    **** }
 340              		.loc 1 139 8 is_stmt 0 view .LVU77
 341 004e 2368     		ldr	r3, [r4]
 139:Src/main.c    **** }
 342              		.loc 1 139 14 view .LVU78
 343 0050 1F3A     		subs	r2, r2, #31
 344 0052 1343     		orrs	r3, r2
 345 0054 2360     		str	r3, [r4]
 140:Src/main.c    **** 
 346              		.loc 1 140 1 view .LVU79
 347 0056 02B0     		add	sp, sp, #8
 348              		@ sp needed
 349 0058 10BD     		pop	{r4, pc}
 350              	.L12:
 351 005a C046     		.align	2
 352              	.L11:
 353 005c 00100240 		.word	1073876992
 354 0060 00480040 		.word	1073760256
 355 0064 FF7FFFFF 		.word	-32769
 356              		.cfi_endproc
 357              	.LFE42:
 359              		.section	.text.USART_SendChar,"ax",%progbits
 360              		.align	1
 361              		.global	USART_SendChar
 362              		.syntax unified
 363              		.code	16
 364              		.thumb_func
 366              	USART_SendChar:
ARM GAS  /tmp/ccPzDniD.s 			page 17


 367              	.LFB43:
 147:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 368              		.loc 1 147 32 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373              	.LVL12:
 374              	.L14:
 148:Src/main.c    **** 		;
 375              		.loc 1 148 8 discriminator 1 view .LVU81
 148:Src/main.c    **** 		;
 376              		.loc 1 148 16 is_stmt 0 discriminator 1 view .LVU82
 377 0000 034B     		ldr	r3, .L16
 378 0002 DB69     		ldr	r3, [r3, #28]
 148:Src/main.c    **** 		;
 379              		.loc 1 148 8 discriminator 1 view .LVU83
 380 0004 1B06     		lsls	r3, r3, #24
 381 0006 FBD5     		bpl	.L14
 151:Src/main.c    **** }
 382              		.loc 1 151 2 is_stmt 1 view .LVU84
 151:Src/main.c    **** }
 383              		.loc 1 151 14 is_stmt 0 view .LVU85
 384 0008 014B     		ldr	r3, .L16
 385 000a 1885     		strh	r0, [r3, #40]
 152:Src/main.c    **** 
 386              		.loc 1 152 1 view .LVU86
 387              		@ sp needed
 388 000c 7047     		bx	lr
 389              	.L17:
 390 000e C046     		.align	2
 391              	.L16:
 392 0010 00480040 		.word	1073760256
 393              		.cfi_endproc
 394              	.LFE43:
 396              		.section	.text.USART_SendString,"ax",%progbits
 397              		.align	1
 398              		.global	USART_SendString
 399              		.syntax unified
 400              		.code	16
 401              		.thumb_func
 403              	USART_SendString:
 404              	.LVL13:
 405              	.LFB44:
 159:Src/main.c    **** 	while(*p_string != 0) {
 406              		.loc 1 159 42 is_stmt 1 view -0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 159:Src/main.c    **** 	while(*p_string != 0) {
 410              		.loc 1 159 42 is_stmt 0 view .LVU88
 411 0000 10B5     		push	{r4, lr}
 412              	.LCFI8:
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 4, -8
 415              		.cfi_offset 14, -4
 416 0002 0400     		movs	r4, r0
ARM GAS  /tmp/ccPzDniD.s 			page 18


 160:Src/main.c    **** 		USART_SendChar(*p_string);
 417              		.loc 1 160 2 is_stmt 1 view .LVU89
 160:Src/main.c    **** 		USART_SendChar(*p_string);
 418              		.loc 1 160 7 is_stmt 0 view .LVU90
 419 0004 02E0     		b	.L19
 420              	.LVL14:
 421              	.L20:
 161:Src/main.c    **** 		p_string++;
 422              		.loc 1 161 3 is_stmt 1 view .LVU91
 423 0006 FFF7FEFF 		bl	USART_SendChar
 424              	.LVL15:
 162:Src/main.c    **** 	}
 425              		.loc 1 162 3 view .LVU92
 162:Src/main.c    **** 	}
 426              		.loc 1 162 11 is_stmt 0 view .LVU93
 427 000a 0134     		adds	r4, r4, #1
 428              	.LVL16:
 429              	.L19:
 160:Src/main.c    **** 		USART_SendChar(*p_string);
 430              		.loc 1 160 18 is_stmt 1 view .LVU94
 160:Src/main.c    **** 		USART_SendChar(*p_string);
 431              		.loc 1 160 8 is_stmt 0 view .LVU95
 432 000c 2078     		ldrb	r0, [r4]
 160:Src/main.c    **** 		USART_SendChar(*p_string);
 433              		.loc 1 160 18 view .LVU96
 434 000e 0028     		cmp	r0, #0
 435 0010 F9D1     		bne	.L20
 164:Src/main.c    **** }
 436              		.loc 1 164 2 is_stmt 1 view .LVU97
 437 0012 FFF7FEFF 		bl	USART_SendChar
 438              	.LVL17:
 165:Src/main.c    **** 
 439              		.loc 1 165 1 is_stmt 0 view .LVU98
 440              		@ sp needed
 441              	.LVL18:
 165:Src/main.c    **** 
 442              		.loc 1 165 1 view .LVU99
 443 0016 10BD     		pop	{r4, pc}
 444              		.cfi_endproc
 445              	.LFE44:
 447              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 448              		.align	2
 449              	.LC4:
 450 0000 434D443E 		.ascii	"CMD> \000"
 450      2000
 451              		.section	.text.ClearCommand,"ax",%progbits
 452              		.align	1
 453              		.global	ClearCommand
 454              		.syntax unified
 455              		.code	16
 456              		.thumb_func
 458              	ClearCommand:
 459              	.LFB45:
 170:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 460              		.loc 1 170 20 is_stmt 1 view -0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccPzDniD.s 			page 19


 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464 0000 00B5     		push	{lr}
 465              	.LCFI9:
 466              		.cfi_def_cfa_offset 4
 467              		.cfi_offset 14, -4
 468 0002 83B0     		sub	sp, sp, #12
 469              	.LCFI10:
 470              		.cfi_def_cfa_offset 16
 171:Src/main.c    **** 	memset(command, 0, sizeof(command));
 471              		.loc 1 171 2 view .LVU101
 171:Src/main.c    **** 	memset(command, 0, sizeof(command));
 472              		.loc 1 171 10 is_stmt 0 view .LVU102
 473 0004 074B     		ldr	r3, .L22
 474 0006 1A68     		ldr	r2, [r3]
 475 0008 0092     		str	r2, [sp]
 476 000a 9B88     		ldrh	r3, [r3, #4]
 477 000c 6A46     		mov	r2, sp
 478 000e 9380     		strh	r3, [r2, #4]
 172:Src/main.c    **** 	incomingCommand = 0;
 479              		.loc 1 172 2 is_stmt 1 view .LVU103
 480 0010 054B     		ldr	r3, .L22+4
 481 0012 0022     		movs	r2, #0
 482 0014 1A80     		strh	r2, [r3]
 173:Src/main.c    **** 	USART_SendString(prompt);
 483              		.loc 1 173 2 view .LVU104
 173:Src/main.c    **** 	USART_SendString(prompt);
 484              		.loc 1 173 18 is_stmt 0 view .LVU105
 485 0016 054B     		ldr	r3, .L22+8
 486 0018 1A70     		strb	r2, [r3]
 174:Src/main.c    **** }
 487              		.loc 1 174 2 is_stmt 1 view .LVU106
 488 001a 6846     		mov	r0, sp
 489 001c FFF7FEFF 		bl	USART_SendString
 490              	.LVL19:
 175:Src/main.c    **** 
 491              		.loc 1 175 1 is_stmt 0 view .LVU107
 492 0020 03B0     		add	sp, sp, #12
 493              		@ sp needed
 494 0022 00BD     		pop	{pc}
 495              	.L23:
 496              		.align	2
 497              	.L22:
 498 0024 00000000 		.word	.LC4
 499 0028 00000000 		.word	command
 500 002c 00000000 		.word	incomingCommand
 501              		.cfi_endproc
 502              	.LFE45:
 504              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 505              		.align	2
 506              	.LC8:
 507 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 507      616E6420 
 507      746F6F20 
 507      6C6F6E67 
 507      210A00
 508              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 509              		.align	1
ARM GAS  /tmp/ccPzDniD.s 			page 20


 510              		.global	USART3_4_IRQHandler
 511              		.syntax unified
 512              		.code	16
 513              		.thumb_func
 515              	USART3_4_IRQHandler:
 516              	.LFB46:
 177:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 517              		.loc 1 177 27 is_stmt 1 view -0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 24
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521 0000 30B5     		push	{r4, r5, lr}
 522              	.LCFI11:
 523              		.cfi_def_cfa_offset 12
 524              		.cfi_offset 4, -12
 525              		.cfi_offset 5, -8
 526              		.cfi_offset 14, -4
 527 0002 87B0     		sub	sp, sp, #28
 528              	.LCFI12:
 529              		.cfi_def_cfa_offset 40
 178:Src/main.c    **** 	incomingCommand = 1;
 530              		.loc 1 178 2 view .LVU109
 178:Src/main.c    **** 	incomingCommand = 1;
 531              		.loc 1 178 10 is_stmt 0 view .LVU110
 532 0004 01AA     		add	r2, sp, #4
 533 0006 164B     		ldr	r3, .L31
 534 0008 1800     		movs	r0, r3
 535 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 536 000c 38C2     		stmia	r2!, {r3, r4, r5}
 537 000e 0368     		ldr	r3, [r0]
 538 0010 1360     		str	r3, [r2]
 539 0012 8388     		ldrh	r3, [r0, #4]
 540 0014 9380     		strh	r3, [r2, #4]
 541 0016 8379     		ldrb	r3, [r0, #6]
 542 0018 9371     		strb	r3, [r2, #6]
 179:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 543              		.loc 1 179 2 is_stmt 1 view .LVU111
 179:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 544              		.loc 1 179 18 is_stmt 0 view .LVU112
 545 001a 124B     		ldr	r3, .L31+4
 546 001c 0122     		movs	r2, #1
 547 001e 1A70     		strb	r2, [r3]
 180:Src/main.c    **** 		;
 548              		.loc 1 180 2 is_stmt 1 view .LVU113
 549              	.L25:
 180:Src/main.c    **** 		;
 550              		.loc 1 180 8 discriminator 1 view .LVU114
 180:Src/main.c    **** 		;
 551              		.loc 1 180 16 is_stmt 0 discriminator 1 view .LVU115
 552 0020 114B     		ldr	r3, .L31+8
 553 0022 DB69     		ldr	r3, [r3, #28]
 180:Src/main.c    **** 		;
 554              		.loc 1 180 8 discriminator 1 view .LVU116
 555 0024 9B06     		lsls	r3, r3, #26
 556 0026 FBD5     		bpl	.L25
 182:Src/main.c    **** 		if(command[1]){
 557              		.loc 1 182 2 is_stmt 1 view .LVU117
ARM GAS  /tmp/ccPzDniD.s 			page 21


 182:Src/main.c    **** 		if(command[1]){
 558              		.loc 1 182 12 is_stmt 0 view .LVU118
 559 0028 104B     		ldr	r3, .L31+12
 560 002a 1B78     		ldrb	r3, [r3]
 182:Src/main.c    **** 		if(command[1]){
 561              		.loc 1 182 4 view .LVU119
 562 002c 002B     		cmp	r3, #0
 563 002e 0FD0     		beq	.L26
 183:Src/main.c    **** 			USART_SendString(err);
 564              		.loc 1 183 3 is_stmt 1 view .LVU120
 183:Src/main.c    **** 			USART_SendString(err);
 565              		.loc 1 183 13 is_stmt 0 view .LVU121
 566 0030 0E4B     		ldr	r3, .L31+12
 567 0032 5B78     		ldrb	r3, [r3, #1]
 183:Src/main.c    **** 			USART_SendString(err);
 568              		.loc 1 183 5 view .LVU122
 569 0034 002B     		cmp	r3, #0
 570 0036 05D1     		bne	.L30
 188:Src/main.c    **** 	else
 571              		.loc 1 188 4 is_stmt 1 view .LVU123
 188:Src/main.c    **** 	else
 572              		.loc 1 188 23 is_stmt 0 view .LVU124
 573 0038 0B4B     		ldr	r3, .L31+8
 574 003a 9B8C     		ldrh	r3, [r3, #36]
 188:Src/main.c    **** 	else
 575              		.loc 1 188 15 view .LVU125
 576 003c DBB2     		uxtb	r3, r3
 577 003e 0B4A     		ldr	r2, .L31+12
 578 0040 5370     		strb	r3, [r2, #1]
 579 0042 0AE0     		b	.L24
 580              	.L30:
 184:Src/main.c    **** 			ClearCommand();
 581              		.loc 1 184 4 is_stmt 1 view .LVU126
 582 0044 01A8     		add	r0, sp, #4
 583 0046 FFF7FEFF 		bl	USART_SendString
 584              	.LVL20:
 185:Src/main.c    **** 		}
 585              		.loc 1 185 4 view .LVU127
 586 004a FFF7FEFF 		bl	ClearCommand
 587              	.LVL21:
 588 004e 04E0     		b	.L24
 589              	.L26:
 190:Src/main.c    **** }
 590              		.loc 1 190 3 view .LVU128
 190:Src/main.c    **** }
 591              		.loc 1 190 22 is_stmt 0 view .LVU129
 592 0050 054B     		ldr	r3, .L31+8
 593 0052 9B8C     		ldrh	r3, [r3, #36]
 190:Src/main.c    **** }
 594              		.loc 1 190 14 view .LVU130
 595 0054 DBB2     		uxtb	r3, r3
 596 0056 054A     		ldr	r2, .L31+12
 597 0058 1370     		strb	r3, [r2]
 598              	.L24:
 191:Src/main.c    **** 
 599              		.loc 1 191 1 view .LVU131
 600 005a 07B0     		add	sp, sp, #28
ARM GAS  /tmp/ccPzDniD.s 			page 22


 601              		@ sp needed
 602 005c 30BD     		pop	{r4, r5, pc}
 603              	.L32:
 604 005e C046     		.align	2
 605              	.L31:
 606 0060 00000000 		.word	.LC8
 607 0064 00000000 		.word	incomingCommand
 608 0068 00480040 		.word	1073760256
 609 006c 00000000 		.word	command
 610              		.cfi_endproc
 611              	.LFE46:
 613              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 614              		.align	2
 615              	.LC12:
 616 0000 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 616      523A2049 
 616      6E76616C 
 616      69642063 
 616      6F6D6D61 
 617 0019 000000   		.align	2
 618              	.LC14:
 619 001c 4D6F7669 		.ascii	"Moving forward \000"
 619      6E672066 
 619      6F727761 
 619      72642000 
 620              		.align	2
 621              	.LC16:
 622 002c 5475726E 		.ascii	"Turning left \000"
 622      696E6720 
 622      6C656674 
 622      2000
 623 003a 0000     		.align	2
 624              	.LC18:
 625 003c 5475726E 		.ascii	"Turning right \000"
 625      696E6720 
 625      72696768 
 625      742000
 626 004b 00       		.align	2
 627              	.LC20:
 628 004c 3130300A 		.ascii	"100\012\000"
 628      00
 629 0051 000000   		.align	2
 630              	.LC22:
 631 0054 3132300A 		.ascii	"120\012\000"
 631      00
 632 0059 000000   		.align	2
 633              	.LC24:
 634 005c 3134300A 		.ascii	"140\012\000"
 634      00
 635 0061 000000   		.align	2
 636              	.LC26:
 637 0064 3136300A 		.ascii	"160\012\000"
 637      00
 638 0069 000000   		.align	2
 639              	.LC28:
 640 006c 3138300A 		.ascii	"180\012\000"
 640      00
ARM GAS  /tmp/ccPzDniD.s 			page 23


 641              		.section	.text.ProcessCommand,"ax",%progbits
 642              		.align	1
 643              		.global	ProcessCommand
 644              		.syntax unified
 645              		.code	16
 646              		.thumb_func
 648              	ProcessCommand:
 649              	.LVL22:
 650              	.LFB47:
 193:Src/main.c    **** 	uint32_t left_motor_pin;
 651              		.loc 1 193 57 is_stmt 1 view -0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 136
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 193:Src/main.c    **** 	uint32_t left_motor_pin;
 655              		.loc 1 193 57 is_stmt 0 view .LVU133
 656 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 657              	.LCFI13:
 658              		.cfi_def_cfa_offset 20
 659              		.cfi_offset 4, -20
 660              		.cfi_offset 5, -16
 661              		.cfi_offset 6, -12
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 664 0002 A3B0     		sub	sp, sp, #140
 665              	.LCFI14:
 666              		.cfi_def_cfa_offset 160
 194:Src/main.c    **** 	uint32_t right_motor_pin;
 667              		.loc 1 194 2 is_stmt 1 view .LVU134
 195:Src/main.c    **** 	int32_t CH1_DC = 65535;
 668              		.loc 1 195 2 view .LVU135
 196:Src/main.c    **** 
 669              		.loc 1 196 2 view .LVU136
 670              	.LVL23:
 198:Src/main.c    **** 
 671              		.loc 1 198 2 view .LVU137
 198:Src/main.c    **** 
 672              		.loc 1 198 10 is_stmt 0 view .LVU138
 673 0004 1BAC     		add	r4, sp, #108
 674 0006 434B     		ldr	r3, .L53
 675 0008 2200     		movs	r2, r4
 676 000a E0CB     		ldmia	r3!, {r5, r6, r7}
 677 000c E0C2     		stmia	r2!, {r5, r6, r7}
 678 000e 70CB     		ldmia	r3!, {r4, r5, r6}
 679 0010 70C2     		stmia	r2!, {r4, r5, r6}
 680 0012 1B78     		ldrb	r3, [r3]
 681 0014 1370     		strb	r3, [r2]
 200:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 682              		.loc 1 200 2 is_stmt 1 view .LVU139
 200:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 683              		.loc 1 200 10 is_stmt 0 view .LVU140
 684 0016 17AA     		add	r2, sp, #92
 685 0018 3F4B     		ldr	r3, .L53+4
 686 001a E0CB     		ldmia	r3!, {r5, r6, r7}
 687 001c E0C2     		stmia	r2!, {r5, r6, r7}
 688 001e 1B68     		ldr	r3, [r3]
 689 0020 1360     		str	r3, [r2]
ARM GAS  /tmp/ccPzDniD.s 			page 24


 201:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 690              		.loc 1 201 2 is_stmt 1 view .LVU141
 201:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 691              		.loc 1 201 10 is_stmt 0 view .LVU142
 692 0022 13AA     		add	r2, sp, #76
 693 0024 3D4B     		ldr	r3, .L53+8
 694 0026 E0CB     		ldmia	r3!, {r5, r6, r7}
 695 0028 E0C2     		stmia	r2!, {r5, r6, r7}
 696 002a 1B88     		ldrh	r3, [r3]
 697 002c 1380     		strh	r3, [r2]
 202:Src/main.c    **** 
 698              		.loc 1 202 2 is_stmt 1 view .LVU143
 202:Src/main.c    **** 
 699              		.loc 1 202 10 is_stmt 0 view .LVU144
 700 002e 0FAA     		add	r2, sp, #60
 701 0030 3B4B     		ldr	r3, .L53+12
 702 0032 E0CB     		ldmia	r3!, {r5, r6, r7}
 703 0034 E0C2     		stmia	r2!, {r5, r6, r7}
 704 0036 1400     		movs	r4, r2
 705 0038 1A88     		ldrh	r2, [r3]
 706 003a 2280     		strh	r2, [r4]
 707 003c 9B78     		ldrb	r3, [r3, #2]
 708 003e A370     		strb	r3, [r4, #2]
 205:Src/main.c    **** 	uint8_t two[] = "40\n";
 709              		.loc 1 205 2 is_stmt 1 view .LVU145
 205:Src/main.c    **** 	uint8_t two[] = "40\n";
 710              		.loc 1 205 10 is_stmt 0 view .LVU146
 711 0040 384B     		ldr	r3, .L53+16
 712 0042 0E93     		str	r3, [sp, #56]
 206:Src/main.c    **** 	uint8_t three[] = "60\n";
 713              		.loc 1 206 2 is_stmt 1 view .LVU147
 206:Src/main.c    **** 	uint8_t three[] = "60\n";
 714              		.loc 1 206 10 is_stmt 0 view .LVU148
 715 0044 384B     		ldr	r3, .L53+20
 716 0046 0D93     		str	r3, [sp, #52]
 207:Src/main.c    **** 	uint8_t four[] = "80\n";
 717              		.loc 1 207 2 is_stmt 1 view .LVU149
 207:Src/main.c    **** 	uint8_t four[] = "80\n";
 718              		.loc 1 207 10 is_stmt 0 view .LVU150
 719 0048 384B     		ldr	r3, .L53+24
 720 004a 0C93     		str	r3, [sp, #48]
 208:Src/main.c    **** 	uint8_t five[] = "100\n";
 721              		.loc 1 208 2 is_stmt 1 view .LVU151
 208:Src/main.c    **** 	uint8_t five[] = "100\n";
 722              		.loc 1 208 10 is_stmt 0 view .LVU152
 723 004c 384B     		ldr	r3, .L53+28
 724 004e 0B93     		str	r3, [sp, #44]
 209:Src/main.c    **** 	uint8_t six[] = "120\n";
 725              		.loc 1 209 2 is_stmt 1 view .LVU153
 209:Src/main.c    **** 	uint8_t six[] = "120\n";
 726              		.loc 1 209 10 is_stmt 0 view .LVU154
 727 0050 384B     		ldr	r3, .L53+32
 728 0052 1A68     		ldr	r2, [r3]
 729 0054 0992     		str	r2, [sp, #36]
 730 0056 1A79     		ldrb	r2, [r3, #4]
 731 0058 09AB     		add	r3, sp, #36
 732 005a 1A71     		strb	r2, [r3, #4]
ARM GAS  /tmp/ccPzDniD.s 			page 25


 210:Src/main.c    **** 	uint8_t seven[] = "140\n";
 733              		.loc 1 210 2 is_stmt 1 view .LVU155
 210:Src/main.c    **** 	uint8_t seven[] = "140\n";
 734              		.loc 1 210 10 is_stmt 0 view .LVU156
 735 005c 364B     		ldr	r3, .L53+36
 736 005e 1A68     		ldr	r2, [r3]
 737 0060 0792     		str	r2, [sp, #28]
 738 0062 1A79     		ldrb	r2, [r3, #4]
 739 0064 07AB     		add	r3, sp, #28
 740 0066 1A71     		strb	r2, [r3, #4]
 211:Src/main.c    **** 	uint8_t eight[] = "160\n";
 741              		.loc 1 211 2 is_stmt 1 view .LVU157
 211:Src/main.c    **** 	uint8_t eight[] = "160\n";
 742              		.loc 1 211 10 is_stmt 0 view .LVU158
 743 0068 344B     		ldr	r3, .L53+40
 744 006a 1A68     		ldr	r2, [r3]
 745 006c 0592     		str	r2, [sp, #20]
 746 006e 1A79     		ldrb	r2, [r3, #4]
 747 0070 05AB     		add	r3, sp, #20
 748 0072 1A71     		strb	r2, [r3, #4]
 212:Src/main.c    **** 	uint8_t nine[] = "180\n";
 749              		.loc 1 212 2 is_stmt 1 view .LVU159
 212:Src/main.c    **** 	uint8_t nine[] = "180\n";
 750              		.loc 1 212 10 is_stmt 0 view .LVU160
 751 0074 324B     		ldr	r3, .L53+44
 752 0076 1A68     		ldr	r2, [r3]
 753 0078 0392     		str	r2, [sp, #12]
 754 007a 1A79     		ldrb	r2, [r3, #4]
 755 007c 03AB     		add	r3, sp, #12
 756 007e 1A71     		strb	r2, [r3, #4]
 213:Src/main.c    **** 
 757              		.loc 1 213 2 is_stmt 1 view .LVU161
 213:Src/main.c    **** 
 758              		.loc 1 213 10 is_stmt 0 view .LVU162
 759 0080 304B     		ldr	r3, .L53+48
 760 0082 1A68     		ldr	r2, [r3]
 761 0084 0192     		str	r2, [sp, #4]
 762 0086 1A79     		ldrb	r2, [r3, #4]
 763 0088 01AB     		add	r3, sp, #4
 764 008a 1A71     		strb	r2, [r3, #4]
 215:Src/main.c    **** 		USART_SendString(err);
 765              		.loc 1 215 2 is_stmt 1 view .LVU163
 215:Src/main.c    **** 		USART_SendString(err);
 766              		.loc 1 215 4 is_stmt 0 view .LVU164
 767 008c 7728     		cmp	r0, #119
 768 008e 0BD0     		beq	.L48
 215:Src/main.c    **** 		USART_SendString(err);
 769              		.loc 1 215 22 discriminator 1 view .LVU165
 770 0090 6128     		cmp	r0, #97
 771 0092 12D0     		beq	.L49
 215:Src/main.c    **** 		USART_SendString(err);
 772              		.loc 1 215 42 discriminator 2 view .LVU166
 773 0094 6428     		cmp	r0, #100
 774 0096 01D1     		bne	.L52
 232:Src/main.c    **** 			break;
 775              		.loc 1 232 10 view .LVU167
 776 0098 0FA8     		add	r0, sp, #60
ARM GAS  /tmp/ccPzDniD.s 			page 26


 777              	.LVL24:
 232:Src/main.c    **** 			break;
 778              		.loc 1 232 10 view .LVU168
 779 009a 06E0     		b	.L34
 780              	.LVL25:
 781              	.L52:
 216:Src/main.c    **** 		ClearCommand();
 782              		.loc 1 216 3 is_stmt 1 view .LVU169
 783 009c 1BA8     		add	r0, sp, #108
 784              	.LVL26:
 216:Src/main.c    **** 		ClearCommand();
 785              		.loc 1 216 3 is_stmt 0 view .LVU170
 786 009e FFF7FEFF 		bl	USART_SendString
 787              	.LVL27:
 217:Src/main.c    **** 		return;
 788              		.loc 1 217 3 is_stmt 1 view .LVU171
 789 00a2 FFF7FEFF 		bl	ClearCommand
 790              	.LVL28:
 218:Src/main.c    **** 	}
 791              		.loc 1 218 3 view .LVU172
 792 00a6 30E0     		b	.L33
 793              	.LVL29:
 794              	.L48:
 226:Src/main.c    **** 			break;
 795              		.loc 1 226 10 is_stmt 0 view .LVU173
 796 00a8 17A8     		add	r0, sp, #92
 797              	.LVL30:
 798              	.L34:
 239:Src/main.c    **** 		case '1':
 799              		.loc 1 239 2 is_stmt 1 view .LVU174
 800 00aa 3139     		subs	r1, r1, #49
 801              	.LVL31:
 239:Src/main.c    **** 		case '1':
 802              		.loc 1 239 2 is_stmt 0 view .LVU175
 803 00ac CBB2     		uxtb	r3, r1
 804 00ae 082B     		cmp	r3, #8
 805 00b0 13D8     		bhi	.L36
 806 00b2 9900     		lsls	r1, r3, #2
 807 00b4 244B     		ldr	r3, .L53+52
 808 00b6 5B58     		ldr	r3, [r3, r1]
 809 00b8 9F46     		mov	pc, r3
 810              		.section	.rodata.ProcessCommand,"a",%progbits
 811              		.align	2
 812              	.L38:
 813 0000 E6000000 		.word	.L46
 814 0004 0E010000 		.word	.L51
 815 0008 BE000000 		.word	.L44
 816 000c C2000000 		.word	.L43
 817 0010 C6000000 		.word	.L42
 818 0014 CA000000 		.word	.L41
 819 0018 CE000000 		.word	.L40
 820 001c D2000000 		.word	.L39
 821 0020 D6000000 		.word	.L37
 822              		.section	.text.ProcessCommand
 823              	.LVL32:
 824              	.L49:
 229:Src/main.c    **** 			break;
ARM GAS  /tmp/ccPzDniD.s 			page 27


 825              		.loc 1 229 10 view .LVU176
 826 00ba 13A8     		add	r0, sp, #76
 827              	.LVL33:
 229:Src/main.c    **** 			break;
 828              		.loc 1 229 10 view .LVU177
 829 00bc F5E7     		b	.L34
 830              	.LVL34:
 831              	.L44:
 248:Src/main.c    **** 			break;
 832              		.loc 1 248 4 is_stmt 1 view .LVU178
 249:Src/main.c    **** 		case '4':
 833              		.loc 1 249 4 view .LVU179
 248:Src/main.c    **** 			break;
 834              		.loc 1 248 10 is_stmt 0 view .LVU180
 835 00be 0CAC     		add	r4, sp, #48
 836              	.LVL35:
 249:Src/main.c    **** 		case '4':
 837              		.loc 1 249 4 view .LVU181
 838 00c0 12E0     		b	.L45
 839              	.LVL36:
 840              	.L43:
 251:Src/main.c    **** 			break;
 841              		.loc 1 251 4 is_stmt 1 view .LVU182
 252:Src/main.c    **** 		case '5':
 842              		.loc 1 252 4 view .LVU183
 251:Src/main.c    **** 			break;
 843              		.loc 1 251 10 is_stmt 0 view .LVU184
 844 00c2 0BAC     		add	r4, sp, #44
 845              	.LVL37:
 252:Src/main.c    **** 		case '5':
 846              		.loc 1 252 4 view .LVU185
 847 00c4 10E0     		b	.L45
 848              	.LVL38:
 849              	.L42:
 254:Src/main.c    **** 			break;
 850              		.loc 1 254 4 is_stmt 1 view .LVU186
 255:Src/main.c    **** 		case '6':
 851              		.loc 1 255 4 view .LVU187
 254:Src/main.c    **** 			break;
 852              		.loc 1 254 10 is_stmt 0 view .LVU188
 853 00c6 09AC     		add	r4, sp, #36
 854              	.LVL39:
 255:Src/main.c    **** 		case '6':
 855              		.loc 1 255 4 view .LVU189
 856 00c8 0EE0     		b	.L45
 857              	.LVL40:
 858              	.L41:
 257:Src/main.c    **** 			break;
 859              		.loc 1 257 4 is_stmt 1 view .LVU190
 258:Src/main.c    **** 		case '7':
 860              		.loc 1 258 4 view .LVU191
 257:Src/main.c    **** 			break;
 861              		.loc 1 257 10 is_stmt 0 view .LVU192
 862 00ca 07AC     		add	r4, sp, #28
 863              	.LVL41:
 258:Src/main.c    **** 		case '7':
 864              		.loc 1 258 4 view .LVU193
ARM GAS  /tmp/ccPzDniD.s 			page 28


 865 00cc 0CE0     		b	.L45
 866              	.LVL42:
 867              	.L40:
 260:Src/main.c    **** 			break;
 868              		.loc 1 260 4 is_stmt 1 view .LVU194
 261:Src/main.c    **** 		case '8':
 869              		.loc 1 261 4 view .LVU195
 260:Src/main.c    **** 			break;
 870              		.loc 1 260 10 is_stmt 0 view .LVU196
 871 00ce 05AC     		add	r4, sp, #20
 872              	.LVL43:
 261:Src/main.c    **** 		case '8':
 873              		.loc 1 261 4 view .LVU197
 874 00d0 0AE0     		b	.L45
 875              	.LVL44:
 876              	.L39:
 263:Src/main.c    **** 			break;
 877              		.loc 1 263 4 is_stmt 1 view .LVU198
 264:Src/main.c    **** 		case '9':
 878              		.loc 1 264 4 view .LVU199
 263:Src/main.c    **** 			break;
 879              		.loc 1 263 10 is_stmt 0 view .LVU200
 880 00d2 03AC     		add	r4, sp, #12
 881              	.LVL45:
 264:Src/main.c    **** 		case '9':
 882              		.loc 1 264 4 view .LVU201
 883 00d4 08E0     		b	.L45
 884              	.LVL46:
 885              	.L37:
 266:Src/main.c    **** 			break;
 886              		.loc 1 266 4 is_stmt 1 view .LVU202
 267:Src/main.c    **** 		default:
 887              		.loc 1 267 4 view .LVU203
 266:Src/main.c    **** 			break;
 888              		.loc 1 266 10 is_stmt 0 view .LVU204
 889 00d6 01AC     		add	r4, sp, #4
 890              	.LVL47:
 267:Src/main.c    **** 		default:
 891              		.loc 1 267 4 view .LVU205
 892 00d8 06E0     		b	.L45
 893              	.LVL48:
 894              	.L36:
 269:Src/main.c    **** 			ClearCommand();
 895              		.loc 1 269 4 is_stmt 1 view .LVU206
 896 00da 1BA8     		add	r0, sp, #108
 897              	.LVL49:
 269:Src/main.c    **** 			ClearCommand();
 898              		.loc 1 269 4 is_stmt 0 view .LVU207
 899 00dc FFF7FEFF 		bl	USART_SendString
 900              	.LVL50:
 270:Src/main.c    **** 			return;
 901              		.loc 1 270 4 is_stmt 1 view .LVU208
 902 00e0 FFF7FEFF 		bl	ClearCommand
 903              	.LVL51:
 271:Src/main.c    **** 	}
 904              		.loc 1 271 4 view .LVU209
 905 00e4 11E0     		b	.L33
ARM GAS  /tmp/ccPzDniD.s 			page 29


 906              	.LVL52:
 907              	.L46:
 239:Src/main.c    **** 		case '1':
 908              		.loc 1 239 2 is_stmt 0 view .LVU210
 909 00e6 0EAC     		add	r4, sp, #56
 910              	.L45:
 911              	.LVL53:
 274:Src/main.c    **** 	USART_SendString(part2);
 912              		.loc 1 274 2 is_stmt 1 view .LVU211
 913 00e8 FFF7FEFF 		bl	USART_SendString
 914              	.LVL54:
 275:Src/main.c    **** 
 915              		.loc 1 275 2 view .LVU212
 916 00ec 2000     		movs	r0, r4
 917 00ee FFF7FEFF 		bl	USART_SendString
 918              	.LVL55:
 277:Src/main.c    **** 	HAL_Delay(1000);
 919              		.loc 1 277 2 view .LVU213
 277:Src/main.c    **** 	HAL_Delay(1000);
 920              		.loc 1 277 13 is_stmt 0 view .LVU214
 921 00f2 8024     		movs	r4, #128
 922              	.LVL56:
 277:Src/main.c    **** 	HAL_Delay(1000);
 923              		.loc 1 277 13 view .LVU215
 924 00f4 E405     		lsls	r4, r4, #23
 925 00f6 154B     		ldr	r3, .L53+56
 926 00f8 6363     		str	r3, [r4, #52]
 278:Src/main.c    **** 	TIM2->CCR1 = 0;
 927              		.loc 1 278 2 is_stmt 1 view .LVU216
 928 00fa FA20     		movs	r0, #250
 929 00fc 8000     		lsls	r0, r0, #2
 930 00fe FFF7FEFF 		bl	HAL_Delay
 931              	.LVL57:
 279:Src/main.c    **** 
 932              		.loc 1 279 2 view .LVU217
 279:Src/main.c    **** 
 933              		.loc 1 279 13 is_stmt 0 view .LVU218
 934 0102 0023     		movs	r3, #0
 935 0104 6363     		str	r3, [r4, #52]
 281:Src/main.c    **** 
 936              		.loc 1 281 2 is_stmt 1 view .LVU219
 937 0106 FFF7FEFF 		bl	ClearCommand
 938              	.LVL58:
 939              	.L33:
 300:Src/main.c    **** 
 940              		.loc 1 300 1 is_stmt 0 view .LVU220
 941 010a 23B0     		add	sp, sp, #140
 942              		@ sp needed
 943 010c F0BD     		pop	{r4, r5, r6, r7, pc}
 944              	.LVL59:
 945              	.L51:
 245:Src/main.c    **** 			break;
 946              		.loc 1 245 10 view .LVU221
 947 010e 0DAC     		add	r4, sp, #52
 948 0110 EAE7     		b	.L45
 949              	.L54:
 950 0112 C046     		.align	2
ARM GAS  /tmp/ccPzDniD.s 			page 30


 951              	.L53:
 952 0114 00000000 		.word	.LC12
 953 0118 1C000000 		.word	.LC14
 954 011c 2C000000 		.word	.LC16
 955 0120 3C000000 		.word	.LC18
 956 0124 32300A00 		.word	667698
 957 0128 34300A00 		.word	667700
 958 012c 36300A00 		.word	667702
 959 0130 38300A00 		.word	667704
 960 0134 4C000000 		.word	.LC20
 961 0138 54000000 		.word	.LC22
 962 013c 5C000000 		.word	.LC24
 963 0140 64000000 		.word	.LC26
 964 0144 6C000000 		.word	.LC28
 965 0148 00000000 		.word	.L38
 966 014c FFFF0000 		.word	65535
 967              		.cfi_endproc
 968              	.LFE47:
 970              		.section	.text.GetDistance,"ax",%progbits
 971              		.align	1
 972              		.global	GetDistance
 973              		.syntax unified
 974              		.code	16
 975              		.thumb_func
 977              	GetDistance:
 978              	.LFB48:
 317:Src/main.c    **** 
 979              		.loc 1 317 1 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 319:Src/main.c    **** 
 984              		.loc 1 319 1 view .LVU223
 985              		@ sp needed
 986 0000 7047     		bx	lr
 987              		.cfi_endproc
 988              	.LFE48:
 990              		.section	.text.Error_Handler,"ax",%progbits
 991              		.align	1
 992              		.global	Error_Handler
 993              		.syntax unified
 994              		.code	16
 995              		.thumb_func
 997              	Error_Handler:
 998              	.LFB53:
 496:Src/main.c    **** 
 497:Src/main.c    **** /* USER CODE BEGIN 4 */
 498:Src/main.c    **** 
 499:Src/main.c    **** /* USER CODE END 4 */
 500:Src/main.c    **** 
 501:Src/main.c    **** /**
 502:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 503:Src/main.c    ****  * @retval None
 504:Src/main.c    ****  */
 505:Src/main.c    **** void Error_Handler(void)
 506:Src/main.c    **** {
ARM GAS  /tmp/ccPzDniD.s 			page 31


 999              		.loc 1 506 1 view -0
 1000              		.cfi_startproc
 1001              		@ Volatile: function does not return.
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 507:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 508:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 509:Src/main.c    **** 	__disable_irq();
 1005              		.loc 1 509 2 view .LVU225
 1006              	.LBB13:
 1007              	.LBI13:
 1008              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
ARM GAS  /tmp/ccPzDniD.s 			page 32


  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccPzDniD.s 			page 33


 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1009              		.loc 2 140 27 view .LVU226
 1010              	.LBB14:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1011              		.loc 2 142 3 view .LVU227
 1012              		.syntax divided
 1013              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1014 0000 72B6     		cpsid i
 1015              	@ 0 "" 2
 1016              		.thumb
 1017              		.syntax unified
 1018              	.L57:
 1019              	.LBE14:
 1020              	.LBE13:
 510:Src/main.c    **** 	while (1)
 1021              		.loc 1 510 2 discriminator 1 view .LVU228
 511:Src/main.c    **** 	{
 512:Src/main.c    **** 	}
ARM GAS  /tmp/ccPzDniD.s 			page 34


 1022              		.loc 1 512 2 discriminator 1 view .LVU229
 510:Src/main.c    **** 	while (1)
 1023              		.loc 1 510 8 discriminator 1 view .LVU230
 1024 0002 FEE7     		b	.L57
 1025              		.cfi_endproc
 1026              	.LFE53:
 1028              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1029              		.align	1
 1030              		.syntax unified
 1031              		.code	16
 1032              		.thumb_func
 1034              	MX_TIM2_Init:
 1035              	.LFB51:
 415:Src/main.c    **** 
 1036              		.loc 1 415 1 view -0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 56
 1039              		@ frame_needed = 0, uses_anonymous_args = 0
 1040 0000 00B5     		push	{lr}
 1041              	.LCFI15:
 1042              		.cfi_def_cfa_offset 4
 1043              		.cfi_offset 14, -4
 1044 0002 8FB0     		sub	sp, sp, #60
 1045              	.LCFI16:
 1046              		.cfi_def_cfa_offset 64
 421:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1047              		.loc 1 421 2 view .LVU232
 421:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1048              		.loc 1 421 25 is_stmt 0 view .LVU233
 1049 0004 1022     		movs	r2, #16
 1050 0006 0021     		movs	r1, #0
 1051 0008 0AA8     		add	r0, sp, #40
 1052 000a FFF7FEFF 		bl	memset
 1053              	.LVL60:
 422:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1054              		.loc 1 422 2 is_stmt 1 view .LVU234
 422:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1055              		.loc 1 422 26 is_stmt 0 view .LVU235
 1056 000e 0822     		movs	r2, #8
 1057 0010 0021     		movs	r1, #0
 1058 0012 08A8     		add	r0, sp, #32
 1059 0014 FFF7FEFF 		bl	memset
 1060              	.LVL61:
 423:Src/main.c    **** 
 1061              		.loc 1 423 2 is_stmt 1 view .LVU236
 423:Src/main.c    **** 
 1062              		.loc 1 423 21 is_stmt 0 view .LVU237
 1063 0018 1C22     		movs	r2, #28
 1064 001a 0021     		movs	r1, #0
 1065 001c 01A8     		add	r0, sp, #4
 1066 001e FFF7FEFF 		bl	memset
 1067              	.LVL62:
 428:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 1068              		.loc 1 428 2 is_stmt 1 view .LVU238
 428:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 1069              		.loc 1 428 17 is_stmt 0 view .LVU239
 1070 0022 2148     		ldr	r0, .L69
ARM GAS  /tmp/ccPzDniD.s 			page 35


 1071 0024 8023     		movs	r3, #128
 1072 0026 DB05     		lsls	r3, r3, #23
 1073 0028 0360     		str	r3, [r0]
 429:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1074              		.loc 1 429 2 is_stmt 1 view .LVU240
 429:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1075              		.loc 1 429 23 is_stmt 0 view .LVU241
 1076 002a 0023     		movs	r3, #0
 1077 002c 4360     		str	r3, [r0, #4]
 430:Src/main.c    **** 	htim2.Init.Period = 65535;
 1078              		.loc 1 430 2 is_stmt 1 view .LVU242
 430:Src/main.c    **** 	htim2.Init.Period = 65535;
 1079              		.loc 1 430 25 is_stmt 0 view .LVU243
 1080 002e 8360     		str	r3, [r0, #8]
 431:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1081              		.loc 1 431 2 is_stmt 1 view .LVU244
 431:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1082              		.loc 1 431 20 is_stmt 0 view .LVU245
 1083 0030 1E4A     		ldr	r2, .L69+4
 1084 0032 C260     		str	r2, [r0, #12]
 432:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1085              		.loc 1 432 2 is_stmt 1 view .LVU246
 432:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1086              		.loc 1 432 27 is_stmt 0 view .LVU247
 1087 0034 0361     		str	r3, [r0, #16]
 433:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1088              		.loc 1 433 2 is_stmt 1 view .LVU248
 433:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1089              		.loc 1 433 31 is_stmt 0 view .LVU249
 1090 0036 8033     		adds	r3, r3, #128
 1091 0038 8361     		str	r3, [r0, #24]
 434:Src/main.c    **** 	{
 1092              		.loc 1 434 2 is_stmt 1 view .LVU250
 434:Src/main.c    **** 	{
 1093              		.loc 1 434 6 is_stmt 0 view .LVU251
 1094 003a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1095              	.LVL63:
 434:Src/main.c    **** 	{
 1096              		.loc 1 434 5 view .LVU252
 1097 003e 0028     		cmp	r0, #0
 1098 0040 28D1     		bne	.L64
 438:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1099              		.loc 1 438 2 is_stmt 1 view .LVU253
 438:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1100              		.loc 1 438 33 is_stmt 0 view .LVU254
 1101 0042 8023     		movs	r3, #128
 1102 0044 5B01     		lsls	r3, r3, #5
 1103 0046 0A93     		str	r3, [sp, #40]
 439:Src/main.c    **** 	{
 1104              		.loc 1 439 2 is_stmt 1 view .LVU255
 439:Src/main.c    **** 	{
 1105              		.loc 1 439 6 is_stmt 0 view .LVU256
 1106 0048 1748     		ldr	r0, .L69
 1107 004a 0AA9     		add	r1, sp, #40
 1108 004c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1109              	.LVL64:
 439:Src/main.c    **** 	{
ARM GAS  /tmp/ccPzDniD.s 			page 36


 1110              		.loc 1 439 5 view .LVU257
 1111 0050 0028     		cmp	r0, #0
 1112 0052 21D1     		bne	.L65
 443:Src/main.c    **** 	{
 1113              		.loc 1 443 2 is_stmt 1 view .LVU258
 443:Src/main.c    **** 	{
 1114              		.loc 1 443 6 is_stmt 0 view .LVU259
 1115 0054 1448     		ldr	r0, .L69
 1116 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1117              	.LVL65:
 443:Src/main.c    **** 	{
 1118              		.loc 1 443 5 view .LVU260
 1119 005a 0028     		cmp	r0, #0
 1120 005c 1ED1     		bne	.L66
 447:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1121              		.loc 1 447 2 is_stmt 1 view .LVU261
 447:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1122              		.loc 1 447 36 is_stmt 0 view .LVU262
 1123 005e 0023     		movs	r3, #0
 1124 0060 0893     		str	r3, [sp, #32]
 448:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1125              		.loc 1 448 2 is_stmt 1 view .LVU263
 448:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1126              		.loc 1 448 32 is_stmt 0 view .LVU264
 1127 0062 0993     		str	r3, [sp, #36]
 449:Src/main.c    **** 	{
 1128              		.loc 1 449 2 is_stmt 1 view .LVU265
 449:Src/main.c    **** 	{
 1129              		.loc 1 449 6 is_stmt 0 view .LVU266
 1130 0064 1048     		ldr	r0, .L69
 1131 0066 08A9     		add	r1, sp, #32
 1132 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1133              	.LVL66:
 449:Src/main.c    **** 	{
 1134              		.loc 1 449 5 view .LVU267
 1135 006c 0028     		cmp	r0, #0
 1136 006e 17D1     		bne	.L67
 453:Src/main.c    **** 	sConfigOC.Pulse = 0;
 1137              		.loc 1 453 2 is_stmt 1 view .LVU268
 453:Src/main.c    **** 	sConfigOC.Pulse = 0;
 1138              		.loc 1 453 19 is_stmt 0 view .LVU269
 1139 0070 6023     		movs	r3, #96
 1140 0072 0193     		str	r3, [sp, #4]
 454:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1141              		.loc 1 454 2 is_stmt 1 view .LVU270
 454:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1142              		.loc 1 454 18 is_stmt 0 view .LVU271
 1143 0074 0023     		movs	r3, #0
 1144 0076 0293     		str	r3, [sp, #8]
 455:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1145              		.loc 1 455 2 is_stmt 1 view .LVU272
 455:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1146              		.loc 1 455 23 is_stmt 0 view .LVU273
 1147 0078 0393     		str	r3, [sp, #12]
 456:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1148              		.loc 1 456 2 is_stmt 1 view .LVU274
 456:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
ARM GAS  /tmp/ccPzDniD.s 			page 37


 1149              		.loc 1 456 23 is_stmt 0 view .LVU275
 1150 007a 0593     		str	r3, [sp, #20]
 457:Src/main.c    **** 	{
 1151              		.loc 1 457 2 is_stmt 1 view .LVU276
 457:Src/main.c    **** 	{
 1152              		.loc 1 457 6 is_stmt 0 view .LVU277
 1153 007c 0A48     		ldr	r0, .L69
 1154 007e 0022     		movs	r2, #0
 1155 0080 01A9     		add	r1, sp, #4
 1156 0082 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1157              	.LVL67:
 457:Src/main.c    **** 	{
 1158              		.loc 1 457 5 view .LVU278
 1159 0086 0028     		cmp	r0, #0
 1160 0088 0CD1     		bne	.L68
 464:Src/main.c    **** 
 1161              		.loc 1 464 2 is_stmt 1 view .LVU279
 1162 008a 0748     		ldr	r0, .L69
 1163 008c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1164              	.LVL68:
 466:Src/main.c    **** 
 1165              		.loc 1 466 1 is_stmt 0 view .LVU280
 1166 0090 0FB0     		add	sp, sp, #60
 1167              		@ sp needed
 1168 0092 00BD     		pop	{pc}
 1169              	.L64:
 436:Src/main.c    **** 	}
 1170              		.loc 1 436 3 is_stmt 1 view .LVU281
 1171 0094 FFF7FEFF 		bl	Error_Handler
 1172              	.LVL69:
 1173              	.L65:
 441:Src/main.c    **** 	}
 1174              		.loc 1 441 3 view .LVU282
 1175 0098 FFF7FEFF 		bl	Error_Handler
 1176              	.LVL70:
 1177              	.L66:
 445:Src/main.c    **** 	}
 1178              		.loc 1 445 3 view .LVU283
 1179 009c FFF7FEFF 		bl	Error_Handler
 1180              	.LVL71:
 1181              	.L67:
 451:Src/main.c    **** 	}
 1182              		.loc 1 451 3 view .LVU284
 1183 00a0 FFF7FEFF 		bl	Error_Handler
 1184              	.LVL72:
 1185              	.L68:
 459:Src/main.c    **** 	}
 1186              		.loc 1 459 3 view .LVU285
 1187 00a4 FFF7FEFF 		bl	Error_Handler
 1188              	.LVL73:
 1189              	.L70:
 1190              		.align	2
 1191              	.L69:
 1192 00a8 00000000 		.word	htim2
 1193 00ac FFFF0000 		.word	65535
 1194              		.cfi_endproc
 1195              	.LFE51:
ARM GAS  /tmp/ccPzDniD.s 			page 38


 1197              		.section	.text.SystemClock_Config,"ax",%progbits
 1198              		.align	1
 1199              		.global	SystemClock_Config
 1200              		.syntax unified
 1201              		.code	16
 1202              		.thumb_func
 1204              	SystemClock_Config:
 1205              	.LFB50:
 379:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1206              		.loc 1 379 1 view -0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 72
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210 0000 00B5     		push	{lr}
 1211              	.LCFI17:
 1212              		.cfi_def_cfa_offset 4
 1213              		.cfi_offset 14, -4
 1214 0002 93B0     		sub	sp, sp, #76
 1215              	.LCFI18:
 1216              		.cfi_def_cfa_offset 80
 380:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1217              		.loc 1 380 2 view .LVU287
 380:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1218              		.loc 1 380 21 is_stmt 0 view .LVU288
 1219 0004 3422     		movs	r2, #52
 1220 0006 0021     		movs	r1, #0
 1221 0008 05A8     		add	r0, sp, #20
 1222 000a FFF7FEFF 		bl	memset
 1223              	.LVL74:
 381:Src/main.c    **** 
 1224              		.loc 1 381 2 is_stmt 1 view .LVU289
 381:Src/main.c    **** 
 1225              		.loc 1 381 21 is_stmt 0 view .LVU290
 1226 000e 1022     		movs	r2, #16
 1227 0010 0021     		movs	r1, #0
 1228 0012 01A8     		add	r0, sp, #4
 1229 0014 FFF7FEFF 		bl	memset
 1230              	.LVL75:
 386:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1231              		.loc 1 386 2 is_stmt 1 view .LVU291
 386:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1232              		.loc 1 386 35 is_stmt 0 view .LVU292
 1233 0018 0223     		movs	r3, #2
 1234 001a 0593     		str	r3, [sp, #20]
 387:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1235              		.loc 1 387 2 is_stmt 1 view .LVU293
 387:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1236              		.loc 1 387 29 is_stmt 0 view .LVU294
 1237 001c 013B     		subs	r3, r3, #1
 1238 001e 0893     		str	r3, [sp, #32]
 388:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1239              		.loc 1 388 2 is_stmt 1 view .LVU295
 388:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1240              		.loc 1 388 40 is_stmt 0 view .LVU296
 1241 0020 0F33     		adds	r3, r3, #15
 1242 0022 0993     		str	r3, [sp, #36]
 389:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/ccPzDniD.s 			page 39


 1243              		.loc 1 389 2 is_stmt 1 view .LVU297
 390:Src/main.c    **** 	{
 1244              		.loc 1 390 2 view .LVU298
 390:Src/main.c    **** 	{
 1245              		.loc 1 390 6 is_stmt 0 view .LVU299
 1246 0024 05A8     		add	r0, sp, #20
 1247 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1248              	.LVL76:
 390:Src/main.c    **** 	{
 1249              		.loc 1 390 5 view .LVU300
 1250 002a 0028     		cmp	r0, #0
 1251 002c 0DD1     		bne	.L74
 397:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1252              		.loc 1 397 2 is_stmt 1 view .LVU301
 397:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1253              		.loc 1 397 30 is_stmt 0 view .LVU302
 1254 002e 0723     		movs	r3, #7
 1255 0030 0193     		str	r3, [sp, #4]
 399:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1256              		.loc 1 399 2 is_stmt 1 view .LVU303
 399:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1257              		.loc 1 399 33 is_stmt 0 view .LVU304
 1258 0032 0023     		movs	r3, #0
 1259 0034 0293     		str	r3, [sp, #8]
 400:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1260              		.loc 1 400 2 is_stmt 1 view .LVU305
 400:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1261              		.loc 1 400 34 is_stmt 0 view .LVU306
 1262 0036 0393     		str	r3, [sp, #12]
 401:Src/main.c    **** 
 1263              		.loc 1 401 2 is_stmt 1 view .LVU307
 401:Src/main.c    **** 
 1264              		.loc 1 401 35 is_stmt 0 view .LVU308
 1265 0038 0493     		str	r3, [sp, #16]
 403:Src/main.c    **** 	{
 1266              		.loc 1 403 2 is_stmt 1 view .LVU309
 403:Src/main.c    **** 	{
 1267              		.loc 1 403 6 is_stmt 0 view .LVU310
 1268 003a 0021     		movs	r1, #0
 1269 003c 01A8     		add	r0, sp, #4
 1270 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1271              	.LVL77:
 403:Src/main.c    **** 	{
 1272              		.loc 1 403 5 view .LVU311
 1273 0042 0028     		cmp	r0, #0
 1274 0044 03D1     		bne	.L75
 407:Src/main.c    **** 
 1275              		.loc 1 407 1 view .LVU312
 1276 0046 13B0     		add	sp, sp, #76
 1277              		@ sp needed
 1278 0048 00BD     		pop	{pc}
 1279              	.L74:
 392:Src/main.c    **** 	}
 1280              		.loc 1 392 3 is_stmt 1 view .LVU313
 1281 004a FFF7FEFF 		bl	Error_Handler
 1282              	.LVL78:
 1283              	.L75:
ARM GAS  /tmp/ccPzDniD.s 			page 40


 405:Src/main.c    **** 	}
 1284              		.loc 1 405 3 view .LVU314
 1285 004e FFF7FEFF 		bl	Error_Handler
 1286              	.LVL79:
 1287              		.cfi_endproc
 1288              	.LFE50:
 1290              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1291              		.align	2
 1292              	.LC34:
 1293 0000 556C7472 		.ascii	"Ultrasonic Distance: \000"
 1293      61736F6E 
 1293      69632044 
 1293      69737461 
 1293      6E63653A 
 1294              		.section	.text.main,"ax",%progbits
 1295              		.align	1
 1296              		.global	main
 1297              		.syntax unified
 1298              		.code	16
 1299              		.thumb_func
 1301              	main:
 1302              	.LFB49:
 328:Src/main.c    **** 	HAL_Init();
 1303              		.loc 1 328 1 view -0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 8
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307 0000 10B5     		push	{r4, lr}
 1308              	.LCFI19:
 1309              		.cfi_def_cfa_offset 8
 1310              		.cfi_offset 4, -8
 1311              		.cfi_offset 14, -4
 1312 0002 82B0     		sub	sp, sp, #8
 1313              	.LCFI20:
 1314              		.cfi_def_cfa_offset 16
 329:Src/main.c    **** 	SystemClock_Config();
 1315              		.loc 1 329 2 view .LVU316
 1316 0004 FFF7FEFF 		bl	HAL_Init
 1317              	.LVL80:
 330:Src/main.c    **** 
 1318              		.loc 1 330 2 view .LVU317
 1319 0008 FFF7FEFF 		bl	SystemClock_Config
 1320              	.LVL81:
 333:Src/main.c    **** 	USART_Init();
 1321              		.loc 1 333 2 view .LVU318
 1322 000c FFF7FEFF 		bl	GPIO_AF_Init
 1323              	.LVL82:
 334:Src/main.c    **** 	LED_Init(LED_RED | LED_ORANGE | LED_GREEN | LED_BLUE);
 1324              		.loc 1 334 2 view .LVU319
 1325 0010 FFF7FEFF 		bl	USART_Init
 1326              	.LVL83:
 335:Src/main.c    **** 
 1327              		.loc 1 335 2 view .LVU320
 1328 0014 F020     		movs	r0, #240
 1329 0016 8000     		lsls	r0, r0, #2
 1330 0018 FFF7FEFF 		bl	LED_Init
 1331              	.LVL84:
ARM GAS  /tmp/ccPzDniD.s 			page 41


 337:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 1332              		.loc 1 337 2 view .LVU321
 1333              	.LBB15:
 1334              	.LBI15:
 1335              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccPzDniD.s 			page 42


  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
ARM GAS  /tmp/ccPzDniD.s 			page 43


 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccPzDniD.s 			page 44


 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
ARM GAS  /tmp/ccPzDniD.s 			page 45


 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
ARM GAS  /tmp/ccPzDniD.s 			page 46


 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccPzDniD.s 			page 47


 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccPzDniD.s 			page 48


 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
ARM GAS  /tmp/ccPzDniD.s 			page 49


 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
ARM GAS  /tmp/ccPzDniD.s 			page 50


 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
ARM GAS  /tmp/ccPzDniD.s 			page 51


 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccPzDniD.s 			page 52


 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1336              		.loc 3 623 22 view .LVU322
 1337              	.LBB16:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1338              		.loc 3 625 3 view .LVU323
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1339              		.loc 3 627 5 view .LVU324
 1340              		.loc 3 627 20 is_stmt 0 view .LVU325
 1341 001c 1E4B     		ldr	r3, .L82
 1342 001e 8022     		movs	r2, #128
 1343 0020 9205     		lsls	r2, r2, #22
 1344 0022 1A60     		str	r2, [r3]
 1345              	.LVL85:
 1346              		.loc 3 627 20 view .LVU326
 1347              	.LBE16:
 1348              	.LBE15:
 338:Src/main.c    **** 
 1349              		.loc 1 338 2 is_stmt 1 view .LVU327
 1350              	.LBB17:
 1351              	.LBI17:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /tmp/ccPzDniD.s 			page 53


 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccPzDniD.s 			page 54


 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1352              		.loc 3 730 22 view .LVU328
 1353              	.LBB18:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1354              		.loc 3 732 3 view .LVU329
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1355              		.loc 3 734 5 view .LVU330
 1356              		.loc 3 734 52 is_stmt 0 view .LVU331
 1357 0024 C720     		movs	r0, #199
 1358 0026 8000     		lsls	r0, r0, #2
 1359 0028 1958     		ldr	r1, [r3, r0]
 1360              		.loc 3 734 33 view .LVU332
 1361 002a 1C4A     		ldr	r2, .L82+4
 1362 002c 1140     		ands	r1, r2
 1363              		.loc 3 734 102 view .LVU333
 1364 002e 8022     		movs	r2, #128
 1365 0030 D201     		lsls	r2, r2, #7
 1366 0032 0A43     		orrs	r2, r1
 1367              		.loc 3 734 30 view .LVU334
 1368 0034 1A50     		str	r2, [r3, r0]
 1369              	.LVL86:
 1370              		.loc 3 734 30 view .LVU335
 1371              	.LBE18:
 1372              	.LBE17:
 340:Src/main.c    **** 	//TODO: Replace status with actual ultrsonic sensor data.
 1373              		.loc 1 340 2 is_stmt 1 view .LVU336
 340:Src/main.c    **** 	//TODO: Replace status with actual ultrsonic sensor data.
 1374              		.loc 1 340 10 is_stmt 0 view .LVU337
 1375 0036 1A4B     		ldr	r3, .L82+8
 1376 0038 1A68     		ldr	r2, [r3]
 1377 003a 0092     		str	r2, [sp]
 1378 003c 9B88     		ldrh	r3, [r3, #4]
 1379 003e 6A46     		mov	r2, sp
 1380 0040 9380     		strh	r3, [r2, #4]
 342:Src/main.c    **** 	uint8_t* distance;
 1381              		.loc 1 342 2 is_stmt 1 view .LVU338
 343:Src/main.c    **** 
 1382              		.loc 1 343 2 view .LVU339
 346:Src/main.c    **** 	MX_TIM2_Init();
 1383              		.loc 1 346 2 view .LVU340
 1384 0042 FFF7FEFF 		bl	MX_GPIO_Init
 1385              	.LVL87:
 347:Src/main.c    **** 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Initalized to GPIO pin PA5
 1386              		.loc 1 347 2 view .LVU341
 1387 0046 FFF7FEFF 		bl	MX_TIM2_Init
ARM GAS  /tmp/ccPzDniD.s 			page 55


 1388              	.LVL88:
 348:Src/main.c    **** 
 1389              		.loc 1 348 2 view .LVU342
 1390 004a 1648     		ldr	r0, .L82+12
 1391 004c 0021     		movs	r1, #0
 1392 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1393              	.LVL89:
 350:Src/main.c    **** 	uint32_t count = 0;
 1394              		.loc 1 350 2 view .LVU343
 1395 0052 6846     		mov	r0, sp
 1396 0054 FFF7FEFF 		bl	USART_SendString
 1397              	.LVL90:
 351:Src/main.c    **** 	while (1)
 1398              		.loc 1 351 2 view .LVU344
 351:Src/main.c    **** 	while (1)
 1399              		.loc 1 351 11 is_stmt 0 view .LVU345
 1400 0058 0024     		movs	r4, #0
 1401              	.LVL91:
 1402              	.L77:
 352:Src/main.c    **** 	{
 1403              		.loc 1 352 2 is_stmt 1 view .LVU346
 354:Src/main.c    **** 		{
 1404              		.loc 1 354 3 view .LVU347
 354:Src/main.c    **** 		{
 1405              		.loc 1 354 5 is_stmt 0 view .LVU348
 1406 005a 134B     		ldr	r3, .L82+16
 1407 005c 9C42     		cmp	r4, r3
 1408 005e 10D8     		bhi	.L81
 363:Src/main.c    **** 
 1409              		.loc 1 363 4 is_stmt 1 view .LVU349
 363:Src/main.c    **** 
 1410              		.loc 1 363 9 is_stmt 0 view .LVU350
 1411 0060 0134     		adds	r4, r4, #1
 1412              	.LVL92:
 1413              	.L79:
 366:Src/main.c    **** 			if(command[1]){
 1414              		.loc 1 366 3 is_stmt 1 view .LVU351
 366:Src/main.c    **** 			if(command[1]){
 1415              		.loc 1 366 6 is_stmt 0 view .LVU352
 1416 0062 124B     		ldr	r3, .L82+20
 1417 0064 1B78     		ldrb	r3, [r3]
 366:Src/main.c    **** 			if(command[1]){
 1418              		.loc 1 366 5 view .LVU353
 1419 0066 002B     		cmp	r3, #0
 1420 0068 F7D0     		beq	.L77
 367:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 1421              		.loc 1 367 4 is_stmt 1 view .LVU354
 367:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 1422              		.loc 1 367 14 is_stmt 0 view .LVU355
 1423 006a 114B     		ldr	r3, .L82+24
 1424 006c 5B78     		ldrb	r3, [r3, #1]
 367:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 1425              		.loc 1 367 6 view .LVU356
 1426 006e 002B     		cmp	r3, #0
 1427 0070 F3D0     		beq	.L77
 368:Src/main.c    **** 			}
 1428              		.loc 1 368 5 is_stmt 1 view .LVU357
ARM GAS  /tmp/ccPzDniD.s 			page 56


 368:Src/main.c    **** 			}
 1429              		.loc 1 368 27 is_stmt 0 view .LVU358
 1430 0072 0F4B     		ldr	r3, .L82+24
 1431 0074 1878     		ldrb	r0, [r3]
 1432 0076 C0B2     		uxtb	r0, r0
 368:Src/main.c    **** 			}
 1433              		.loc 1 368 39 view .LVU359
 1434 0078 5978     		ldrb	r1, [r3, #1]
 1435 007a C9B2     		uxtb	r1, r1
 368:Src/main.c    **** 			}
 1436              		.loc 1 368 5 view .LVU360
 1437 007c FFF7FEFF 		bl	ProcessCommand
 1438              	.LVL93:
 1439 0080 EBE7     		b	.L77
 1440              	.L81:
 356:Src/main.c    **** 			status = "Ultrasonic Distance: ";
 1441              		.loc 1 356 4 is_stmt 1 view .LVU361
 1442              	.LVL94:
 357:Src/main.c    **** 			USART_SendString(status);
 1443              		.loc 1 357 4 view .LVU362
 358:Src/main.c    **** 			distance = 5;
 1444              		.loc 1 358 4 view .LVU363
 1445 0082 0C48     		ldr	r0, .L82+28
 1446 0084 FFF7FEFF 		bl	USART_SendString
 1447              	.LVL95:
 359:Src/main.c    **** 			USART_SendChar(command[0]);
 1448              		.loc 1 359 4 view .LVU364
 360:Src/main.c    **** 		}
 1449              		.loc 1 360 4 view .LVU365
 360:Src/main.c    **** 		}
 1450              		.loc 1 360 26 is_stmt 0 view .LVU366
 1451 0088 094B     		ldr	r3, .L82+24
 1452 008a 1878     		ldrb	r0, [r3]
 1453 008c C0B2     		uxtb	r0, r0
 360:Src/main.c    **** 		}
 1454              		.loc 1 360 4 view .LVU367
 1455 008e FFF7FEFF 		bl	USART_SendChar
 1456              	.LVL96:
 356:Src/main.c    **** 			status = "Ultrasonic Distance: ";
 1457              		.loc 1 356 10 view .LVU368
 1458 0092 0024     		movs	r4, #0
 1459 0094 E5E7     		b	.L79
 1460              	.L83:
 1461 0096 C046     		.align	2
 1462              	.L82:
 1463 0098 00E100E0 		.word	-536813312
 1464 009c FF00FFFF 		.word	-65281
 1465 00a0 00000000 		.word	.LC4
 1466 00a4 00000000 		.word	htim2
 1467 00a8 40420F00 		.word	1000000
 1468 00ac 00000000 		.word	incomingCommand
 1469 00b0 00000000 		.word	command
 1470 00b4 00000000 		.word	.LC34
 1471              		.cfi_endproc
 1472              	.LFE49:
 1474              		.global	incomingCommand
 1475              		.section	.bss.incomingCommand,"aw",%nobits
ARM GAS  /tmp/ccPzDniD.s 			page 57


 1478              	incomingCommand:
 1479 0000 00       		.space	1
 1480              		.global	command
 1481              		.section	.bss.command,"aw",%nobits
 1482              		.align	2
 1485              	command:
 1486 0000 0000     		.space	2
 1487              		.global	htim2
 1488              		.section	.bss.htim2,"aw",%nobits
 1489              		.align	2
 1492              	htim2:
 1493 0000 00000000 		.space	64
 1493      00000000 
 1493      00000000 
 1493      00000000 
 1493      00000000 
 1494              		.text
 1495              	.Letext0:
 1496              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 1497              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1498              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1499              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1500              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1501              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1502              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1503              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1504              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1505              		.file 13 "Inc/pins.h"
 1506              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1507              		.file 15 "Inc/main.h"
 1508              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1509              		.file 17 "/usr/arm-none-eabi/include/string.h"
 1510              		.file 18 "<built-in>"
ARM GAS  /tmp/ccPzDniD.s 			page 58


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccPzDniD.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccPzDniD.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccPzDniD.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/ccPzDniD.s:102    .text.LED_Init:00000000 $t
     /tmp/ccPzDniD.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/ccPzDniD.s:151    .text.LED_Init:00000024 $d
     /tmp/ccPzDniD.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccPzDniD.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccPzDniD.s:248    .text.GPIO_AF_Init:00000058 $d
     /tmp/ccPzDniD.s:255    .text.USART_Init:00000000 $t
     /tmp/ccPzDniD.s:261    .text.USART_Init:00000000 USART_Init
     /tmp/ccPzDniD.s:353    .text.USART_Init:0000005c $d
     /tmp/ccPzDniD.s:360    .text.USART_SendChar:00000000 $t
     /tmp/ccPzDniD.s:366    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccPzDniD.s:392    .text.USART_SendChar:00000010 $d
     /tmp/ccPzDniD.s:397    .text.USART_SendString:00000000 $t
     /tmp/ccPzDniD.s:403    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccPzDniD.s:448    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccPzDniD.s:452    .text.ClearCommand:00000000 $t
     /tmp/ccPzDniD.s:458    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccPzDniD.s:498    .text.ClearCommand:00000024 $d
     /tmp/ccPzDniD.s:1485   .bss.command:00000000 command
     /tmp/ccPzDniD.s:1478   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccPzDniD.s:505    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccPzDniD.s:509    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccPzDniD.s:515    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccPzDniD.s:606    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/ccPzDniD.s:614    .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccPzDniD.s:642    .text.ProcessCommand:00000000 $t
     /tmp/ccPzDniD.s:648    .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccPzDniD.s:811    .rodata.ProcessCommand:00000000 $d
     /tmp/ccPzDniD.s:952    .text.ProcessCommand:00000114 $d
     /tmp/ccPzDniD.s:971    .text.GetDistance:00000000 $t
     /tmp/ccPzDniD.s:977    .text.GetDistance:00000000 GetDistance
     /tmp/ccPzDniD.s:991    .text.Error_Handler:00000000 $t
     /tmp/ccPzDniD.s:997    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccPzDniD.s:1029   .text.MX_TIM2_Init:00000000 $t
     /tmp/ccPzDniD.s:1034   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
     /tmp/ccPzDniD.s:1192   .text.MX_TIM2_Init:000000a8 $d
     /tmp/ccPzDniD.s:1492   .bss.htim2:00000000 htim2
     /tmp/ccPzDniD.s:1198   .text.SystemClock_Config:00000000 $t
     /tmp/ccPzDniD.s:1204   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccPzDniD.s:1291   .rodata.main.str1.4:00000000 $d
     /tmp/ccPzDniD.s:1295   .text.main:00000000 $t
     /tmp/ccPzDniD.s:1301   .text.main:00000000 main
     /tmp/ccPzDniD.s:1463   .text.main:00000098 $d
     /tmp/ccPzDniD.s:1479   .bss.incomingCommand:00000000 $d
     /tmp/ccPzDniD.s:1482   .bss.command:00000000 $d
     /tmp/ccPzDniD.s:1489   .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
ARM GAS  /tmp/ccPzDniD.s 			page 59


__aeabi_uidiv
HAL_RCC_GetHCLKFreq
HAL_Delay
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_PWM_Start
