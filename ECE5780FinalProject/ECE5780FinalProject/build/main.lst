ARM GAS  /tmp/ccaJ9T94.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB57:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include "motor.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/ccaJ9T94.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** TIM_HandleTypeDef htim1;
  47:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  48:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  49:Src/main.c    **** #define TRIG_PORT GPIOB
  50:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  51:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  52:Src/main.c    **** #define ECHO_PORT GPIOB
  53:Src/main.c    **** volatile uint32_t pMillis;
  54:Src/main.c    **** volatile uint16_t startTime;
  55:Src/main.c    **** volatile uint16_t Value1 = 0;
  56:Src/main.c    **** volatile uint16_t Value2 = 0;
  57:Src/main.c    **** volatile uint16_t leftDistance = 0;
  58:Src/main.c    **** volatile uint16_t rightDistance = 0;
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  65:Src/main.c    **** void SystemClock_Config(void);
  66:Src/main.c    **** static void MX_GPIO_Init(void);
  67:Src/main.c    **** static void MX_TIM1_Init(void);
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** #define LED_RED GPIO_PIN_6
  75:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  76:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  77:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  78:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  79:Src/main.c    **** 
  80:Src/main.c    **** void LED_Init(uint32_t pins) {
  81:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  82:Src/main.c    **** 
  83:Src/main.c    ****     GPIO_InitTypeDef gpio_led_init = {pins,
  84:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
  85:Src/main.c    ****         GPIO_SPEED_FREQ_LOW,
  86:Src/main.c    ****         GPIO_NOPULL
  87:Src/main.c    ****     };
  88:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpio_led_init);
  89:Src/main.c    **** }
  90:Src/main.c    **** 
ARM GAS  /tmp/ccaJ9T94.s 			page 3


  91:Src/main.c    **** /**
  92:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  93:Src/main.c    ****  *        functions appropriately.
  94:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  95:Src/main.c    ****  */
  96:Src/main.c    **** void GPIO_AF_Init() {
  97:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  98:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  99:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 100:Src/main.c    **** 
 101:Src/main.c    **** 	// uart_pins
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 103:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 104:Src/main.c    **** 
 105:Src/main.c    **** 	// motor_left_pins
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 111:Src/main.c    **** 
 112:Src/main.c    **** 	// motor_right_pins
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 118:Src/main.c    **** 
 119:Src/main.c    **** 	// ultrasonic_left_pins
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 121:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 122:Src/main.c    **** 
 123:Src/main.c    **** 	// ultrasonic_right_pins
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 125:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 126:Src/main.c    **** }
 127:Src/main.c    **** 
 128:Src/main.c    **** /**
 129:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 130:Src/main.c    ****  */
 131:Src/main.c    **** void USART_Init() {
 132:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 133:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//Set baud rate
 136:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 137:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 138:Src/main.c    **** 												//use with the BT adapter
 139:Src/main.c    **** 
 140:Src/main.c    **** 	//Enable transmitter
 141:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 142:Src/main.c    **** 
 143:Src/main.c    **** 	//Enable receiver
 144:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 145:Src/main.c    **** 
 146:Src/main.c    **** 	//Enable the receive register not empty interrupt
 147:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /tmp/ccaJ9T94.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    **** 	//Enable USART3
 150:Src/main.c    **** 	USART3->CR1 |= 1;
 151:Src/main.c    **** }
 152:Src/main.c    **** 
 153:Src/main.c    **** /**
 154:Src/main.c    ****  * @brief Sends a single character on the USART.
 155:Src/main.c    ****  *
 156:Src/main.c    ****  * @param c: the character to be sent
 157:Src/main.c    ****  */
 158:Src/main.c    **** void USART_SendChar(uint8_t c) {
 159:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 160:Src/main.c    **** 		;
 161:Src/main.c    **** 
 162:Src/main.c    **** 	USART3->TDR = c;
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
 166:Src/main.c    ****  * @brief Sends a string on the USART.
 167:Src/main.c    ****  *
 168:Src/main.c    ****  * @param p_string: pointer to string to send
 169:Src/main.c    ****  */
 170:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 171:Src/main.c    **** 	while(*p_string != 0) {
 172:Src/main.c    **** 		USART_SendChar(*p_string);
 173:Src/main.c    **** 		p_string++;
 174:Src/main.c    **** 	}
 175:Src/main.c    **** 	USART_SendChar(0);
 176:Src/main.c    **** }
 177:Src/main.c    **** 
 178:Src/main.c    **** volatile uint8_t command[2];
 179:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 180:Src/main.c    **** 
 181:Src/main.c    **** void ClearCommand(){
 182:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 183:Src/main.c    **** 	memset(command, 0, sizeof(command));
 184:Src/main.c    **** 	incomingCommand = 0;
 185:Src/main.c    **** 	USART_SendString(prompt);
 186:Src/main.c    **** }
 187:Src/main.c    **** 
 188:Src/main.c    **** void USART3_4_IRQHandler(){
 189:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 190:Src/main.c    **** 	incomingCommand = 1;
 191:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 192:Src/main.c    **** 		;
 193:Src/main.c    **** 	if(command[0])
 194:Src/main.c    **** 		if(command[1]){
 195:Src/main.c    **** 			USART_SendString(err);
 196:Src/main.c    **** 			ClearCommand();
 197:Src/main.c    **** 		}
 198:Src/main.c    **** 		else
 199:Src/main.c    **** 			command[1] = USART3->RDR;
 200:Src/main.c    **** 	else
 201:Src/main.c    **** 		command[0] = USART3->RDR;
 202:Src/main.c    **** }
 203:Src/main.c    **** 
 204:Src/main.c    **** void Log(){
ARM GAS  /tmp/ccaJ9T94.s 			page 5


 205:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 206:Src/main.c    **** 	USART_SendString(err);
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** void Proceed(){
 210:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 211:Src/main.c    **** 	USART_SendString(err);
 212:Src/main.c    **** }
 213:Src/main.c    **** 
 214:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 215:Src/main.c    **** 	uint32_t left_motor_pin;
 216:Src/main.c    **** 	uint32_t right_motor_pin;
 217:Src/main.c    **** 	int32_t CH1_DC = 65535;
 218:Src/main.c    **** 
 219:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 220:Src/main.c    **** 
 221:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 222:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 223:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 224:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 225:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 226:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 227:Src/main.c    **** 
 228:Src/main.c    **** 	MotorCommand motorcmd = {0};
 229:Src/main.c    **** 
 230:Src/main.c    **** 	uint8_t* part1;
 231:Src/main.c    **** 	uint8_t part2[15];
 232:Src/main.c    **** 	uint8_t zero = 0;
 233:Src/main.c    **** 	memcpy(part2, &zero, 15);
 234:Src/main.c    **** 
 235:Src/main.c    **** 	switch(direction){
 236:Src/main.c    **** 		case 'w':
 237:Src/main.c    **** 			part1 = forward;
 238:Src/main.c    **** 			motorcmd.dir = FORWARD;
 239:Src/main.c    **** 			break;
 240:Src/main.c    **** 		case 'a':
 241:Src/main.c    **** 			part1 = left;
 242:Src/main.c    **** 			motorcmd.dir = LEFT;
 243:Src/main.c    **** 			break;
 244:Src/main.c    **** 		case 'd':
 245:Src/main.c    **** 			part1 = right;
 246:Src/main.c    **** 			motorcmd.dir = RIGHT;
 247:Src/main.c    **** 			break;
 248:Src/main.c    **** 		case 'l':
 249:Src/main.c    **** 			part1 = log;
 250:Src/main.c    **** 			USART_SendString(part1);
 251:Src/main.c    **** 			Log();
 252:Src/main.c    **** 			ClearCommand();
 253:Src/main.c    **** 			return;
 254:Src/main.c    **** 		case 'p':
 255:Src/main.c    **** 			part1 = proceed;
 256:Src/main.c    **** 			USART_SendString(part1);
 257:Src/main.c    **** 			Proceed();
 258:Src/main.c    **** 			ClearCommand();
 259:Src/main.c    **** 			return;
 260:Src/main.c    **** 		case 'x':
 261:Src/main.c    **** 			part1 = stop;
ARM GAS  /tmp/ccaJ9T94.s 			page 6


 262:Src/main.c    **** 			USART_SendString(part1);
 263:Src/main.c    **** 			motorcmd.dir = OFF;
 264:Src/main.c    **** 			ClearCommand();
 265:Src/main.c    **** 			MoveMotors(&motorcmd);
 266:Src/main.c    **** 			return;
 267:Src/main.c    **** 		default:
 268:Src/main.c    **** 			USART_SendString(err);
 269:Src/main.c    **** 			ClearCommand();
 270:Src/main.c    **** 			return;
 271:Src/main.c    **** 	}
 272:Src/main.c    **** 
 273:Src/main.c    **** 	//these are for "vector commands" only:
 274:Src/main.c    **** 	
 275:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 276:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 277:Src/main.c    **** 		motorcmd.amount = 0;
 278:Src/main.c    **** 	}
 279:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 280:Src/main.c    **** 		USART_SendString(err);
 281:Src/main.c    **** 		ClearCommand();
 282:Src/main.c    **** 		return;
 283:Src/main.c    **** 	}
 284:Src/main.c    **** 	else{
 285:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 286:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 287:Src/main.c    **** 		motorcmd.amount = dist;
 288:Src/main.c    **** 	}
 289:Src/main.c    **** 
 290:Src/main.c    **** 
 291:Src/main.c    **** 	USART_SendString(part1);
 292:Src/main.c    **** 	USART_SendString(part2);
 293:Src/main.c    **** 
 294:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 295:Src/main.c    **** 	HAL_Delay(1000);
 296:Src/main.c    **** 	TIM2->CCR1 = 0;
 297:Src/main.c    **** 
 298:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 299:Src/main.c    **** 	USART_SendString(result);
 300:Src/main.c    **** 
 301:Src/main.c    **** 	ClearCommand();
 302:Src/main.c    **** 
 303:Src/main.c    **** 
 304:Src/main.c    **** 	// Example code while loop
 305:Src/main.c    **** 	//    while (1)
 306:Src/main.c    **** 	//    {
 307:Src/main.c    **** 	//        while(CH1_DC < 65535)
 308:Src/main.c    **** 	//        {
 309:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 310:Src/main.c    **** 	//            CH1_DC += 70;
 311:Src/main.c    **** 	//            HAL_Delay(1);
 312:Src/main.c    **** 	//        }
 313:Src/main.c    **** 	//        while(CH1_DC > 0)
 314:Src/main.c    **** 	//        {
 315:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 316:Src/main.c    **** 	//            CH1_DC -= 70;
 317:Src/main.c    **** 	//            HAL_Delay(1);
 318:Src/main.c    **** 	//        }
ARM GAS  /tmp/ccaJ9T94.s 			page 7


 319:Src/main.c    **** 	//    }
 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** /*
 323:Src/main.c    **** void Ultrasonic_Init(uint32_t pins)
 324:Src/main.c    **** {
 325:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 326:Src/main.c    **** 
 327:Src/main.c    **** 	GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 328:Src/main.c    **** 		GPIO_MODE_INPUT,
 329:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
 330:Src/main.c    **** 		GPIO_NOPULL
 331:Src/main.c    **** 	};
 332:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &gpio_init);
 333:Src/main.c    **** }
 334:Src/main.c    **** */
 335:Src/main.c    **** 
 336:Src/main.c    **** void GetDistance()
 337:Src/main.c    **** {
 338:Src/main.c    **** 
 339:Src/main.c    **** }
 340:Src/main.c    **** 
 341:Src/main.c    **** /* USER CODE END 0 */
 342:Src/main.c    **** 
 343:Src/main.c    **** /**
 344:Src/main.c    ****  * @brief  The application entry point.
 345:Src/main.c    ****  * @retval int
 346:Src/main.c    ****  */
 347:Src/main.c    **** int main(void)
 348:Src/main.c    **** {
 349:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 350:Src/main.c    ****     SystemClock_Config();
 351:Src/main.c    ****     
 352:Src/main.c    ****     //USART Initalizations
 353:Src/main.c    ****     GPIO_AF_Init();
 354:Src/main.c    ****     USART_Init();
 355:Src/main.c    **** 
 356:Src/main.c    ****     motor_init();                           // Initialize motor code
 357:Src/main.c    ****     
 358:Src/main.c    ****     NVIC_EnableIRQ(USART3_4_IRQn);
 359:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 360:Src/main.c    **** 
 361:Src/main.c    ****     uint8_t prompt[] = "CMD> ";
 362:Src/main.c    ****     
 363:Src/main.c    ****     //PWM and Ultrasonic Initalizations
 364:Src/main.c    ****     MX_GPIO_Init();
 365:Src/main.c    ****     MX_TIM1_Init();
 366:Src/main.c    ****     
 367:Src/main.c    ****     HAL_TIM_Base_Start(&htim1);
 368:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 369:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 370:Src/main.c    **** 	
 371:Src/main.c    **** 	while (1) {
 372:Src/main.c    ****         int32_t counter = 0;
 373:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 374:Src/main.c    ****         
 375:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
ARM GAS  /tmp/ccaJ9T94.s 			page 8


 376:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 377:Src/main.c    ****         while (counter < 10){
 378:Src/main.c    ****             counter++;
 379:Src/main.c    ****         }  // wait for 10 us
 380:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 381:Src/main.c    ****         
 382:Src/main.c    ****         
 383:Src/main.c    ****         startTime = HAL_GetTick();
 384:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 385:Src/main.c    ****         
 386:Src/main.c    ****         // wait for the echo pin to go high
 387:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 10 >  HAL_GetTick())
 388:Src/main.c    ****         {
 389:Src/main.c    ****          
 390:Src/main.c    ****         }
 391:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 392:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
 393:Src/main.c    ****         
 394:Src/main.c    **** 
 395:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 396:Src/main.c    ****       // wait for the echo pin to go low
 397:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 50 > HAL_GetTick())
 398:Src/main.c    ****         {
 399:Src/main.c    ****             
 400:Src/main.c    ****         }
 401:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 402:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 403:Src/main.c    **** 
 404:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 405:Src/main.c    ****         leftDistance = (Value2 - Value1);
 406:Src/main.c    ****         if(leftDistance < 10)
 407:Src/main.c    ****         {
 408:Src/main.c    ****             char strLeft[32];
 409:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 410:Src/main.c    **** 			/*
 411:Src/main.c    ****             USART_SendString("Left Ultrasonic: ");
 412:Src/main.c    ****             USART_SendString(strLeft);
 413:Src/main.c    ****             USART_SendString("\n");
 414:Src/main.c    **** 			*/
 415:Src/main.c    ****         }
 416:Src/main.c    ****         
 417:Src/main.c    ****         counter = 0;
 418:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 419:Src/main.c    ****         
 420:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
 421:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 422:Src/main.c    ****         while (counter < 10){
 423:Src/main.c    ****             counter++;
 424:Src/main.c    ****         }  // wait for 10 us
 425:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 426:Src/main.c    ****         
 427:Src/main.c    ****         
 428:Src/main.c    ****         startTime = HAL_GetTick();
 429:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 430:Src/main.c    ****         
 431:Src/main.c    ****         // wait for the echo pin to go high
 432:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 10 >  HAL_GetTick())
ARM GAS  /tmp/ccaJ9T94.s 			page 9


 433:Src/main.c    ****         {
 434:Src/main.c    ****          
 435:Src/main.c    ****         }
 436:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 437:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
 438:Src/main.c    ****         
 439:Src/main.c    **** 
 440:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 441:Src/main.c    ****       // wait for the echo pin to go low
 442:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 50 > HAL_GetTick())
 443:Src/main.c    ****         {
 444:Src/main.c    ****             
 445:Src/main.c    ****         }
 446:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 447:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 448:Src/main.c    **** 
 449:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 450:Src/main.c    ****         rightDistance = (Value2 - Value1);
 451:Src/main.c    ****         if(rightDistance < 10)
 452:Src/main.c    ****         {
 453:Src/main.c    ****             char strRight[32];
 454:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 455:Src/main.c    **** 			/*
 456:Src/main.c    ****             USART_SendString("Right Ultrasonic: ");
 457:Src/main.c    ****             USART_SendString(strRight);
 458:Src/main.c    ****             USART_SendString("\n");
 459:Src/main.c    **** 			*/
 460:Src/main.c    **** 	}
 461:Src/main.c    **** 
 462:Src/main.c    **** 		if(incomingCommand)
 463:Src/main.c    **** 		{
 464:Src/main.c    **** 			if(command[0] != 'w' &&
 465:Src/main.c    **** 					command[0] != 'a' &&
 466:Src/main.c    **** 					command[0] != 'd'){
 467:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 468:Src/main.c    **** 			}
 469:Src/main.c    **** 			if(command[1])
 470:Src/main.c    **** 			{
 471:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 472:Src/main.c    **** 			}
 473:Src/main.c    **** 		}
 474:Src/main.c    **** 	 HAL_Delay(500);
 475:Src/main.c    **** 	}
 476:Src/main.c    **** }
 477:Src/main.c    **** 
 478:Src/main.c    **** /**
 479:Src/main.c    ****  * @brief System Clock Configuration
 480:Src/main.c    ****  * @retval None
 481:Src/main.c    ****  */
 482:Src/main.c    **** void SystemClock_Config(void)
 483:Src/main.c    **** {
 484:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 485:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 486:Src/main.c    **** 
 487:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 488:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 489:Src/main.c    **** 	 */
ARM GAS  /tmp/ccaJ9T94.s 			page 10


 490:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 491:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 492:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 493:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 494:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 495:Src/main.c    **** 	{
 496:Src/main.c    **** 		Error_Handler();
 497:Src/main.c    **** 	}
 498:Src/main.c    **** 
 499:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 500:Src/main.c    **** 	*/
 501:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 502:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 503:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 504:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 505:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 506:Src/main.c    **** 
 507:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 508:Src/main.c    **** 	{
 509:Src/main.c    **** 		Error_Handler();
 510:Src/main.c    **** 	}
 511:Src/main.c    **** }
 512:Src/main.c    **** 
 513:Src/main.c    **** /**
 514:Src/main.c    ****  * @brief TIM2 Initialization Function
 515:Src/main.c    ****  * @param None
 516:Src/main.c    ****  * @retval None
 517:Src/main.c    ****  */
 518:Src/main.c    **** static void MX_TIM1_Init(void)
 519:Src/main.c    **** {
 520:Src/main.c    **** 
 521:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 522:Src/main.c    **** 
 523:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 524:Src/main.c    **** 
 525:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 526:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 527:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 528:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 529:Src/main.c    **** 
 530:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 531:Src/main.c    **** 
 532:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 533:Src/main.c    ****   htim1.Instance = TIM1;
 534:Src/main.c    ****   htim1.Init.Prescaler = 0;
 535:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 536:Src/main.c    ****   htim1.Init.Period = 65535;
 537:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 538:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 539:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 540:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 541:Src/main.c    ****   {
 542:Src/main.c    ****     Error_Handler();
 543:Src/main.c    ****   }
 544:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 545:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 546:Src/main.c    ****   {
ARM GAS  /tmp/ccaJ9T94.s 			page 11


 547:Src/main.c    ****     Error_Handler();
 548:Src/main.c    ****   }
 549:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 550:Src/main.c    ****   {
 551:Src/main.c    ****     Error_Handler();
 552:Src/main.c    ****   }
 553:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 554:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 555:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 556:Src/main.c    ****   {
 557:Src/main.c    ****     Error_Handler();
 558:Src/main.c    ****   }
 559:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 560:Src/main.c    ****   sConfigOC.Pulse = 0;
 561:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 562:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 563:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 564:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 565:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 566:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 567:Src/main.c    ****   {
 568:Src/main.c    ****     Error_Handler();
 569:Src/main.c    ****   }
 570:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 571:Src/main.c    ****   {
 572:Src/main.c    ****     Error_Handler();
 573:Src/main.c    ****   }
 574:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 575:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 576:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 577:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 578:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 579:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 580:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 581:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 582:Src/main.c    ****   {
 583:Src/main.c    ****     Error_Handler();
 584:Src/main.c    ****   }
 585:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 586:Src/main.c    **** 
 587:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 588:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 589:Src/main.c    **** 
 590:Src/main.c    **** }
 591:Src/main.c    **** 
 592:Src/main.c    **** /**
 593:Src/main.c    ****  * @brief GPIO Initialization Function
 594:Src/main.c    ****  * @param None
 595:Src/main.c    ****  * @retval None
 596:Src/main.c    ****  */
 597:Src/main.c    **** static void MX_GPIO_Init(void)
 598:Src/main.c    **** {
  26              		.loc 1 598 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccaJ9T94.s 			page 12


  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 599:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 599 2 view .LVU1
  39              		.loc 1 599 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 600:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 601:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 602:Src/main.c    **** 
 603:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 604:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 604 2 is_stmt 1 view .LVU3
  46              	.LBB11:
  47              		.loc 1 604 2 view .LVU4
  48              		.loc 1 604 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 604 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 604 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE11:
  62              		.loc 1 604 2 view .LVU8
 605:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 606:Src/main.c    **** 
 607:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 608:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 608 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
 609:Src/main.c    **** 
 610:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 611:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 611 2 view .LVU10
  72              		.loc 1 611 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccaJ9T94.s 			page 13


 612:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 612 2 is_stmt 1 view .LVU12
  76              		.loc 1 612 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 613:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 613 2 is_stmt 1 view .LVU14
  79              		.loc 1 613 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 614:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 614 2 is_stmt 1 view .LVU16
  83              		.loc 1 614 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 615:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 615 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 616:Src/main.c    **** 
 617:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 618:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 619:Src/main.c    **** }
  90              		.loc 1 619 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE57:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 80 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 80 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccaJ9T94.s 			page 14


 124 0004 0400     		movs	r4, r0
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 83 5 is_stmt 1 view .LVU22
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 83 22 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 131              		.loc 1 83 22 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  88:Src/main.c    **** }
 137              		.loc 1 88 5 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  89:Src/main.c    **** 
 142              		.loc 1 89 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  89:Src/main.c    **** 
 146              		.loc 1 89 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  96:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 96 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccaJ9T94.s 			page 15


  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 97 2 view .LVU29
 177              	.LBB12:
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 97 2 view .LVU30
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 97 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 97 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 97 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE12:
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 97 2 view .LVU34
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 98 2 view .LVU35
 195              	.LBB13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 98 2 view .LVU36
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 98 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 98 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 98 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 98 2 view .LVU40
  99:Src/main.c    **** 
 211              		.loc 1 99 5 view .LVU41
 212              	.LBB14:
  99:Src/main.c    **** 
 213              		.loc 1 99 5 view .LVU42
  99:Src/main.c    **** 
 214              		.loc 1 99 5 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
ARM GAS  /tmp/ccaJ9T94.s 			page 16


 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 
 220              		.loc 1 99 5 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
  99:Src/main.c    **** 
 224              		.loc 1 99 5 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
 226              	.LBE14:
  99:Src/main.c    **** 
 227              		.loc 1 99 5 view .LVU46
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 102 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
 103:Src/main.c    **** 
 234              		.loc 1 103 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 106 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 107 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 108 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 258              		.loc 1 109 2 view .LVU52
 259 006e 2100     		movs	r1, r4
 260 0070 4C31     		adds	r1, r1, #76
 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 110:Src/main.c    **** 
 264              		.loc 1 110 2 view .LVU53
ARM GAS  /tmp/ccaJ9T94.s 			page 17


 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 113 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 114 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 115 2 view .LVU56
 283 0096 2100     		movs	r1, r4
 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 116 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 117:Src/main.c    **** 
 294              		.loc 1 117 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 120 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 121:Src/main.c    **** 
 306              		.loc 1 121 2 view .LVU60
 307 00be 2100     		movs	r1, r4
 308 00c0 1C31     		adds	r1, r1, #28
 309 00c2 A069     		ldr	r0, [r4, #24]
 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 124 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
ARM GAS  /tmp/ccaJ9T94.s 			page 18


 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 125:Src/main.c    **** }
 318              		.loc 1 125 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL23:
 126:Src/main.c    **** 
 324              		.loc 1 126 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 131:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 131 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 362              		.loc 1 132 2 view .LVU65
 363              	.LBB15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 132 2 view .LVU66
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 132 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
ARM GAS  /tmp/ccaJ9T94.s 			page 19


 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 132 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 132 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 132 2 view .LVU70
 133:Src/main.c    **** 
 380              		.loc 1 133 2 view .LVU71
 133:Src/main.c    **** 
 381              		.loc 1 133 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 133:Src/main.c    **** 
 383              		.loc 1 133 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 136 2 is_stmt 1 view .LVU74
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 136 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 136 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 137:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 137 2 is_stmt 1 view .LVU77
 137:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 137 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 137:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 137 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 137:Src/main.c    **** 												//use with the BT adapter
 403              		.loc 1 137 14 view .LVU80
 404 0034 E060     		str	r0, [r4, #12]
 141:Src/main.c    **** 
 405              		.loc 1 141 2 is_stmt 1 view .LVU81
 141:Src/main.c    **** 
 406              		.loc 1 141 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 141:Src/main.c    **** 
ARM GAS  /tmp/ccaJ9T94.s 			page 20


 408              		.loc 1 141 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 144:Src/main.c    **** 
 412              		.loc 1 144 2 is_stmt 1 view .LVU84
 144:Src/main.c    **** 
 413              		.loc 1 144 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 144:Src/main.c    **** 
 415              		.loc 1 144 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 147:Src/main.c    **** 
 419              		.loc 1 147 2 is_stmt 1 view .LVU87
 147:Src/main.c    **** 
 420              		.loc 1 147 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
 147:Src/main.c    **** 
 422              		.loc 1 147 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 150:Src/main.c    **** }
 426              		.loc 1 150 2 is_stmt 1 view .LVU90
 150:Src/main.c    **** }
 427              		.loc 1 150 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 150:Src/main.c    **** }
 429              		.loc 1 150 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 151:Src/main.c    **** 
 433              		.loc 1 151 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
 448              		.global	USART_SendChar
 449              		.syntax unified
 450              		.code	16
 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 158:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 158 32 is_stmt 1 view -0
ARM GAS  /tmp/ccaJ9T94.s 			page 21


 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 159:Src/main.c    **** 		;
 462              		.loc 1 159 8 discriminator 1 view .LVU95
 159:Src/main.c    **** 		;
 463              		.loc 1 159 16 is_stmt 0 discriminator 1 view .LVU96
 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 159:Src/main.c    **** 		;
 466              		.loc 1 159 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 162:Src/main.c    **** }
 469              		.loc 1 162 2 is_stmt 1 view .LVU98
 162:Src/main.c    **** }
 470              		.loc 1 162 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
 163:Src/main.c    **** 
 473              		.loc 1 163 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 170:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 170 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 170:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 170 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 171 2 is_stmt 1 view .LVU103
 171:Src/main.c    **** 		USART_SendChar(*p_string);
ARM GAS  /tmp/ccaJ9T94.s 			page 22


 505              		.loc 1 171 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 172:Src/main.c    **** 		p_string++;
 509              		.loc 1 172 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 173:Src/main.c    **** 	}
 512              		.loc 1 173 3 view .LVU106
 173:Src/main.c    **** 	}
 513              		.loc 1 173 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 171 18 is_stmt 1 view .LVU108
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 171 8 is_stmt 0 view .LVU109
 519 000c 2078     		ldrb	r0, [r4]
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 171 18 view .LVU110
 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 175:Src/main.c    **** }
 523              		.loc 1 175 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 176:Src/main.c    **** 
 526              		.loc 1 176 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 176:Src/main.c    **** 
 529              		.loc 1 176 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
 546              	.LFB48:
 181:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 547              		.loc 1 181 20 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
ARM GAS  /tmp/ccaJ9T94.s 			page 23


 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 182 2 view .LVU115
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 182 10 is_stmt 0 view .LVU116
 560 0004 074B     		ldr	r3, .L22
 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 183:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 183 2 is_stmt 1 view .LVU117
 567 0010 054B     		ldr	r3, .L22+4
 568 0012 0022     		movs	r2, #0
 569 0014 1A80     		strh	r2, [r3]
 184:Src/main.c    **** 	USART_SendString(prompt);
 570              		.loc 1 184 2 view .LVU118
 184:Src/main.c    **** 	USART_SendString(prompt);
 571              		.loc 1 184 18 is_stmt 0 view .LVU119
 572 0016 054B     		ldr	r3, .L22+8
 573 0018 1A70     		strb	r2, [r3]
 185:Src/main.c    **** }
 574              		.loc 1 185 2 is_stmt 1 view .LVU120
 575 001a 6846     		mov	r0, sp
 576 001c FFF7FEFF 		bl	USART_SendString
 577              	.LVL33:
 186:Src/main.c    **** 
 578              		.loc 1 186 1 is_stmt 0 view .LVU121
 579 0020 03B0     		add	sp, sp, #12
 580              		@ sp needed
 581 0022 00BD     		pop	{pc}
 582              	.L23:
 583              		.align	2
 584              	.L22:
 585 0024 00000000 		.word	.LC21
 586 0028 00000000 		.word	command
 587 002c 00000000 		.word	incomingCommand
 588              		.cfi_endproc
 589              	.LFE48:
 591              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 592              		.align	2
 593              	.LC25:
 594 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 594      616E6420 
 594      746F6F20 
 594      6C6F6E67 
 594      210A00
 595              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 596              		.align	1
 597              		.global	USART3_4_IRQHandler
 598              		.syntax unified
 599              		.code	16
ARM GAS  /tmp/ccaJ9T94.s 			page 24


 600              		.thumb_func
 602              	USART3_4_IRQHandler:
 603              	.LFB49:
 188:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 604              		.loc 1 188 27 is_stmt 1 view -0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 24
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608 0000 30B5     		push	{r4, r5, lr}
 609              	.LCFI11:
 610              		.cfi_def_cfa_offset 12
 611              		.cfi_offset 4, -12
 612              		.cfi_offset 5, -8
 613              		.cfi_offset 14, -4
 614 0002 87B0     		sub	sp, sp, #28
 615              	.LCFI12:
 616              		.cfi_def_cfa_offset 40
 189:Src/main.c    **** 	incomingCommand = 1;
 617              		.loc 1 189 2 view .LVU123
 189:Src/main.c    **** 	incomingCommand = 1;
 618              		.loc 1 189 10 is_stmt 0 view .LVU124
 619 0004 01AA     		add	r2, sp, #4
 620 0006 164B     		ldr	r3, .L31
 621 0008 1800     		movs	r0, r3
 622 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 623 000c 38C2     		stmia	r2!, {r3, r4, r5}
 624 000e 0368     		ldr	r3, [r0]
 625 0010 1360     		str	r3, [r2]
 626 0012 8388     		ldrh	r3, [r0, #4]
 627 0014 9380     		strh	r3, [r2, #4]
 628 0016 8379     		ldrb	r3, [r0, #6]
 629 0018 9371     		strb	r3, [r2, #6]
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 630              		.loc 1 190 2 is_stmt 1 view .LVU125
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 631              		.loc 1 190 18 is_stmt 0 view .LVU126
 632 001a 124B     		ldr	r3, .L31+4
 633 001c 0122     		movs	r2, #1
 634 001e 1A70     		strb	r2, [r3]
 191:Src/main.c    **** 		;
 635              		.loc 1 191 2 is_stmt 1 view .LVU127
 636              	.L25:
 191:Src/main.c    **** 		;
 637              		.loc 1 191 8 discriminator 1 view .LVU128
 191:Src/main.c    **** 		;
 638              		.loc 1 191 16 is_stmt 0 discriminator 1 view .LVU129
 639 0020 114B     		ldr	r3, .L31+8
 640 0022 DB69     		ldr	r3, [r3, #28]
 191:Src/main.c    **** 		;
 641              		.loc 1 191 8 discriminator 1 view .LVU130
 642 0024 9B06     		lsls	r3, r3, #26
 643 0026 FBD5     		bpl	.L25
 193:Src/main.c    **** 		if(command[1]){
 644              		.loc 1 193 2 is_stmt 1 view .LVU131
 193:Src/main.c    **** 		if(command[1]){
 645              		.loc 1 193 12 is_stmt 0 view .LVU132
 646 0028 104B     		ldr	r3, .L31+12
ARM GAS  /tmp/ccaJ9T94.s 			page 25


 647 002a 1B78     		ldrb	r3, [r3]
 193:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 193 4 view .LVU133
 649 002c 002B     		cmp	r3, #0
 650 002e 0FD0     		beq	.L26
 194:Src/main.c    **** 			USART_SendString(err);
 651              		.loc 1 194 3 is_stmt 1 view .LVU134
 194:Src/main.c    **** 			USART_SendString(err);
 652              		.loc 1 194 13 is_stmt 0 view .LVU135
 653 0030 0E4B     		ldr	r3, .L31+12
 654 0032 5B78     		ldrb	r3, [r3, #1]
 194:Src/main.c    **** 			USART_SendString(err);
 655              		.loc 1 194 5 view .LVU136
 656 0034 002B     		cmp	r3, #0
 657 0036 05D1     		bne	.L30
 199:Src/main.c    **** 	else
 658              		.loc 1 199 4 is_stmt 1 view .LVU137
 199:Src/main.c    **** 	else
 659              		.loc 1 199 23 is_stmt 0 view .LVU138
 660 0038 0B4B     		ldr	r3, .L31+8
 661 003a 9B8C     		ldrh	r3, [r3, #36]
 199:Src/main.c    **** 	else
 662              		.loc 1 199 15 view .LVU139
 663 003c DBB2     		uxtb	r3, r3
 664 003e 0B4A     		ldr	r2, .L31+12
 665 0040 5370     		strb	r3, [r2, #1]
 666 0042 0AE0     		b	.L24
 667              	.L30:
 195:Src/main.c    **** 			ClearCommand();
 668              		.loc 1 195 4 is_stmt 1 view .LVU140
 669 0044 01A8     		add	r0, sp, #4
 670 0046 FFF7FEFF 		bl	USART_SendString
 671              	.LVL34:
 196:Src/main.c    **** 		}
 672              		.loc 1 196 4 view .LVU141
 673 004a FFF7FEFF 		bl	ClearCommand
 674              	.LVL35:
 675 004e 04E0     		b	.L24
 676              	.L26:
 201:Src/main.c    **** }
 677              		.loc 1 201 3 view .LVU142
 201:Src/main.c    **** }
 678              		.loc 1 201 22 is_stmt 0 view .LVU143
 679 0050 054B     		ldr	r3, .L31+8
 680 0052 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** }
 681              		.loc 1 201 14 view .LVU144
 682 0054 DBB2     		uxtb	r3, r3
 683 0056 054A     		ldr	r2, .L31+12
 684 0058 1370     		strb	r3, [r2]
 685              	.L24:
 202:Src/main.c    **** 
 686              		.loc 1 202 1 view .LVU145
 687 005a 07B0     		add	sp, sp, #28
 688              		@ sp needed
 689 005c 30BD     		pop	{r4, r5, pc}
 690              	.L32:
ARM GAS  /tmp/ccaJ9T94.s 			page 26


 691 005e C046     		.align	2
 692              	.L31:
 693 0060 00000000 		.word	.LC25
 694 0064 00000000 		.word	incomingCommand
 695 0068 00480040 		.word	1073760256
 696 006c 00000000 		.word	command
 697              		.cfi_endproc
 698              	.LFE49:
 700              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 701              		.align	2
 702              	.LC29:
 703 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 703      79657420 
 703      696D706C 
 703      656D656E 
 703      7465640A 
 704              		.section	.text.Log,"ax",%progbits
 705              		.align	1
 706              		.global	Log
 707              		.syntax unified
 708              		.code	16
 709              		.thumb_func
 711              	Log:
 712              	.LFB50:
 204:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 713              		.loc 1 204 11 is_stmt 1 view -0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 717 0000 10B5     		push	{r4, lr}
 718              	.LCFI13:
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 4, -8
 721              		.cfi_offset 14, -4
 205:Src/main.c    **** 	USART_SendString(err);
 722              		.loc 1 205 2 view .LVU147
 723              	.LVL36:
 206:Src/main.c    **** }
 724              		.loc 1 206 2 view .LVU148
 725 0002 0248     		ldr	r0, .L34
 726 0004 FFF7FEFF 		bl	USART_SendString
 727              	.LVL37:
 207:Src/main.c    **** 
 728              		.loc 1 207 1 is_stmt 0 view .LVU149
 729              		@ sp needed
 730 0008 10BD     		pop	{r4, pc}
 731              	.L35:
 732 000a C046     		.align	2
 733              	.L34:
 734 000c 00000000 		.word	.LC29
 735              		.cfi_endproc
 736              	.LFE50:
 738              		.section	.text.Proceed,"ax",%progbits
 739              		.align	1
 740              		.global	Proceed
 741              		.syntax unified
 742              		.code	16
ARM GAS  /tmp/ccaJ9T94.s 			page 27


 743              		.thumb_func
 745              	Proceed:
 746              	.LFB51:
 209:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 747              		.loc 1 209 15 is_stmt 1 view -0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751 0000 10B5     		push	{r4, lr}
 752              	.LCFI14:
 753              		.cfi_def_cfa_offset 8
 754              		.cfi_offset 4, -8
 755              		.cfi_offset 14, -4
 210:Src/main.c    **** 	USART_SendString(err);
 756              		.loc 1 210 2 view .LVU151
 757              	.LVL38:
 211:Src/main.c    **** }
 758              		.loc 1 211 2 view .LVU152
 759 0002 0248     		ldr	r0, .L37
 760 0004 FFF7FEFF 		bl	USART_SendString
 761              	.LVL39:
 212:Src/main.c    **** 
 762              		.loc 1 212 1 is_stmt 0 view .LVU153
 763              		@ sp needed
 764 0008 10BD     		pop	{r4, pc}
 765              	.L38:
 766 000a C046     		.align	2
 767              	.L37:
 768 000c 00000000 		.word	.LC29
 769              		.cfi_endproc
 770              	.LFE51:
 772              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 773              		.align	2
 774              	.LC47:
 775 0000 696E6465 		.ascii	"indefinitely\012\000"
 775      66696E69 
 775      74656C79 
 775      0A00
 776 000e 0000     		.align	2
 777              	.LC49:
 778 0010 25640A00 		.ascii	"%d\012\000"
 779              		.align	2
 780              	.LC32:
 781 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 781      523A2049 
 781      6E76616C 
 781      69642063 
 781      6F6D6D61 
 782 002d 000000   		.align	2
 783              	.LC34:
 784 0030 4D6F7669 		.ascii	"Moving forward \000"
 784      6E672066 
 784      6F727761 
 784      72642000 
 785              		.align	2
 786              	.LC36:
 787 0040 5475726E 		.ascii	"Turning left \000"
ARM GAS  /tmp/ccaJ9T94.s 			page 28


 787      696E6720 
 787      6C656674 
 787      2000
 788 004e 0000     		.align	2
 789              	.LC38:
 790 0050 5475726E 		.ascii	"Turning right \000"
 790      696E6720 
 790      72696768 
 790      742000
 791 005f 00       		.align	2
 792              	.LC40:
 793 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 793      696E6720 
 793      73656E73 
 793      6F722064 
 793      6174610A 
 794 0075 000000   		.align	2
 795              	.LC42:
 796 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 796      72696E67 
 796      20617574 
 796      6F6E6F6D 
 796      6F757320 
 797 0095 000000   		.align	2
 798              	.LC44:
 799 0098 53746F70 		.ascii	"Stopping all motors!\012\000"
 799      70696E67 
 799      20616C6C 
 799      206D6F74 
 799      6F727321 
 800              		.section	.text.ProcessCommand,"ax",%progbits
 801              		.align	1
 802              		.global	ProcessCommand
 803              		.syntax unified
 804              		.code	16
 805              		.thumb_func
 807              	ProcessCommand:
 808              	.LVL40:
 809              	.LFB52:
 214:Src/main.c    **** 	uint32_t left_motor_pin;
 810              		.loc 1 214 57 is_stmt 1 view -0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 184
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 214:Src/main.c    **** 	uint32_t left_motor_pin;
 814              		.loc 1 214 57 is_stmt 0 view .LVU155
 815 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 816              	.LCFI15:
 817              		.cfi_def_cfa_offset 20
 818              		.cfi_offset 4, -20
 819              		.cfi_offset 5, -16
 820              		.cfi_offset 6, -12
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 0002 AFB0     		sub	sp, sp, #188
 824              	.LCFI16:
 825              		.cfi_def_cfa_offset 208
ARM GAS  /tmp/ccaJ9T94.s 			page 29


 826 0004 0400     		movs	r4, r0
 827 0006 0D00     		movs	r5, r1
 215:Src/main.c    **** 	uint32_t right_motor_pin;
 828              		.loc 1 215 2 is_stmt 1 view .LVU156
 216:Src/main.c    **** 	int32_t CH1_DC = 65535;
 829              		.loc 1 216 2 view .LVU157
 217:Src/main.c    **** 
 830              		.loc 1 217 2 view .LVU158
 831              	.LVL41:
 219:Src/main.c    **** 
 832              		.loc 1 219 2 view .LVU159
 219:Src/main.c    **** 
 833              		.loc 1 219 10 is_stmt 0 view .LVU160
 834 0008 27A9     		add	r1, sp, #156
 835              	.LVL42:
 219:Src/main.c    **** 
 836              		.loc 1 219 10 view .LVU161
 837 000a 5C4B     		ldr	r3, .L56
 838 000c 0A00     		movs	r2, r1
 839 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 840 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 841              	.LVL43:
 219:Src/main.c    **** 
 842              		.loc 1 219 10 view .LVU162
 843 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 844 0014 43C2     		stmia	r2!, {r0, r1, r6}
 845 0016 1B78     		ldrb	r3, [r3]
 846 0018 1370     		strb	r3, [r2]
 221:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 847              		.loc 1 221 2 is_stmt 1 view .LVU163
 221:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 848              		.loc 1 221 10 is_stmt 0 view .LVU164
 849 001a 23AA     		add	r2, sp, #140
 850 001c 584B     		ldr	r3, .L56+4
 851 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 852 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 853 0022 1B68     		ldr	r3, [r3]
 854 0024 1360     		str	r3, [r2]
 222:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 855              		.loc 1 222 2 is_stmt 1 view .LVU165
 222:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 856              		.loc 1 222 10 is_stmt 0 view .LVU166
 857 0026 1FAA     		add	r2, sp, #124
 858 0028 564B     		ldr	r3, .L56+8
 859 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 860 002c C1C2     		stmia	r2!, {r0, r6, r7}
 861 002e 1B88     		ldrh	r3, [r3]
 862 0030 1380     		strh	r3, [r2]
 223:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 863              		.loc 1 223 2 is_stmt 1 view .LVU167
 223:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 864              		.loc 1 223 10 is_stmt 0 view .LVU168
 865 0032 1BAA     		add	r2, sp, #108
 866 0034 544B     		ldr	r3, .L56+12
 867 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 868 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 869 003a 1100     		movs	r1, r2
ARM GAS  /tmp/ccaJ9T94.s 			page 30


 870 003c 1A88     		ldrh	r2, [r3]
 871 003e 0A80     		strh	r2, [r1]
 872 0040 9B78     		ldrb	r3, [r3, #2]
 873 0042 8B70     		strb	r3, [r1, #2]
 224:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 874              		.loc 1 224 2 is_stmt 1 view .LVU169
 224:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 875              		.loc 1 224 10 is_stmt 0 view .LVU170
 876 0044 15A9     		add	r1, sp, #84
 877 0046 514B     		ldr	r3, .L56+16
 878 0048 0A00     		movs	r2, r1
 879 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 880 004c C1C2     		stmia	r2!, {r0, r6, r7}
 881 004e 03CB     		ldmia	r3!, {r0, r1}
 882 0050 03C2     		stmia	r2!, {r0, r1}
 883 0052 1B78     		ldrb	r3, [r3]
 884 0054 1370     		strb	r3, [r2]
 225:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 885              		.loc 1 225 2 is_stmt 1 view .LVU171
 225:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 886              		.loc 1 225 10 is_stmt 0 view .LVU172
 887 0056 0DA9     		add	r1, sp, #52
 888 0058 4D4B     		ldr	r3, .L56+20
 889 005a 0A00     		movs	r2, r1
 890 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 891 005e C1C2     		stmia	r2!, {r0, r6, r7}
 892 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 893 0062 43C2     		stmia	r2!, {r0, r1, r6}
 894 0064 1968     		ldr	r1, [r3]
 895 0066 1160     		str	r1, [r2]
 896 0068 1B79     		ldrb	r3, [r3, #4]
 897 006a 1371     		strb	r3, [r2, #4]
 226:Src/main.c    **** 
 898              		.loc 1 226 2 is_stmt 1 view .LVU173
 226:Src/main.c    **** 
 899              		.loc 1 226 10 is_stmt 0 view .LVU174
 900 006c 07A9     		add	r1, sp, #28
 901 006e 494B     		ldr	r3, .L56+24
 902 0070 0A00     		movs	r2, r1
 903 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 904 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 905 0076 03CB     		ldmia	r3!, {r0, r1}
 906 0078 03C2     		stmia	r2!, {r0, r1}
 907 007a 1B88     		ldrh	r3, [r3]
 908 007c 1380     		strh	r3, [r2]
 228:Src/main.c    **** 
 909              		.loc 1 228 2 is_stmt 1 view .LVU175
 228:Src/main.c    **** 
 910              		.loc 1 228 15 is_stmt 0 view .LVU176
 911 007e 06AB     		add	r3, sp, #24
 912 0080 0022     		movs	r2, #0
 913 0082 1A80     		strh	r2, [r3]
 230:Src/main.c    **** 	uint8_t part2[15];
 914              		.loc 1 230 2 is_stmt 1 view .LVU177
 231:Src/main.c    **** 	uint8_t zero = 0;
 915              		.loc 1 231 2 view .LVU178
 232:Src/main.c    **** 	memcpy(part2, &zero, 15);
ARM GAS  /tmp/ccaJ9T94.s 			page 31


 916              		.loc 1 232 2 view .LVU179
 232:Src/main.c    **** 	memcpy(part2, &zero, 15);
 917              		.loc 1 232 10 is_stmt 0 view .LVU180
 918 0084 6B46     		mov	r3, sp
 919 0086 D91D     		adds	r1, r3, #7
 920 0088 0023     		movs	r3, #0
 921 008a 0B70     		strb	r3, [r1]
 233:Src/main.c    **** 
 922              		.loc 1 233 2 is_stmt 1 view .LVU181
 923 008c 0F32     		adds	r2, r2, #15
 924 008e 02A8     		add	r0, sp, #8
 925 0090 FFF7FEFF 		bl	memcpy
 926              	.LVL44:
 235:Src/main.c    **** 		case 'w':
 927              		.loc 1 235 2 view .LVU182
 928 0094 2300     		movs	r3, r4
 929 0096 613B     		subs	r3, r3, #97
 930 0098 DAB2     		uxtb	r2, r3
 931 009a 172A     		cmp	r2, #23
 932 009c 53D8     		bhi	.L40
 933 009e 9300     		lsls	r3, r2, #2
 934 00a0 3D4A     		ldr	r2, .L56+28
 935 00a2 D358     		ldr	r3, [r2, r3]
 936 00a4 9F46     		mov	pc, r3
 937              		.section	.rodata.ProcessCommand,"a",%progbits
 938              		.align	2
 939              	.L42:
 940 0000 A6000000 		.word	.L47
 941 0004 46010000 		.word	.L40
 942 0008 46010000 		.word	.L40
 943 000c 04010000 		.word	.L46
 944 0010 46010000 		.word	.L40
 945 0014 46010000 		.word	.L40
 946 0018 46010000 		.word	.L40
 947 001c 46010000 		.word	.L40
 948 0020 46010000 		.word	.L40
 949 0024 46010000 		.word	.L40
 950 0028 46010000 		.word	.L40
 951 002c 0E010000 		.word	.L45
 952 0030 46010000 		.word	.L40
 953 0034 46010000 		.word	.L40
 954 0038 46010000 		.word	.L40
 955 003c 1E010000 		.word	.L44
 956 0040 46010000 		.word	.L40
 957 0044 46010000 		.word	.L40
 958 0048 46010000 		.word	.L40
 959 004c 46010000 		.word	.L40
 960 0050 46010000 		.word	.L40
 961 0054 46010000 		.word	.L40
 962 0058 52010000 		.word	.L53
 963 005c 2E010000 		.word	.L41
 964              		.section	.text.ProcessCommand
 965              	.L47:
 241:Src/main.c    **** 			motorcmd.dir = LEFT;
 966              		.loc 1 241 4 view .LVU183
 967              	.LVL45:
 242:Src/main.c    **** 			break;
ARM GAS  /tmp/ccaJ9T94.s 			page 32


 968              		.loc 1 242 4 view .LVU184
 242:Src/main.c    **** 			break;
 969              		.loc 1 242 17 is_stmt 0 view .LVU185
 970 00a6 06AB     		add	r3, sp, #24
 971 00a8 0122     		movs	r2, #1
 972 00aa 1A70     		strb	r2, [r3]
 243:Src/main.c    **** 		case 'd':
 973              		.loc 1 243 4 is_stmt 1 view .LVU186
 241:Src/main.c    **** 			motorcmd.dir = LEFT;
 974              		.loc 1 241 10 is_stmt 0 view .LVU187
 975 00ac 1FAE     		add	r6, sp, #124
 976              	.LVL46:
 977              	.L43:
 275:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 978              		.loc 1 275 2 is_stmt 1 view .LVU188
 275:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 979              		.loc 1 275 4 is_stmt 0 view .LVU189
 980 00ae 302D     		cmp	r5, #48
 981 00b0 51D0     		beq	.L54
 982              	.L49:
 279:Src/main.c    **** 		USART_SendString(err);
 983              		.loc 1 279 7 is_stmt 1 view .LVU190
 279:Src/main.c    **** 		USART_SendString(err);
 984              		.loc 1 279 25 is_stmt 0 view .LVU191
 985 00b2 2B00     		movs	r3, r5
 986 00b4 313B     		subs	r3, r3, #49
 987 00b6 DBB2     		uxtb	r3, r3
 279:Src/main.c    **** 		USART_SendString(err);
 988              		.loc 1 279 9 view .LVU192
 989 00b8 082B     		cmp	r3, #8
 990 00ba 58D8     		bhi	.L55
 991              	.LBB16:
 285:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 992              		.loc 1 285 3 is_stmt 1 view .LVU193
 285:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 993              		.loc 1 285 11 is_stmt 0 view .LVU194
 994 00bc 1424     		movs	r4, #20
 995 00be 6C43     		muls	r4, r5
 996 00c0 4034     		adds	r4, r4, #64
 997 00c2 E4B2     		uxtb	r4, r4
 998              	.LVL47:
 286:Src/main.c    **** 		motorcmd.amount = dist;
 999              		.loc 1 286 3 is_stmt 1 view .LVU195
 1000 00c4 3549     		ldr	r1, .L56+32
 1001 00c6 2200     		movs	r2, r4
 1002 00c8 02A8     		add	r0, sp, #8
 1003 00ca FFF7FEFF 		bl	sprintf
 1004              	.LVL48:
 287:Src/main.c    **** 	}
 1005              		.loc 1 287 3 view .LVU196
 287:Src/main.c    **** 	}
 1006              		.loc 1 287 19 is_stmt 0 view .LVU197
 1007 00ce 06AB     		add	r3, sp, #24
 1008 00d0 5C70     		strb	r4, [r3, #1]
 1009              	.LVL49:
 1010              	.L50:
 287:Src/main.c    **** 	}
ARM GAS  /tmp/ccaJ9T94.s 			page 33


 1011              		.loc 1 287 19 view .LVU198
 1012              	.LBE16:
 291:Src/main.c    **** 	USART_SendString(part2);
 1013              		.loc 1 291 2 is_stmt 1 view .LVU199
 1014 00d2 3000     		movs	r0, r6
 1015 00d4 FFF7FEFF 		bl	USART_SendString
 1016              	.LVL50:
 292:Src/main.c    **** 
 1017              		.loc 1 292 2 view .LVU200
 1018 00d8 02A8     		add	r0, sp, #8
 1019 00da FFF7FEFF 		bl	USART_SendString
 1020              	.LVL51:
 294:Src/main.c    **** 	HAL_Delay(1000);
 1021              		.loc 1 294 2 view .LVU201
 294:Src/main.c    **** 	HAL_Delay(1000);
 1022              		.loc 1 294 13 is_stmt 0 view .LVU202
 1023 00de 8024     		movs	r4, #128
 1024 00e0 E405     		lsls	r4, r4, #23
 1025 00e2 2F4B     		ldr	r3, .L56+36
 1026 00e4 6363     		str	r3, [r4, #52]
 295:Src/main.c    **** 	TIM2->CCR1 = 0;
 1027              		.loc 1 295 2 is_stmt 1 view .LVU203
 1028 00e6 FA20     		movs	r0, #250
 1029 00e8 8000     		lsls	r0, r0, #2
 1030 00ea FFF7FEFF 		bl	HAL_Delay
 1031              	.LVL52:
 296:Src/main.c    **** 
 1032              		.loc 1 296 2 view .LVU204
 296:Src/main.c    **** 
 1033              		.loc 1 296 13 is_stmt 0 view .LVU205
 1034 00ee 0023     		movs	r3, #0
 1035 00f0 6363     		str	r3, [r4, #52]
 298:Src/main.c    **** 	USART_SendString(result);
 1036              		.loc 1 298 2 is_stmt 1 view .LVU206
 298:Src/main.c    **** 	USART_SendString(result);
 1037              		.loc 1 298 20 is_stmt 0 view .LVU207
 1038 00f2 06A8     		add	r0, sp, #24
 1039 00f4 FFF7FEFF 		bl	MoveMotors
 1040              	.LVL53:
 299:Src/main.c    **** 
 1041              		.loc 1 299 2 is_stmt 1 view .LVU208
 1042 00f8 FFF7FEFF 		bl	USART_SendString
 1043              	.LVL54:
 301:Src/main.c    **** 
 1044              		.loc 1 301 2 view .LVU209
 1045 00fc FFF7FEFF 		bl	ClearCommand
 1046              	.LVL55:
 1047              	.L39:
 320:Src/main.c    **** 
 1048              		.loc 1 320 1 is_stmt 0 view .LVU210
 1049 0100 2FB0     		add	sp, sp, #188
 1050              		@ sp needed
 1051 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 1052              	.L46:
 245:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1053              		.loc 1 245 4 is_stmt 1 view .LVU211
 1054              	.LVL56:
ARM GAS  /tmp/ccaJ9T94.s 			page 34


 246:Src/main.c    **** 			break;
 1055              		.loc 1 246 4 view .LVU212
 246:Src/main.c    **** 			break;
 1056              		.loc 1 246 17 is_stmt 0 view .LVU213
 1057 0104 06AB     		add	r3, sp, #24
 1058 0106 0222     		movs	r2, #2
 1059 0108 1A70     		strb	r2, [r3]
 247:Src/main.c    **** 		case 'l':
 1060              		.loc 1 247 4 is_stmt 1 view .LVU214
 245:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1061              		.loc 1 245 10 is_stmt 0 view .LVU215
 1062 010a 1BAE     		add	r6, sp, #108
 1063              	.LVL57:
 247:Src/main.c    **** 		case 'l':
 1064              		.loc 1 247 4 view .LVU216
 1065 010c CFE7     		b	.L43
 1066              	.LVL58:
 1067              	.L45:
 249:Src/main.c    **** 			USART_SendString(part1);
 1068              		.loc 1 249 4 is_stmt 1 view .LVU217
 250:Src/main.c    **** 			Log();
 1069              		.loc 1 250 4 view .LVU218
 1070 010e 15A8     		add	r0, sp, #84
 1071              	.LVL59:
 250:Src/main.c    **** 			Log();
 1072              		.loc 1 250 4 is_stmt 0 view .LVU219
 1073 0110 FFF7FEFF 		bl	USART_SendString
 1074              	.LVL60:
 251:Src/main.c    **** 			ClearCommand();
 1075              		.loc 1 251 4 is_stmt 1 view .LVU220
 1076 0114 FFF7FEFF 		bl	Log
 1077              	.LVL61:
 252:Src/main.c    **** 			return;
 1078              		.loc 1 252 4 view .LVU221
 1079 0118 FFF7FEFF 		bl	ClearCommand
 1080              	.LVL62:
 253:Src/main.c    **** 		case 'p':
 1081              		.loc 1 253 4 view .LVU222
 1082 011c F0E7     		b	.L39
 1083              	.LVL63:
 1084              	.L44:
 255:Src/main.c    **** 			USART_SendString(part1);
 1085              		.loc 1 255 4 view .LVU223
 256:Src/main.c    **** 			Proceed();
 1086              		.loc 1 256 4 view .LVU224
 1087 011e 0DA8     		add	r0, sp, #52
 1088              	.LVL64:
 256:Src/main.c    **** 			Proceed();
 1089              		.loc 1 256 4 is_stmt 0 view .LVU225
 1090 0120 FFF7FEFF 		bl	USART_SendString
 1091              	.LVL65:
 257:Src/main.c    **** 			ClearCommand();
 1092              		.loc 1 257 4 is_stmt 1 view .LVU226
 1093 0124 FFF7FEFF 		bl	Proceed
 1094              	.LVL66:
 258:Src/main.c    **** 			return;
 1095              		.loc 1 258 4 view .LVU227
ARM GAS  /tmp/ccaJ9T94.s 			page 35


 1096 0128 FFF7FEFF 		bl	ClearCommand
 1097              	.LVL67:
 259:Src/main.c    **** 		case 'x':
 1098              		.loc 1 259 4 view .LVU228
 1099 012c E8E7     		b	.L39
 1100              	.LVL68:
 1101              	.L41:
 261:Src/main.c    **** 			USART_SendString(part1);
 1102              		.loc 1 261 4 view .LVU229
 262:Src/main.c    **** 			motorcmd.dir = OFF;
 1103              		.loc 1 262 4 view .LVU230
 1104 012e 07A8     		add	r0, sp, #28
 1105              	.LVL69:
 262:Src/main.c    **** 			motorcmd.dir = OFF;
 1106              		.loc 1 262 4 is_stmt 0 view .LVU231
 1107 0130 FFF7FEFF 		bl	USART_SendString
 1108              	.LVL70:
 263:Src/main.c    **** 			ClearCommand();
 1109              		.loc 1 263 4 is_stmt 1 view .LVU232
 263:Src/main.c    **** 			ClearCommand();
 1110              		.loc 1 263 17 is_stmt 0 view .LVU233
 1111 0134 06AC     		add	r4, sp, #24
 1112 0136 0423     		movs	r3, #4
 1113 0138 2370     		strb	r3, [r4]
 264:Src/main.c    **** 			MoveMotors(&motorcmd);
 1114              		.loc 1 264 4 is_stmt 1 view .LVU234
 1115 013a FFF7FEFF 		bl	ClearCommand
 1116              	.LVL71:
 265:Src/main.c    **** 			return;
 1117              		.loc 1 265 4 view .LVU235
 1118 013e 2000     		movs	r0, r4
 1119 0140 FFF7FEFF 		bl	MoveMotors
 1120              	.LVL72:
 266:Src/main.c    **** 		default:
 1121              		.loc 1 266 4 view .LVU236
 1122 0144 DCE7     		b	.L39
 1123              	.LVL73:
 1124              	.L40:
 268:Src/main.c    **** 			ClearCommand();
 1125              		.loc 1 268 4 view .LVU237
 1126 0146 27A8     		add	r0, sp, #156
 1127 0148 FFF7FEFF 		bl	USART_SendString
 1128              	.LVL74:
 269:Src/main.c    **** 			return;
 1129              		.loc 1 269 4 view .LVU238
 1130 014c FFF7FEFF 		bl	ClearCommand
 1131              	.LVL75:
 270:Src/main.c    **** 	}
 1132              		.loc 1 270 4 view .LVU239
 1133 0150 D6E7     		b	.L39
 1134              	.L53:
 235:Src/main.c    **** 		case 'w':
 1135              		.loc 1 235 2 is_stmt 0 view .LVU240
 1136 0152 23AE     		add	r6, sp, #140
 1137 0154 ABE7     		b	.L43
 1138              	.LVL76:
 1139              	.L54:
ARM GAS  /tmp/ccaJ9T94.s 			page 36


 275:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1140              		.loc 1 275 21 discriminator 1 view .LVU241
 1141 0156 772C     		cmp	r4, #119
 1142 0158 ABD1     		bne	.L49
 276:Src/main.c    **** 		motorcmd.amount = 0;
 1143              		.loc 1 276 3 is_stmt 1 view .LVU242
 1144 015a 02AA     		add	r2, sp, #8
 1145 015c 114B     		ldr	r3, .L56+40
 1146 015e 31CB     		ldmia	r3!, {r0, r4, r5}
 1147 0160 31C2     		stmia	r2!, {r0, r4, r5}
 1148 0162 1B88     		ldrh	r3, [r3]
 1149 0164 1380     		strh	r3, [r2]
 277:Src/main.c    **** 	}
 1150              		.loc 1 277 3 view .LVU243
 277:Src/main.c    **** 	}
 1151              		.loc 1 277 19 is_stmt 0 view .LVU244
 1152 0166 06AB     		add	r3, sp, #24
 1153 0168 0022     		movs	r2, #0
 1154 016a 5A70     		strb	r2, [r3, #1]
 1155 016c B1E7     		b	.L50
 1156              	.L55:
 280:Src/main.c    **** 		ClearCommand();
 1157              		.loc 1 280 3 is_stmt 1 view .LVU245
 1158 016e 27A8     		add	r0, sp, #156
 1159 0170 FFF7FEFF 		bl	USART_SendString
 1160              	.LVL77:
 281:Src/main.c    **** 		return;
 1161              		.loc 1 281 3 view .LVU246
 1162 0174 FFF7FEFF 		bl	ClearCommand
 1163              	.LVL78:
 282:Src/main.c    **** 	}
 1164              		.loc 1 282 3 view .LVU247
 1165 0178 C2E7     		b	.L39
 1166              	.L57:
 1167 017a C046     		.align	2
 1168              	.L56:
 1169 017c 14000000 		.word	.LC32
 1170 0180 30000000 		.word	.LC34
 1171 0184 40000000 		.word	.LC36
 1172 0188 50000000 		.word	.LC38
 1173 018c 60000000 		.word	.LC40
 1174 0190 78000000 		.word	.LC42
 1175 0194 98000000 		.word	.LC44
 1176 0198 00000000 		.word	.L42
 1177 019c 10000000 		.word	.LC49
 1178 01a0 FFFF0000 		.word	65535
 1179 01a4 00000000 		.word	.LC47
 1180              		.cfi_endproc
 1181              	.LFE52:
 1183              		.section	.text.GetDistance,"ax",%progbits
 1184              		.align	1
 1185              		.global	GetDistance
 1186              		.syntax unified
 1187              		.code	16
 1188              		.thumb_func
 1190              	GetDistance:
 1191              	.LFB53:
ARM GAS  /tmp/ccaJ9T94.s 			page 37


 337:Src/main.c    **** 
 1192              		.loc 1 337 1 view -0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 339:Src/main.c    **** 
 1197              		.loc 1 339 1 view .LVU249
 1198              		@ sp needed
 1199 0000 7047     		bx	lr
 1200              		.cfi_endproc
 1201              	.LFE53:
 1203              		.section	.text.Error_Handler,"ax",%progbits
 1204              		.align	1
 1205              		.global	Error_Handler
 1206              		.syntax unified
 1207              		.code	16
 1208              		.thumb_func
 1210              	Error_Handler:
 1211              	.LFB58:
 620:Src/main.c    **** 
 621:Src/main.c    **** /* USER CODE BEGIN 4 */
 622:Src/main.c    **** 
 623:Src/main.c    **** /* USER CODE END 4 */
 624:Src/main.c    **** 
 625:Src/main.c    **** /**
 626:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 627:Src/main.c    ****  * @retval None
 628:Src/main.c    ****  */
 629:Src/main.c    **** void Error_Handler(void)
 630:Src/main.c    **** {
 1212              		.loc 1 630 1 view -0
 1213              		.cfi_startproc
 1214              		@ Volatile: function does not return.
 1215              		@ args = 0, pretend = 0, frame = 0
 1216              		@ frame_needed = 0, uses_anonymous_args = 0
 1217              		@ link register save eliminated.
 631:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 632:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 633:Src/main.c    **** 	__disable_irq();
 1218              		.loc 1 633 2 view .LVU251
 1219              	.LBB17:
 1220              	.LBI17:
 1221              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
ARM GAS  /tmp/ccaJ9T94.s 			page 38


  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
ARM GAS  /tmp/ccaJ9T94.s 			page 39


  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/ccaJ9T94.s 			page 40


 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1222              		.loc 2 140 27 view .LVU252
 1223              	.LBB18:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1224              		.loc 2 142 3 view .LVU253
 1225              		.syntax divided
 1226              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1227 0000 72B6     		cpsid i
 1228              	@ 0 "" 2
 1229              		.thumb
 1230              		.syntax unified
 1231              	.L60:
 1232              	.LBE18:
 1233              	.LBE17:
 634:Src/main.c    **** 	while (1)
 1234              		.loc 1 634 2 discriminator 1 view .LVU254
 635:Src/main.c    **** 	{
 636:Src/main.c    **** 	}
 1235              		.loc 1 636 2 discriminator 1 view .LVU255
 634:Src/main.c    **** 	while (1)
 1236              		.loc 1 634 8 discriminator 1 view .LVU256
 1237 0002 FEE7     		b	.L60
 1238              		.cfi_endproc
 1239              	.LFE58:
 1241              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1242              		.align	1
 1243              		.syntax unified
 1244              		.code	16
 1245              		.thumb_func
 1247              	MX_TIM1_Init:
 1248              	.LFB56:
 519:Src/main.c    **** 
 1249              		.loc 1 519 1 view -0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 88
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253 0000 00B5     		push	{lr}
 1254              	.LCFI17:
 1255              		.cfi_def_cfa_offset 4
 1256              		.cfi_offset 14, -4
 1257 0002 97B0     		sub	sp, sp, #92
 1258              	.LCFI18:
 1259              		.cfi_def_cfa_offset 96
 525:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/ccaJ9T94.s 			page 41


 1260              		.loc 1 525 3 view .LVU258
 525:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1261              		.loc 1 525 26 is_stmt 0 view .LVU259
 1262 0004 1022     		movs	r2, #16
 1263 0006 0021     		movs	r1, #0
 1264 0008 12A8     		add	r0, sp, #72
 1265 000a FFF7FEFF 		bl	memset
 1266              	.LVL79:
 526:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1267              		.loc 1 526 3 is_stmt 1 view .LVU260
 526:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1268              		.loc 1 526 27 is_stmt 0 view .LVU261
 1269 000e 0822     		movs	r2, #8
 1270 0010 0021     		movs	r1, #0
 1271 0012 10A8     		add	r0, sp, #64
 1272 0014 FFF7FEFF 		bl	memset
 1273              	.LVL80:
 527:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1274              		.loc 1 527 3 is_stmt 1 view .LVU262
 527:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1275              		.loc 1 527 22 is_stmt 0 view .LVU263
 1276 0018 1C22     		movs	r2, #28
 1277 001a 0021     		movs	r1, #0
 1278 001c 09A8     		add	r0, sp, #36
 1279 001e FFF7FEFF 		bl	memset
 1280              	.LVL81:
 528:Src/main.c    **** 
 1281              		.loc 1 528 3 is_stmt 1 view .LVU264
 528:Src/main.c    **** 
 1282              		.loc 1 528 34 is_stmt 0 view .LVU265
 1283 0022 2022     		movs	r2, #32
 1284 0024 0021     		movs	r1, #0
 1285 0026 01A8     		add	r0, sp, #4
 1286 0028 FFF7FEFF 		bl	memset
 1287              	.LVL82:
 533:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1288              		.loc 1 533 3 is_stmt 1 view .LVU266
 533:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1289              		.loc 1 533 18 is_stmt 0 view .LVU267
 1290 002c 3048     		ldr	r0, .L76
 1291 002e 314B     		ldr	r3, .L76+4
 1292 0030 0360     		str	r3, [r0]
 534:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1293              		.loc 1 534 3 is_stmt 1 view .LVU268
 534:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1294              		.loc 1 534 24 is_stmt 0 view .LVU269
 1295 0032 0023     		movs	r3, #0
 1296 0034 4360     		str	r3, [r0, #4]
 535:Src/main.c    ****   htim1.Init.Period = 65535;
 1297              		.loc 1 535 3 is_stmt 1 view .LVU270
 535:Src/main.c    ****   htim1.Init.Period = 65535;
 1298              		.loc 1 535 26 is_stmt 0 view .LVU271
 1299 0036 8360     		str	r3, [r0, #8]
 536:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1300              		.loc 1 536 3 is_stmt 1 view .LVU272
 536:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1301              		.loc 1 536 21 is_stmt 0 view .LVU273
ARM GAS  /tmp/ccaJ9T94.s 			page 42


 1302 0038 2F4A     		ldr	r2, .L76+8
 1303 003a C260     		str	r2, [r0, #12]
 537:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1304              		.loc 1 537 3 is_stmt 1 view .LVU274
 537:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1305              		.loc 1 537 28 is_stmt 0 view .LVU275
 1306 003c 0361     		str	r3, [r0, #16]
 538:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1307              		.loc 1 538 3 is_stmt 1 view .LVU276
 538:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1308              		.loc 1 538 32 is_stmt 0 view .LVU277
 1309 003e 4361     		str	r3, [r0, #20]
 539:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1310              		.loc 1 539 3 is_stmt 1 view .LVU278
 539:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1311              		.loc 1 539 32 is_stmt 0 view .LVU279
 1312 0040 8033     		adds	r3, r3, #128
 1313 0042 8361     		str	r3, [r0, #24]
 540:Src/main.c    ****   {
 1314              		.loc 1 540 3 is_stmt 1 view .LVU280
 540:Src/main.c    ****   {
 1315              		.loc 1 540 7 is_stmt 0 view .LVU281
 1316 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1317              	.LVL83:
 540:Src/main.c    ****   {
 1318              		.loc 1 540 6 view .LVU282
 1319 0048 0028     		cmp	r0, #0
 1320 004a 42D1     		bne	.L69
 544:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1321              		.loc 1 544 3 is_stmt 1 view .LVU283
 544:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1322              		.loc 1 544 34 is_stmt 0 view .LVU284
 1323 004c 8023     		movs	r3, #128
 1324 004e 5B01     		lsls	r3, r3, #5
 1325 0050 1293     		str	r3, [sp, #72]
 545:Src/main.c    ****   {
 1326              		.loc 1 545 3 is_stmt 1 view .LVU285
 545:Src/main.c    ****   {
 1327              		.loc 1 545 7 is_stmt 0 view .LVU286
 1328 0052 2748     		ldr	r0, .L76
 1329 0054 12A9     		add	r1, sp, #72
 1330 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1331              	.LVL84:
 545:Src/main.c    ****   {
 1332              		.loc 1 545 6 view .LVU287
 1333 005a 0028     		cmp	r0, #0
 1334 005c 3BD1     		bne	.L70
 549:Src/main.c    ****   {
 1335              		.loc 1 549 3 is_stmt 1 view .LVU288
 549:Src/main.c    ****   {
 1336              		.loc 1 549 7 is_stmt 0 view .LVU289
 1337 005e 2448     		ldr	r0, .L76
 1338 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1339              	.LVL85:
 549:Src/main.c    ****   {
 1340              		.loc 1 549 6 view .LVU290
 1341 0064 0028     		cmp	r0, #0
ARM GAS  /tmp/ccaJ9T94.s 			page 43


 1342 0066 38D1     		bne	.L71
 553:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1343              		.loc 1 553 3 is_stmt 1 view .LVU291
 553:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1344              		.loc 1 553 37 is_stmt 0 view .LVU292
 1345 0068 0023     		movs	r3, #0
 1346 006a 1093     		str	r3, [sp, #64]
 554:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1347              		.loc 1 554 3 is_stmt 1 view .LVU293
 554:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1348              		.loc 1 554 33 is_stmt 0 view .LVU294
 1349 006c 1193     		str	r3, [sp, #68]
 555:Src/main.c    ****   {
 1350              		.loc 1 555 3 is_stmt 1 view .LVU295
 555:Src/main.c    ****   {
 1351              		.loc 1 555 7 is_stmt 0 view .LVU296
 1352 006e 2048     		ldr	r0, .L76
 1353 0070 10A9     		add	r1, sp, #64
 1354 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1355              	.LVL86:
 555:Src/main.c    ****   {
 1356              		.loc 1 555 6 view .LVU297
 1357 0076 0028     		cmp	r0, #0
 1358 0078 31D1     		bne	.L72
 559:Src/main.c    ****   sConfigOC.Pulse = 0;
 1359              		.loc 1 559 3 is_stmt 1 view .LVU298
 559:Src/main.c    ****   sConfigOC.Pulse = 0;
 1360              		.loc 1 559 20 is_stmt 0 view .LVU299
 1361 007a 6023     		movs	r3, #96
 1362 007c 0993     		str	r3, [sp, #36]
 560:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1363              		.loc 1 560 3 is_stmt 1 view .LVU300
 560:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1364              		.loc 1 560 19 is_stmt 0 view .LVU301
 1365 007e 0023     		movs	r3, #0
 1366 0080 0A93     		str	r3, [sp, #40]
 561:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1367              		.loc 1 561 3 is_stmt 1 view .LVU302
 561:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1368              		.loc 1 561 24 is_stmt 0 view .LVU303
 1369 0082 0B93     		str	r3, [sp, #44]
 562:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1370              		.loc 1 562 3 is_stmt 1 view .LVU304
 562:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1371              		.loc 1 562 25 is_stmt 0 view .LVU305
 1372 0084 0C93     		str	r3, [sp, #48]
 563:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1373              		.loc 1 563 3 is_stmt 1 view .LVU306
 563:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1374              		.loc 1 563 24 is_stmt 0 view .LVU307
 1375 0086 0D93     		str	r3, [sp, #52]
 564:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1376              		.loc 1 564 3 is_stmt 1 view .LVU308
 564:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1377              		.loc 1 564 25 is_stmt 0 view .LVU309
 1378 0088 0E93     		str	r3, [sp, #56]
 565:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
ARM GAS  /tmp/ccaJ9T94.s 			page 44


 1379              		.loc 1 565 3 is_stmt 1 view .LVU310
 565:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1380              		.loc 1 565 26 is_stmt 0 view .LVU311
 1381 008a 0F93     		str	r3, [sp, #60]
 566:Src/main.c    ****   {
 1382              		.loc 1 566 3 is_stmt 1 view .LVU312
 566:Src/main.c    ****   {
 1383              		.loc 1 566 7 is_stmt 0 view .LVU313
 1384 008c 1848     		ldr	r0, .L76
 1385 008e 0022     		movs	r2, #0
 1386 0090 09A9     		add	r1, sp, #36
 1387 0092 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1388              	.LVL87:
 566:Src/main.c    ****   {
 1389              		.loc 1 566 6 view .LVU314
 1390 0096 0028     		cmp	r0, #0
 1391 0098 23D1     		bne	.L73
 570:Src/main.c    ****   {
 1392              		.loc 1 570 3 is_stmt 1 view .LVU315
 570:Src/main.c    ****   {
 1393              		.loc 1 570 7 is_stmt 0 view .LVU316
 1394 009a 1548     		ldr	r0, .L76
 1395 009c 0422     		movs	r2, #4
 1396 009e 09A9     		add	r1, sp, #36
 1397 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1398              	.LVL88:
 570:Src/main.c    ****   {
 1399              		.loc 1 570 6 view .LVU317
 1400 00a4 0028     		cmp	r0, #0
 1401 00a6 1ED1     		bne	.L74
 574:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1402              		.loc 1 574 3 is_stmt 1 view .LVU318
 574:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1403              		.loc 1 574 40 is_stmt 0 view .LVU319
 1404 00a8 0023     		movs	r3, #0
 1405 00aa 0193     		str	r3, [sp, #4]
 575:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1406              		.loc 1 575 3 is_stmt 1 view .LVU320
 575:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1407              		.loc 1 575 41 is_stmt 0 view .LVU321
 1408 00ac 0293     		str	r3, [sp, #8]
 576:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1409              		.loc 1 576 3 is_stmt 1 view .LVU322
 576:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1410              		.loc 1 576 34 is_stmt 0 view .LVU323
 1411 00ae 0393     		str	r3, [sp, #12]
 577:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1412              		.loc 1 577 3 is_stmt 1 view .LVU324
 577:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1413              		.loc 1 577 33 is_stmt 0 view .LVU325
 1414 00b0 0493     		str	r3, [sp, #16]
 578:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1415              		.loc 1 578 3 is_stmt 1 view .LVU326
 578:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1416              		.loc 1 578 35 is_stmt 0 view .LVU327
 1417 00b2 0593     		str	r3, [sp, #20]
 579:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
ARM GAS  /tmp/ccaJ9T94.s 			page 45


 1418              		.loc 1 579 3 is_stmt 1 view .LVU328
 579:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1419              		.loc 1 579 38 is_stmt 0 view .LVU329
 1420 00b4 8022     		movs	r2, #128
 1421 00b6 9201     		lsls	r2, r2, #6
 1422 00b8 0692     		str	r2, [sp, #24]
 580:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1423              		.loc 1 580 3 is_stmt 1 view .LVU330
 580:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1424              		.loc 1 580 40 is_stmt 0 view .LVU331
 1425 00ba 0893     		str	r3, [sp, #32]
 581:Src/main.c    ****   {
 1426              		.loc 1 581 3 is_stmt 1 view .LVU332
 581:Src/main.c    ****   {
 1427              		.loc 1 581 7 is_stmt 0 view .LVU333
 1428 00bc 0C48     		ldr	r0, .L76
 1429 00be 01A9     		add	r1, sp, #4
 1430 00c0 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1431              	.LVL89:
 581:Src/main.c    ****   {
 1432              		.loc 1 581 6 view .LVU334
 1433 00c4 0028     		cmp	r0, #0
 1434 00c6 10D1     		bne	.L75
 588:Src/main.c    **** 
 1435              		.loc 1 588 3 is_stmt 1 view .LVU335
 1436 00c8 0948     		ldr	r0, .L76
 1437 00ca FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1438              	.LVL90:
 590:Src/main.c    **** 
 1439              		.loc 1 590 1 is_stmt 0 view .LVU336
 1440 00ce 17B0     		add	sp, sp, #92
 1441              		@ sp needed
 1442 00d0 00BD     		pop	{pc}
 1443              	.L69:
 542:Src/main.c    ****   }
 1444              		.loc 1 542 5 is_stmt 1 view .LVU337
 1445 00d2 FFF7FEFF 		bl	Error_Handler
 1446              	.LVL91:
 1447              	.L70:
 547:Src/main.c    ****   }
 1448              		.loc 1 547 5 view .LVU338
 1449 00d6 FFF7FEFF 		bl	Error_Handler
 1450              	.LVL92:
 1451              	.L71:
 551:Src/main.c    ****   }
 1452              		.loc 1 551 5 view .LVU339
 1453 00da FFF7FEFF 		bl	Error_Handler
 1454              	.LVL93:
 1455              	.L72:
 557:Src/main.c    ****   }
 1456              		.loc 1 557 5 view .LVU340
 1457 00de FFF7FEFF 		bl	Error_Handler
 1458              	.LVL94:
 1459              	.L73:
 568:Src/main.c    ****   }
 1460              		.loc 1 568 5 view .LVU341
 1461 00e2 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccaJ9T94.s 			page 46


 1462              	.LVL95:
 1463              	.L74:
 572:Src/main.c    ****   }
 1464              		.loc 1 572 5 view .LVU342
 1465 00e6 FFF7FEFF 		bl	Error_Handler
 1466              	.LVL96:
 1467              	.L75:
 583:Src/main.c    ****   }
 1468              		.loc 1 583 5 view .LVU343
 1469 00ea FFF7FEFF 		bl	Error_Handler
 1470              	.LVL97:
 1471              	.L77:
 1472 00ee C046     		.align	2
 1473              	.L76:
 1474 00f0 00000000 		.word	htim1
 1475 00f4 002C0140 		.word	1073818624
 1476 00f8 FFFF0000 		.word	65535
 1477              		.cfi_endproc
 1478              	.LFE56:
 1480              		.section	.text.SystemClock_Config,"ax",%progbits
 1481              		.align	1
 1482              		.global	SystemClock_Config
 1483              		.syntax unified
 1484              		.code	16
 1485              		.thumb_func
 1487              	SystemClock_Config:
 1488              	.LFB55:
 483:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1489              		.loc 1 483 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 72
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
 1493 0000 00B5     		push	{lr}
 1494              	.LCFI19:
 1495              		.cfi_def_cfa_offset 4
 1496              		.cfi_offset 14, -4
 1497 0002 93B0     		sub	sp, sp, #76
 1498              	.LCFI20:
 1499              		.cfi_def_cfa_offset 80
 484:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1500              		.loc 1 484 2 view .LVU345
 484:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1501              		.loc 1 484 21 is_stmt 0 view .LVU346
 1502 0004 3422     		movs	r2, #52
 1503 0006 0021     		movs	r1, #0
 1504 0008 05A8     		add	r0, sp, #20
 1505 000a FFF7FEFF 		bl	memset
 1506              	.LVL98:
 485:Src/main.c    **** 
 1507              		.loc 1 485 2 is_stmt 1 view .LVU347
 485:Src/main.c    **** 
 1508              		.loc 1 485 21 is_stmt 0 view .LVU348
 1509 000e 1022     		movs	r2, #16
 1510 0010 0021     		movs	r1, #0
 1511 0012 01A8     		add	r0, sp, #4
 1512 0014 FFF7FEFF 		bl	memset
 1513              	.LVL99:
ARM GAS  /tmp/ccaJ9T94.s 			page 47


 490:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1514              		.loc 1 490 2 is_stmt 1 view .LVU349
 490:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1515              		.loc 1 490 35 is_stmt 0 view .LVU350
 1516 0018 0223     		movs	r3, #2
 1517 001a 0593     		str	r3, [sp, #20]
 491:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1518              		.loc 1 491 2 is_stmt 1 view .LVU351
 491:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1519              		.loc 1 491 29 is_stmt 0 view .LVU352
 1520 001c 013B     		subs	r3, r3, #1
 1521 001e 0893     		str	r3, [sp, #32]
 492:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1522              		.loc 1 492 2 is_stmt 1 view .LVU353
 492:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1523              		.loc 1 492 40 is_stmt 0 view .LVU354
 1524 0020 0F33     		adds	r3, r3, #15
 1525 0022 0993     		str	r3, [sp, #36]
 493:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1526              		.loc 1 493 2 is_stmt 1 view .LVU355
 494:Src/main.c    **** 	{
 1527              		.loc 1 494 2 view .LVU356
 494:Src/main.c    **** 	{
 1528              		.loc 1 494 6 is_stmt 0 view .LVU357
 1529 0024 05A8     		add	r0, sp, #20
 1530 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1531              	.LVL100:
 494:Src/main.c    **** 	{
 1532              		.loc 1 494 5 view .LVU358
 1533 002a 0028     		cmp	r0, #0
 1534 002c 0DD1     		bne	.L81
 501:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1535              		.loc 1 501 2 is_stmt 1 view .LVU359
 501:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1536              		.loc 1 501 30 is_stmt 0 view .LVU360
 1537 002e 0723     		movs	r3, #7
 1538 0030 0193     		str	r3, [sp, #4]
 503:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1539              		.loc 1 503 2 is_stmt 1 view .LVU361
 503:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1540              		.loc 1 503 33 is_stmt 0 view .LVU362
 1541 0032 0023     		movs	r3, #0
 1542 0034 0293     		str	r3, [sp, #8]
 504:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1543              		.loc 1 504 2 is_stmt 1 view .LVU363
 504:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1544              		.loc 1 504 34 is_stmt 0 view .LVU364
 1545 0036 0393     		str	r3, [sp, #12]
 505:Src/main.c    **** 
 1546              		.loc 1 505 2 is_stmt 1 view .LVU365
 505:Src/main.c    **** 
 1547              		.loc 1 505 35 is_stmt 0 view .LVU366
 1548 0038 0493     		str	r3, [sp, #16]
 507:Src/main.c    **** 	{
 1549              		.loc 1 507 2 is_stmt 1 view .LVU367
 507:Src/main.c    **** 	{
 1550              		.loc 1 507 6 is_stmt 0 view .LVU368
ARM GAS  /tmp/ccaJ9T94.s 			page 48


 1551 003a 0021     		movs	r1, #0
 1552 003c 01A8     		add	r0, sp, #4
 1553 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1554              	.LVL101:
 507:Src/main.c    **** 	{
 1555              		.loc 1 507 5 view .LVU369
 1556 0042 0028     		cmp	r0, #0
 1557 0044 03D1     		bne	.L82
 511:Src/main.c    **** 
 1558              		.loc 1 511 1 view .LVU370
 1559 0046 13B0     		add	sp, sp, #76
 1560              		@ sp needed
 1561 0048 00BD     		pop	{pc}
 1562              	.L81:
 496:Src/main.c    **** 	}
 1563              		.loc 1 496 3 is_stmt 1 view .LVU371
 1564 004a FFF7FEFF 		bl	Error_Handler
 1565              	.LVL102:
 1566              	.L82:
 509:Src/main.c    **** 	}
 1567              		.loc 1 509 3 view .LVU372
 1568 004e FFF7FEFF 		bl	Error_Handler
 1569              	.LVL103:
 1570              		.cfi_endproc
 1571              	.LFE55:
 1573              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1574              		.align	2
 1575              	.LC59:
 1576 0000 257500   		.ascii	"%u\000"
 1577              		.section	.text.main,"ax",%progbits
 1578              		.align	1
 1579              		.global	main
 1580              		.syntax unified
 1581              		.code	16
 1582              		.thumb_func
 1584              	main:
 1585              	.LFB54:
 348:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1586              		.loc 1 348 1 view -0
 1587              		.cfi_startproc
 1588              		@ args = 0, pretend = 0, frame = 40
 1589              		@ frame_needed = 0, uses_anonymous_args = 0
 1590 0000 10B5     		push	{r4, lr}
 1591              	.LCFI21:
 1592              		.cfi_def_cfa_offset 8
 1593              		.cfi_offset 4, -8
 1594              		.cfi_offset 14, -4
 1595 0002 8AB0     		sub	sp, sp, #40
 1596              	.LCFI22:
 1597              		.cfi_def_cfa_offset 48
 349:Src/main.c    ****     SystemClock_Config();
 1598              		.loc 1 349 2 view .LVU374
 1599 0004 FFF7FEFF 		bl	HAL_Init
 1600              	.LVL104:
 350:Src/main.c    ****     
 1601              		.loc 1 350 5 view .LVU375
 1602 0008 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccaJ9T94.s 			page 49


 1603              	.LVL105:
 353:Src/main.c    ****     USART_Init();
 1604              		.loc 1 353 5 view .LVU376
 1605 000c FFF7FEFF 		bl	GPIO_AF_Init
 1606              	.LVL106:
 354:Src/main.c    **** 
 1607              		.loc 1 354 5 view .LVU377
 1608 0010 FFF7FEFF 		bl	USART_Init
 1609              	.LVL107:
 356:Src/main.c    ****     
 1610              		.loc 1 356 5 view .LVU378
 1611 0014 FFF7FEFF 		bl	motor_init
 1612              	.LVL108:
 358:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 1613              		.loc 1 358 5 view .LVU379
 1614              	.LBB19:
 1615              	.LBI19:
 1616              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccaJ9T94.s 			page 50


  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccaJ9T94.s 			page 51


  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
ARM GAS  /tmp/ccaJ9T94.s 			page 52


 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
ARM GAS  /tmp/ccaJ9T94.s 			page 53


 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
ARM GAS  /tmp/ccaJ9T94.s 			page 54


 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
ARM GAS  /tmp/ccaJ9T94.s 			page 55


 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
ARM GAS  /tmp/ccaJ9T94.s 			page 56


 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccaJ9T94.s 			page 57


 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /tmp/ccaJ9T94.s 			page 58


 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
ARM GAS  /tmp/ccaJ9T94.s 			page 59


 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
ARM GAS  /tmp/ccaJ9T94.s 			page 60


 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1617              		.loc 3 623 22 view .LVU380
 1618              	.LBB20:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1619              		.loc 3 625 3 view .LVU381
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1620              		.loc 3 627 5 view .LVU382
 1621              		.loc 3 627 20 is_stmt 0 view .LVU383
 1622 0018 834B     		ldr	r3, .L105
 1623 001a 8022     		movs	r2, #128
 1624 001c 9205     		lsls	r2, r2, #22
 1625 001e 1A60     		str	r2, [r3]
 1626              	.LVL109:
 1627              		.loc 3 627 20 view .LVU384
 1628              	.LBE20:
 1629              	.LBE19:
 359:Src/main.c    **** 
 1630              		.loc 1 359 5 is_stmt 1 view .LVU385
 1631              	.LBB21:
 1632              	.LBI21:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/ccaJ9T94.s 			page 61


 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccaJ9T94.s 			page 62


 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1633              		.loc 3 730 22 view .LVU386
 1634              	.LBB22:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1635              		.loc 3 732 3 view .LVU387
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1636              		.loc 3 734 5 view .LVU388
 1637              		.loc 3 734 52 is_stmt 0 view .LVU389
 1638 0020 C720     		movs	r0, #199
 1639 0022 8000     		lsls	r0, r0, #2
 1640 0024 1958     		ldr	r1, [r3, r0]
 1641              		.loc 3 734 33 view .LVU390
 1642 0026 814A     		ldr	r2, .L105+4
 1643 0028 1140     		ands	r1, r2
 1644              		.loc 3 734 102 view .LVU391
 1645 002a 8022     		movs	r2, #128
 1646 002c D201     		lsls	r2, r2, #7
 1647 002e 0A43     		orrs	r2, r1
 1648              		.loc 3 734 30 view .LVU392
 1649 0030 1A50     		str	r2, [r3, r0]
 1650              	.LVL110:
 1651              		.loc 3 734 30 view .LVU393
 1652              	.LBE22:
 1653              	.LBE21:
 361:Src/main.c    ****     
 1654              		.loc 1 361 5 is_stmt 1 view .LVU394
 361:Src/main.c    ****     
 1655              		.loc 1 361 13 is_stmt 0 view .LVU395
 1656 0032 7F4B     		ldr	r3, .L105+8
 1657 0034 1A68     		ldr	r2, [r3]
 1658 0036 0892     		str	r2, [sp, #32]
 1659 0038 9A88     		ldrh	r2, [r3, #4]
ARM GAS  /tmp/ccaJ9T94.s 			page 63


 1660 003a 08AB     		add	r3, sp, #32
 1661 003c 9A80     		strh	r2, [r3, #4]
 364:Src/main.c    ****     MX_TIM1_Init();
 1662              		.loc 1 364 5 is_stmt 1 view .LVU396
 1663 003e FFF7FEFF 		bl	MX_GPIO_Init
 1664              	.LVL111:
 365:Src/main.c    ****     
 1665              		.loc 1 365 5 view .LVU397
 1666 0042 FFF7FEFF 		bl	MX_TIM1_Init
 1667              	.LVL112:
 367:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 1668              		.loc 1 367 5 view .LVU398
 1669 0046 7B48     		ldr	r0, .L105+12
 1670 0048 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1671              	.LVL113:
 368:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1672              		.loc 1 368 5 view .LVU399
 1673 004c 8021     		movs	r1, #128
 1674 004e 7A4C     		ldr	r4, .L105+16
 1675 0050 0022     		movs	r2, #0
 1676 0052 0901     		lsls	r1, r1, #4
 1677 0054 2000     		movs	r0, r4
 1678 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1679              	.LVL114:
 369:Src/main.c    **** 	
 1680              		.loc 1 369 5 view .LVU400
 1681 005a 8021     		movs	r1, #128
 1682 005c 0022     		movs	r2, #0
 1683 005e 8901     		lsls	r1, r1, #6
 1684 0060 2000     		movs	r0, r4
 1685 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1686              	.LVL115:
 1687 0066 C4E0     		b	.L100
 1688              	.LVL116:
 1689              	.L104:
 1690              	.LBB23:
 380:Src/main.c    ****         
 1691              		.loc 1 380 9 view .LVU401
 1692 0068 8021     		movs	r1, #128
 1693 006a 0022     		movs	r2, #0
 1694 006c 0901     		lsls	r1, r1, #4
 1695 006e 7248     		ldr	r0, .L105+16
 1696 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1697              	.LVL117:
 383:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1698              		.loc 1 383 9 view .LVU402
 383:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1699              		.loc 1 383 21 is_stmt 0 view .LVU403
 1700 0074 FFF7FEFF 		bl	HAL_GetTick
 1701              	.LVL118:
 383:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1702              		.loc 1 383 19 view .LVU404
 1703 0078 80B2     		uxth	r0, r0
 1704 007a 704B     		ldr	r3, .L105+20
 1705 007c 1880     		strh	r0, [r3]
 384:Src/main.c    ****         
 1706              		.loc 1 384 9 is_stmt 1 view .LVU405
ARM GAS  /tmp/ccaJ9T94.s 			page 64


 384:Src/main.c    ****         
 1707              		.loc 1 384 19 is_stmt 0 view .LVU406
 1708 007e FFF7FEFF 		bl	HAL_GetTick
 1709              	.LVL119:
 384:Src/main.c    ****         
 1710              		.loc 1 384 17 view .LVU407
 1711 0082 6F4B     		ldr	r3, .L105+24
 1712 0084 1860     		str	r0, [r3]
 387:Src/main.c    ****         {
 1713              		.loc 1 387 9 is_stmt 1 view .LVU408
 1714              	.L87:
 390:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1715              		.loc 1 390 9 discriminator 2 view .LVU409
 387:Src/main.c    ****         {
 1716              		.loc 1 387 63 discriminator 2 view .LVU410
 387:Src/main.c    ****         {
 1717              		.loc 1 387 18 is_stmt 0 discriminator 2 view .LVU411
 1718 0086 8021     		movs	r1, #128
 1719 0088 4901     		lsls	r1, r1, #5
 1720 008a 6B48     		ldr	r0, .L105+16
 1721 008c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1722              	.LVL120:
 387:Src/main.c    ****         {
 1723              		.loc 1 387 63 discriminator 2 view .LVU412
 1724 0090 0028     		cmp	r0, #0
 1725 0092 06D1     		bne	.L86
 387:Src/main.c    ****         {
 1726              		.loc 1 387 74 discriminator 1 view .LVU413
 1727 0094 6A4B     		ldr	r3, .L105+24
 1728 0096 1C68     		ldr	r4, [r3]
 1729 0098 0A34     		adds	r4, r4, #10
 387:Src/main.c    ****         {
 1730              		.loc 1 387 82 discriminator 1 view .LVU414
 1731 009a FFF7FEFF 		bl	HAL_GetTick
 1732              	.LVL121:
 387:Src/main.c    ****         {
 1733              		.loc 1 387 63 discriminator 1 view .LVU415
 1734 009e 8442     		cmp	r4, r0
 1735 00a0 F1D8     		bhi	.L87
 1736              	.L86:
 392:Src/main.c    ****         
 1737              		.loc 1 392 9 is_stmt 1 view .LVU416
 392:Src/main.c    ****         
 1738              		.loc 1 392 19 is_stmt 0 view .LVU417
 1739 00a2 FFF7FEFF 		bl	HAL_GetTick
 1740              	.LVL122:
 392:Src/main.c    ****         
 1741              		.loc 1 392 33 view .LVU418
 1742 00a6 654B     		ldr	r3, .L105+20
 1743 00a8 1B88     		ldrh	r3, [r3]
 1744 00aa C01A     		subs	r0, r0, r3
 1745 00ac 80B2     		uxth	r0, r0
 392:Src/main.c    ****         
 1746              		.loc 1 392 16 view .LVU419
 1747 00ae 654B     		ldr	r3, .L105+28
 1748 00b0 1880     		strh	r0, [r3]
 395:Src/main.c    ****       // wait for the echo pin to go low
ARM GAS  /tmp/ccaJ9T94.s 			page 65


 1749              		.loc 1 395 7 is_stmt 1 view .LVU420
 395:Src/main.c    ****       // wait for the echo pin to go low
 1750              		.loc 1 395 17 is_stmt 0 view .LVU421
 1751 00b2 FFF7FEFF 		bl	HAL_GetTick
 1752              	.LVL123:
 395:Src/main.c    ****       // wait for the echo pin to go low
 1753              		.loc 1 395 15 view .LVU422
 1754 00b6 624B     		ldr	r3, .L105+24
 1755 00b8 1860     		str	r0, [r3]
 397:Src/main.c    ****         {
 1756              		.loc 1 397 9 is_stmt 1 view .LVU423
 1757              	.L89:
 400:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1758              		.loc 1 400 9 discriminator 2 view .LVU424
 397:Src/main.c    ****         {
 1759              		.loc 1 397 62 discriminator 2 view .LVU425
 397:Src/main.c    ****         {
 1760              		.loc 1 397 17 is_stmt 0 discriminator 2 view .LVU426
 1761 00ba 8021     		movs	r1, #128
 1762 00bc 4901     		lsls	r1, r1, #5
 1763 00be 5E48     		ldr	r0, .L105+16
 1764 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1765              	.LVL124:
 397:Src/main.c    ****         {
 1766              		.loc 1 397 62 discriminator 2 view .LVU427
 1767 00c4 0028     		cmp	r0, #0
 1768 00c6 06D0     		beq	.L88
 397:Src/main.c    ****         {
 1769              		.loc 1 397 73 discriminator 1 view .LVU428
 1770 00c8 5D4B     		ldr	r3, .L105+24
 1771 00ca 1C68     		ldr	r4, [r3]
 1772 00cc 3234     		adds	r4, r4, #50
 397:Src/main.c    ****         {
 1773              		.loc 1 397 80 discriminator 1 view .LVU429
 1774 00ce FFF7FEFF 		bl	HAL_GetTick
 1775              	.LVL125:
 397:Src/main.c    ****         {
 1776              		.loc 1 397 62 discriminator 1 view .LVU430
 1777 00d2 8442     		cmp	r4, r0
 1778 00d4 F1D8     		bhi	.L89
 1779              	.L88:
 402:Src/main.c    **** 
 1780              		.loc 1 402 9 is_stmt 1 view .LVU431
 402:Src/main.c    **** 
 1781              		.loc 1 402 19 is_stmt 0 view .LVU432
 1782 00d6 FFF7FEFF 		bl	HAL_GetTick
 1783              	.LVL126:
 402:Src/main.c    **** 
 1784              		.loc 1 402 33 view .LVU433
 1785 00da 584B     		ldr	r3, .L105+20
 1786 00dc 1B88     		ldrh	r3, [r3]
 1787 00de C01A     		subs	r0, r0, r3
 1788 00e0 80B2     		uxth	r0, r0
 402:Src/main.c    **** 
 1789              		.loc 1 402 16 view .LVU434
 1790 00e2 594B     		ldr	r3, .L105+32
 1791 00e4 1880     		strh	r0, [r3]
ARM GAS  /tmp/ccaJ9T94.s 			page 66


 405:Src/main.c    ****         if(leftDistance < 10)
 1792              		.loc 1 405 9 is_stmt 1 view .LVU435
 405:Src/main.c    ****         if(leftDistance < 10)
 1793              		.loc 1 405 32 is_stmt 0 view .LVU436
 1794 00e6 1B88     		ldrh	r3, [r3]
 1795 00e8 564A     		ldr	r2, .L105+28
 1796 00ea 1288     		ldrh	r2, [r2]
 1797 00ec 9B1A     		subs	r3, r3, r2
 1798 00ee 9BB2     		uxth	r3, r3
 405:Src/main.c    ****         if(leftDistance < 10)
 1799              		.loc 1 405 22 view .LVU437
 1800 00f0 564A     		ldr	r2, .L105+36
 1801 00f2 1380     		strh	r3, [r2]
 406:Src/main.c    ****         {
 1802              		.loc 1 406 9 is_stmt 1 view .LVU438
 406:Src/main.c    ****         {
 1803              		.loc 1 406 25 is_stmt 0 view .LVU439
 1804 00f4 1388     		ldrh	r3, [r2]
 1805 00f6 9BB2     		uxth	r3, r3
 406:Src/main.c    ****         {
 1806              		.loc 1 406 11 view .LVU440
 1807 00f8 092B     		cmp	r3, #9
 1808 00fa 07D9     		bls	.L101
 1809              	.L90:
 417:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1810              		.loc 1 417 9 is_stmt 1 view .LVU441
 1811              	.LVL127:
 418:Src/main.c    ****         
 1812              		.loc 1 418 9 view .LVU442
 1813 00fc 8021     		movs	r1, #128
 1814 00fe 0122     		movs	r2, #1
 1815 0100 8901     		lsls	r1, r1, #6
 1816 0102 4D48     		ldr	r0, .L105+16
 1817 0104 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1818              	.LVL128:
 422:Src/main.c    ****             counter++;
 1819              		.loc 1 422 9 view .LVU443
 417:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1820              		.loc 1 417 17 is_stmt 0 view .LVU444
 1821 0108 0023     		movs	r3, #0
 422:Src/main.c    ****             counter++;
 1822              		.loc 1 422 15 view .LVU445
 1823 010a 07E0     		b	.L91
 1824              	.LVL129:
 1825              	.L101:
 1826              	.LBB24:
 408:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 1827              		.loc 1 408 13 is_stmt 1 view .LVU446
 409:Src/main.c    **** 			/*
 1828              		.loc 1 409 13 view .LVU447
 1829 010c 1288     		ldrh	r2, [r2]
 1830 010e 92B2     		uxth	r2, r2
 1831 0110 4F49     		ldr	r1, .L105+40
 1832 0112 6846     		mov	r0, sp
 1833 0114 FFF7FEFF 		bl	sprintf
 1834              	.LVL130:
 1835 0118 F0E7     		b	.L90
ARM GAS  /tmp/ccaJ9T94.s 			page 67


 1836              	.LVL131:
 1837              	.L92:
 409:Src/main.c    **** 			/*
 1838              		.loc 1 409 13 is_stmt 0 view .LVU448
 1839              	.LBE24:
 423:Src/main.c    ****         }  // wait for 10 us
 1840              		.loc 1 423 13 is_stmt 1 view .LVU449
 423:Src/main.c    ****         }  // wait for 10 us
 1841              		.loc 1 423 20 is_stmt 0 view .LVU450
 1842 011a 0133     		adds	r3, r3, #1
 1843              	.LVL132:
 1844              	.L91:
 422:Src/main.c    ****             counter++;
 1845              		.loc 1 422 24 is_stmt 1 view .LVU451
 1846 011c 092B     		cmp	r3, #9
 1847 011e FCDD     		ble	.L92
 425:Src/main.c    ****         
 1848              		.loc 1 425 9 view .LVU452
 1849 0120 8021     		movs	r1, #128
 1850 0122 0022     		movs	r2, #0
 1851 0124 8901     		lsls	r1, r1, #6
 1852 0126 4448     		ldr	r0, .L105+16
 1853 0128 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1854              	.LVL133:
 428:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1855              		.loc 1 428 9 view .LVU453
 428:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1856              		.loc 1 428 21 is_stmt 0 view .LVU454
 1857 012c FFF7FEFF 		bl	HAL_GetTick
 1858              	.LVL134:
 428:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1859              		.loc 1 428 19 view .LVU455
 1860 0130 80B2     		uxth	r0, r0
 1861 0132 424B     		ldr	r3, .L105+20
 1862 0134 1880     		strh	r0, [r3]
 429:Src/main.c    ****         
 1863              		.loc 1 429 9 is_stmt 1 view .LVU456
 429:Src/main.c    ****         
 1864              		.loc 1 429 19 is_stmt 0 view .LVU457
 1865 0136 FFF7FEFF 		bl	HAL_GetTick
 1866              	.LVL135:
 429:Src/main.c    ****         
 1867              		.loc 1 429 17 view .LVU458
 1868 013a 414B     		ldr	r3, .L105+24
 1869 013c 1860     		str	r0, [r3]
 432:Src/main.c    ****         {
 1870              		.loc 1 432 9 is_stmt 1 view .LVU459
 1871              	.L94:
 435:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1872              		.loc 1 435 9 discriminator 2 view .LVU460
 432:Src/main.c    ****         {
 1873              		.loc 1 432 64 discriminator 2 view .LVU461
 432:Src/main.c    ****         {
 1874              		.loc 1 432 18 is_stmt 0 discriminator 2 view .LVU462
 1875 013e 8021     		movs	r1, #128
 1876 0140 C901     		lsls	r1, r1, #7
 1877 0142 3D48     		ldr	r0, .L105+16
ARM GAS  /tmp/ccaJ9T94.s 			page 68


 1878 0144 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1879              	.LVL136:
 432:Src/main.c    ****         {
 1880              		.loc 1 432 64 discriminator 2 view .LVU463
 1881 0148 0028     		cmp	r0, #0
 1882 014a 06D1     		bne	.L93
 432:Src/main.c    ****         {
 1883              		.loc 1 432 75 discriminator 1 view .LVU464
 1884 014c 3C4B     		ldr	r3, .L105+24
 1885 014e 1C68     		ldr	r4, [r3]
 1886 0150 0A34     		adds	r4, r4, #10
 432:Src/main.c    ****         {
 1887              		.loc 1 432 83 discriminator 1 view .LVU465
 1888 0152 FFF7FEFF 		bl	HAL_GetTick
 1889              	.LVL137:
 432:Src/main.c    ****         {
 1890              		.loc 1 432 64 discriminator 1 view .LVU466
 1891 0156 8442     		cmp	r4, r0
 1892 0158 F1D8     		bhi	.L94
 1893              	.L93:
 437:Src/main.c    ****         
 1894              		.loc 1 437 9 is_stmt 1 view .LVU467
 437:Src/main.c    ****         
 1895              		.loc 1 437 19 is_stmt 0 view .LVU468
 1896 015a FFF7FEFF 		bl	HAL_GetTick
 1897              	.LVL138:
 437:Src/main.c    ****         
 1898              		.loc 1 437 33 view .LVU469
 1899 015e 374B     		ldr	r3, .L105+20
 1900 0160 1B88     		ldrh	r3, [r3]
 1901 0162 C01A     		subs	r0, r0, r3
 1902 0164 80B2     		uxth	r0, r0
 437:Src/main.c    ****         
 1903              		.loc 1 437 16 view .LVU470
 1904 0166 374B     		ldr	r3, .L105+28
 1905 0168 1880     		strh	r0, [r3]
 440:Src/main.c    ****       // wait for the echo pin to go low
 1906              		.loc 1 440 7 is_stmt 1 view .LVU471
 440:Src/main.c    ****       // wait for the echo pin to go low
 1907              		.loc 1 440 17 is_stmt 0 view .LVU472
 1908 016a FFF7FEFF 		bl	HAL_GetTick
 1909              	.LVL139:
 440:Src/main.c    ****       // wait for the echo pin to go low
 1910              		.loc 1 440 15 view .LVU473
 1911 016e 344B     		ldr	r3, .L105+24
 1912 0170 1860     		str	r0, [r3]
 442:Src/main.c    ****         {
 1913              		.loc 1 442 9 is_stmt 1 view .LVU474
 1914              	.L96:
 445:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1915              		.loc 1 445 9 discriminator 2 view .LVU475
 442:Src/main.c    ****         {
 1916              		.loc 1 442 63 discriminator 2 view .LVU476
 442:Src/main.c    ****         {
 1917              		.loc 1 442 17 is_stmt 0 discriminator 2 view .LVU477
 1918 0172 8021     		movs	r1, #128
 1919 0174 C901     		lsls	r1, r1, #7
ARM GAS  /tmp/ccaJ9T94.s 			page 69


 1920 0176 3048     		ldr	r0, .L105+16
 1921 0178 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1922              	.LVL140:
 442:Src/main.c    ****         {
 1923              		.loc 1 442 63 discriminator 2 view .LVU478
 1924 017c 0028     		cmp	r0, #0
 1925 017e 06D0     		beq	.L95
 442:Src/main.c    ****         {
 1926              		.loc 1 442 74 discriminator 1 view .LVU479
 1927 0180 2F4B     		ldr	r3, .L105+24
 1928 0182 1C68     		ldr	r4, [r3]
 1929 0184 3234     		adds	r4, r4, #50
 442:Src/main.c    ****         {
 1930              		.loc 1 442 81 discriminator 1 view .LVU480
 1931 0186 FFF7FEFF 		bl	HAL_GetTick
 1932              	.LVL141:
 442:Src/main.c    ****         {
 1933              		.loc 1 442 63 discriminator 1 view .LVU481
 1934 018a 8442     		cmp	r4, r0
 1935 018c F1D8     		bhi	.L96
 1936              	.L95:
 447:Src/main.c    **** 
 1937              		.loc 1 447 9 is_stmt 1 view .LVU482
 447:Src/main.c    **** 
 1938              		.loc 1 447 19 is_stmt 0 view .LVU483
 1939 018e FFF7FEFF 		bl	HAL_GetTick
 1940              	.LVL142:
 447:Src/main.c    **** 
 1941              		.loc 1 447 33 view .LVU484
 1942 0192 2A4B     		ldr	r3, .L105+20
 1943 0194 1B88     		ldrh	r3, [r3]
 1944 0196 C01A     		subs	r0, r0, r3
 1945 0198 80B2     		uxth	r0, r0
 447:Src/main.c    **** 
 1946              		.loc 1 447 16 view .LVU485
 1947 019a 2B4B     		ldr	r3, .L105+32
 1948 019c 1880     		strh	r0, [r3]
 450:Src/main.c    ****         if(rightDistance < 10)
 1949              		.loc 1 450 9 is_stmt 1 view .LVU486
 450:Src/main.c    ****         if(rightDistance < 10)
 1950              		.loc 1 450 33 is_stmt 0 view .LVU487
 1951 019e 1B88     		ldrh	r3, [r3]
 1952 01a0 284A     		ldr	r2, .L105+28
 1953 01a2 1288     		ldrh	r2, [r2]
 1954 01a4 9B1A     		subs	r3, r3, r2
 1955 01a6 9BB2     		uxth	r3, r3
 450:Src/main.c    ****         if(rightDistance < 10)
 1956              		.loc 1 450 23 view .LVU488
 1957 01a8 2A4A     		ldr	r2, .L105+44
 1958 01aa 1380     		strh	r3, [r2]
 451:Src/main.c    ****         {
 1959              		.loc 1 451 9 is_stmt 1 view .LVU489
 451:Src/main.c    ****         {
 1960              		.loc 1 451 26 is_stmt 0 view .LVU490
 1961 01ac 1388     		ldrh	r3, [r2]
 1962 01ae 9BB2     		uxth	r3, r3
 451:Src/main.c    ****         {
ARM GAS  /tmp/ccaJ9T94.s 			page 70


 1963              		.loc 1 451 11 view .LVU491
 1964 01b0 092B     		cmp	r3, #9
 1965 01b2 2AD9     		bls	.L102
 1966              	.L97:
 462:Src/main.c    **** 		{
 1967              		.loc 1 462 3 is_stmt 1 view .LVU492
 462:Src/main.c    **** 		{
 1968              		.loc 1 462 6 is_stmt 0 view .LVU493
 1969 01b4 284B     		ldr	r3, .L105+48
 1970 01b6 1B78     		ldrb	r3, [r3]
 462:Src/main.c    **** 		{
 1971              		.loc 1 462 5 view .LVU494
 1972 01b8 002B     		cmp	r3, #0
 1973 01ba 16D0     		beq	.L98
 464:Src/main.c    **** 					command[0] != 'a' &&
 1974              		.loc 1 464 4 is_stmt 1 view .LVU495
 464:Src/main.c    **** 					command[0] != 'a' &&
 1975              		.loc 1 464 14 is_stmt 0 view .LVU496
 1976 01bc 274B     		ldr	r3, .L105+52
 1977 01be 1B78     		ldrb	r3, [r3]
 464:Src/main.c    **** 					command[0] != 'a' &&
 1978              		.loc 1 464 6 view .LVU497
 1979 01c0 772B     		cmp	r3, #119
 1980 01c2 07D0     		beq	.L99
 465:Src/main.c    **** 					command[0] != 'd'){
 1981              		.loc 1 465 13 discriminator 1 view .LVU498
 1982 01c4 254B     		ldr	r3, .L105+52
 1983 01c6 1B78     		ldrb	r3, [r3]
 464:Src/main.c    **** 					command[0] != 'a' &&
 1984              		.loc 1 464 25 discriminator 1 view .LVU499
 1985 01c8 612B     		cmp	r3, #97
 1986 01ca 03D0     		beq	.L99
 466:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 1987              		.loc 1 466 13 view .LVU500
 1988 01cc 234B     		ldr	r3, .L105+52
 1989 01ce 1B78     		ldrb	r3, [r3]
 465:Src/main.c    **** 					command[0] != 'd'){
 1990              		.loc 1 465 24 view .LVU501
 1991 01d0 642B     		cmp	r3, #100
 1992 01d2 21D1     		bne	.L103
 1993              	.L99:
 469:Src/main.c    **** 			{
 1994              		.loc 1 469 4 is_stmt 1 view .LVU502
 469:Src/main.c    **** 			{
 1995              		.loc 1 469 14 is_stmt 0 view .LVU503
 1996 01d4 214B     		ldr	r3, .L105+52
 1997 01d6 5B78     		ldrb	r3, [r3, #1]
 469:Src/main.c    **** 			{
 1998              		.loc 1 469 6 view .LVU504
 1999 01d8 002B     		cmp	r3, #0
 2000 01da 06D0     		beq	.L98
 471:Src/main.c    **** 			}
 2001              		.loc 1 471 5 is_stmt 1 view .LVU505
 471:Src/main.c    **** 			}
 2002              		.loc 1 471 27 is_stmt 0 view .LVU506
 2003 01dc 1F4B     		ldr	r3, .L105+52
 2004 01de 1878     		ldrb	r0, [r3]
ARM GAS  /tmp/ccaJ9T94.s 			page 71


 2005 01e0 C0B2     		uxtb	r0, r0
 471:Src/main.c    **** 			}
 2006              		.loc 1 471 39 view .LVU507
 2007 01e2 5978     		ldrb	r1, [r3, #1]
 2008 01e4 C9B2     		uxtb	r1, r1
 471:Src/main.c    **** 			}
 2009              		.loc 1 471 5 view .LVU508
 2010 01e6 FFF7FEFF 		bl	ProcessCommand
 2011              	.LVL143:
 2012              	.L98:
 474:Src/main.c    **** 	}
 2013              		.loc 1 474 3 is_stmt 1 view .LVU509
 2014 01ea FA20     		movs	r0, #250
 2015 01ec 4000     		lsls	r0, r0, #1
 2016 01ee FFF7FEFF 		bl	HAL_Delay
 2017              	.LVL144:
 2018              	.LBE23:
 371:Src/main.c    ****         int32_t counter = 0;
 2019              		.loc 1 371 8 view .LVU510
 2020              	.L100:
 371:Src/main.c    ****         int32_t counter = 0;
 2021              		.loc 1 371 2 view .LVU511
 2022              	.LBB26:
 372:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 2023              		.loc 1 372 9 view .LVU512
 373:Src/main.c    ****         
 2024              		.loc 1 373 9 view .LVU513
 2025 01f2 8021     		movs	r1, #128
 2026 01f4 0122     		movs	r2, #1
 2027 01f6 0901     		lsls	r1, r1, #4
 2028 01f8 0F48     		ldr	r0, .L105+16
 2029 01fa FFF7FEFF 		bl	HAL_GPIO_WritePin
 2030              	.LVL145:
 377:Src/main.c    ****             counter++;
 2031              		.loc 1 377 9 view .LVU514
 372:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 2032              		.loc 1 372 17 is_stmt 0 view .LVU515
 2033 01fe 0023     		movs	r3, #0
 2034              	.LVL146:
 2035              	.L84:
 377:Src/main.c    ****             counter++;
 2036              		.loc 1 377 24 is_stmt 1 view .LVU516
 2037 0200 092B     		cmp	r3, #9
 2038 0202 00DD     		ble	.LCB1634
 2039 0204 30E7     		b	.L104	@long jump
 2040              	.LCB1634:
 378:Src/main.c    ****         }  // wait for 10 us
 2041              		.loc 1 378 13 view .LVU517
 378:Src/main.c    ****         }  // wait for 10 us
 2042              		.loc 1 378 20 is_stmt 0 view .LVU518
 2043 0206 0133     		adds	r3, r3, #1
 2044              	.LVL147:
 378:Src/main.c    ****         }  // wait for 10 us
 2045              		.loc 1 378 20 view .LVU519
 2046 0208 FAE7     		b	.L84
 2047              	.LVL148:
 2048              	.L102:
ARM GAS  /tmp/ccaJ9T94.s 			page 72


 2049              	.LBB25:
 453:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 2050              		.loc 1 453 13 is_stmt 1 view .LVU520
 454:Src/main.c    **** 			/*
 2051              		.loc 1 454 13 view .LVU521
 2052 020a 1288     		ldrh	r2, [r2]
 2053 020c 92B2     		uxth	r2, r2
 2054 020e 1049     		ldr	r1, .L105+40
 2055 0210 6846     		mov	r0, sp
 2056 0212 FFF7FEFF 		bl	sprintf
 2057              	.LVL149:
 2058 0216 CDE7     		b	.L97
 2059              	.L103:
 2060              	.LBE25:
 467:Src/main.c    **** 			}
 2061              		.loc 1 467 5 view .LVU522
 467:Src/main.c    **** 			}
 2062              		.loc 1 467 27 is_stmt 0 view .LVU523
 2063 0218 104B     		ldr	r3, .L105+52
 2064 021a 1878     		ldrb	r0, [r3]
 2065 021c C0B2     		uxtb	r0, r0
 467:Src/main.c    **** 			}
 2066              		.loc 1 467 5 view .LVU524
 2067 021e 0021     		movs	r1, #0
 2068 0220 FFF7FEFF 		bl	ProcessCommand
 2069              	.LVL150:
 2070 0224 D6E7     		b	.L99
 2071              	.L106:
 2072 0226 C046     		.align	2
 2073              	.L105:
 2074 0228 00E100E0 		.word	-536813312
 2075 022c FF00FFFF 		.word	-65281
 2076 0230 00000000 		.word	.LC21
 2077 0234 00000000 		.word	htim1
 2078 0238 00040048 		.word	1207960576
 2079 023c 00000000 		.word	startTime
 2080 0240 00000000 		.word	pMillis
 2081 0244 00000000 		.word	Value1
 2082 0248 00000000 		.word	Value2
 2083 024c 00000000 		.word	leftDistance
 2084 0250 00000000 		.word	.LC59
 2085 0254 00000000 		.word	rightDistance
 2086 0258 00000000 		.word	incomingCommand
 2087 025c 00000000 		.word	command
 2088              	.LBE26:
 2089              		.cfi_endproc
 2090              	.LFE54:
 2092              		.global	incomingCommand
 2093              		.section	.bss.incomingCommand,"aw",%nobits
 2096              	incomingCommand:
 2097 0000 00       		.space	1
 2098              		.global	command
 2099              		.section	.bss.command,"aw",%nobits
 2100              		.align	2
 2103              	command:
 2104 0000 0000     		.space	2
 2105              		.global	rightDistance
ARM GAS  /tmp/ccaJ9T94.s 			page 73


 2106              		.section	.bss.rightDistance,"aw",%nobits
 2107              		.align	1
 2110              	rightDistance:
 2111 0000 0000     		.space	2
 2112              		.global	leftDistance
 2113              		.section	.bss.leftDistance,"aw",%nobits
 2114              		.align	1
 2117              	leftDistance:
 2118 0000 0000     		.space	2
 2119              		.global	Value2
 2120              		.section	.bss.Value2,"aw",%nobits
 2121              		.align	1
 2124              	Value2:
 2125 0000 0000     		.space	2
 2126              		.global	Value1
 2127              		.section	.bss.Value1,"aw",%nobits
 2128              		.align	1
 2131              	Value1:
 2132 0000 0000     		.space	2
 2133              		.global	startTime
 2134              		.section	.bss.startTime,"aw",%nobits
 2135              		.align	1
 2138              	startTime:
 2139 0000 0000     		.space	2
 2140              		.global	pMillis
 2141              		.section	.bss.pMillis,"aw",%nobits
 2142              		.align	2
 2145              	pMillis:
 2146 0000 00000000 		.space	4
 2147              		.global	htim1
 2148              		.section	.bss.htim1,"aw",%nobits
 2149              		.align	2
 2152              	htim1:
 2153 0000 00000000 		.space	64
 2153      00000000 
 2153      00000000 
 2153      00000000 
 2153      00000000 
 2154              		.text
 2155              	.Letext0:
 2156              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2157              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2158              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2159              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2160              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2161              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2162              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2163              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2164              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2165              		.file 13 "Inc/pins.h"
 2166              		.file 14 "Inc/motor.h"
 2167              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2168              		.file 16 "Inc/main.h"
 2169              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2170              		.file 18 "/usr/arm-none-eabi/include/stdio.h"
 2171              		.file 19 "/usr/arm-none-eabi/include/string.h"
 2172              		.file 20 "<built-in>"
ARM GAS  /tmp/ccaJ9T94.s 			page 74


ARM GAS  /tmp/ccaJ9T94.s 			page 75


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccaJ9T94.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccaJ9T94.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccaJ9T94.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/ccaJ9T94.s:102    .text.LED_Init:00000000 $t
     /tmp/ccaJ9T94.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/ccaJ9T94.s:151    .text.LED_Init:00000024 $d
     /tmp/ccaJ9T94.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccaJ9T94.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccaJ9T94.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/ccaJ9T94.s:342    .text.USART_Init:00000000 $t
     /tmp/ccaJ9T94.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/ccaJ9T94.s:440    .text.USART_Init:0000005c $d
     /tmp/ccaJ9T94.s:447    .text.USART_SendChar:00000000 $t
     /tmp/ccaJ9T94.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccaJ9T94.s:479    .text.USART_SendChar:00000010 $d
     /tmp/ccaJ9T94.s:484    .text.USART_SendString:00000000 $t
     /tmp/ccaJ9T94.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccaJ9T94.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccaJ9T94.s:539    .text.ClearCommand:00000000 $t
     /tmp/ccaJ9T94.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccaJ9T94.s:585    .text.ClearCommand:00000024 $d
     /tmp/ccaJ9T94.s:2103   .bss.command:00000000 command
     /tmp/ccaJ9T94.s:2096   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccaJ9T94.s:592    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccaJ9T94.s:596    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccaJ9T94.s:602    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccaJ9T94.s:693    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/ccaJ9T94.s:701    .rodata.Log.str1.4:00000000 $d
     /tmp/ccaJ9T94.s:705    .text.Log:00000000 $t
     /tmp/ccaJ9T94.s:711    .text.Log:00000000 Log
     /tmp/ccaJ9T94.s:734    .text.Log:0000000c $d
     /tmp/ccaJ9T94.s:739    .text.Proceed:00000000 $t
     /tmp/ccaJ9T94.s:745    .text.Proceed:00000000 Proceed
     /tmp/ccaJ9T94.s:768    .text.Proceed:0000000c $d
     /tmp/ccaJ9T94.s:773    .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccaJ9T94.s:801    .text.ProcessCommand:00000000 $t
     /tmp/ccaJ9T94.s:807    .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccaJ9T94.s:938    .rodata.ProcessCommand:00000000 $d
     /tmp/ccaJ9T94.s:1169   .text.ProcessCommand:0000017c $d
     /tmp/ccaJ9T94.s:1184   .text.GetDistance:00000000 $t
     /tmp/ccaJ9T94.s:1190   .text.GetDistance:00000000 GetDistance
     /tmp/ccaJ9T94.s:1204   .text.Error_Handler:00000000 $t
     /tmp/ccaJ9T94.s:1210   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccaJ9T94.s:1242   .text.MX_TIM1_Init:00000000 $t
     /tmp/ccaJ9T94.s:1247   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/ccaJ9T94.s:1474   .text.MX_TIM1_Init:000000f0 $d
     /tmp/ccaJ9T94.s:2152   .bss.htim1:00000000 htim1
     /tmp/ccaJ9T94.s:1481   .text.SystemClock_Config:00000000 $t
     /tmp/ccaJ9T94.s:1487   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccaJ9T94.s:1574   .rodata.main.str1.4:00000000 $d
     /tmp/ccaJ9T94.s:1578   .text.main:00000000 $t
     /tmp/ccaJ9T94.s:1584   .text.main:00000000 main
     /tmp/ccaJ9T94.s:2074   .text.main:00000228 $d
     /tmp/ccaJ9T94.s:2138   .bss.startTime:00000000 startTime
     /tmp/ccaJ9T94.s:2145   .bss.pMillis:00000000 pMillis
ARM GAS  /tmp/ccaJ9T94.s 			page 76


     /tmp/ccaJ9T94.s:2131   .bss.Value1:00000000 Value1
     /tmp/ccaJ9T94.s:2124   .bss.Value2:00000000 Value2
     /tmp/ccaJ9T94.s:2117   .bss.leftDistance:00000000 leftDistance
     /tmp/ccaJ9T94.s:2110   .bss.rightDistance:00000000 rightDistance
     /tmp/ccaJ9T94.s:2097   .bss.incomingCommand:00000000 $d
     /tmp/ccaJ9T94.s:2100   .bss.command:00000000 $d
     /tmp/ccaJ9T94.s:2107   .bss.rightDistance:00000000 $d
     /tmp/ccaJ9T94.s:2114   .bss.leftDistance:00000000 $d
     /tmp/ccaJ9T94.s:2121   .bss.Value2:00000000 $d
     /tmp/ccaJ9T94.s:2128   .bss.Value1:00000000 $d
     /tmp/ccaJ9T94.s:2135   .bss.startTime:00000000 $d
     /tmp/ccaJ9T94.s:2142   .bss.pMillis:00000000 $d
     /tmp/ccaJ9T94.s:2149   .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
memcpy
sprintf
HAL_Delay
MoveMotors
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
HAL_TIM_Base_Start
HAL_GetTick
HAL_GPIO_ReadPin
