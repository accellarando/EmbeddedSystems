ARM GAS  /tmp/ccWqzMz6.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_TIM15_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_TIM15_Init:
  25              	.LFB57:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****  * in the root directory of this software component.
  14:Src/main.c    ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  ******************************************************************************
  17:Src/main.c    ****  */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include <stdbool.h>
  24:Src/main.c    **** #include "motor.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccWqzMz6.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim15;
  49:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  50:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  51:Src/main.c    **** #define TRIG_PORT GPIOB
  52:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  53:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  54:Src/main.c    **** #define ECHO_PORT GPIOB
  55:Src/main.c    **** volatile uint32_t pMillis;
  56:Src/main.c    **** volatile uint16_t startTime;
  57:Src/main.c    **** volatile uint16_t Value1 = 0;
  58:Src/main.c    **** volatile uint16_t Value2 = 0;
  59:Src/main.c    **** volatile uint16_t leftDistance = 0;
  60:Src/main.c    **** volatile uint16_t rightDistance = 0;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** static void MX_GPIO_Init(void);
  69:Src/main.c    **** static void MX_TIM15_Init(void);
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** #define LED_RED GPIO_PIN_6
  77:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  78:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  79:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  80:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  81:Src/main.c    **** 
  82:Src/main.c    **** void LED_Init(uint32_t pins) {
  83:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  84:Src/main.c    **** 
  85:Src/main.c    **** 	GPIO_InitTypeDef gpio_led_init = {pins,
  86:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
  87:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
  88:Src/main.c    **** 		GPIO_NOPULL
  89:Src/main.c    **** 	};
  90:Src/main.c    **** 	HAL_GPIO_Init(GPIOC, &gpio_led_init);
ARM GAS  /tmp/ccWqzMz6.s 			page 3


  91:Src/main.c    **** }
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  95:Src/main.c    ****  *        functions appropriately.
  96:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  97:Src/main.c    ****  */
  98:Src/main.c    **** void GPIO_AF_Init() {
  99:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 100:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 101:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 102:Src/main.c    **** 
 103:Src/main.c    **** 	// uart_pins
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 105:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 106:Src/main.c    **** 
 107:Src/main.c    **** 	// motor_left_pins
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 113:Src/main.c    **** 
 114:Src/main.c    **** 	// motor_right_pins
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 119:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 120:Src/main.c    **** 
 121:Src/main.c    **** 	// ultrasonic_left_pins
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 123:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 124:Src/main.c    **** 
 125:Src/main.c    **** 	// ultrasonic_right_pins
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 127:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 128:Src/main.c    **** }
 129:Src/main.c    **** 
 130:Src/main.c    **** /**
 131:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 132:Src/main.c    ****  */
 133:Src/main.c    **** void USART_Init() {
 134:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 135:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	//Set baud rate
 138:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 139:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 140:Src/main.c    **** 												//use with the BT adapter
 141:Src/main.c    **** 
 142:Src/main.c    **** 												//Enable transmitter
 143:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	//Enable receiver
 146:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 147:Src/main.c    **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 4


 148:Src/main.c    **** 	//Enable the receive register not empty interrupt
 149:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	//Enable USART3
 152:Src/main.c    **** 	USART3->CR1 |= 1;
 153:Src/main.c    **** }
 154:Src/main.c    **** 
 155:Src/main.c    **** /**
 156:Src/main.c    ****  * @brief Sends a single character on the USART.
 157:Src/main.c    ****  *
 158:Src/main.c    ****  * @param c: the character to be sent
 159:Src/main.c    ****  */
 160:Src/main.c    **** void USART_SendChar(uint8_t c) {
 161:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 162:Src/main.c    **** 		;
 163:Src/main.c    **** 
 164:Src/main.c    **** 	USART3->TDR = c;
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** /**
 168:Src/main.c    ****  * @brief Sends a string on the USART.
 169:Src/main.c    ****  *
 170:Src/main.c    ****  * @param p_string: pointer to string to send
 171:Src/main.c    ****  */
 172:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 173:Src/main.c    **** 	while(*p_string != 0) {
 174:Src/main.c    **** 		USART_SendChar(*p_string);
 175:Src/main.c    **** 		p_string++;
 176:Src/main.c    **** 	}
 177:Src/main.c    **** 	USART_SendChar(0);
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** volatile uint8_t command[3];
 181:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 182:Src/main.c    **** 
 183:Src/main.c    **** void ClearCommand(){
 184:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 185:Src/main.c    **** 	memset(command, 0, sizeof(command));
 186:Src/main.c    **** 	incomingCommand = 0;
 187:Src/main.c    **** 	USART_SendString(prompt);
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** void USART3_4_IRQHandler(){
 191:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 192:Src/main.c    **** 	incomingCommand = 1;
 193:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 194:Src/main.c    **** 	}
 195:Src/main.c    **** 	if(command[0]){
 196:Src/main.c    **** 		if(command[1]){
 197:Src/main.c    **** 			USART_SendString(err);
 198:Src/main.c    **** 			ClearCommand();
 199:Src/main.c    **** 		}
 200:Src/main.c    **** 		else{
 201:Src/main.c    **** 			command[1] = USART3->RDR;
 202:Src/main.c    **** 		}
 203:Src/main.c    **** 	}
 204:Src/main.c    **** 	else{
ARM GAS  /tmp/ccWqzMz6.s 			page 5


 205:Src/main.c    **** 		command[0] = USART3->RDR;
 206:Src/main.c    **** 	}
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** void Log(){
 210:Src/main.c    **** 	uint8_t str_buff[32];
 211:Src/main.c    **** 
 212:Src/main.c    **** 	uint32_t samples[3] = {0};
 213:Src/main.c    **** 
 214:Src/main.c    **** 	for(uint8_t i=0; i<3; i++){
 215:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 216:Src/main.c    **** 		HAL_Delay(60);
 217:Src/main.c    **** 	}
 218:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic right: %u %u %u\n", samples[2], samples[1], samples[0]);
 219:Src/main.c    **** 	USART_SendString(str_buff);
 220:Src/main.c    **** 
 221:Src/main.c    **** 	for(uint8_t i=0; i<3; i++){
 222:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 223:Src/main.c    **** 		HAL_Delay(60);
 224:Src/main.c    **** 	}
 225:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic left: %u %u %u\n", samples[2], samples[1], samples[0]);
 226:Src/main.c    **** 	USART_SendString(str_buff);
 227:Src/main.c    **** 
 228:Src/main.c    **** 
 229:Src/main.c    **** 	sprintf(str_buff, "Distance travelled: %d\n", (int)get_distance());
 230:Src/main.c    **** 	USART_SendString(str_buff);
 231:Src/main.c    **** 
 232:Src/main.c    **** 	sprintf(str_buff, "Heading: %d\n", (int)get_heading());
 233:Src/main.c    **** 	USART_SendString(str_buff);
 234:Src/main.c    **** 
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** void Proceed(){
 238:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 239:Src/main.c    **** 	USART_SendString(err);
 240:Src/main.c    **** }
 241:Src/main.c    **** 
 242:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 243:Src/main.c    **** 	uint32_t left_motor_pin;
 244:Src/main.c    **** 	uint32_t right_motor_pin;
 245:Src/main.c    **** 	int32_t CH1_DC = 65535;
 246:Src/main.c    **** 
 247:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 248:Src/main.c    **** 
 249:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 250:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 251:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 252:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 253:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 254:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 255:Src/main.c    **** 
 256:Src/main.c    **** 	MotorCommand motorcmd = {0};
 257:Src/main.c    **** 
 258:Src/main.c    **** 	uint8_t* part1;
 259:Src/main.c    **** 	uint8_t part2[15];
 260:Src/main.c    **** 	uint8_t zero = 0;
 261:Src/main.c    **** 	memcpy(part2, &zero, 15);
ARM GAS  /tmp/ccWqzMz6.s 			page 6


 262:Src/main.c    **** 
 263:Src/main.c    **** 	switch(direction){
 264:Src/main.c    **** 		case 'w':
 265:Src/main.c    **** 			part1 = forward;
 266:Src/main.c    **** 			motorcmd.dir = FORWARD;
 267:Src/main.c    **** 			break;
 268:Src/main.c    **** 		case 'a':
 269:Src/main.c    **** 			part1 = left;
 270:Src/main.c    **** 			motorcmd.dir = LEFT;
 271:Src/main.c    **** 			break;
 272:Src/main.c    **** 		case 'd':
 273:Src/main.c    **** 			part1 = right;
 274:Src/main.c    **** 			motorcmd.dir = RIGHT;
 275:Src/main.c    **** 			break;
 276:Src/main.c    **** 		case 'l':
 277:Src/main.c    **** 			part1 = log;
 278:Src/main.c    **** 			USART_SendString(part1);
 279:Src/main.c    **** 			Log();
 280:Src/main.c    **** 			ClearCommand();
 281:Src/main.c    **** 			return;
 282:Src/main.c    **** 		case 'p':
 283:Src/main.c    **** 			part1 = proceed;
 284:Src/main.c    **** 			USART_SendString(part1);
 285:Src/main.c    **** 			Proceed();
 286:Src/main.c    **** 			ClearCommand();
 287:Src/main.c    **** 			return;
 288:Src/main.c    **** 		case 'x':
 289:Src/main.c    **** 			part1 = stop;
 290:Src/main.c    **** 			USART_SendString(part1);
 291:Src/main.c    **** 			motorcmd.dir = OFF;
 292:Src/main.c    **** 			MoveMotors(&motorcmd);
 293:Src/main.c    **** 			ClearCommand();
 294:Src/main.c    **** 			return;
 295:Src/main.c    **** 		default:
 296:Src/main.c    **** 			USART_SendString(err);
 297:Src/main.c    **** 			ClearCommand();
 298:Src/main.c    **** 			return;
 299:Src/main.c    **** 	}
 300:Src/main.c    **** 
 301:Src/main.c    **** 	//these are for "vector commands" only:
 302:Src/main.c    **** 
 303:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 304:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 305:Src/main.c    **** 		motorcmd.amount = 0;
 306:Src/main.c    **** 	}
 307:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 308:Src/main.c    **** 		USART_SendString(err);
 309:Src/main.c    **** 		ClearCommand();
 310:Src/main.c    **** 		return;
 311:Src/main.c    **** 	}
 312:Src/main.c    **** 	else{
 313:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 314:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 315:Src/main.c    **** 		motorcmd.amount = dist;
 316:Src/main.c    **** 	}
 317:Src/main.c    **** 
 318:Src/main.c    **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 7


 319:Src/main.c    **** 	USART_SendString(part1);
 320:Src/main.c    **** 	USART_SendString(part2);
 321:Src/main.c    **** 
 322:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 323:Src/main.c    **** 	HAL_Delay(1000);
 324:Src/main.c    **** 	TIM2->CCR1 = 0;
 325:Src/main.c    **** 
 326:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 327:Src/main.c    **** 	USART_SendString(result);
 328:Src/main.c    **** 
 329:Src/main.c    **** 	ClearCommand();
 330:Src/main.c    **** 
 331:Src/main.c    **** 
 332:Src/main.c    **** 	// Example code while loop
 333:Src/main.c    **** 	//    while (1)
 334:Src/main.c    **** 	//    {
 335:Src/main.c    **** 	//        while(CH1_DC < 65535)
 336:Src/main.c    **** 	//        {
 337:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 338:Src/main.c    **** 	//            CH1_DC += 70;
 339:Src/main.c    **** 	//            HAL_Delay(1);
 340:Src/main.c    **** 	//        }
 341:Src/main.c    **** 	//        while(CH1_DC > 0)
 342:Src/main.c    **** 	//        {
 343:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 344:Src/main.c    **** 	//            CH1_DC -= 70;
 345:Src/main.c    **** 	//            HAL_Delay(1);
 346:Src/main.c    **** 	//        }
 347:Src/main.c    **** 	//    }
 348:Src/main.c    **** }
 349:Src/main.c    **** 
 350:Src/main.c    **** /*
 351:Src/main.c    ****    void ProcessCommandPWM(uint8_t side, uint8_t amt){
 352:Src/main.c    ****    MotorCommand motorcmd = {0};
 353:Src/main.c    ****    motorcmd.dir = FORWARD;
 354:Src/main.c    ****    motorcmd.amount = 9;
 355:Src/main.c    ****    switch(side){
 356:Src/main.c    ****    case 'l':
 357:Src/main.c    ****    pwm_left = amt;
 358:Src/main.c    ****    break;
 359:Src/main.c    ****    case 'r':
 360:Src/main.c    ****    pwm_right = amt;
 361:Src/main.c    ****    break;
 362:Src/main.c    ****    case 'x':
 363:Src/main.c    ****    motorcmd.dir = OFF;
 364:Src/main.c    ****    break;
 365:Src/main.c    ****    default:
 366:Src/main.c    ****    break;
 367:Src/main.c    ****    }
 368:Src/main.c    ****    MoveMotors(&motorcmd);
 369:Src/main.c    ****    ClearCommand();
 370:Src/main.c    ****    }
 371:Src/main.c    ****    */
 372:Src/main.c    **** 
 373:Src/main.c    **** /*
 374:Src/main.c    ****    void Ultrasonic_Init(uint32_t pins)
 375:Src/main.c    ****    {
ARM GAS  /tmp/ccWqzMz6.s 			page 8


 376:Src/main.c    ****    __HAL_RCC_GPIOA_CLK_ENABLE();
 377:Src/main.c    **** 
 378:Src/main.c    ****    GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 379:Src/main.c    ****    GPIO_MODE_INPUT,
 380:Src/main.c    ****    GPIO_SPEED_FREQ_LOW,
 381:Src/main.c    ****    GPIO_NOPULL
 382:Src/main.c    ****    };
 383:Src/main.c    ****    HAL_GPIO_Init(GPIOA, &gpio_init);
 384:Src/main.c    ****    }
 385:Src/main.c    ****    */
 386:Src/main.c    **** 
 387:Src/main.c    **** void PrintDistance()
 388:Src/main.c    **** {
 389:Src/main.c    **** 	char dist[32] = "";
 390:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 391:Src/main.c    **** 	USART_SendString(dist);
 392:Src/main.c    **** }
 393:Src/main.c    **** 
 394:Src/main.c    **** volatile uint32_t risingEdgeTime;
 395:Src/main.c    **** volatile uint32_t fallingEdgeTime;
 396:Src/main.c    **** volatile uint32_t pulseWidth = 0;
 397:Src/main.c    **** // Define constants
 398:Src/main.c    **** 
 399:Src/main.c    **** // Declare global variables
 400:Src/main.c    **** TIM_HandleTypeDef htim155;
 401:Src/main.c    **** uint32_t pulse_start_time = 0;
 402:Src/main.c    **** uint32_t pulse_end_time = 0;
 403:Src/main.c    **** 
 404:Src/main.c    **** uint32_t GetUltrasonic(ultrasonic_pins_t* ultrasonic){
 405:Src/main.c    **** 	uint32_t i = 0, j = 0;
 406:Src/main.c    **** 	TIM15->EGR |= 1; //clears counter
 407:Src/main.c    **** 	while(TIM15->EGR & 1)
 408:Src/main.c    **** 		;
 409:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_SET);
 410:Src/main.c    **** 	while (TIM15->CNT < 200){
 411:Src/main.c    **** 	}
 412:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 413:Src/main.c    **** 
 414:Src/main.c    **** 	pMillis = TIM15->CNT;
 415:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 416:Src/main.c    **** 		i++;
 417:Src/main.c    **** 	}
 418:Src/main.c    **** 	uint32_t val1 = TIM15->CNT;
 419:Src/main.c    **** 
 420:Src/main.c    **** 	pMillis = val1;
 421:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 422:Src/main.c    **** 		j++;
 423:Src/main.c    **** 	}
 424:Src/main.c    **** 
 425:Src/main.c    **** 	uint32_t val2 = TIM15->CNT;
 426:Src/main.c    **** 	uint8_t buff[32];
 427:Src/main.c    **** 	sprintf(buff, "%d - %d, %d, %d\n", val2, val1, i, j);
 428:Src/main.c    **** 	USART_SendString(buff);
 429:Src/main.c    **** 	return (val2-val1)/4.55;
 430:Src/main.c    **** }
 431:Src/main.c    **** /* USER CODE END 0 */
 432:Src/main.c    **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 9


 433:Src/main.c    **** /**
 434:Src/main.c    ****  * @brief  The application entry point.
 435:Src/main.c    ****  * @retval int
 436:Src/main.c    ****  */
 437:Src/main.c    **** 
 438:Src/main.c    **** //doesn't actually init tim15 but don't worry about it....
 439:Src/main.c    **** /*
 440:Src/main.c    ****    void TIM15_Init(){
 441:Src/main.c    ****    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 442:Src/main.c    ****    TIM_MasterConfigTypeDef sMasterConfig = {0};
 443:Src/main.c    ****    TIM_IC_InitTypeDef sConfigIC = {0};
 444:Src/main.c    **** 
 445:Src/main.c    ****    htim155.Instance = TIM15;
 446:Src/main.c    ****    htim155.Init.Prescaler = 14;
 447:Src/main.c    ****    htim155.Init.CounterMode = TIM_COUNTERMODE_UP;
 448:Src/main.c    ****    htim155.Init.Period = 0xFFFF;
 449:Src/main.c    ****    htim155.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 450:Src/main.c    ****    if (HAL_TIM_Base_Init(&htim155) != HAL_OK)
 451:Src/main.c    ****    {
 452:Src/main.c    ****    Error_Handler();
 453:Src/main.c    ****    }
 454:Src/main.c    ****    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 455:Src/main.c    ****    if (HAL_TIM_ConfigClockSource(&htim155, &sClockSourceConfig) != HAL_OK)
 456:Src/main.c    ****    {
 457:Src/main.c    ****    Error_Handler();
 458:Src/main.c    ****    }
 459:Src/main.c    ****    if (HAL_TIM_IC_Init(&htim155) != HAL_OK)
 460:Src/main.c    ****    {
 461:Src/main.c    ****    Error_Handler();
 462:Src/main.c    ****    }
 463:Src/main.c    ****    sConfigIC.ICPolarity = TIM_ICPOLARITY_BOTHEDGE;
 464:Src/main.c    ****    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 465:Src/main.c    ****    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 466:Src/main.c    ****    sConfigIC.ICFilter = 0;
 467:Src/main.c    ****    if (HAL_TIM_IC_ConfigChannel(&htim155, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 468:Src/main.c    ****    {
 469:Src/main.c    ****    Error_Handler();
 470:Src/main.c    ****    }
 471:Src/main.c    ****    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 472:Src/main.c    ****    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 473:Src/main.c    ****    if (HAL_TIMEx_MasterConfigSynchronization(&htim155, &sMasterConfig) != HAL_OK)
 474:Src/main.c    ****    {
 475:Src/main.c    ****    Error_Handler();
 476:Src/main.c    ****    }
 477:Src/main.c    ****    }
 478:Src/main.c    ****    */
 479:Src/main.c    **** 
 480:Src/main.c    **** int main(void)
 481:Src/main.c    **** {
 482:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 483:Src/main.c    **** 	SystemClock_Config();
 484:Src/main.c    **** 
 485:Src/main.c    **** 	//USART Initalizations
 486:Src/main.c    **** 	GPIO_AF_Init();
 487:Src/main.c    **** 	USART_Init();
 488:Src/main.c    **** 
 489:Src/main.c    **** 	motor_init();                           // Initialize motor code
ARM GAS  /tmp/ccWqzMz6.s 			page 10


 490:Src/main.c    **** 
 491:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 492:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,2);
 493:Src/main.c    **** 
 494:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 495:Src/main.c    **** 
 496:Src/main.c    **** 	//PWM and Ultrasonic Initalizations
 497:Src/main.c    **** 	MX_GPIO_Init();
 498:Src/main.c    **** 	/* TIM15_Init(); */
 499:Src/main.c    **** 	MX_TIM15_Init(); 
 500:Src/main.c    **** 
 501:Src/main.c    **** 	/* HAL_TIM_Base_Start(&htim15); */
 502:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 503:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 504:Src/main.c    **** 
 505:Src/main.c    **** 	while (1) {
 506:Src/main.c    **** 		if(incomingCommand)
 507:Src/main.c    **** 		{
 508:Src/main.c    **** 			if(command[0] != 'w' &&
 509:Src/main.c    **** 					command[0] != 'a' &&
 510:Src/main.c    **** 					command[0] != 'd'){
 511:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 512:Src/main.c    **** 			}
 513:Src/main.c    **** 			if(command[1])
 514:Src/main.c    **** 			{
 515:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 516:Src/main.c    **** 			}
 517:Src/main.c    **** 		}
 518:Src/main.c    **** 		/*
 519:Src/main.c    **** 		   if(incomingCommand){
 520:Src/main.c    **** 		   if(command[2]){
 521:Src/main.c    **** 		   uint8_t tens = command[1] - '0';
 522:Src/main.c    **** 		   uint8_t huns = command[2] - '0';
 523:Src/main.c    **** 		   ProcessCommandPWM(command[0], 10*tens + huns);
 524:Src/main.c    **** 		   }
 525:Src/main.c    **** 		   }
 526:Src/main.c    **** 		   */
 527:Src/main.c    **** 		HAL_Delay(500);
 528:Src/main.c    **** 	}
 529:Src/main.c    **** }
 530:Src/main.c    **** 
 531:Src/main.c    **** /**
 532:Src/main.c    ****  * @brief System Clock Configuration
 533:Src/main.c    ****  * @retval None
 534:Src/main.c    ****  */
 535:Src/main.c    **** void SystemClock_Config(void)
 536:Src/main.c    **** {
 537:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 538:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 539:Src/main.c    **** 
 540:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 541:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 542:Src/main.c    **** 	 */
 543:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 544:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 545:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 546:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
ARM GAS  /tmp/ccWqzMz6.s 			page 11


 547:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 548:Src/main.c    **** 	{
 549:Src/main.c    **** 		Error_Handler();
 550:Src/main.c    **** 	}
 551:Src/main.c    **** 
 552:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 553:Src/main.c    **** 	*/
 554:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 555:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 556:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 557:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 558:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 559:Src/main.c    **** 
 560:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 561:Src/main.c    **** 	{
 562:Src/main.c    **** 		Error_Handler();
 563:Src/main.c    **** 	}
 564:Src/main.c    **** }
 565:Src/main.c    **** 
 566:Src/main.c    **** /**
 567:Src/main.c    ****  * @brief TIM15 Initialization Function
 568:Src/main.c    ****  * @param None
 569:Src/main.c    ****  * @retval None
 570:Src/main.c    ****  */
 571:Src/main.c    **** static void MX_TIM15_Init(void)
 572:Src/main.c    **** {
  26              		.loc 1 572 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 573:Src/main.c    **** 
 574:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 0 */
 575:Src/main.c    **** 
 576:Src/main.c    **** 	/* USER CODE END TIM1_Init 0 */
 577:Src/main.c    **** 
 578:Src/main.c    **** 	/* TIM_ClockConfigTypeDef sClockSourceConfig = {0}; */
 579:Src/main.c    **** 	/* TIM_MasterConfigTypeDef sMasterConfig = {0}; */
 580:Src/main.c    **** 
 581:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 1 */
 582:Src/main.c    **** 
 583:Src/main.c    **** 	/* USER CODE END TIM1_Init 1 */
 584:Src/main.c    **** 	/*
 585:Src/main.c    **** 	htim15.Instance = TIM15;
 586:Src/main.c    **** 	htim15.Init.Prescaler = 0;
 587:Src/main.c    **** 	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 588:Src/main.c    **** 	htim15.Init.Period = 65535;
 589:Src/main.c    **** 	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 590:Src/main.c    **** 	htim15.Init.RepetitionCounter = 0;
 591:Src/main.c    **** 	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 592:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 593:Src/main.c    **** 	{
 594:Src/main.c    **** 		Error_Handler();
 595:Src/main.c    **** 	}
 596:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 597:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 598:Src/main.c    **** 	{
ARM GAS  /tmp/ccWqzMz6.s 			page 12


 599:Src/main.c    **** 		Error_Handler();
 600:Src/main.c    **** 	}
 601:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 602:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 603:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 604:Src/main.c    **** 	{
 605:Src/main.c    **** 		Error_Handler();
 606:Src/main.c    **** 	}
 607:Src/main.c    **** 	*/
 608:Src/main.c    **** 
 609:Src/main.c    **** 	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
  31              		.loc 1 609 2 view .LVU1
  32              		.loc 1 609 5 is_stmt 0 view .LVU2
  33 0000 074A     		ldr	r2, .L2
  34 0002 9169     		ldr	r1, [r2, #24]
  35              		.loc 1 609 15 view .LVU3
  36 0004 8023     		movs	r3, #128
  37 0006 5B02     		lsls	r3, r3, #9
  38 0008 0B43     		orrs	r3, r1
  39 000a 9361     		str	r3, [r2, #24]
 610:Src/main.c    **** 	TIM15->PSC |= 100;
  40              		.loc 1 610 2 is_stmt 1 view .LVU4
  41              		.loc 1 610 7 is_stmt 0 view .LVU5
  42 000c 054B     		ldr	r3, .L2+4
  43 000e 9A6A     		ldr	r2, [r3, #40]
  44              		.loc 1 610 13 view .LVU6
  45 0010 6421     		movs	r1, #100
  46 0012 0A43     		orrs	r2, r1
  47 0014 9A62     		str	r2, [r3, #40]
 611:Src/main.c    **** 	TIM15->CR1 |= TIM_CR1_CEN;
  48              		.loc 1 611 2 is_stmt 1 view .LVU7
  49              		.loc 1 611 7 is_stmt 0 view .LVU8
  50 0016 1A68     		ldr	r2, [r3]
  51              		.loc 1 611 13 view .LVU9
  52 0018 6339     		subs	r1, r1, #99
  53 001a 0A43     		orrs	r2, r1
  54 001c 1A60     		str	r2, [r3]
 612:Src/main.c    **** 
 613:Src/main.c    **** 	// HAL_TIM_Base_Start(&htim15);
 614:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 2 */
 615:Src/main.c    **** 
 616:Src/main.c    **** 	/* USER CODE END TIM1_Init 2 */
 617:Src/main.c    **** 
 618:Src/main.c    **** }
  55              		.loc 1 618 1 view .LVU10
  56              		@ sp needed
  57 001e 7047     		bx	lr
  58              	.L3:
  59              		.align	2
  60              	.L2:
  61 0020 00100240 		.word	1073876992
  62 0024 00400140 		.word	1073823744
  63              		.cfi_endproc
  64              	.LFE57:
  66              		.section	.text.MX_GPIO_Init,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
ARM GAS  /tmp/ccWqzMz6.s 			page 13


  69              		.code	16
  70              		.thumb_func
  72              	MX_GPIO_Init:
  73              	.LFB58:
 619:Src/main.c    **** 
 620:Src/main.c    **** /**
 621:Src/main.c    ****  * @brief GPIO Initialization Function
 622:Src/main.c    ****  * @param None
 623:Src/main.c    ****  * @retval None
 624:Src/main.c    ****  */
 625:Src/main.c    **** static void MX_GPIO_Init(void)
 626:Src/main.c    **** {
  74              		.loc 1 626 1 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 24
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 86B0     		sub	sp, sp, #24
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 32
 627:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  86              		.loc 1 627 2 view .LVU12
  87              		.loc 1 627 19 is_stmt 0 view .LVU13
  88 0004 1422     		movs	r2, #20
  89 0006 0021     		movs	r1, #0
  90 0008 01A8     		add	r0, sp, #4
  91 000a FFF7FEFF 		bl	memset
  92              	.LVL0:
 628:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 629:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 630:Src/main.c    **** 
 631:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 632:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  93              		.loc 1 632 2 is_stmt 1 view .LVU14
  94              	.LBB8:
  95              		.loc 1 632 2 view .LVU15
  96              		.loc 1 632 2 view .LVU16
  97 000e 0E4B     		ldr	r3, .L5
  98 0010 5A69     		ldr	r2, [r3, #20]
  99 0012 8021     		movs	r1, #128
 100 0014 C903     		lsls	r1, r1, #15
 101 0016 0A43     		orrs	r2, r1
 102 0018 5A61     		str	r2, [r3, #20]
 103              		.loc 1 632 2 view .LVU17
 104 001a 5B69     		ldr	r3, [r3, #20]
 105 001c 0B40     		ands	r3, r1
 106 001e 0093     		str	r3, [sp]
 107              		.loc 1 632 2 view .LVU18
 108 0020 009B     		ldr	r3, [sp]
 109              	.LBE8:
 110              		.loc 1 632 2 view .LVU19
 633:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 634:Src/main.c    **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 14


 635:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 636:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 111              		.loc 1 636 2 view .LVU20
 112 0022 9024     		movs	r4, #144
 113 0024 E405     		lsls	r4, r4, #23
 114 0026 0022     		movs	r2, #0
 115 0028 0121     		movs	r1, #1
 116 002a 2000     		movs	r0, r4
 117 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL1:
 637:Src/main.c    **** 
 638:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 639:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
 119              		.loc 1 639 2 view .LVU21
 120              		.loc 1 639 22 is_stmt 0 view .LVU22
 121 0030 0123     		movs	r3, #1
 122 0032 0193     		str	r3, [sp, #4]
 640:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 123              		.loc 1 640 2 is_stmt 1 view .LVU23
 124              		.loc 1 640 23 is_stmt 0 view .LVU24
 125 0034 0293     		str	r3, [sp, #8]
 641:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 126              		.loc 1 641 2 is_stmt 1 view .LVU25
 127              		.loc 1 641 23 is_stmt 0 view .LVU26
 128 0036 0023     		movs	r3, #0
 129 0038 0393     		str	r3, [sp, #12]
 642:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 642 2 is_stmt 1 view .LVU27
 131              		.loc 1 642 24 is_stmt 0 view .LVU28
 132 003a 0493     		str	r3, [sp, #16]
 643:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 133              		.loc 1 643 2 is_stmt 1 view .LVU29
 134 003c 01A9     		add	r1, sp, #4
 135 003e 2000     		movs	r0, r4
 136 0040 FFF7FEFF 		bl	HAL_GPIO_Init
 137              	.LVL2:
 644:Src/main.c    **** 
 645:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 646:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 647:Src/main.c    **** }
 138              		.loc 1 647 1 is_stmt 0 view .LVU30
 139 0044 06B0     		add	sp, sp, #24
 140              		@ sp needed
 141 0046 10BD     		pop	{r4, pc}
 142              	.L6:
 143              		.align	2
 144              	.L5:
 145 0048 00100240 		.word	1073876992
 146              		.cfi_endproc
 147              	.LFE58:
 149              		.section	.text.LED_Init,"ax",%progbits
 150              		.align	1
 151              		.global	LED_Init
 152              		.syntax unified
 153              		.code	16
 154              		.thumb_func
 156              	LED_Init:
ARM GAS  /tmp/ccWqzMz6.s 			page 15


 157              	.LVL3:
 158              	.LFB43:
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 159              		.loc 1 82 30 is_stmt 1 view -0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 24
 162              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 163              		.loc 1 82 30 is_stmt 0 view .LVU32
 164 0000 10B5     		push	{r4, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169 0002 86B0     		sub	sp, sp, #24
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 32
 172 0004 0400     		movs	r4, r0
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 173              		.loc 1 85 2 is_stmt 1 view .LVU33
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 174              		.loc 1 85 19 is_stmt 0 view .LVU34
 175 0006 1422     		movs	r2, #20
 176 0008 0021     		movs	r1, #0
 177 000a 01A8     		add	r0, sp, #4
 178              	.LVL4:
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 179              		.loc 1 85 19 view .LVU35
 180 000c FFF7FEFF 		bl	memset
 181              	.LVL5:
 182 0010 0194     		str	r4, [sp, #4]
 183 0012 0123     		movs	r3, #1
 184 0014 0293     		str	r3, [sp, #8]
  90:Src/main.c    **** }
 185              		.loc 1 90 2 is_stmt 1 view .LVU36
 186 0016 01A9     		add	r1, sp, #4
 187 0018 0248     		ldr	r0, .L8
 188 001a FFF7FEFF 		bl	HAL_GPIO_Init
 189              	.LVL6:
  91:Src/main.c    **** 
 190              		.loc 1 91 1 is_stmt 0 view .LVU37
 191 001e 06B0     		add	sp, sp, #24
 192              		@ sp needed
 193              	.LVL7:
  91:Src/main.c    **** 
 194              		.loc 1 91 1 view .LVU38
 195 0020 10BD     		pop	{r4, pc}
 196              	.L9:
 197 0022 C046     		.align	2
 198              	.L8:
 199 0024 00080048 		.word	1207961600
 200              		.cfi_endproc
 201              	.LFE43:
 203              		.section	.text.GPIO_AF_Init,"ax",%progbits
 204              		.align	1
 205              		.global	GPIO_AF_Init
 206              		.syntax unified
ARM GAS  /tmp/ccWqzMz6.s 			page 16


 207              		.code	16
 208              		.thumb_func
 210              	GPIO_AF_Init:
 211              	.LFB44:
  98:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 212              		.loc 1 98 21 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 16
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              	.LCFI4:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 4, -8
 220              		.cfi_offset 14, -4
 221 0002 84B0     		sub	sp, sp, #16
 222              	.LCFI5:
 223              		.cfi_def_cfa_offset 24
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 224              		.loc 1 99 2 view .LVU40
 225              	.LBB9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 226              		.loc 1 99 2 view .LVU41
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 227              		.loc 1 99 2 view .LVU42
 228 0004 364B     		ldr	r3, .L11
 229 0006 5A69     		ldr	r2, [r3, #20]
 230 0008 8021     		movs	r1, #128
 231 000a 8902     		lsls	r1, r1, #10
 232 000c 0A43     		orrs	r2, r1
 233 000e 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 234              		.loc 1 99 2 view .LVU43
 235 0010 5A69     		ldr	r2, [r3, #20]
 236 0012 0A40     		ands	r2, r1
 237 0014 0192     		str	r2, [sp, #4]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 238              		.loc 1 99 2 view .LVU44
 239 0016 019A     		ldr	r2, [sp, #4]
 240              	.LBE9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 241              		.loc 1 99 2 view .LVU45
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 242              		.loc 1 100 2 view .LVU46
 243              	.LBB10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 244              		.loc 1 100 2 view .LVU47
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 245              		.loc 1 100 2 view .LVU48
 246 0018 5A69     		ldr	r2, [r3, #20]
 247 001a 8021     		movs	r1, #128
 248 001c C902     		lsls	r1, r1, #11
 249 001e 0A43     		orrs	r2, r1
 250 0020 5A61     		str	r2, [r3, #20]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 251              		.loc 1 100 2 view .LVU49
 252 0022 5A69     		ldr	r2, [r3, #20]
 253 0024 0A40     		ands	r2, r1
ARM GAS  /tmp/ccWqzMz6.s 			page 17


 254 0026 0292     		str	r2, [sp, #8]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 255              		.loc 1 100 2 view .LVU50
 256 0028 029A     		ldr	r2, [sp, #8]
 257              	.LBE10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 258              		.loc 1 100 2 view .LVU51
 101:Src/main.c    **** 
 259              		.loc 1 101 2 view .LVU52
 260              	.LBB11:
 101:Src/main.c    **** 
 261              		.loc 1 101 2 view .LVU53
 101:Src/main.c    **** 
 262              		.loc 1 101 2 view .LVU54
 263 002a 5A69     		ldr	r2, [r3, #20]
 264 002c 8021     		movs	r1, #128
 265 002e 0903     		lsls	r1, r1, #12
 266 0030 0A43     		orrs	r2, r1
 267 0032 5A61     		str	r2, [r3, #20]
 101:Src/main.c    **** 
 268              		.loc 1 101 2 view .LVU55
 269 0034 5B69     		ldr	r3, [r3, #20]
 270 0036 0B40     		ands	r3, r1
 271 0038 0393     		str	r3, [sp, #12]
 101:Src/main.c    **** 
 272              		.loc 1 101 2 view .LVU56
 273 003a 039B     		ldr	r3, [sp, #12]
 274              	.LBE11:
 101:Src/main.c    **** 
 275              		.loc 1 101 2 view .LVU57
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 276              		.loc 1 104 2 view .LVU58
 277 003c 2949     		ldr	r1, .L11+4
 278 003e 0C1F     		subs	r4, r1, #4
 279 0040 2068     		ldr	r0, [r4]
 280 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL8:
 105:Src/main.c    **** 
 282              		.loc 1 105 2 view .LVU59
 283 0046 2100     		movs	r1, r4
 284 0048 1C31     		adds	r1, r1, #28
 285 004a A069     		ldr	r0, [r4, #24]
 286 004c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL9:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 288              		.loc 1 108 2 view .LVU60
 289 0050 2549     		ldr	r1, .L11+8
 290 0052 0C1F     		subs	r4, r1, #4
 291 0054 2068     		ldr	r0, [r4]
 292 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL10:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 294              		.loc 1 109 2 view .LVU61
 295 005a 2100     		movs	r1, r4
 296 005c 1C31     		adds	r1, r1, #28
 297 005e A069     		ldr	r0, [r4, #24]
 298 0060 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccWqzMz6.s 			page 18


 299              	.LVL11:
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 300              		.loc 1 110 2 view .LVU62
 301 0064 2100     		movs	r1, r4
 302 0066 3431     		adds	r1, r1, #52
 303 0068 206B     		ldr	r0, [r4, #48]
 304 006a FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL12:
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 306              		.loc 1 111 2 view .LVU63
 307 006e 2100     		movs	r1, r4
 308 0070 4C31     		adds	r1, r1, #76
 309 0072 A06C     		ldr	r0, [r4, #72]
 310 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL13:
 112:Src/main.c    **** 
 312              		.loc 1 112 2 view .LVU64
 313 0078 2100     		movs	r1, r4
 314 007a 6431     		adds	r1, r1, #100
 315 007c 206E     		ldr	r0, [r4, #96]
 316 007e FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL14:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 318              		.loc 1 115 2 view .LVU65
 319 0082 1A49     		ldr	r1, .L11+12
 320 0084 0C1F     		subs	r4, r1, #4
 321 0086 2068     		ldr	r0, [r4]
 322 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL15:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 324              		.loc 1 116 2 view .LVU66
 325 008c 2100     		movs	r1, r4
 326 008e 1C31     		adds	r1, r1, #28
 327 0090 A069     		ldr	r0, [r4, #24]
 328 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 329              	.LVL16:
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 330              		.loc 1 117 2 view .LVU67
 331 0096 2100     		movs	r1, r4
 332 0098 3431     		adds	r1, r1, #52
 333 009a 206B     		ldr	r0, [r4, #48]
 334 009c FFF7FEFF 		bl	HAL_GPIO_Init
 335              	.LVL17:
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 336              		.loc 1 118 2 view .LVU68
 337 00a0 2100     		movs	r1, r4
 338 00a2 4C31     		adds	r1, r1, #76
 339 00a4 A06C     		ldr	r0, [r4, #72]
 340 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 341              	.LVL18:
 119:Src/main.c    **** 
 342              		.loc 1 119 2 view .LVU69
 343 00aa 2100     		movs	r1, r4
 344 00ac 6431     		adds	r1, r1, #100
 345 00ae 206E     		ldr	r0, [r4, #96]
 346 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 347              	.LVL19:
ARM GAS  /tmp/ccWqzMz6.s 			page 19


 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 348              		.loc 1 122 2 view .LVU70
 349 00b4 0E49     		ldr	r1, .L11+16
 350 00b6 0C1F     		subs	r4, r1, #4
 351 00b8 2068     		ldr	r0, [r4]
 352 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 353              	.LVL20:
 123:Src/main.c    **** 
 354              		.loc 1 123 2 view .LVU71
 355 00be 2100     		movs	r1, r4
 356 00c0 1C31     		adds	r1, r1, #28
 357 00c2 A069     		ldr	r0, [r4, #24]
 358 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 359              	.LVL21:
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 360              		.loc 1 126 2 view .LVU72
 361 00c8 0A49     		ldr	r1, .L11+20
 362 00ca 0C1F     		subs	r4, r1, #4
 363 00cc 2068     		ldr	r0, [r4]
 364 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 365              	.LVL22:
 127:Src/main.c    **** }
 366              		.loc 1 127 2 view .LVU73
 367 00d2 2100     		movs	r1, r4
 368 00d4 1C31     		adds	r1, r1, #28
 369 00d6 A069     		ldr	r0, [r4, #24]
 370 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 371              	.LVL23:
 128:Src/main.c    **** 
 372              		.loc 1 128 1 is_stmt 0 view .LVU74
 373 00dc 04B0     		add	sp, sp, #16
 374              		@ sp needed
 375 00de 10BD     		pop	{r4, pc}
 376              	.L12:
 377              		.align	2
 378              	.L11:
 379 00e0 00100240 		.word	1073876992
 380 00e4 04000000 		.word	uart_pins+4
 381 00e8 04000000 		.word	motor_left_pins+4
 382 00ec 04000000 		.word	motor_right_pins+4
 383 00f0 04000000 		.word	ultrasonic_left_pins+4
 384 00f4 04000000 		.word	ultrasonic_right_pins+4
 385              		.cfi_endproc
 386              	.LFE44:
 388              		.global	__aeabi_uidiv
 389              		.section	.text.USART_Init,"ax",%progbits
 390              		.align	1
 391              		.global	USART_Init
 392              		.syntax unified
 393              		.code	16
 394              		.thumb_func
 396              	USART_Init:
 397              	.LFB45:
 133:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 398              		.loc 1 133 19 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccWqzMz6.s 			page 20


 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402 0000 10B5     		push	{r4, lr}
 403              	.LCFI6:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 4, -8
 406              		.cfi_offset 14, -4
 407 0002 82B0     		sub	sp, sp, #8
 408              	.LCFI7:
 409              		.cfi_def_cfa_offset 16
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 410              		.loc 1 134 2 view .LVU76
 411              	.LBB12:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 412              		.loc 1 134 2 view .LVU77
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 413              		.loc 1 134 2 view .LVU78
 414 0004 154B     		ldr	r3, .L14
 415 0006 D969     		ldr	r1, [r3, #28]
 416 0008 8022     		movs	r2, #128
 417 000a D202     		lsls	r2, r2, #11
 418 000c 1143     		orrs	r1, r2
 419 000e D961     		str	r1, [r3, #28]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 420              		.loc 1 134 2 view .LVU79
 421 0010 D969     		ldr	r1, [r3, #28]
 422 0012 1140     		ands	r1, r2
 423 0014 0191     		str	r1, [sp, #4]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 424              		.loc 1 134 2 view .LVU80
 425 0016 0199     		ldr	r1, [sp, #4]
 426              	.LBE12:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 427              		.loc 1 134 2 view .LVU81
 135:Src/main.c    **** 
 428              		.loc 1 135 2 view .LVU82
 135:Src/main.c    **** 
 429              		.loc 1 135 5 is_stmt 0 view .LVU83
 430 0018 D969     		ldr	r1, [r3, #28]
 135:Src/main.c    **** 
 431              		.loc 1 135 15 view .LVU84
 432 001a 0A43     		orrs	r2, r1
 433 001c DA61     		str	r2, [r3, #28]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 434              		.loc 1 138 2 is_stmt 1 view .LVU85
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 435              		.loc 1 138 8 is_stmt 0 view .LVU86
 436 001e 104C     		ldr	r4, .L14+4
 437 0020 2368     		ldr	r3, [r4]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 438              		.loc 1 138 14 view .LVU87
 439 0022 104A     		ldr	r2, .L14+8
 440 0024 1340     		ands	r3, r2
 441 0026 2360     		str	r3, [r4]
 139:Src/main.c    **** 												//use with the BT adapter
 442              		.loc 1 139 2 is_stmt 1 view .LVU88
 139:Src/main.c    **** 												//use with the BT adapter
 443              		.loc 1 139 16 is_stmt 0 view .LVU89
ARM GAS  /tmp/ccWqzMz6.s 			page 21


 444 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 445              	.LVL24:
 139:Src/main.c    **** 												//use with the BT adapter
 446              		.loc 1 139 38 view .LVU90
 447 002c 9621     		movs	r1, #150
 448 002e 8901     		lsls	r1, r1, #6
 449 0030 FFF7FEFF 		bl	__aeabi_uidiv
 450              	.LVL25:
 139:Src/main.c    **** 												//use with the BT adapter
 451              		.loc 1 139 14 view .LVU91
 452 0034 E060     		str	r0, [r4, #12]
 143:Src/main.c    **** 
 453              		.loc 1 143 2 is_stmt 1 view .LVU92
 143:Src/main.c    **** 
 454              		.loc 1 143 8 is_stmt 0 view .LVU93
 455 0036 2368     		ldr	r3, [r4]
 143:Src/main.c    **** 
 456              		.loc 1 143 14 view .LVU94
 457 0038 0822     		movs	r2, #8
 458 003a 1343     		orrs	r3, r2
 459 003c 2360     		str	r3, [r4]
 146:Src/main.c    **** 
 460              		.loc 1 146 2 is_stmt 1 view .LVU95
 146:Src/main.c    **** 
 461              		.loc 1 146 8 is_stmt 0 view .LVU96
 462 003e 2368     		ldr	r3, [r4]
 146:Src/main.c    **** 
 463              		.loc 1 146 14 view .LVU97
 464 0040 043A     		subs	r2, r2, #4
 465 0042 1343     		orrs	r3, r2
 466 0044 2360     		str	r3, [r4]
 149:Src/main.c    **** 
 467              		.loc 1 149 2 is_stmt 1 view .LVU98
 149:Src/main.c    **** 
 468              		.loc 1 149 8 is_stmt 0 view .LVU99
 469 0046 2368     		ldr	r3, [r4]
 149:Src/main.c    **** 
 470              		.loc 1 149 14 view .LVU100
 471 0048 1C32     		adds	r2, r2, #28
 472 004a 1343     		orrs	r3, r2
 473 004c 2360     		str	r3, [r4]
 152:Src/main.c    **** }
 474              		.loc 1 152 2 is_stmt 1 view .LVU101
 152:Src/main.c    **** }
 475              		.loc 1 152 8 is_stmt 0 view .LVU102
 476 004e 2368     		ldr	r3, [r4]
 152:Src/main.c    **** }
 477              		.loc 1 152 14 view .LVU103
 478 0050 1F3A     		subs	r2, r2, #31
 479 0052 1343     		orrs	r3, r2
 480 0054 2360     		str	r3, [r4]
 153:Src/main.c    **** 
 481              		.loc 1 153 1 view .LVU104
 482 0056 02B0     		add	sp, sp, #8
 483              		@ sp needed
 484 0058 10BD     		pop	{r4, pc}
 485              	.L15:
ARM GAS  /tmp/ccWqzMz6.s 			page 22


 486 005a C046     		.align	2
 487              	.L14:
 488 005c 00100240 		.word	1073876992
 489 0060 00480040 		.word	1073760256
 490 0064 FF7FFFFF 		.word	-32769
 491              		.cfi_endproc
 492              	.LFE45:
 494              		.section	.text.USART_SendChar,"ax",%progbits
 495              		.align	1
 496              		.global	USART_SendChar
 497              		.syntax unified
 498              		.code	16
 499              		.thumb_func
 501              	USART_SendChar:
 502              	.LFB46:
 160:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 503              		.loc 1 160 32 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508              	.LVL26:
 509              	.L17:
 161:Src/main.c    **** 		;
 510              		.loc 1 161 8 discriminator 1 view .LVU106
 161:Src/main.c    **** 		;
 511              		.loc 1 161 16 is_stmt 0 discriminator 1 view .LVU107
 512 0000 034B     		ldr	r3, .L19
 513 0002 DB69     		ldr	r3, [r3, #28]
 161:Src/main.c    **** 		;
 514              		.loc 1 161 8 discriminator 1 view .LVU108
 515 0004 1B06     		lsls	r3, r3, #24
 516 0006 FBD5     		bpl	.L17
 164:Src/main.c    **** }
 517              		.loc 1 164 2 is_stmt 1 view .LVU109
 164:Src/main.c    **** }
 518              		.loc 1 164 14 is_stmt 0 view .LVU110
 519 0008 014B     		ldr	r3, .L19
 520 000a 1885     		strh	r0, [r3, #40]
 165:Src/main.c    **** 
 521              		.loc 1 165 1 view .LVU111
 522              		@ sp needed
 523 000c 7047     		bx	lr
 524              	.L20:
 525 000e C046     		.align	2
 526              	.L19:
 527 0010 00480040 		.word	1073760256
 528              		.cfi_endproc
 529              	.LFE46:
 531              		.section	.text.USART_SendString,"ax",%progbits
 532              		.align	1
 533              		.global	USART_SendString
 534              		.syntax unified
 535              		.code	16
 536              		.thumb_func
 538              	USART_SendString:
 539              	.LVL27:
ARM GAS  /tmp/ccWqzMz6.s 			page 23


 540              	.LFB47:
 172:Src/main.c    **** 	while(*p_string != 0) {
 541              		.loc 1 172 42 is_stmt 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 172:Src/main.c    **** 	while(*p_string != 0) {
 545              		.loc 1 172 42 is_stmt 0 view .LVU113
 546 0000 10B5     		push	{r4, lr}
 547              	.LCFI8:
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 4, -8
 550              		.cfi_offset 14, -4
 551 0002 0400     		movs	r4, r0
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 552              		.loc 1 173 2 is_stmt 1 view .LVU114
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 553              		.loc 1 173 7 is_stmt 0 view .LVU115
 554 0004 02E0     		b	.L22
 555              	.LVL28:
 556              	.L23:
 174:Src/main.c    **** 		p_string++;
 557              		.loc 1 174 3 is_stmt 1 view .LVU116
 558 0006 FFF7FEFF 		bl	USART_SendChar
 559              	.LVL29:
 175:Src/main.c    **** 	}
 560              		.loc 1 175 3 view .LVU117
 175:Src/main.c    **** 	}
 561              		.loc 1 175 11 is_stmt 0 view .LVU118
 562 000a 0134     		adds	r4, r4, #1
 563              	.LVL30:
 564              	.L22:
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 565              		.loc 1 173 18 is_stmt 1 view .LVU119
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 566              		.loc 1 173 8 is_stmt 0 view .LVU120
 567 000c 2078     		ldrb	r0, [r4]
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 568              		.loc 1 173 18 view .LVU121
 569 000e 0028     		cmp	r0, #0
 570 0010 F9D1     		bne	.L23
 177:Src/main.c    **** }
 571              		.loc 1 177 2 is_stmt 1 view .LVU122
 572 0012 FFF7FEFF 		bl	USART_SendChar
 573              	.LVL31:
 178:Src/main.c    **** 
 574              		.loc 1 178 1 is_stmt 0 view .LVU123
 575              		@ sp needed
 576              	.LVL32:
 178:Src/main.c    **** 
 577              		.loc 1 178 1 view .LVU124
 578 0016 10BD     		pop	{r4, pc}
 579              		.cfi_endproc
 580              	.LFE47:
 582              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 583              		.align	2
 584              	.LC21:
ARM GAS  /tmp/ccWqzMz6.s 			page 24


 585 0000 434D443E 		.ascii	"CMD> \000"
 585      2000
 586              		.section	.text.ClearCommand,"ax",%progbits
 587              		.align	1
 588              		.global	ClearCommand
 589              		.syntax unified
 590              		.code	16
 591              		.thumb_func
 593              	ClearCommand:
 594              	.LFB48:
 183:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 595              		.loc 1 183 20 is_stmt 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 8
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599 0000 00B5     		push	{lr}
 600              	.LCFI9:
 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 14, -4
 603 0002 83B0     		sub	sp, sp, #12
 604              	.LCFI10:
 605              		.cfi_def_cfa_offset 16
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 606              		.loc 1 184 2 view .LVU126
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 607              		.loc 1 184 10 is_stmt 0 view .LVU127
 608 0004 094B     		ldr	r3, .L25
 609 0006 1A68     		ldr	r2, [r3]
 610 0008 0092     		str	r2, [sp]
 611 000a 9B88     		ldrh	r3, [r3, #4]
 612 000c 6A46     		mov	r2, sp
 613 000e 9380     		strh	r3, [r2, #4]
 185:Src/main.c    **** 	incomingCommand = 0;
 614              		.loc 1 185 2 is_stmt 1 view .LVU128
 615 0010 0748     		ldr	r0, .L25+4
 616 0012 0322     		movs	r2, #3
 617 0014 0021     		movs	r1, #0
 618 0016 FFF7FEFF 		bl	memset
 619              	.LVL33:
 186:Src/main.c    **** 	USART_SendString(prompt);
 620              		.loc 1 186 2 view .LVU129
 186:Src/main.c    **** 	USART_SendString(prompt);
 621              		.loc 1 186 18 is_stmt 0 view .LVU130
 622 001a 064B     		ldr	r3, .L25+8
 623 001c 0022     		movs	r2, #0
 624 001e 1A70     		strb	r2, [r3]
 187:Src/main.c    **** }
 625              		.loc 1 187 2 is_stmt 1 view .LVU131
 626 0020 6846     		mov	r0, sp
 627 0022 FFF7FEFF 		bl	USART_SendString
 628              	.LVL34:
 188:Src/main.c    **** 
 629              		.loc 1 188 1 is_stmt 0 view .LVU132
 630 0026 03B0     		add	sp, sp, #12
 631              		@ sp needed
 632 0028 00BD     		pop	{pc}
 633              	.L26:
ARM GAS  /tmp/ccWqzMz6.s 			page 25


 634 002a C046     		.align	2
 635              	.L25:
 636 002c 00000000 		.word	.LC21
 637 0030 00000000 		.word	command
 638 0034 00000000 		.word	incomingCommand
 639              		.cfi_endproc
 640              	.LFE48:
 642              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 643              		.align	2
 644              	.LC25:
 645 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 645      616E6420 
 645      746F6F20 
 645      6C6F6E67 
 645      210A00
 646              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 647              		.align	1
 648              		.global	USART3_4_IRQHandler
 649              		.syntax unified
 650              		.code	16
 651              		.thumb_func
 653              	USART3_4_IRQHandler:
 654              	.LFB49:
 190:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 655              		.loc 1 190 27 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 24
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659 0000 30B5     		push	{r4, r5, lr}
 660              	.LCFI11:
 661              		.cfi_def_cfa_offset 12
 662              		.cfi_offset 4, -12
 663              		.cfi_offset 5, -8
 664              		.cfi_offset 14, -4
 665 0002 87B0     		sub	sp, sp, #28
 666              	.LCFI12:
 667              		.cfi_def_cfa_offset 40
 191:Src/main.c    **** 	incomingCommand = 1;
 668              		.loc 1 191 2 view .LVU134
 191:Src/main.c    **** 	incomingCommand = 1;
 669              		.loc 1 191 10 is_stmt 0 view .LVU135
 670 0004 01AA     		add	r2, sp, #4
 671 0006 164B     		ldr	r3, .L34
 672 0008 1800     		movs	r0, r3
 673 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 674 000c 38C2     		stmia	r2!, {r3, r4, r5}
 675 000e 0368     		ldr	r3, [r0]
 676 0010 1360     		str	r3, [r2]
 677 0012 8388     		ldrh	r3, [r0, #4]
 678 0014 9380     		strh	r3, [r2, #4]
 679 0016 8379     		ldrb	r3, [r0, #6]
 680 0018 9371     		strb	r3, [r2, #6]
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 681              		.loc 1 192 2 is_stmt 1 view .LVU136
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5))){
 682              		.loc 1 192 18 is_stmt 0 view .LVU137
 683 001a 124B     		ldr	r3, .L34+4
ARM GAS  /tmp/ccWqzMz6.s 			page 26


 684 001c 0122     		movs	r2, #1
 685 001e 1A70     		strb	r2, [r3]
 193:Src/main.c    **** 	}
 686              		.loc 1 193 2 is_stmt 1 view .LVU138
 687              	.L28:
 194:Src/main.c    **** 	if(command[0]){
 688              		.loc 1 194 2 discriminator 1 view .LVU139
 193:Src/main.c    **** 	}
 689              		.loc 1 193 8 discriminator 1 view .LVU140
 193:Src/main.c    **** 	}
 690              		.loc 1 193 16 is_stmt 0 discriminator 1 view .LVU141
 691 0020 114B     		ldr	r3, .L34+8
 692 0022 DB69     		ldr	r3, [r3, #28]
 193:Src/main.c    **** 	}
 693              		.loc 1 193 8 discriminator 1 view .LVU142
 694 0024 9B06     		lsls	r3, r3, #26
 695 0026 FBD5     		bpl	.L28
 195:Src/main.c    **** 		if(command[1]){
 696              		.loc 1 195 2 is_stmt 1 view .LVU143
 195:Src/main.c    **** 		if(command[1]){
 697              		.loc 1 195 12 is_stmt 0 view .LVU144
 698 0028 104B     		ldr	r3, .L34+12
 699 002a 1B78     		ldrb	r3, [r3]
 195:Src/main.c    **** 		if(command[1]){
 700              		.loc 1 195 4 view .LVU145
 701 002c 002B     		cmp	r3, #0
 702 002e 0FD0     		beq	.L29
 196:Src/main.c    **** 			USART_SendString(err);
 703              		.loc 1 196 3 is_stmt 1 view .LVU146
 196:Src/main.c    **** 			USART_SendString(err);
 704              		.loc 1 196 13 is_stmt 0 view .LVU147
 705 0030 0E4B     		ldr	r3, .L34+12
 706 0032 5B78     		ldrb	r3, [r3, #1]
 196:Src/main.c    **** 			USART_SendString(err);
 707              		.loc 1 196 5 view .LVU148
 708 0034 002B     		cmp	r3, #0
 709 0036 05D1     		bne	.L33
 201:Src/main.c    **** 		}
 710              		.loc 1 201 4 is_stmt 1 view .LVU149
 201:Src/main.c    **** 		}
 711              		.loc 1 201 23 is_stmt 0 view .LVU150
 712 0038 0B4B     		ldr	r3, .L34+8
 713 003a 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** 		}
 714              		.loc 1 201 15 view .LVU151
 715 003c DBB2     		uxtb	r3, r3
 716 003e 0B4A     		ldr	r2, .L34+12
 717 0040 5370     		strb	r3, [r2, #1]
 718 0042 0AE0     		b	.L27
 719              	.L33:
 197:Src/main.c    **** 			ClearCommand();
 720              		.loc 1 197 4 is_stmt 1 view .LVU152
 721 0044 01A8     		add	r0, sp, #4
 722 0046 FFF7FEFF 		bl	USART_SendString
 723              	.LVL35:
 198:Src/main.c    **** 		}
 724              		.loc 1 198 4 view .LVU153
ARM GAS  /tmp/ccWqzMz6.s 			page 27


 725 004a FFF7FEFF 		bl	ClearCommand
 726              	.LVL36:
 727 004e 04E0     		b	.L27
 728              	.L29:
 205:Src/main.c    **** 	}
 729              		.loc 1 205 3 view .LVU154
 205:Src/main.c    **** 	}
 730              		.loc 1 205 22 is_stmt 0 view .LVU155
 731 0050 054B     		ldr	r3, .L34+8
 732 0052 9B8C     		ldrh	r3, [r3, #36]
 205:Src/main.c    **** 	}
 733              		.loc 1 205 14 view .LVU156
 734 0054 DBB2     		uxtb	r3, r3
 735 0056 054A     		ldr	r2, .L34+12
 736 0058 1370     		strb	r3, [r2]
 737              	.L27:
 207:Src/main.c    **** 
 738              		.loc 1 207 1 view .LVU157
 739 005a 07B0     		add	sp, sp, #28
 740              		@ sp needed
 741 005c 30BD     		pop	{r4, r5, pc}
 742              	.L35:
 743 005e C046     		.align	2
 744              	.L34:
 745 0060 00000000 		.word	.LC25
 746 0064 00000000 		.word	incomingCommand
 747 0068 00480040 		.word	1073760256
 748 006c 00000000 		.word	command
 749              		.cfi_endproc
 750              	.LFE49:
 752              		.section	.rodata.Proceed.str1.4,"aMS",%progbits,1
 753              		.align	2
 754              	.LC29:
 755 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 755      79657420 
 755      696D706C 
 755      656D656E 
 755      7465640A 
 756              		.section	.text.Proceed,"ax",%progbits
 757              		.align	1
 758              		.global	Proceed
 759              		.syntax unified
 760              		.code	16
 761              		.thumb_func
 763              	Proceed:
 764              	.LFB51:
 237:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 765              		.loc 1 237 15 is_stmt 1 view -0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769 0000 10B5     		push	{r4, lr}
 770              	.LCFI13:
 771              		.cfi_def_cfa_offset 8
 772              		.cfi_offset 4, -8
 773              		.cfi_offset 14, -4
 238:Src/main.c    **** 	USART_SendString(err);
ARM GAS  /tmp/ccWqzMz6.s 			page 28


 774              		.loc 1 238 2 view .LVU159
 775              	.LVL37:
 239:Src/main.c    **** }
 776              		.loc 1 239 2 view .LVU160
 777 0002 0248     		ldr	r0, .L37
 778 0004 FFF7FEFF 		bl	USART_SendString
 779              	.LVL38:
 240:Src/main.c    **** 
 780              		.loc 1 240 1 is_stmt 0 view .LVU161
 781              		@ sp needed
 782 0008 10BD     		pop	{r4, pc}
 783              	.L38:
 784 000a C046     		.align	2
 785              	.L37:
 786 000c 00000000 		.word	.LC29
 787              		.cfi_endproc
 788              	.LFE51:
 790              		.global	__aeabi_f2d
 791              		.section	.rodata.PrintDistance.str1.4,"aMS",%progbits,1
 792              		.align	2
 793              	.LC31:
 794 0000 25660A00 		.ascii	"%f\012\000"
 795              		.section	.text.PrintDistance,"ax",%progbits
 796              		.align	1
 797              		.global	PrintDistance
 798              		.syntax unified
 799              		.code	16
 800              		.thumb_func
 802              	PrintDistance:
 803              	.LFB53:
 388:Src/main.c    **** 	char dist[32] = "";
 804              		.loc 1 388 1 is_stmt 1 view -0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 32
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808 0000 00B5     		push	{lr}
 809              	.LCFI14:
 810              		.cfi_def_cfa_offset 4
 811              		.cfi_offset 14, -4
 812 0002 89B0     		sub	sp, sp, #36
 813              	.LCFI15:
 814              		.cfi_def_cfa_offset 40
 389:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 815              		.loc 1 389 2 view .LVU163
 389:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 816              		.loc 1 389 7 is_stmt 0 view .LVU164
 817 0004 0023     		movs	r3, #0
 818 0006 0093     		str	r3, [sp]
 819 0008 1C22     		movs	r2, #28
 820 000a 0021     		movs	r1, #0
 821 000c 01A8     		add	r0, sp, #4
 822 000e FFF7FEFF 		bl	memset
 823              	.LVL39:
 390:Src/main.c    **** 	USART_SendString(dist);
 824              		.loc 1 390 2 is_stmt 1 view .LVU165
 390:Src/main.c    **** 	USART_SendString(dist);
 825              		.loc 1 390 24 is_stmt 0 view .LVU166
ARM GAS  /tmp/ccWqzMz6.s 			page 29


 826 0012 FFF7FEFF 		bl	get_distance
 827              	.LVL40:
 390:Src/main.c    **** 	USART_SendString(dist);
 828              		.loc 1 390 2 view .LVU167
 829 0016 FFF7FEFF 		bl	__aeabi_f2d
 830              	.LVL41:
 831 001a 0200     		movs	r2, r0
 832 001c 0B00     		movs	r3, r1
 833 001e 0449     		ldr	r1, .L40
 834 0020 6846     		mov	r0, sp
 835 0022 FFF7FEFF 		bl	sprintf
 836              	.LVL42:
 391:Src/main.c    **** }
 837              		.loc 1 391 2 is_stmt 1 view .LVU168
 838 0026 6846     		mov	r0, sp
 839 0028 FFF7FEFF 		bl	USART_SendString
 840              	.LVL43:
 392:Src/main.c    **** 
 841              		.loc 1 392 1 is_stmt 0 view .LVU169
 842 002c 09B0     		add	sp, sp, #36
 843              		@ sp needed
 844 002e 00BD     		pop	{pc}
 845              	.L41:
 846              		.align	2
 847              	.L40:
 848 0030 00000000 		.word	.LC31
 849              		.cfi_endproc
 850              	.LFE53:
 852              		.section	.rodata.GetUltrasonic.str1.4,"aMS",%progbits,1
 853              		.align	2
 854              	.LC34:
 855 0000 2564202D 		.ascii	"%d - %d, %d, %d\012\000"
 855      2025642C 
 855      2025642C 
 855      2025640A 
 855      00
 856              		.global	__aeabi_ui2d
 857              		.global	__aeabi_ddiv
 858              		.global	__aeabi_d2uiz
 859              		.section	.text.GetUltrasonic,"ax",%progbits
 860              		.align	1
 861              		.global	GetUltrasonic
 862              		.syntax unified
 863              		.code	16
 864              		.thumb_func
 866              	GetUltrasonic:
 867              	.LVL44:
 868              	.LFB54:
 404:Src/main.c    **** 	uint32_t i = 0, j = 0;
 869              		.loc 1 404 54 is_stmt 1 view -0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 32
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 404:Src/main.c    **** 	uint32_t i = 0, j = 0;
 873              		.loc 1 404 54 is_stmt 0 view .LVU171
 874 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 875              	.LCFI16:
ARM GAS  /tmp/ccWqzMz6.s 			page 30


 876              		.cfi_def_cfa_offset 20
 877              		.cfi_offset 4, -20
 878              		.cfi_offset 5, -16
 879              		.cfi_offset 6, -12
 880              		.cfi_offset 7, -8
 881              		.cfi_offset 14, -4
 882 0002 8BB0     		sub	sp, sp, #44
 883              	.LCFI17:
 884              		.cfi_def_cfa_offset 64
 885 0004 0400     		movs	r4, r0
 405:Src/main.c    **** 	TIM15->EGR |= 1; //clears counter
 886              		.loc 1 405 2 is_stmt 1 view .LVU172
 887              	.LVL45:
 406:Src/main.c    **** 	while(TIM15->EGR & 1)
 888              		.loc 1 406 2 view .LVU173
 406:Src/main.c    **** 	while(TIM15->EGR & 1)
 889              		.loc 1 406 7 is_stmt 0 view .LVU174
 890 0006 2D4A     		ldr	r2, .L51
 891 0008 5369     		ldr	r3, [r2, #20]
 406:Src/main.c    **** 	while(TIM15->EGR & 1)
 892              		.loc 1 406 13 view .LVU175
 893 000a 0121     		movs	r1, #1
 894 000c 0B43     		orrs	r3, r1
 895 000e 5361     		str	r3, [r2, #20]
 407:Src/main.c    **** 		;
 896              		.loc 1 407 2 is_stmt 1 view .LVU176
 897              	.L43:
 407:Src/main.c    **** 		;
 898              		.loc 1 407 8 discriminator 1 view .LVU177
 407:Src/main.c    **** 		;
 899              		.loc 1 407 13 is_stmt 0 discriminator 1 view .LVU178
 900 0010 2A4B     		ldr	r3, .L51
 901 0012 5B69     		ldr	r3, [r3, #20]
 407:Src/main.c    **** 		;
 902              		.loc 1 407 19 discriminator 1 view .LVU179
 903 0014 0122     		movs	r2, #1
 904 0016 1500     		movs	r5, r2
 905 0018 1D40     		ands	r5, r3
 407:Src/main.c    **** 		;
 906              		.loc 1 407 8 discriminator 1 view .LVU180
 907 001a 1A42     		tst	r2, r3
 908 001c F8D1     		bne	.L43
 409:Src/main.c    **** 	while (TIM15->CNT < 200){
 909              		.loc 1 409 2 is_stmt 1 view .LVU181
 910 001e A18B     		ldrh	r1, [r4, #28]
 911 0020 A069     		ldr	r0, [r4, #24]
 912              	.LVL46:
 409:Src/main.c    **** 	while (TIM15->CNT < 200){
 913              		.loc 1 409 2 is_stmt 0 view .LVU182
 914 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 915              	.LVL47:
 410:Src/main.c    **** 	}
 916              		.loc 1 410 2 is_stmt 1 view .LVU183
 917              	.L44:
 411:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 918              		.loc 1 411 2 discriminator 1 view .LVU184
 410:Src/main.c    **** 	}
ARM GAS  /tmp/ccWqzMz6.s 			page 31


 919              		.loc 1 410 20 discriminator 1 view .LVU185
 410:Src/main.c    **** 	}
 920              		.loc 1 410 14 is_stmt 0 discriminator 1 view .LVU186
 921 0026 254B     		ldr	r3, .L51
 922 0028 5B6A     		ldr	r3, [r3, #36]
 410:Src/main.c    **** 	}
 923              		.loc 1 410 20 discriminator 1 view .LVU187
 924 002a C72B     		cmp	r3, #199
 925 002c FBD9     		bls	.L44
 412:Src/main.c    **** 
 926              		.loc 1 412 2 is_stmt 1 view .LVU188
 927 002e A18B     		ldrh	r1, [r4, #28]
 928 0030 A069     		ldr	r0, [r4, #24]
 929 0032 0022     		movs	r2, #0
 930 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 931              	.LVL48:
 414:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 932              		.loc 1 414 2 view .LVU189
 414:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 933              		.loc 1 414 17 is_stmt 0 view .LVU190
 934 0038 204B     		ldr	r3, .L51
 935 003a 5A6A     		ldr	r2, [r3, #36]
 414:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 200 >  T
 936              		.loc 1 414 10 view .LVU191
 937 003c 204B     		ldr	r3, .L51+4
 938 003e 1A60     		str	r2, [r3]
 415:Src/main.c    **** 		i++;
 939              		.loc 1 415 2 is_stmt 1 view .LVU192
 405:Src/main.c    **** 	TIM15->EGR |= 1; //clears counter
 940              		.loc 1 405 11 is_stmt 0 view .LVU193
 941 0040 2E00     		movs	r6, r5
 415:Src/main.c    **** 		i++;
 942              		.loc 1 415 8 view .LVU194
 943 0042 00E0     		b	.L45
 944              	.LVL49:
 945              	.L47:
 416:Src/main.c    **** 	}
 946              		.loc 1 416 3 is_stmt 1 view .LVU195
 416:Src/main.c    **** 	}
 947              		.loc 1 416 4 is_stmt 0 view .LVU196
 948 0044 0136     		adds	r6, r6, #1
 949              	.LVL50:
 950              	.L45:
 415:Src/main.c    **** 		i++;
 951              		.loc 1 415 79 is_stmt 1 view .LVU197
 415:Src/main.c    **** 		i++;
 952              		.loc 1 415 11 is_stmt 0 view .LVU198
 953 0046 A188     		ldrh	r1, [r4, #4]
 954 0048 2068     		ldr	r0, [r4]
 955 004a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 956              	.LVL51:
 415:Src/main.c    **** 		i++;
 957              		.loc 1 415 79 view .LVU199
 958 004e 0028     		cmp	r0, #0
 959 0050 06D1     		bne	.L46
 415:Src/main.c    **** 		i++;
 960              		.loc 1 415 90 discriminator 1 view .LVU200
ARM GAS  /tmp/ccWqzMz6.s 			page 32


 961 0052 1B4B     		ldr	r3, .L51+4
 962 0054 1B68     		ldr	r3, [r3]
 963 0056 C833     		adds	r3, r3, #200
 415:Src/main.c    **** 		i++;
 964              		.loc 1 415 104 discriminator 1 view .LVU201
 965 0058 184A     		ldr	r2, .L51
 966 005a 526A     		ldr	r2, [r2, #36]
 415:Src/main.c    **** 		i++;
 967              		.loc 1 415 79 discriminator 1 view .LVU202
 968 005c 9342     		cmp	r3, r2
 969 005e F1D8     		bhi	.L47
 970              	.L46:
 418:Src/main.c    **** 
 971              		.loc 1 418 2 is_stmt 1 view .LVU203
 418:Src/main.c    **** 
 972              		.loc 1 418 11 is_stmt 0 view .LVU204
 973 0060 164B     		ldr	r3, .L51
 974 0062 5F6A     		ldr	r7, [r3, #36]
 975              	.LVL52:
 420:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 976              		.loc 1 420 2 is_stmt 1 view .LVU205
 420:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 1200 > TI
 977              		.loc 1 420 10 is_stmt 0 view .LVU206
 978 0064 164B     		ldr	r3, .L51+4
 979 0066 1F60     		str	r7, [r3]
 421:Src/main.c    **** 		j++;
 980              		.loc 1 421 2 is_stmt 1 view .LVU207
 421:Src/main.c    **** 		j++;
 981              		.loc 1 421 8 is_stmt 0 view .LVU208
 982 0068 00E0     		b	.L48
 983              	.LVL53:
 984              	.L50:
 422:Src/main.c    **** 	}
 985              		.loc 1 422 3 is_stmt 1 view .LVU209
 422:Src/main.c    **** 	}
 986              		.loc 1 422 4 is_stmt 0 view .LVU210
 987 006a 0135     		adds	r5, r5, #1
 988              	.LVL54:
 989              	.L48:
 421:Src/main.c    **** 		j++;
 990              		.loc 1 421 78 is_stmt 1 view .LVU211
 421:Src/main.c    **** 		j++;
 991              		.loc 1 421 10 is_stmt 0 view .LVU212
 992 006c A188     		ldrh	r1, [r4, #4]
 993 006e 2068     		ldr	r0, [r4]
 994 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 995              	.LVL55:
 421:Src/main.c    **** 		j++;
 996              		.loc 1 421 78 view .LVU213
 997 0074 0028     		cmp	r0, #0
 998 0076 09D0     		beq	.L49
 421:Src/main.c    **** 		j++;
 999              		.loc 1 421 89 discriminator 1 view .LVU214
 1000 0078 114B     		ldr	r3, .L51+4
 1001 007a 1B68     		ldr	r3, [r3]
 1002 007c 9622     		movs	r2, #150
 1003 007e D200     		lsls	r2, r2, #3
ARM GAS  /tmp/ccWqzMz6.s 			page 33


 1004 0080 9446     		mov	ip, r2
 1005 0082 6344     		add	r3, r3, ip
 421:Src/main.c    **** 		j++;
 1006              		.loc 1 421 103 discriminator 1 view .LVU215
 1007 0084 0D4A     		ldr	r2, .L51
 1008 0086 526A     		ldr	r2, [r2, #36]
 421:Src/main.c    **** 		j++;
 1009              		.loc 1 421 78 discriminator 1 view .LVU216
 1010 0088 9342     		cmp	r3, r2
 1011 008a EED8     		bhi	.L50
 1012              	.L49:
 425:Src/main.c    **** 	uint8_t buff[32];
 1013              		.loc 1 425 2 is_stmt 1 view .LVU217
 425:Src/main.c    **** 	uint8_t buff[32];
 1014              		.loc 1 425 11 is_stmt 0 view .LVU218
 1015 008c 0B4B     		ldr	r3, .L51
 1016 008e 5C6A     		ldr	r4, [r3, #36]
 1017              	.LVL56:
 426:Src/main.c    **** 	sprintf(buff, "%d - %d, %d, %d\n", val2, val1, i, j);
 1018              		.loc 1 426 2 is_stmt 1 view .LVU219
 427:Src/main.c    **** 	USART_SendString(buff);
 1019              		.loc 1 427 2 view .LVU220
 1020 0090 0C49     		ldr	r1, .L51+8
 1021 0092 0195     		str	r5, [sp, #4]
 1022 0094 0096     		str	r6, [sp]
 1023 0096 3B00     		movs	r3, r7
 1024 0098 2200     		movs	r2, r4
 1025 009a 02A8     		add	r0, sp, #8
 1026 009c FFF7FEFF 		bl	sprintf
 1027              	.LVL57:
 428:Src/main.c    **** 	return (val2-val1)/4.55;
 1028              		.loc 1 428 2 view .LVU221
 1029 00a0 02A8     		add	r0, sp, #8
 1030 00a2 FFF7FEFF 		bl	USART_SendString
 1031              	.LVL58:
 429:Src/main.c    **** }
 1032              		.loc 1 429 2 view .LVU222
 429:Src/main.c    **** }
 1033              		.loc 1 429 14 is_stmt 0 view .LVU223
 1034 00a6 E01B     		subs	r0, r4, r7
 429:Src/main.c    **** }
 1035              		.loc 1 429 20 view .LVU224
 1036 00a8 FFF7FEFF 		bl	__aeabi_ui2d
 1037              	.LVL59:
 1038 00ac 064A     		ldr	r2, .L51+12
 1039 00ae 074B     		ldr	r3, .L51+16
 1040 00b0 FFF7FEFF 		bl	__aeabi_ddiv
 1041              	.LVL60:
 1042 00b4 FFF7FEFF 		bl	__aeabi_d2uiz
 1043              	.LVL61:
 430:Src/main.c    **** /* USER CODE END 0 */
 1044              		.loc 1 430 1 view .LVU225
 1045 00b8 0BB0     		add	sp, sp, #44
 1046              		@ sp needed
 1047              	.LVL62:
 1048              	.LVL63:
 1049              	.LVL64:
ARM GAS  /tmp/ccWqzMz6.s 			page 34


 1050              	.LVL65:
 430:Src/main.c    **** /* USER CODE END 0 */
 1051              		.loc 1 430 1 view .LVU226
 1052 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 1053              	.L52:
 1054              		.align	2
 1055              	.L51:
 1056 00bc 00400140 		.word	1073823744
 1057 00c0 00000000 		.word	pMillis
 1058 00c4 00000000 		.word	.LC34
 1059 00c8 33333333 		.word	858993459
 1060 00cc 33331240 		.word	1074934579
 1061              		.cfi_endproc
 1062              	.LFE54:
 1064              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 1065              		.align	2
 1066              	.LC37:
 1067 0000 556C7472 		.ascii	"Ultrasonic right: %u %u %u\012\000"
 1067      61736F6E 
 1067      69632072 
 1067      69676874 
 1067      3A202575 
 1068              		.align	2
 1069              	.LC40:
 1070 001c 556C7472 		.ascii	"Ultrasonic left: %u %u %u\012\000"
 1070      61736F6E 
 1070      6963206C 
 1070      6566743A 
 1070      20257520 
 1071              		.global	__aeabi_f2iz
 1072 0037 00       		.align	2
 1073              	.LC42:
 1074 0038 44697374 		.ascii	"Distance travelled: %d\012\000"
 1074      616E6365 
 1074      20747261 
 1074      76656C6C 
 1074      65643A20 
 1075              		.align	2
 1076              	.LC44:
 1077 0050 48656164 		.ascii	"Heading: %d\012\000"
 1077      696E673A 
 1077      2025640A 
 1077      00
 1078              		.section	.text.Log,"ax",%progbits
 1079              		.align	1
 1080              		.global	Log
 1081              		.syntax unified
 1082              		.code	16
 1083              		.thumb_func
 1085              	Log:
 1086              	.LFB50:
 209:Src/main.c    **** 	uint8_t str_buff[32];
 1087              		.loc 1 209 11 is_stmt 1 view -0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 48
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccWqzMz6.s 			page 35


 1092              	.LCFI18:
 1093              		.cfi_def_cfa_offset 8
 1094              		.cfi_offset 4, -8
 1095              		.cfi_offset 14, -4
 1096 0002 8EB0     		sub	sp, sp, #56
 1097              	.LCFI19:
 1098              		.cfi_def_cfa_offset 64
 210:Src/main.c    **** 
 1099              		.loc 1 210 2 view .LVU228
 212:Src/main.c    **** 
 1100              		.loc 1 212 2 view .LVU229
 212:Src/main.c    **** 
 1101              		.loc 1 212 11 is_stmt 0 view .LVU230
 1102 0004 0C22     		movs	r2, #12
 1103 0006 0021     		movs	r1, #0
 1104 0008 03A8     		add	r0, sp, #12
 1105 000a FFF7FEFF 		bl	memset
 1106              	.LVL66:
 214:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 1107              		.loc 1 214 2 is_stmt 1 view .LVU231
 1108              	.LBB13:
 214:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 1109              		.loc 1 214 6 view .LVU232
 214:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 1110              		.loc 1 214 14 is_stmt 0 view .LVU233
 1111 000e 0024     		movs	r4, #0
 214:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 1112              		.loc 1 214 2 view .LVU234
 1113 0010 0AE0     		b	.L54
 1114              	.LVL67:
 1115              	.L55:
 215:Src/main.c    **** 		HAL_Delay(60);
 1116              		.loc 1 215 3 is_stmt 1 discriminator 3 view .LVU235
 215:Src/main.c    **** 		HAL_Delay(60);
 1117              		.loc 1 215 16 is_stmt 0 discriminator 3 view .LVU236
 1118 0012 2548     		ldr	r0, .L58
 1119 0014 FFF7FEFF 		bl	GetUltrasonic
 1120              	.LVL68:
 215:Src/main.c    **** 		HAL_Delay(60);
 1121              		.loc 1 215 14 discriminator 3 view .LVU237
 1122 0018 A300     		lsls	r3, r4, #2
 1123 001a 03AA     		add	r2, sp, #12
 1124 001c D050     		str	r0, [r2, r3]
 216:Src/main.c    **** 	}
 1125              		.loc 1 216 3 is_stmt 1 discriminator 3 view .LVU238
 1126 001e 3C20     		movs	r0, #60
 1127 0020 FFF7FEFF 		bl	HAL_Delay
 1128              	.LVL69:
 214:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 1129              		.loc 1 214 25 discriminator 3 view .LVU239
 1130 0024 0134     		adds	r4, r4, #1
 1131              	.LVL70:
 214:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 1132              		.loc 1 214 25 is_stmt 0 discriminator 3 view .LVU240
 1133 0026 E4B2     		uxtb	r4, r4
 1134              	.LVL71:
 1135              	.L54:
ARM GAS  /tmp/ccWqzMz6.s 			page 36


 214:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_right_pins);
 1136              		.loc 1 214 20 is_stmt 1 discriminator 1 view .LVU241
 1137 0028 022C     		cmp	r4, #2
 1138 002a F2D9     		bls	.L55
 1139              	.LBE13:
 218:Src/main.c    **** 	USART_SendString(str_buff);
 1140              		.loc 1 218 2 view .LVU242
 1141 002c 049B     		ldr	r3, [sp, #16]
 1142 002e 059A     		ldr	r2, [sp, #20]
 1143 0030 1E49     		ldr	r1, .L58+4
 1144 0032 0398     		ldr	r0, [sp, #12]
 1145 0034 0090     		str	r0, [sp]
 1146 0036 06A8     		add	r0, sp, #24
 1147 0038 FFF7FEFF 		bl	sprintf
 1148              	.LVL72:
 219:Src/main.c    **** 
 1149              		.loc 1 219 2 view .LVU243
 1150 003c 06A8     		add	r0, sp, #24
 1151 003e FFF7FEFF 		bl	USART_SendString
 1152              	.LVL73:
 221:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 1153              		.loc 1 221 2 view .LVU244
 1154              	.LBB14:
 221:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 1155              		.loc 1 221 6 view .LVU245
 221:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 1156              		.loc 1 221 14 is_stmt 0 view .LVU246
 1157 0042 0024     		movs	r4, #0
 1158              	.LVL74:
 221:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 1159              		.loc 1 221 2 view .LVU247
 1160 0044 0AE0     		b	.L56
 1161              	.LVL75:
 1162              	.L57:
 222:Src/main.c    **** 		HAL_Delay(60);
 1163              		.loc 1 222 3 is_stmt 1 discriminator 3 view .LVU248
 222:Src/main.c    **** 		HAL_Delay(60);
 1164              		.loc 1 222 16 is_stmt 0 discriminator 3 view .LVU249
 1165 0046 1A48     		ldr	r0, .L58+8
 1166 0048 FFF7FEFF 		bl	GetUltrasonic
 1167              	.LVL76:
 222:Src/main.c    **** 		HAL_Delay(60);
 1168              		.loc 1 222 14 discriminator 3 view .LVU250
 1169 004c A300     		lsls	r3, r4, #2
 1170 004e 03AA     		add	r2, sp, #12
 1171 0050 D050     		str	r0, [r2, r3]
 223:Src/main.c    **** 	}
 1172              		.loc 1 223 3 is_stmt 1 discriminator 3 view .LVU251
 1173 0052 3C20     		movs	r0, #60
 1174 0054 FFF7FEFF 		bl	HAL_Delay
 1175              	.LVL77:
 221:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 1176              		.loc 1 221 25 discriminator 3 view .LVU252
 1177 0058 0134     		adds	r4, r4, #1
 1178              	.LVL78:
 221:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 1179              		.loc 1 221 25 is_stmt 0 discriminator 3 view .LVU253
ARM GAS  /tmp/ccWqzMz6.s 			page 37


 1180 005a E4B2     		uxtb	r4, r4
 1181              	.LVL79:
 1182              	.L56:
 221:Src/main.c    **** 		samples[i] = GetUltrasonic(&ultrasonic_left_pins);
 1183              		.loc 1 221 20 is_stmt 1 discriminator 1 view .LVU254
 1184 005c 022C     		cmp	r4, #2
 1185 005e F2D9     		bls	.L57
 1186              	.LBE14:
 225:Src/main.c    **** 	USART_SendString(str_buff);
 1187              		.loc 1 225 2 view .LVU255
 1188 0060 049B     		ldr	r3, [sp, #16]
 1189 0062 059A     		ldr	r2, [sp, #20]
 1190 0064 1349     		ldr	r1, .L58+12
 1191 0066 0398     		ldr	r0, [sp, #12]
 1192 0068 0090     		str	r0, [sp]
 1193 006a 06A8     		add	r0, sp, #24
 1194 006c FFF7FEFF 		bl	sprintf
 1195              	.LVL80:
 226:Src/main.c    **** 
 1196              		.loc 1 226 2 view .LVU256
 1197 0070 06A8     		add	r0, sp, #24
 1198 0072 FFF7FEFF 		bl	USART_SendString
 1199              	.LVL81:
 229:Src/main.c    **** 	USART_SendString(str_buff);
 1200              		.loc 1 229 2 view .LVU257
 229:Src/main.c    **** 	USART_SendString(str_buff);
 1201              		.loc 1 229 53 is_stmt 0 view .LVU258
 1202 0076 FFF7FEFF 		bl	get_distance
 1203              	.LVL82:
 229:Src/main.c    **** 	USART_SendString(str_buff);
 1204              		.loc 1 229 2 view .LVU259
 1205 007a FFF7FEFF 		bl	__aeabi_f2iz
 1206              	.LVL83:
 1207 007e 0200     		movs	r2, r0
 1208 0080 0D49     		ldr	r1, .L58+16
 1209 0082 06A8     		add	r0, sp, #24
 1210 0084 FFF7FEFF 		bl	sprintf
 1211              	.LVL84:
 230:Src/main.c    **** 
 1212              		.loc 1 230 2 is_stmt 1 view .LVU260
 1213 0088 06A8     		add	r0, sp, #24
 1214 008a FFF7FEFF 		bl	USART_SendString
 1215              	.LVL85:
 232:Src/main.c    **** 	USART_SendString(str_buff);
 1216              		.loc 1 232 2 view .LVU261
 232:Src/main.c    **** 	USART_SendString(str_buff);
 1217              		.loc 1 232 42 is_stmt 0 view .LVU262
 1218 008e FFF7FEFF 		bl	get_heading
 1219              	.LVL86:
 1220 0092 0200     		movs	r2, r0
 232:Src/main.c    **** 	USART_SendString(str_buff);
 1221              		.loc 1 232 2 view .LVU263
 1222 0094 0949     		ldr	r1, .L58+20
 1223 0096 06A8     		add	r0, sp, #24
 1224 0098 FFF7FEFF 		bl	sprintf
 1225              	.LVL87:
 233:Src/main.c    **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 38


 1226              		.loc 1 233 2 is_stmt 1 view .LVU264
 1227 009c 06A8     		add	r0, sp, #24
 1228 009e FFF7FEFF 		bl	USART_SendString
 1229              	.LVL88:
 235:Src/main.c    **** 
 1230              		.loc 1 235 1 is_stmt 0 view .LVU265
 1231 00a2 0EB0     		add	sp, sp, #56
 1232              		@ sp needed
 1233              	.LVL89:
 235:Src/main.c    **** 
 1234              		.loc 1 235 1 view .LVU266
 1235 00a4 10BD     		pop	{r4, pc}
 1236              	.L59:
 1237 00a6 C046     		.align	2
 1238              	.L58:
 1239 00a8 00000000 		.word	ultrasonic_right_pins
 1240 00ac 00000000 		.word	.LC37
 1241 00b0 00000000 		.word	ultrasonic_left_pins
 1242 00b4 1C000000 		.word	.LC40
 1243 00b8 38000000 		.word	.LC42
 1244 00bc 50000000 		.word	.LC44
 1245              		.cfi_endproc
 1246              	.LFE50:
 1248              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 1249              		.align	2
 1250              	.LC61:
 1251 0000 696E6465 		.ascii	"indefinitely\012\000"
 1251      66696E69 
 1251      74656C79 
 1251      0A00
 1252 000e 0000     		.align	2
 1253              	.LC63:
 1254 0010 25640A00 		.ascii	"%d\012\000"
 1255              		.align	2
 1256              	.LC46:
 1257 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 1257      523A2049 
 1257      6E76616C 
 1257      69642063 
 1257      6F6D6D61 
 1258 002d 000000   		.align	2
 1259              	.LC48:
 1260 0030 4D6F7669 		.ascii	"Moving forward \000"
 1260      6E672066 
 1260      6F727761 
 1260      72642000 
 1261              		.align	2
 1262              	.LC50:
 1263 0040 5475726E 		.ascii	"Turning left \000"
 1263      696E6720 
 1263      6C656674 
 1263      2000
 1264 004e 0000     		.align	2
 1265              	.LC52:
 1266 0050 5475726E 		.ascii	"Turning right \000"
 1266      696E6720 
 1266      72696768 
ARM GAS  /tmp/ccWqzMz6.s 			page 39


 1266      742000
 1267 005f 00       		.align	2
 1268              	.LC54:
 1269 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 1269      696E6720 
 1269      73656E73 
 1269      6F722064 
 1269      6174610A 
 1270 0075 000000   		.align	2
 1271              	.LC56:
 1272 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 1272      72696E67 
 1272      20617574 
 1272      6F6E6F6D 
 1272      6F757320 
 1273 0095 000000   		.align	2
 1274              	.LC58:
 1275 0098 53746F70 		.ascii	"Stopping all motors!\012\000"
 1275      70696E67 
 1275      20616C6C 
 1275      206D6F74 
 1275      6F727321 
 1276              		.section	.text.ProcessCommand,"ax",%progbits
 1277              		.align	1
 1278              		.global	ProcessCommand
 1279              		.syntax unified
 1280              		.code	16
 1281              		.thumb_func
 1283              	ProcessCommand:
 1284              	.LVL90:
 1285              	.LFB52:
 242:Src/main.c    **** 	uint32_t left_motor_pin;
 1286              		.loc 1 242 57 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 184
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 242:Src/main.c    **** 	uint32_t left_motor_pin;
 1290              		.loc 1 242 57 is_stmt 0 view .LVU268
 1291 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1292              	.LCFI20:
 1293              		.cfi_def_cfa_offset 20
 1294              		.cfi_offset 4, -20
 1295              		.cfi_offset 5, -16
 1296              		.cfi_offset 6, -12
 1297              		.cfi_offset 7, -8
 1298              		.cfi_offset 14, -4
 1299 0002 AFB0     		sub	sp, sp, #188
 1300              	.LCFI21:
 1301              		.cfi_def_cfa_offset 208
 1302 0004 0400     		movs	r4, r0
 1303 0006 0D00     		movs	r5, r1
 243:Src/main.c    **** 	uint32_t right_motor_pin;
 1304              		.loc 1 243 2 is_stmt 1 view .LVU269
 244:Src/main.c    **** 	int32_t CH1_DC = 65535;
 1305              		.loc 1 244 2 view .LVU270
 245:Src/main.c    **** 
 1306              		.loc 1 245 2 view .LVU271
ARM GAS  /tmp/ccWqzMz6.s 			page 40


 1307              	.LVL91:
 247:Src/main.c    **** 
 1308              		.loc 1 247 2 view .LVU272
 247:Src/main.c    **** 
 1309              		.loc 1 247 10 is_stmt 0 view .LVU273
 1310 0008 27A9     		add	r1, sp, #156
 1311              	.LVL92:
 247:Src/main.c    **** 
 1312              		.loc 1 247 10 view .LVU274
 1313 000a 5B4B     		ldr	r3, .L77
 1314 000c 0A00     		movs	r2, r1
 1315 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 1316 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 1317              	.LVL93:
 247:Src/main.c    **** 
 1318              		.loc 1 247 10 view .LVU275
 1319 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 1320 0014 43C2     		stmia	r2!, {r0, r1, r6}
 1321 0016 1B78     		ldrb	r3, [r3]
 1322 0018 1370     		strb	r3, [r2]
 249:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1323              		.loc 1 249 2 is_stmt 1 view .LVU276
 249:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1324              		.loc 1 249 10 is_stmt 0 view .LVU277
 1325 001a 23AA     		add	r2, sp, #140
 1326 001c 574B     		ldr	r3, .L77+4
 1327 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 1328 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 1329 0022 1B68     		ldr	r3, [r3]
 1330 0024 1360     		str	r3, [r2]
 250:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1331              		.loc 1 250 2 is_stmt 1 view .LVU278
 250:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1332              		.loc 1 250 10 is_stmt 0 view .LVU279
 1333 0026 1FAA     		add	r2, sp, #124
 1334 0028 554B     		ldr	r3, .L77+8
 1335 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 1336 002c C1C2     		stmia	r2!, {r0, r6, r7}
 1337 002e 1B88     		ldrh	r3, [r3]
 1338 0030 1380     		strh	r3, [r2]
 251:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1339              		.loc 1 251 2 is_stmt 1 view .LVU280
 251:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1340              		.loc 1 251 10 is_stmt 0 view .LVU281
 1341 0032 1BAA     		add	r2, sp, #108
 1342 0034 534B     		ldr	r3, .L77+12
 1343 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 1344 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 1345 003a 1100     		movs	r1, r2
 1346 003c 1A88     		ldrh	r2, [r3]
 1347 003e 0A80     		strh	r2, [r1]
 1348 0040 9B78     		ldrb	r3, [r3, #2]
 1349 0042 8B70     		strb	r3, [r1, #2]
 252:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1350              		.loc 1 252 2 is_stmt 1 view .LVU282
 252:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1351              		.loc 1 252 10 is_stmt 0 view .LVU283
ARM GAS  /tmp/ccWqzMz6.s 			page 41


 1352 0044 15A9     		add	r1, sp, #84
 1353 0046 504B     		ldr	r3, .L77+16
 1354 0048 0A00     		movs	r2, r1
 1355 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 1356 004c C1C2     		stmia	r2!, {r0, r6, r7}
 1357 004e 03CB     		ldmia	r3!, {r0, r1}
 1358 0050 03C2     		stmia	r2!, {r0, r1}
 1359 0052 1B78     		ldrb	r3, [r3]
 1360 0054 1370     		strb	r3, [r2]
 253:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1361              		.loc 1 253 2 is_stmt 1 view .LVU284
 253:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1362              		.loc 1 253 10 is_stmt 0 view .LVU285
 1363 0056 0DA9     		add	r1, sp, #52
 1364 0058 4C4B     		ldr	r3, .L77+20
 1365 005a 0A00     		movs	r2, r1
 1366 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 1367 005e C1C2     		stmia	r2!, {r0, r6, r7}
 1368 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 1369 0062 43C2     		stmia	r2!, {r0, r1, r6}
 1370 0064 1968     		ldr	r1, [r3]
 1371 0066 1160     		str	r1, [r2]
 1372 0068 1B79     		ldrb	r3, [r3, #4]
 1373 006a 1371     		strb	r3, [r2, #4]
 254:Src/main.c    **** 
 1374              		.loc 1 254 2 is_stmt 1 view .LVU286
 254:Src/main.c    **** 
 1375              		.loc 1 254 10 is_stmt 0 view .LVU287
 1376 006c 07A9     		add	r1, sp, #28
 1377 006e 484B     		ldr	r3, .L77+24
 1378 0070 0A00     		movs	r2, r1
 1379 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 1380 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 1381 0076 03CB     		ldmia	r3!, {r0, r1}
 1382 0078 03C2     		stmia	r2!, {r0, r1}
 1383 007a 1B88     		ldrh	r3, [r3]
 1384 007c 1380     		strh	r3, [r2]
 256:Src/main.c    **** 
 1385              		.loc 1 256 2 is_stmt 1 view .LVU288
 256:Src/main.c    **** 
 1386              		.loc 1 256 15 is_stmt 0 view .LVU289
 1387 007e 06AB     		add	r3, sp, #24
 1388 0080 0022     		movs	r2, #0
 1389 0082 1A80     		strh	r2, [r3]
 258:Src/main.c    **** 	uint8_t part2[15];
 1390              		.loc 1 258 2 is_stmt 1 view .LVU290
 259:Src/main.c    **** 	uint8_t zero = 0;
 1391              		.loc 1 259 2 view .LVU291
 260:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1392              		.loc 1 260 2 view .LVU292
 260:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1393              		.loc 1 260 10 is_stmt 0 view .LVU293
 1394 0084 6B46     		mov	r3, sp
 1395 0086 D91D     		adds	r1, r3, #7
 1396 0088 0023     		movs	r3, #0
 1397 008a 0B70     		strb	r3, [r1]
 261:Src/main.c    **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 42


 1398              		.loc 1 261 2 is_stmt 1 view .LVU294
 1399 008c 0F32     		adds	r2, r2, #15
 1400 008e 02A8     		add	r0, sp, #8
 1401 0090 FFF7FEFF 		bl	memcpy
 1402              	.LVL94:
 263:Src/main.c    **** 		case 'w':
 1403              		.loc 1 263 2 view .LVU295
 1404 0094 2300     		movs	r3, r4
 1405 0096 613B     		subs	r3, r3, #97
 1406 0098 DAB2     		uxtb	r2, r3
 1407 009a 172A     		cmp	r2, #23
 1408 009c 52D8     		bhi	.L61
 1409 009e 9300     		lsls	r3, r2, #2
 1410 00a0 3C4A     		ldr	r2, .L77+28
 1411 00a2 D358     		ldr	r3, [r2, r3]
 1412 00a4 9F46     		mov	pc, r3
 1413              		.section	.rodata.ProcessCommand,"a",%progbits
 1414              		.align	2
 1415              	.L63:
 1416 0000 A6000000 		.word	.L68
 1417 0004 44010000 		.word	.L61
 1418 0008 44010000 		.word	.L61
 1419 000c 04010000 		.word	.L67
 1420 0010 44010000 		.word	.L61
 1421 0014 44010000 		.word	.L61
 1422 0018 44010000 		.word	.L61
 1423 001c 44010000 		.word	.L61
 1424 0020 44010000 		.word	.L61
 1425 0024 44010000 		.word	.L61
 1426 0028 44010000 		.word	.L61
 1427 002c 0E010000 		.word	.L66
 1428 0030 44010000 		.word	.L61
 1429 0034 44010000 		.word	.L61
 1430 0038 44010000 		.word	.L61
 1431 003c 1E010000 		.word	.L65
 1432 0040 44010000 		.word	.L61
 1433 0044 44010000 		.word	.L61
 1434 0048 44010000 		.word	.L61
 1435 004c 44010000 		.word	.L61
 1436 0050 44010000 		.word	.L61
 1437 0054 44010000 		.word	.L61
 1438 0058 50010000 		.word	.L74
 1439 005c 2E010000 		.word	.L62
 1440              		.section	.text.ProcessCommand
 1441              	.L68:
 269:Src/main.c    **** 			motorcmd.dir = LEFT;
 1442              		.loc 1 269 4 view .LVU296
 1443              	.LVL95:
 270:Src/main.c    **** 			break;
 1444              		.loc 1 270 4 view .LVU297
 270:Src/main.c    **** 			break;
 1445              		.loc 1 270 17 is_stmt 0 view .LVU298
 1446 00a6 06AB     		add	r3, sp, #24
 1447 00a8 0122     		movs	r2, #1
 1448 00aa 1A70     		strb	r2, [r3]
 271:Src/main.c    **** 		case 'd':
 1449              		.loc 1 271 4 is_stmt 1 view .LVU299
ARM GAS  /tmp/ccWqzMz6.s 			page 43


 269:Src/main.c    **** 			motorcmd.dir = LEFT;
 1450              		.loc 1 269 10 is_stmt 0 view .LVU300
 1451 00ac 1FAE     		add	r6, sp, #124
 1452              	.LVL96:
 1453              	.L64:
 303:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1454              		.loc 1 303 2 is_stmt 1 view .LVU301
 303:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1455              		.loc 1 303 4 is_stmt 0 view .LVU302
 1456 00ae 302D     		cmp	r5, #48
 1457 00b0 50D0     		beq	.L75
 1458              	.L70:
 307:Src/main.c    **** 		USART_SendString(err);
 1459              		.loc 1 307 7 is_stmt 1 view .LVU303
 307:Src/main.c    **** 		USART_SendString(err);
 1460              		.loc 1 307 25 is_stmt 0 view .LVU304
 1461 00b2 2B00     		movs	r3, r5
 1462 00b4 313B     		subs	r3, r3, #49
 1463 00b6 DBB2     		uxtb	r3, r3
 307:Src/main.c    **** 		USART_SendString(err);
 1464              		.loc 1 307 9 view .LVU305
 1465 00b8 082B     		cmp	r3, #8
 1466 00ba 57D8     		bhi	.L76
 1467              	.LBB15:
 313:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1468              		.loc 1 313 3 is_stmt 1 view .LVU306
 313:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1469              		.loc 1 313 11 is_stmt 0 view .LVU307
 1470 00bc 1424     		movs	r4, #20
 1471 00be 6C43     		muls	r4, r5
 1472 00c0 4034     		adds	r4, r4, #64
 1473 00c2 E4B2     		uxtb	r4, r4
 1474              	.LVL97:
 314:Src/main.c    **** 		motorcmd.amount = dist;
 1475              		.loc 1 314 3 is_stmt 1 view .LVU308
 1476 00c4 3449     		ldr	r1, .L77+32
 1477 00c6 2200     		movs	r2, r4
 1478 00c8 02A8     		add	r0, sp, #8
 1479 00ca FFF7FEFF 		bl	sprintf
 1480              	.LVL98:
 315:Src/main.c    **** 	}
 1481              		.loc 1 315 3 view .LVU309
 315:Src/main.c    **** 	}
 1482              		.loc 1 315 19 is_stmt 0 view .LVU310
 1483 00ce 06AB     		add	r3, sp, #24
 1484 00d0 5C70     		strb	r4, [r3, #1]
 1485              	.LVL99:
 1486              	.L71:
 315:Src/main.c    **** 	}
 1487              		.loc 1 315 19 view .LVU311
 1488              	.LBE15:
 319:Src/main.c    **** 	USART_SendString(part2);
 1489              		.loc 1 319 2 is_stmt 1 view .LVU312
 1490 00d2 3000     		movs	r0, r6
 1491 00d4 FFF7FEFF 		bl	USART_SendString
 1492              	.LVL100:
 320:Src/main.c    **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 44


 1493              		.loc 1 320 2 view .LVU313
 1494 00d8 02A8     		add	r0, sp, #8
 1495 00da FFF7FEFF 		bl	USART_SendString
 1496              	.LVL101:
 322:Src/main.c    **** 	HAL_Delay(1000);
 1497              		.loc 1 322 2 view .LVU314
 322:Src/main.c    **** 	HAL_Delay(1000);
 1498              		.loc 1 322 13 is_stmt 0 view .LVU315
 1499 00de 8024     		movs	r4, #128
 1500 00e0 E405     		lsls	r4, r4, #23
 1501 00e2 2E4B     		ldr	r3, .L77+36
 1502 00e4 6363     		str	r3, [r4, #52]
 323:Src/main.c    **** 	TIM2->CCR1 = 0;
 1503              		.loc 1 323 2 is_stmt 1 view .LVU316
 1504 00e6 FA20     		movs	r0, #250
 1505 00e8 8000     		lsls	r0, r0, #2
 1506 00ea FFF7FEFF 		bl	HAL_Delay
 1507              	.LVL102:
 324:Src/main.c    **** 
 1508              		.loc 1 324 2 view .LVU317
 324:Src/main.c    **** 
 1509              		.loc 1 324 13 is_stmt 0 view .LVU318
 1510 00ee 0023     		movs	r3, #0
 1511 00f0 6363     		str	r3, [r4, #52]
 326:Src/main.c    **** 	USART_SendString(result);
 1512              		.loc 1 326 2 is_stmt 1 view .LVU319
 326:Src/main.c    **** 	USART_SendString(result);
 1513              		.loc 1 326 20 is_stmt 0 view .LVU320
 1514 00f2 06A8     		add	r0, sp, #24
 1515 00f4 FFF7FEFF 		bl	MoveMotors
 1516              	.LVL103:
 327:Src/main.c    **** 
 1517              		.loc 1 327 2 is_stmt 1 view .LVU321
 1518 00f8 FFF7FEFF 		bl	USART_SendString
 1519              	.LVL104:
 329:Src/main.c    **** 
 1520              		.loc 1 329 2 view .LVU322
 1521 00fc FFF7FEFF 		bl	ClearCommand
 1522              	.LVL105:
 1523              	.L60:
 348:Src/main.c    **** 
 1524              		.loc 1 348 1 is_stmt 0 view .LVU323
 1525 0100 2FB0     		add	sp, sp, #188
 1526              		@ sp needed
 1527 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 1528              	.L67:
 273:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1529              		.loc 1 273 4 is_stmt 1 view .LVU324
 1530              	.LVL106:
 274:Src/main.c    **** 			break;
 1531              		.loc 1 274 4 view .LVU325
 274:Src/main.c    **** 			break;
 1532              		.loc 1 274 17 is_stmt 0 view .LVU326
 1533 0104 06AB     		add	r3, sp, #24
 1534 0106 0222     		movs	r2, #2
 1535 0108 1A70     		strb	r2, [r3]
 275:Src/main.c    **** 		case 'l':
ARM GAS  /tmp/ccWqzMz6.s 			page 45


 1536              		.loc 1 275 4 is_stmt 1 view .LVU327
 273:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1537              		.loc 1 273 10 is_stmt 0 view .LVU328
 1538 010a 1BAE     		add	r6, sp, #108
 1539              	.LVL107:
 275:Src/main.c    **** 		case 'l':
 1540              		.loc 1 275 4 view .LVU329
 1541 010c CFE7     		b	.L64
 1542              	.LVL108:
 1543              	.L66:
 277:Src/main.c    **** 			USART_SendString(part1);
 1544              		.loc 1 277 4 is_stmt 1 view .LVU330
 278:Src/main.c    **** 			Log();
 1545              		.loc 1 278 4 view .LVU331
 1546 010e 15A8     		add	r0, sp, #84
 1547              	.LVL109:
 278:Src/main.c    **** 			Log();
 1548              		.loc 1 278 4 is_stmt 0 view .LVU332
 1549 0110 FFF7FEFF 		bl	USART_SendString
 1550              	.LVL110:
 279:Src/main.c    **** 			ClearCommand();
 1551              		.loc 1 279 4 is_stmt 1 view .LVU333
 1552 0114 FFF7FEFF 		bl	Log
 1553              	.LVL111:
 280:Src/main.c    **** 			return;
 1554              		.loc 1 280 4 view .LVU334
 1555 0118 FFF7FEFF 		bl	ClearCommand
 1556              	.LVL112:
 281:Src/main.c    **** 		case 'p':
 1557              		.loc 1 281 4 view .LVU335
 1558 011c F0E7     		b	.L60
 1559              	.LVL113:
 1560              	.L65:
 283:Src/main.c    **** 			USART_SendString(part1);
 1561              		.loc 1 283 4 view .LVU336
 284:Src/main.c    **** 			Proceed();
 1562              		.loc 1 284 4 view .LVU337
 1563 011e 0DA8     		add	r0, sp, #52
 1564              	.LVL114:
 284:Src/main.c    **** 			Proceed();
 1565              		.loc 1 284 4 is_stmt 0 view .LVU338
 1566 0120 FFF7FEFF 		bl	USART_SendString
 1567              	.LVL115:
 285:Src/main.c    **** 			ClearCommand();
 1568              		.loc 1 285 4 is_stmt 1 view .LVU339
 1569 0124 FFF7FEFF 		bl	Proceed
 1570              	.LVL116:
 286:Src/main.c    **** 			return;
 1571              		.loc 1 286 4 view .LVU340
 1572 0128 FFF7FEFF 		bl	ClearCommand
 1573              	.LVL117:
 287:Src/main.c    **** 		case 'x':
 1574              		.loc 1 287 4 view .LVU341
 1575 012c E8E7     		b	.L60
 1576              	.LVL118:
 1577              	.L62:
 289:Src/main.c    **** 			USART_SendString(part1);
ARM GAS  /tmp/ccWqzMz6.s 			page 46


 1578              		.loc 1 289 4 view .LVU342
 290:Src/main.c    **** 			motorcmd.dir = OFF;
 1579              		.loc 1 290 4 view .LVU343
 1580 012e 07A8     		add	r0, sp, #28
 1581              	.LVL119:
 290:Src/main.c    **** 			motorcmd.dir = OFF;
 1582              		.loc 1 290 4 is_stmt 0 view .LVU344
 1583 0130 FFF7FEFF 		bl	USART_SendString
 1584              	.LVL120:
 291:Src/main.c    **** 			MoveMotors(&motorcmd);
 1585              		.loc 1 291 4 is_stmt 1 view .LVU345
 291:Src/main.c    **** 			MoveMotors(&motorcmd);
 1586              		.loc 1 291 17 is_stmt 0 view .LVU346
 1587 0134 06A8     		add	r0, sp, #24
 1588 0136 0423     		movs	r3, #4
 1589 0138 0370     		strb	r3, [r0]
 292:Src/main.c    **** 			ClearCommand();
 1590              		.loc 1 292 4 is_stmt 1 view .LVU347
 1591 013a FFF7FEFF 		bl	MoveMotors
 1592              	.LVL121:
 293:Src/main.c    **** 			return;
 1593              		.loc 1 293 4 view .LVU348
 1594 013e FFF7FEFF 		bl	ClearCommand
 1595              	.LVL122:
 294:Src/main.c    **** 		default:
 1596              		.loc 1 294 4 view .LVU349
 1597 0142 DDE7     		b	.L60
 1598              	.LVL123:
 1599              	.L61:
 296:Src/main.c    **** 			ClearCommand();
 1600              		.loc 1 296 4 view .LVU350
 1601 0144 27A8     		add	r0, sp, #156
 1602 0146 FFF7FEFF 		bl	USART_SendString
 1603              	.LVL124:
 297:Src/main.c    **** 			return;
 1604              		.loc 1 297 4 view .LVU351
 1605 014a FFF7FEFF 		bl	ClearCommand
 1606              	.LVL125:
 298:Src/main.c    **** 	}
 1607              		.loc 1 298 4 view .LVU352
 1608 014e D7E7     		b	.L60
 1609              	.L74:
 263:Src/main.c    **** 		case 'w':
 1610              		.loc 1 263 2 is_stmt 0 view .LVU353
 1611 0150 23AE     		add	r6, sp, #140
 1612 0152 ACE7     		b	.L64
 1613              	.LVL126:
 1614              	.L75:
 303:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1615              		.loc 1 303 21 discriminator 1 view .LVU354
 1616 0154 772C     		cmp	r4, #119
 1617 0156 ACD1     		bne	.L70
 304:Src/main.c    **** 		motorcmd.amount = 0;
 1618              		.loc 1 304 3 is_stmt 1 view .LVU355
 1619 0158 02AA     		add	r2, sp, #8
 1620 015a 114B     		ldr	r3, .L77+40
 1621 015c 31CB     		ldmia	r3!, {r0, r4, r5}
ARM GAS  /tmp/ccWqzMz6.s 			page 47


 1622 015e 31C2     		stmia	r2!, {r0, r4, r5}
 1623 0160 1B88     		ldrh	r3, [r3]
 1624 0162 1380     		strh	r3, [r2]
 305:Src/main.c    **** 	}
 1625              		.loc 1 305 3 view .LVU356
 305:Src/main.c    **** 	}
 1626              		.loc 1 305 19 is_stmt 0 view .LVU357
 1627 0164 06AB     		add	r3, sp, #24
 1628 0166 0022     		movs	r2, #0
 1629 0168 5A70     		strb	r2, [r3, #1]
 1630 016a B2E7     		b	.L71
 1631              	.L76:
 308:Src/main.c    **** 		ClearCommand();
 1632              		.loc 1 308 3 is_stmt 1 view .LVU358
 1633 016c 27A8     		add	r0, sp, #156
 1634 016e FFF7FEFF 		bl	USART_SendString
 1635              	.LVL127:
 309:Src/main.c    **** 		return;
 1636              		.loc 1 309 3 view .LVU359
 1637 0172 FFF7FEFF 		bl	ClearCommand
 1638              	.LVL128:
 310:Src/main.c    **** 	}
 1639              		.loc 1 310 3 view .LVU360
 1640 0176 C3E7     		b	.L60
 1641              	.L78:
 1642              		.align	2
 1643              	.L77:
 1644 0178 14000000 		.word	.LC46
 1645 017c 30000000 		.word	.LC48
 1646 0180 40000000 		.word	.LC50
 1647 0184 50000000 		.word	.LC52
 1648 0188 60000000 		.word	.LC54
 1649 018c 78000000 		.word	.LC56
 1650 0190 98000000 		.word	.LC58
 1651 0194 00000000 		.word	.L63
 1652 0198 10000000 		.word	.LC63
 1653 019c FFFF0000 		.word	65535
 1654 01a0 00000000 		.word	.LC61
 1655              		.cfi_endproc
 1656              	.LFE52:
 1658              		.section	.text.Error_Handler,"ax",%progbits
 1659              		.align	1
 1660              		.global	Error_Handler
 1661              		.syntax unified
 1662              		.code	16
 1663              		.thumb_func
 1665              	Error_Handler:
 1666              	.LFB59:
 648:Src/main.c    **** 
 649:Src/main.c    **** /* USER CODE BEGIN 4 */
 650:Src/main.c    **** 
 651:Src/main.c    **** /* USER CODE END 4 */
 652:Src/main.c    **** 
 653:Src/main.c    **** /**
 654:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 655:Src/main.c    ****  * @retval None
 656:Src/main.c    ****  */
ARM GAS  /tmp/ccWqzMz6.s 			page 48


 657:Src/main.c    **** void Error_Handler(void)
 658:Src/main.c    **** {
 1667              		.loc 1 658 1 view -0
 1668              		.cfi_startproc
 1669              		@ Volatile: function does not return.
 1670              		@ args = 0, pretend = 0, frame = 0
 1671              		@ frame_needed = 0, uses_anonymous_args = 0
 1672              		@ link register save eliminated.
 659:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 660:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 661:Src/main.c    **** 	__disable_irq();
 1673              		.loc 1 661 2 view .LVU362
 1674              	.LBB16:
 1675              	.LBI16:
 1676              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccWqzMz6.s 			page 49


  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccWqzMz6.s 			page 50


 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1677              		.loc 2 140 27 view .LVU363
 1678              	.LBB17:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1679              		.loc 2 142 3 view .LVU364
 1680              		.syntax divided
 1681              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1682 0000 72B6     		cpsid i
 1683              	@ 0 "" 2
 1684              		.thumb
 1685              		.syntax unified
 1686              	.L80:
 1687              	.LBE17:
 1688              	.LBE16:
 662:Src/main.c    **** 	while (1)
 1689              		.loc 1 662 2 discriminator 1 view .LVU365
ARM GAS  /tmp/ccWqzMz6.s 			page 51


 663:Src/main.c    **** 	{
 664:Src/main.c    **** 	}
 1690              		.loc 1 664 2 discriminator 1 view .LVU366
 662:Src/main.c    **** 	while (1)
 1691              		.loc 1 662 8 discriminator 1 view .LVU367
 1692 0002 FEE7     		b	.L80
 1693              		.cfi_endproc
 1694              	.LFE59:
 1696              		.section	.text.SystemClock_Config,"ax",%progbits
 1697              		.align	1
 1698              		.global	SystemClock_Config
 1699              		.syntax unified
 1700              		.code	16
 1701              		.thumb_func
 1703              	SystemClock_Config:
 1704              	.LFB56:
 536:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1705              		.loc 1 536 1 view -0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 72
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709 0000 00B5     		push	{lr}
 1710              	.LCFI22:
 1711              		.cfi_def_cfa_offset 4
 1712              		.cfi_offset 14, -4
 1713 0002 93B0     		sub	sp, sp, #76
 1714              	.LCFI23:
 1715              		.cfi_def_cfa_offset 80
 537:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1716              		.loc 1 537 2 view .LVU369
 537:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1717              		.loc 1 537 21 is_stmt 0 view .LVU370
 1718 0004 3422     		movs	r2, #52
 1719 0006 0021     		movs	r1, #0
 1720 0008 05A8     		add	r0, sp, #20
 1721 000a FFF7FEFF 		bl	memset
 1722              	.LVL129:
 538:Src/main.c    **** 
 1723              		.loc 1 538 2 is_stmt 1 view .LVU371
 538:Src/main.c    **** 
 1724              		.loc 1 538 21 is_stmt 0 view .LVU372
 1725 000e 1022     		movs	r2, #16
 1726 0010 0021     		movs	r1, #0
 1727 0012 01A8     		add	r0, sp, #4
 1728 0014 FFF7FEFF 		bl	memset
 1729              	.LVL130:
 543:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1730              		.loc 1 543 2 is_stmt 1 view .LVU373
 543:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1731              		.loc 1 543 35 is_stmt 0 view .LVU374
 1732 0018 0223     		movs	r3, #2
 1733 001a 0593     		str	r3, [sp, #20]
 544:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1734              		.loc 1 544 2 is_stmt 1 view .LVU375
 544:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1735              		.loc 1 544 29 is_stmt 0 view .LVU376
 1736 001c 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccWqzMz6.s 			page 52


 1737 001e 0893     		str	r3, [sp, #32]
 545:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1738              		.loc 1 545 2 is_stmt 1 view .LVU377
 545:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1739              		.loc 1 545 40 is_stmt 0 view .LVU378
 1740 0020 0F33     		adds	r3, r3, #15
 1741 0022 0993     		str	r3, [sp, #36]
 546:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1742              		.loc 1 546 2 is_stmt 1 view .LVU379
 547:Src/main.c    **** 	{
 1743              		.loc 1 547 2 view .LVU380
 547:Src/main.c    **** 	{
 1744              		.loc 1 547 6 is_stmt 0 view .LVU381
 1745 0024 05A8     		add	r0, sp, #20
 1746 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1747              	.LVL131:
 547:Src/main.c    **** 	{
 1748              		.loc 1 547 5 view .LVU382
 1749 002a 0028     		cmp	r0, #0
 1750 002c 0DD1     		bne	.L84
 554:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1751              		.loc 1 554 2 is_stmt 1 view .LVU383
 554:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1752              		.loc 1 554 30 is_stmt 0 view .LVU384
 1753 002e 0723     		movs	r3, #7
 1754 0030 0193     		str	r3, [sp, #4]
 556:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1755              		.loc 1 556 2 is_stmt 1 view .LVU385
 556:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1756              		.loc 1 556 33 is_stmt 0 view .LVU386
 1757 0032 0023     		movs	r3, #0
 1758 0034 0293     		str	r3, [sp, #8]
 557:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1759              		.loc 1 557 2 is_stmt 1 view .LVU387
 557:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1760              		.loc 1 557 34 is_stmt 0 view .LVU388
 1761 0036 0393     		str	r3, [sp, #12]
 558:Src/main.c    **** 
 1762              		.loc 1 558 2 is_stmt 1 view .LVU389
 558:Src/main.c    **** 
 1763              		.loc 1 558 35 is_stmt 0 view .LVU390
 1764 0038 0493     		str	r3, [sp, #16]
 560:Src/main.c    **** 	{
 1765              		.loc 1 560 2 is_stmt 1 view .LVU391
 560:Src/main.c    **** 	{
 1766              		.loc 1 560 6 is_stmt 0 view .LVU392
 1767 003a 0021     		movs	r1, #0
 1768 003c 01A8     		add	r0, sp, #4
 1769 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1770              	.LVL132:
 560:Src/main.c    **** 	{
 1771              		.loc 1 560 5 view .LVU393
 1772 0042 0028     		cmp	r0, #0
 1773 0044 03D1     		bne	.L85
 564:Src/main.c    **** 
 1774              		.loc 1 564 1 view .LVU394
 1775 0046 13B0     		add	sp, sp, #76
ARM GAS  /tmp/ccWqzMz6.s 			page 53


 1776              		@ sp needed
 1777 0048 00BD     		pop	{pc}
 1778              	.L84:
 549:Src/main.c    **** 	}
 1779              		.loc 1 549 3 is_stmt 1 view .LVU395
 1780 004a FFF7FEFF 		bl	Error_Handler
 1781              	.LVL133:
 1782              	.L85:
 562:Src/main.c    **** 	}
 1783              		.loc 1 562 3 view .LVU396
 1784 004e FFF7FEFF 		bl	Error_Handler
 1785              	.LVL134:
 1786              		.cfi_endproc
 1787              	.LFE56:
 1789              		.section	.text.main,"ax",%progbits
 1790              		.align	1
 1791              		.global	main
 1792              		.syntax unified
 1793              		.code	16
 1794              		.thumb_func
 1796              	main:
 1797              	.LFB55:
 481:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1798              		.loc 1 481 1 view -0
 1799              		.cfi_startproc
 1800              		@ Volatile: function does not return.
 1801              		@ args = 0, pretend = 0, frame = 8
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 1803 0000 10B5     		push	{r4, lr}
 1804              	.LCFI24:
 1805              		.cfi_def_cfa_offset 8
 1806              		.cfi_offset 4, -8
 1807              		.cfi_offset 14, -4
 1808 0002 82B0     		sub	sp, sp, #8
 1809              	.LCFI25:
 1810              		.cfi_def_cfa_offset 16
 482:Src/main.c    **** 	SystemClock_Config();
 1811              		.loc 1 482 2 view .LVU398
 1812 0004 FFF7FEFF 		bl	HAL_Init
 1813              	.LVL135:
 483:Src/main.c    **** 
 1814              		.loc 1 483 2 view .LVU399
 1815 0008 FFF7FEFF 		bl	SystemClock_Config
 1816              	.LVL136:
 486:Src/main.c    **** 	USART_Init();
 1817              		.loc 1 486 2 view .LVU400
 1818 000c FFF7FEFF 		bl	GPIO_AF_Init
 1819              	.LVL137:
 487:Src/main.c    **** 
 1820              		.loc 1 487 2 view .LVU401
 1821 0010 FFF7FEFF 		bl	USART_Init
 1822              	.LVL138:
 489:Src/main.c    **** 
 1823              		.loc 1 489 2 view .LVU402
 1824 0014 FFF7FEFF 		bl	motor_init
 1825              	.LVL139:
 491:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,2);
ARM GAS  /tmp/ccWqzMz6.s 			page 54


 1826              		.loc 1 491 2 view .LVU403
 1827              	.LBB18:
 1828              	.LBI18:
 1829              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 55


  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /tmp/ccWqzMz6.s 			page 56


 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
ARM GAS  /tmp/ccWqzMz6.s 			page 57


 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 58


 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 59


 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccWqzMz6.s 			page 60


 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
ARM GAS  /tmp/ccWqzMz6.s 			page 61


 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
ARM GAS  /tmp/ccWqzMz6.s 			page 62


 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
ARM GAS  /tmp/ccWqzMz6.s 			page 63


 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /tmp/ccWqzMz6.s 			page 64


 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccWqzMz6.s 			page 65


 1830              		.loc 3 623 22 view .LVU404
 1831              	.LBB19:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1832              		.loc 3 625 3 view .LVU405
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1833              		.loc 3 627 5 view .LVU406
 1834              		.loc 3 627 20 is_stmt 0 view .LVU407
 1835 0018 254B     		ldr	r3, .L90
 1836 001a 8022     		movs	r2, #128
 1837 001c 9205     		lsls	r2, r2, #22
 1838 001e 1A60     		str	r2, [r3]
 1839              	.LVL140:
 1840              		.loc 3 627 20 view .LVU408
 1841              	.LBE19:
 1842              	.LBE18:
 492:Src/main.c    **** 
 1843              		.loc 1 492 2 is_stmt 1 view .LVU409
 1844              	.LBB20:
 1845              	.LBI20:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
ARM GAS  /tmp/ccWqzMz6.s 			page 66


 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccWqzMz6.s 			page 67


 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1846              		.loc 3 730 22 view .LVU410
 1847              	.LBB21:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1848              		.loc 3 732 3 view .LVU411
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1849              		.loc 3 734 5 view .LVU412
 1850              		.loc 3 734 52 is_stmt 0 view .LVU413
 1851 0020 C720     		movs	r0, #199
 1852 0022 8000     		lsls	r0, r0, #2
 1853 0024 1958     		ldr	r1, [r3, r0]
 1854              		.loc 3 734 33 view .LVU414
 1855 0026 234A     		ldr	r2, .L90+4
 1856 0028 1140     		ands	r1, r2
 1857              		.loc 3 734 102 view .LVU415
 1858 002a 8022     		movs	r2, #128
 1859 002c 1202     		lsls	r2, r2, #8
 1860 002e 0A43     		orrs	r2, r1
 1861              		.loc 3 734 30 view .LVU416
 1862 0030 1A50     		str	r2, [r3, r0]
 1863              	.LVL141:
 1864              		.loc 3 734 30 view .LVU417
 1865              	.LBE21:
 1866              	.LBE20:
 494:Src/main.c    **** 
 1867              		.loc 1 494 2 is_stmt 1 view .LVU418
 494:Src/main.c    **** 
 1868              		.loc 1 494 10 is_stmt 0 view .LVU419
 1869 0032 214B     		ldr	r3, .L90+8
 1870 0034 1A68     		ldr	r2, [r3]
 1871 0036 0092     		str	r2, [sp]
 1872 0038 9B88     		ldrh	r3, [r3, #4]
 1873 003a 6A46     		mov	r2, sp
 1874 003c 9380     		strh	r3, [r2, #4]
 497:Src/main.c    **** 	/* TIM15_Init(); */
 1875              		.loc 1 497 2 is_stmt 1 view .LVU420
 1876 003e FFF7FEFF 		bl	MX_GPIO_Init
 1877              	.LVL142:
 499:Src/main.c    **** 
 1878              		.loc 1 499 2 view .LVU421
 1879 0042 FFF7FEFF 		bl	MX_TIM15_Init
 1880              	.LVL143:
 502:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1881              		.loc 1 502 2 view .LVU422
 1882 0046 8021     		movs	r1, #128
 1883 0048 1C4C     		ldr	r4, .L90+12
ARM GAS  /tmp/ccWqzMz6.s 			page 68


 1884 004a 0022     		movs	r2, #0
 1885 004c 0901     		lsls	r1, r1, #4
 1886 004e 2000     		movs	r0, r4
 1887 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1888              	.LVL144:
 503:Src/main.c    **** 
 1889              		.loc 1 503 2 view .LVU423
 1890 0054 8021     		movs	r1, #128
 1891 0056 0022     		movs	r2, #0
 1892 0058 8901     		lsls	r1, r1, #6
 1893 005a 2000     		movs	r0, r4
 1894 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1895              	.LVL145:
 1896 0060 0EE0     		b	.L89
 1897              	.L88:
 513:Src/main.c    **** 			{
 1898              		.loc 1 513 4 view .LVU424
 513:Src/main.c    **** 			{
 1899              		.loc 1 513 14 is_stmt 0 view .LVU425
 1900 0062 174B     		ldr	r3, .L90+16
 1901 0064 5B78     		ldrb	r3, [r3, #1]
 513:Src/main.c    **** 			{
 1902              		.loc 1 513 6 view .LVU426
 1903 0066 002B     		cmp	r3, #0
 1904 0068 06D0     		beq	.L87
 515:Src/main.c    **** 			}
 1905              		.loc 1 515 5 is_stmt 1 view .LVU427
 515:Src/main.c    **** 			}
 1906              		.loc 1 515 27 is_stmt 0 view .LVU428
 1907 006a 154B     		ldr	r3, .L90+16
 1908 006c 1878     		ldrb	r0, [r3]
 1909 006e C0B2     		uxtb	r0, r0
 515:Src/main.c    **** 			}
 1910              		.loc 1 515 39 view .LVU429
 1911 0070 5978     		ldrb	r1, [r3, #1]
 1912 0072 C9B2     		uxtb	r1, r1
 515:Src/main.c    **** 			}
 1913              		.loc 1 515 5 view .LVU430
 1914 0074 FFF7FEFF 		bl	ProcessCommand
 1915              	.LVL146:
 1916              	.L87:
 527:Src/main.c    **** 	}
 1917              		.loc 1 527 3 is_stmt 1 view .LVU431
 1918 0078 FA20     		movs	r0, #250
 1919 007a 4000     		lsls	r0, r0, #1
 1920 007c FFF7FEFF 		bl	HAL_Delay
 1921              	.LVL147:
 505:Src/main.c    **** 		if(incomingCommand)
 1922              		.loc 1 505 8 view .LVU432
 1923              	.L89:
 505:Src/main.c    **** 		if(incomingCommand)
 1924              		.loc 1 505 2 view .LVU433
 506:Src/main.c    **** 		{
 1925              		.loc 1 506 3 view .LVU434
 506:Src/main.c    **** 		{
 1926              		.loc 1 506 6 is_stmt 0 view .LVU435
 1927 0080 104B     		ldr	r3, .L90+20
ARM GAS  /tmp/ccWqzMz6.s 			page 69


 1928 0082 1B78     		ldrb	r3, [r3]
 506:Src/main.c    **** 		{
 1929              		.loc 1 506 5 view .LVU436
 1930 0084 002B     		cmp	r3, #0
 1931 0086 F7D0     		beq	.L87
 508:Src/main.c    **** 					command[0] != 'a' &&
 1932              		.loc 1 508 4 is_stmt 1 view .LVU437
 508:Src/main.c    **** 					command[0] != 'a' &&
 1933              		.loc 1 508 14 is_stmt 0 view .LVU438
 1934 0088 0D4B     		ldr	r3, .L90+16
 1935 008a 1B78     		ldrb	r3, [r3]
 508:Src/main.c    **** 					command[0] != 'a' &&
 1936              		.loc 1 508 6 view .LVU439
 1937 008c 772B     		cmp	r3, #119
 1938 008e E8D0     		beq	.L88
 509:Src/main.c    **** 					command[0] != 'd'){
 1939              		.loc 1 509 13 discriminator 1 view .LVU440
 1940 0090 0B4B     		ldr	r3, .L90+16
 1941 0092 1B78     		ldrb	r3, [r3]
 508:Src/main.c    **** 					command[0] != 'a' &&
 1942              		.loc 1 508 25 discriminator 1 view .LVU441
 1943 0094 612B     		cmp	r3, #97
 1944 0096 E4D0     		beq	.L88
 510:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 1945              		.loc 1 510 13 view .LVU442
 1946 0098 094B     		ldr	r3, .L90+16
 1947 009a 1B78     		ldrb	r3, [r3]
 509:Src/main.c    **** 					command[0] != 'd'){
 1948              		.loc 1 509 24 view .LVU443
 1949 009c 642B     		cmp	r3, #100
 1950 009e E0D0     		beq	.L88
 511:Src/main.c    **** 			}
 1951              		.loc 1 511 5 is_stmt 1 view .LVU444
 511:Src/main.c    **** 			}
 1952              		.loc 1 511 27 is_stmt 0 view .LVU445
 1953 00a0 074B     		ldr	r3, .L90+16
 1954 00a2 1878     		ldrb	r0, [r3]
 1955 00a4 C0B2     		uxtb	r0, r0
 511:Src/main.c    **** 			}
 1956              		.loc 1 511 5 view .LVU446
 1957 00a6 0021     		movs	r1, #0
 1958 00a8 FFF7FEFF 		bl	ProcessCommand
 1959              	.LVL148:
 1960 00ac D9E7     		b	.L88
 1961              	.L91:
 1962 00ae C046     		.align	2
 1963              	.L90:
 1964 00b0 00E100E0 		.word	-536813312
 1965 00b4 FF00FFFF 		.word	-65281
 1966 00b8 00000000 		.word	.LC21
 1967 00bc 00040048 		.word	1207960576
 1968 00c0 00000000 		.word	command
 1969 00c4 00000000 		.word	incomingCommand
 1970              		.cfi_endproc
 1971              	.LFE55:
 1973              		.global	pulse_end_time
 1974              		.section	.bss.pulse_end_time,"aw",%nobits
ARM GAS  /tmp/ccWqzMz6.s 			page 70


 1975              		.align	2
 1978              	pulse_end_time:
 1979 0000 00000000 		.space	4
 1980              		.global	pulse_start_time
 1981              		.section	.bss.pulse_start_time,"aw",%nobits
 1982              		.align	2
 1985              	pulse_start_time:
 1986 0000 00000000 		.space	4
 1987              		.global	htim155
 1988              		.section	.bss.htim155,"aw",%nobits
 1989              		.align	2
 1992              	htim155:
 1993 0000 00000000 		.space	64
 1993      00000000 
 1993      00000000 
 1993      00000000 
 1993      00000000 
 1994              		.global	pulseWidth
 1995              		.section	.bss.pulseWidth,"aw",%nobits
 1996              		.align	2
 1999              	pulseWidth:
 2000 0000 00000000 		.space	4
 2001              		.global	fallingEdgeTime
 2002              		.section	.bss.fallingEdgeTime,"aw",%nobits
 2003              		.align	2
 2006              	fallingEdgeTime:
 2007 0000 00000000 		.space	4
 2008              		.global	risingEdgeTime
 2009              		.section	.bss.risingEdgeTime,"aw",%nobits
 2010              		.align	2
 2013              	risingEdgeTime:
 2014 0000 00000000 		.space	4
 2015              		.global	incomingCommand
 2016              		.section	.bss.incomingCommand,"aw",%nobits
 2019              	incomingCommand:
 2020 0000 00       		.space	1
 2021              		.global	command
 2022              		.section	.bss.command,"aw",%nobits
 2023              		.align	2
 2026              	command:
 2027 0000 000000   		.space	3
 2028              		.global	rightDistance
 2029              		.section	.bss.rightDistance,"aw",%nobits
 2030              		.align	1
 2033              	rightDistance:
 2034 0000 0000     		.space	2
 2035              		.global	leftDistance
 2036              		.section	.bss.leftDistance,"aw",%nobits
 2037              		.align	1
 2040              	leftDistance:
 2041 0000 0000     		.space	2
 2042              		.global	Value2
 2043              		.section	.bss.Value2,"aw",%nobits
 2044              		.align	1
 2047              	Value2:
 2048 0000 0000     		.space	2
 2049              		.global	Value1
ARM GAS  /tmp/ccWqzMz6.s 			page 71


 2050              		.section	.bss.Value1,"aw",%nobits
 2051              		.align	1
 2054              	Value1:
 2055 0000 0000     		.space	2
 2056              		.global	startTime
 2057              		.section	.bss.startTime,"aw",%nobits
 2058              		.align	1
 2061              	startTime:
 2062 0000 0000     		.space	2
 2063              		.global	pMillis
 2064              		.section	.bss.pMillis,"aw",%nobits
 2065              		.align	2
 2068              	pMillis:
 2069 0000 00000000 		.space	4
 2070              		.global	htim15
 2071              		.section	.bss.htim15,"aw",%nobits
 2072              		.align	2
 2075              	htim15:
 2076 0000 00000000 		.space	64
 2076      00000000 
 2076      00000000 
 2076      00000000 
 2076      00000000 
 2077              		.text
 2078              	.Letext0:
 2079              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2080              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2081              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2082              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2083              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2084              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2085              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2086              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2087              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2088              		.file 13 "Inc/pins.h"
 2089              		.file 14 "Inc/motor.h"
 2090              		.file 15 "/usr/arm-none-eabi/include/string.h"
 2091              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2092              		.file 17 "/usr/arm-none-eabi/include/stdio.h"
 2093              		.file 18 "<built-in>"
ARM GAS  /tmp/ccWqzMz6.s 			page 72


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccWqzMz6.s:19     .text.MX_TIM15_Init:00000000 $t
     /tmp/ccWqzMz6.s:24     .text.MX_TIM15_Init:00000000 MX_TIM15_Init
     /tmp/ccWqzMz6.s:61     .text.MX_TIM15_Init:00000020 $d
     /tmp/ccWqzMz6.s:67     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccWqzMz6.s:72     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccWqzMz6.s:145    .text.MX_GPIO_Init:00000048 $d
     /tmp/ccWqzMz6.s:150    .text.LED_Init:00000000 $t
     /tmp/ccWqzMz6.s:156    .text.LED_Init:00000000 LED_Init
     /tmp/ccWqzMz6.s:199    .text.LED_Init:00000024 $d
     /tmp/ccWqzMz6.s:204    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccWqzMz6.s:210    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccWqzMz6.s:379    .text.GPIO_AF_Init:000000e0 $d
     /tmp/ccWqzMz6.s:390    .text.USART_Init:00000000 $t
     /tmp/ccWqzMz6.s:396    .text.USART_Init:00000000 USART_Init
     /tmp/ccWqzMz6.s:488    .text.USART_Init:0000005c $d
     /tmp/ccWqzMz6.s:495    .text.USART_SendChar:00000000 $t
     /tmp/ccWqzMz6.s:501    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccWqzMz6.s:527    .text.USART_SendChar:00000010 $d
     /tmp/ccWqzMz6.s:532    .text.USART_SendString:00000000 $t
     /tmp/ccWqzMz6.s:538    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccWqzMz6.s:583    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccWqzMz6.s:587    .text.ClearCommand:00000000 $t
     /tmp/ccWqzMz6.s:593    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccWqzMz6.s:636    .text.ClearCommand:0000002c $d
     /tmp/ccWqzMz6.s:2026   .bss.command:00000000 command
     /tmp/ccWqzMz6.s:2019   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccWqzMz6.s:643    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccWqzMz6.s:647    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccWqzMz6.s:653    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccWqzMz6.s:745    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/ccWqzMz6.s:753    .rodata.Proceed.str1.4:00000000 $d
     /tmp/ccWqzMz6.s:757    .text.Proceed:00000000 $t
     /tmp/ccWqzMz6.s:763    .text.Proceed:00000000 Proceed
     /tmp/ccWqzMz6.s:786    .text.Proceed:0000000c $d
     /tmp/ccWqzMz6.s:792    .rodata.PrintDistance.str1.4:00000000 $d
     /tmp/ccWqzMz6.s:796    .text.PrintDistance:00000000 $t
     /tmp/ccWqzMz6.s:802    .text.PrintDistance:00000000 PrintDistance
     /tmp/ccWqzMz6.s:848    .text.PrintDistance:00000030 $d
     /tmp/ccWqzMz6.s:853    .rodata.GetUltrasonic.str1.4:00000000 $d
     /tmp/ccWqzMz6.s:860    .text.GetUltrasonic:00000000 $t
     /tmp/ccWqzMz6.s:866    .text.GetUltrasonic:00000000 GetUltrasonic
     /tmp/ccWqzMz6.s:1056   .text.GetUltrasonic:000000bc $d
     /tmp/ccWqzMz6.s:2068   .bss.pMillis:00000000 pMillis
     /tmp/ccWqzMz6.s:1065   .rodata.Log.str1.4:00000000 $d
     /tmp/ccWqzMz6.s:1079   .text.Log:00000000 $t
     /tmp/ccWqzMz6.s:1085   .text.Log:00000000 Log
     /tmp/ccWqzMz6.s:1239   .text.Log:000000a8 $d
     /tmp/ccWqzMz6.s:1249   .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccWqzMz6.s:1277   .text.ProcessCommand:00000000 $t
     /tmp/ccWqzMz6.s:1283   .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccWqzMz6.s:1414   .rodata.ProcessCommand:00000000 $d
     /tmp/ccWqzMz6.s:1644   .text.ProcessCommand:00000178 $d
     /tmp/ccWqzMz6.s:1659   .text.Error_Handler:00000000 $t
     /tmp/ccWqzMz6.s:1665   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccWqzMz6.s:1697   .text.SystemClock_Config:00000000 $t
ARM GAS  /tmp/ccWqzMz6.s 			page 73


     /tmp/ccWqzMz6.s:1703   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccWqzMz6.s:1790   .text.main:00000000 $t
     /tmp/ccWqzMz6.s:1796   .text.main:00000000 main
     /tmp/ccWqzMz6.s:1964   .text.main:000000b0 $d
     /tmp/ccWqzMz6.s:1978   .bss.pulse_end_time:00000000 pulse_end_time
     /tmp/ccWqzMz6.s:1975   .bss.pulse_end_time:00000000 $d
     /tmp/ccWqzMz6.s:1985   .bss.pulse_start_time:00000000 pulse_start_time
     /tmp/ccWqzMz6.s:1982   .bss.pulse_start_time:00000000 $d
     /tmp/ccWqzMz6.s:1992   .bss.htim155:00000000 htim155
     /tmp/ccWqzMz6.s:1989   .bss.htim155:00000000 $d
     /tmp/ccWqzMz6.s:1999   .bss.pulseWidth:00000000 pulseWidth
     /tmp/ccWqzMz6.s:1996   .bss.pulseWidth:00000000 $d
     /tmp/ccWqzMz6.s:2006   .bss.fallingEdgeTime:00000000 fallingEdgeTime
     /tmp/ccWqzMz6.s:2003   .bss.fallingEdgeTime:00000000 $d
     /tmp/ccWqzMz6.s:2013   .bss.risingEdgeTime:00000000 risingEdgeTime
     /tmp/ccWqzMz6.s:2010   .bss.risingEdgeTime:00000000 $d
     /tmp/ccWqzMz6.s:2020   .bss.incomingCommand:00000000 $d
     /tmp/ccWqzMz6.s:2023   .bss.command:00000000 $d
     /tmp/ccWqzMz6.s:2033   .bss.rightDistance:00000000 rightDistance
     /tmp/ccWqzMz6.s:2030   .bss.rightDistance:00000000 $d
     /tmp/ccWqzMz6.s:2040   .bss.leftDistance:00000000 leftDistance
     /tmp/ccWqzMz6.s:2037   .bss.leftDistance:00000000 $d
     /tmp/ccWqzMz6.s:2047   .bss.Value2:00000000 Value2
     /tmp/ccWqzMz6.s:2044   .bss.Value2:00000000 $d
     /tmp/ccWqzMz6.s:2054   .bss.Value1:00000000 Value1
     /tmp/ccWqzMz6.s:2051   .bss.Value1:00000000 $d
     /tmp/ccWqzMz6.s:2061   .bss.startTime:00000000 startTime
     /tmp/ccWqzMz6.s:2058   .bss.startTime:00000000 $d
     /tmp/ccWqzMz6.s:2065   .bss.pMillis:00000000 $d
     /tmp/ccWqzMz6.s:2075   .bss.htim15:00000000 htim15
     /tmp/ccWqzMz6.s:2072   .bss.htim15:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
__aeabi_f2d
get_distance
sprintf
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
HAL_GPIO_ReadPin
__aeabi_f2iz
HAL_Delay
get_heading
memcpy
MoveMotors
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccWqzMz6.s 			page 74


HAL_Init
motor_init
