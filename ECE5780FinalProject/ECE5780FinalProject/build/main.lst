ARM GAS  /tmp/cc1xqMYQ.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB58:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****  * in the root directory of this software component.
  14:Src/main.c    ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  ******************************************************************************
  17:Src/main.c    ****  */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include <stdbool.h>
  24:Src/main.c    **** #include "motor.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/cc1xqMYQ.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim15;
  49:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  50:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  51:Src/main.c    **** #define TRIG_PORT GPIOB
  52:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  53:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  54:Src/main.c    **** #define ECHO_PORT GPIOB
  55:Src/main.c    **** volatile uint32_t pMillis;
  56:Src/main.c    **** volatile uint16_t startTime;
  57:Src/main.c    **** volatile uint16_t Value1 = 0;
  58:Src/main.c    **** volatile uint16_t Value2 = 0;
  59:Src/main.c    **** volatile uint16_t leftDistance = 0;
  60:Src/main.c    **** volatile uint16_t rightDistance = 0;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** static void MX_GPIO_Init(void);
  69:Src/main.c    **** static void MX_TIM15_Init(void);
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** #define LED_RED GPIO_PIN_6
  77:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  78:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  79:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  80:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  81:Src/main.c    **** 
  82:Src/main.c    **** void LED_Init(uint32_t pins) {
  83:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  84:Src/main.c    **** 
  85:Src/main.c    **** 	GPIO_InitTypeDef gpio_led_init = {pins,
  86:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
  87:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
  88:Src/main.c    **** 		GPIO_NOPULL
  89:Src/main.c    **** 	};
  90:Src/main.c    **** 	HAL_GPIO_Init(GPIOC, &gpio_led_init);
ARM GAS  /tmp/cc1xqMYQ.s 			page 3


  91:Src/main.c    **** }
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  95:Src/main.c    ****  *        functions appropriately.
  96:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  97:Src/main.c    ****  */
  98:Src/main.c    **** void GPIO_AF_Init() {
  99:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 100:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 101:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 102:Src/main.c    **** 
 103:Src/main.c    **** 	// uart_pins
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 105:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 106:Src/main.c    **** 
 107:Src/main.c    **** 	// motor_left_pins
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 113:Src/main.c    **** 
 114:Src/main.c    **** 	// motor_right_pins
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 119:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 120:Src/main.c    **** 
 121:Src/main.c    **** 	// ultrasonic_left_pins
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 123:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 124:Src/main.c    **** 
 125:Src/main.c    **** 	// ultrasonic_right_pins
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 127:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 128:Src/main.c    **** }
 129:Src/main.c    **** 
 130:Src/main.c    **** /**
 131:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 132:Src/main.c    ****  */
 133:Src/main.c    **** void USART_Init() {
 134:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 135:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	//Set baud rate
 138:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 139:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 140:Src/main.c    **** 												//use with the BT adapter
 141:Src/main.c    **** 
 142:Src/main.c    **** 												//Enable transmitter
 143:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	//Enable receiver
 146:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 147:Src/main.c    **** 
ARM GAS  /tmp/cc1xqMYQ.s 			page 4


 148:Src/main.c    **** 	//Enable the receive register not empty interrupt
 149:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	//Enable USART3
 152:Src/main.c    **** 	USART3->CR1 |= 1;
 153:Src/main.c    **** }
 154:Src/main.c    **** 
 155:Src/main.c    **** /**
 156:Src/main.c    ****  * @brief Sends a single character on the USART.
 157:Src/main.c    ****  *
 158:Src/main.c    ****  * @param c: the character to be sent
 159:Src/main.c    ****  */
 160:Src/main.c    **** void USART_SendChar(uint8_t c) {
 161:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 162:Src/main.c    **** 		;
 163:Src/main.c    **** 
 164:Src/main.c    **** 	USART3->TDR = c;
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** /**
 168:Src/main.c    ****  * @brief Sends a string on the USART.
 169:Src/main.c    ****  *
 170:Src/main.c    ****  * @param p_string: pointer to string to send
 171:Src/main.c    ****  */
 172:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 173:Src/main.c    **** 	while(*p_string != 0) {
 174:Src/main.c    **** 		USART_SendChar(*p_string);
 175:Src/main.c    **** 		p_string++;
 176:Src/main.c    **** 	}
 177:Src/main.c    **** 	USART_SendChar(0);
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** volatile uint8_t command[3];
 181:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 182:Src/main.c    **** 
 183:Src/main.c    **** void ClearCommand(){
 184:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 185:Src/main.c    **** 	memset(command, 0, sizeof(command));
 186:Src/main.c    **** 	incomingCommand = 0;
 187:Src/main.c    **** 	USART_SendString(prompt);
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** void USART3_4_IRQHandler(){
 191:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 192:Src/main.c    **** 	incomingCommand = 1;
 193:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 194:Src/main.c    **** 		;
 195:Src/main.c    **** 	if(command[0]){
 196:Src/main.c    **** 		if(command[1]){
 197:Src/main.c    **** 			USART_SendString(err);
 198:Src/main.c    **** 			ClearCommand();
 199:Src/main.c    **** 		}
 200:Src/main.c    **** 		else{
 201:Src/main.c    **** 			command[1] = USART3->RDR;
 202:Src/main.c    **** 		}
 203:Src/main.c    **** 	}
 204:Src/main.c    **** 	else{
ARM GAS  /tmp/cc1xqMYQ.s 			page 5


 205:Src/main.c    **** 		command[0] = USART3->RDR;
 206:Src/main.c    **** 	}
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** void Log(){
 210:Src/main.c    **** 	uint8_t str_buff[32];
 211:Src/main.c    **** 
 212:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic left: %u\n", GetUltrasonic(&ultrasonic_left_pins));
 213:Src/main.c    **** 	USART_SendString(str_buff);
 214:Src/main.c    **** 	HAL_Delay(500);
 215:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic right: %u\n", GetUltrasonic(&ultrasonic_right_pins));
 216:Src/main.c    **** 	USART_SendString(str_buff);
 217:Src/main.c    **** 
 218:Src/main.c    **** }
 219:Src/main.c    **** 
 220:Src/main.c    **** void Proceed(){
 221:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 222:Src/main.c    **** 	USART_SendString(err);
 223:Src/main.c    **** }
 224:Src/main.c    **** 
 225:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 226:Src/main.c    **** 	uint32_t left_motor_pin;
 227:Src/main.c    **** 	uint32_t right_motor_pin;
 228:Src/main.c    **** 	int32_t CH1_DC = 65535;
 229:Src/main.c    **** 
 230:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 231:Src/main.c    **** 
 232:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 233:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 234:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 235:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 236:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 237:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 238:Src/main.c    **** 
 239:Src/main.c    **** 	MotorCommand motorcmd = {0};
 240:Src/main.c    **** 
 241:Src/main.c    **** 	uint8_t* part1;
 242:Src/main.c    **** 	uint8_t part2[15];
 243:Src/main.c    **** 	uint8_t zero = 0;
 244:Src/main.c    **** 	memcpy(part2, &zero, 15);
 245:Src/main.c    **** 
 246:Src/main.c    **** 	switch(direction){
 247:Src/main.c    **** 		case 'w':
 248:Src/main.c    **** 			part1 = forward;
 249:Src/main.c    **** 			motorcmd.dir = FORWARD;
 250:Src/main.c    **** 			break;
 251:Src/main.c    **** 		case 'a':
 252:Src/main.c    **** 			part1 = left;
 253:Src/main.c    **** 			motorcmd.dir = LEFT;
 254:Src/main.c    **** 			break;
 255:Src/main.c    **** 		case 'd':
 256:Src/main.c    **** 			part1 = right;
 257:Src/main.c    **** 			motorcmd.dir = RIGHT;
 258:Src/main.c    **** 			break;
 259:Src/main.c    **** 		case 'l':
 260:Src/main.c    **** 			part1 = log;
 261:Src/main.c    **** 			USART_SendString(part1);
ARM GAS  /tmp/cc1xqMYQ.s 			page 6


 262:Src/main.c    **** 			Log();
 263:Src/main.c    **** 			ClearCommand();
 264:Src/main.c    **** 			return;
 265:Src/main.c    **** 		case 'p':
 266:Src/main.c    **** 			part1 = proceed;
 267:Src/main.c    **** 			USART_SendString(part1);
 268:Src/main.c    **** 			Proceed();
 269:Src/main.c    **** 			ClearCommand();
 270:Src/main.c    **** 			return;
 271:Src/main.c    **** 		case 'x':
 272:Src/main.c    **** 			part1 = stop;
 273:Src/main.c    **** 			USART_SendString(part1);
 274:Src/main.c    **** 			motorcmd.dir = OFF;
 275:Src/main.c    **** 			ClearCommand();
 276:Src/main.c    **** 			MoveMotors(&motorcmd);
 277:Src/main.c    **** 			return;
 278:Src/main.c    **** 		default:
 279:Src/main.c    **** 			USART_SendString(err);
 280:Src/main.c    **** 			ClearCommand();
 281:Src/main.c    **** 			return;
 282:Src/main.c    **** 	}
 283:Src/main.c    **** 
 284:Src/main.c    **** 	//these are for "vector commands" only:
 285:Src/main.c    **** 
 286:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 287:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 288:Src/main.c    **** 		motorcmd.amount = 0;
 289:Src/main.c    **** 	}
 290:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 291:Src/main.c    **** 		USART_SendString(err);
 292:Src/main.c    **** 		ClearCommand();
 293:Src/main.c    **** 		return;
 294:Src/main.c    **** 	}
 295:Src/main.c    **** 	else{
 296:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 297:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 298:Src/main.c    **** 		motorcmd.amount = dist;
 299:Src/main.c    **** 	}
 300:Src/main.c    **** 
 301:Src/main.c    **** 
 302:Src/main.c    **** 	USART_SendString(part1);
 303:Src/main.c    **** 	USART_SendString(part2);
 304:Src/main.c    **** 
 305:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 306:Src/main.c    **** 	HAL_Delay(1000);
 307:Src/main.c    **** 	TIM2->CCR1 = 0;
 308:Src/main.c    **** 
 309:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 310:Src/main.c    **** 	USART_SendString(result);
 311:Src/main.c    **** 
 312:Src/main.c    **** 	ClearCommand();
 313:Src/main.c    **** 
 314:Src/main.c    **** 
 315:Src/main.c    **** 	// Example code while loop
 316:Src/main.c    **** 	//    while (1)
 317:Src/main.c    **** 	//    {
 318:Src/main.c    **** 	//        while(CH1_DC < 65535)
ARM GAS  /tmp/cc1xqMYQ.s 			page 7


 319:Src/main.c    **** 	//        {
 320:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 321:Src/main.c    **** 	//            CH1_DC += 70;
 322:Src/main.c    **** 	//            HAL_Delay(1);
 323:Src/main.c    **** 	//        }
 324:Src/main.c    **** 	//        while(CH1_DC > 0)
 325:Src/main.c    **** 	//        {
 326:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 327:Src/main.c    **** 	//            CH1_DC -= 70;
 328:Src/main.c    **** 	//            HAL_Delay(1);
 329:Src/main.c    **** 	//        }
 330:Src/main.c    **** 	//    }
 331:Src/main.c    **** }
 332:Src/main.c    **** 
 333:Src/main.c    **** /*
 334:Src/main.c    ****    void ProcessCommandPWM(uint8_t side, uint8_t amt){
 335:Src/main.c    ****    MotorCommand motorcmd = {0};
 336:Src/main.c    ****    motorcmd.dir = FORWARD;
 337:Src/main.c    ****    motorcmd.amount = 9;
 338:Src/main.c    ****    switch(side){
 339:Src/main.c    ****    case 'l':
 340:Src/main.c    ****    pwm_left = amt;
 341:Src/main.c    ****    break;
 342:Src/main.c    ****    case 'r':
 343:Src/main.c    ****    pwm_right = amt;
 344:Src/main.c    ****    break;
 345:Src/main.c    ****    case 'x':
 346:Src/main.c    ****    motorcmd.dir = OFF;
 347:Src/main.c    ****    break;
 348:Src/main.c    ****    default:
 349:Src/main.c    ****    break;
 350:Src/main.c    ****    }
 351:Src/main.c    ****    MoveMotors(&motorcmd);
 352:Src/main.c    ****    ClearCommand();
 353:Src/main.c    ****    }
 354:Src/main.c    ****    */
 355:Src/main.c    **** 
 356:Src/main.c    **** /*
 357:Src/main.c    ****    void Ultrasonic_Init(uint32_t pins)
 358:Src/main.c    ****    {
 359:Src/main.c    ****    __HAL_RCC_GPIOA_CLK_ENABLE();
 360:Src/main.c    **** 
 361:Src/main.c    ****    GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 362:Src/main.c    ****    GPIO_MODE_INPUT,
 363:Src/main.c    ****    GPIO_SPEED_FREQ_LOW,
 364:Src/main.c    ****    GPIO_NOPULL
 365:Src/main.c    ****    };
 366:Src/main.c    ****    HAL_GPIO_Init(GPIOA, &gpio_init);
 367:Src/main.c    ****    }
 368:Src/main.c    ****    */
 369:Src/main.c    **** 
 370:Src/main.c    **** void PrintDistance()
 371:Src/main.c    **** {
 372:Src/main.c    **** 	char dist[32] = "";
 373:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 374:Src/main.c    **** 	USART_SendString(dist);
 375:Src/main.c    **** }
ARM GAS  /tmp/cc1xqMYQ.s 			page 8


 376:Src/main.c    **** 
 377:Src/main.c    **** volatile uint32_t risingEdgeTime;
 378:Src/main.c    **** volatile uint32_t fallingEdgeTime;
 379:Src/main.c    **** volatile uint32_t pulseWidth = 0;
 380:Src/main.c    **** // Define constants
 381:Src/main.c    **** 
 382:Src/main.c    **** // Declare global variables
 383:Src/main.c    **** TIM_HandleTypeDef htim155;
 384:Src/main.c    **** uint32_t pulse_start_time = 0;
 385:Src/main.c    **** uint32_t pulse_end_time = 0;
 386:Src/main.c    **** #define ULTRASONIC_TIMEOUT 60
 387:Src/main.c    **** 
 388:Src/main.c    **** uint32_t GetUltrasonic(ultrasonic_pins_t* ultrasonic){
 389:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 390:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_SET);
 391:Src/main.c    **** 	while (__HAL_TIM_GET_COUNTER (&htim15) < 10){
 392:Src/main.c    **** 		;  // wait for 10 us
 393:Src/main.c    **** 	}
 394:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 395:Src/main.c    **** 
 396:Src/main.c    **** 	pMillis = HAL_GetTick();
 397:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 398:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 10 >  HA
 399:Src/main.c    **** 	}
 400:Src/main.c    **** 	uint32_t val1 = __HAL_TIM_GET_COUNTER (&htim15);
 401:Src/main.c    **** 
 402:Src/main.c    **** 	pMillis = HAL_GetTick();
 403:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 35 > HAL_
 404:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 405:Src/main.c    **** 			return 0;
 406:Src/main.c    **** 	}
 407:Src/main.c    **** 
 408:Src/main.c    **** 	uint32_t val2 = __HAL_TIM_GET_COUNTER (&htim15);
 409:Src/main.c    **** 
 410:Src/main.c    **** 	uint8_t buff[32];
 411:Src/main.c    **** 	sprintf(buff, "val2: %d, val1: %d\n", val2, val1);
 412:Src/main.c    **** 	USART_SendString(buff);
 413:Src/main.c    **** 	return (val2-val1)/58;
 414:Src/main.c    **** }
 415:Src/main.c    **** /* USER CODE END 0 */
 416:Src/main.c    **** 
 417:Src/main.c    **** /**
 418:Src/main.c    ****  * @brief  The application entry point.
 419:Src/main.c    ****  * @retval int
 420:Src/main.c    ****  */
 421:Src/main.c    **** 
 422:Src/main.c    **** //doesn't actually init tim15 but don't worry about it....
 423:Src/main.c    **** /*
 424:Src/main.c    **** void TIM15_Init(){
 425:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 426:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 427:Src/main.c    **** 	TIM_IC_InitTypeDef sConfigIC = {0};
 428:Src/main.c    **** 
 429:Src/main.c    **** 	htim155.Instance = TIM15;
 430:Src/main.c    **** 	htim155.Init.Prescaler = 14;
 431:Src/main.c    **** 	htim155.Init.CounterMode = TIM_COUNTERMODE_UP;
 432:Src/main.c    **** 	htim155.Init.Period = 0xFFFF;
ARM GAS  /tmp/cc1xqMYQ.s 			page 9


 433:Src/main.c    **** 	htim155.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 434:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim155) != HAL_OK)
 435:Src/main.c    **** 	{
 436:Src/main.c    **** 		Error_Handler();
 437:Src/main.c    **** 	}
 438:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 439:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim155, &sClockSourceConfig) != HAL_OK)
 440:Src/main.c    **** 	{
 441:Src/main.c    **** 		Error_Handler();
 442:Src/main.c    **** 	}
 443:Src/main.c    **** 	if (HAL_TIM_IC_Init(&htim155) != HAL_OK)
 444:Src/main.c    **** 	{
 445:Src/main.c    **** 		Error_Handler();
 446:Src/main.c    **** 	}
 447:Src/main.c    **** 	sConfigIC.ICPolarity = TIM_ICPOLARITY_BOTHEDGE;
 448:Src/main.c    **** 	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 449:Src/main.c    **** 	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 450:Src/main.c    **** 	sConfigIC.ICFilter = 0;
 451:Src/main.c    **** 	if (HAL_TIM_IC_ConfigChannel(&htim155, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 452:Src/main.c    **** 	{
 453:Src/main.c    **** 		Error_Handler();
 454:Src/main.c    **** 	}
 455:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 456:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 457:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim155, &sMasterConfig) != HAL_OK)
 458:Src/main.c    **** 	{
 459:Src/main.c    **** 		Error_Handler();
 460:Src/main.c    **** 	}
 461:Src/main.c    **** }
 462:Src/main.c    **** */
 463:Src/main.c    **** 
 464:Src/main.c    **** int main(void)
 465:Src/main.c    **** {
 466:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 467:Src/main.c    **** 	SystemClock_Config();
 468:Src/main.c    **** 
 469:Src/main.c    **** 	//USART Initalizations
 470:Src/main.c    **** 	GPIO_AF_Init();
 471:Src/main.c    **** 	USART_Init();
 472:Src/main.c    **** 
 473:Src/main.c    **** 	motor_init();                           // Initialize motor code
 474:Src/main.c    **** 
 475:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 476:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 477:Src/main.c    **** 
 478:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 479:Src/main.c    **** 
 480:Src/main.c    **** 	//PWM and Ultrasonic Initalizations
 481:Src/main.c    **** 	MX_GPIO_Init();
 482:Src/main.c    **** 	/* TIM15_Init(); */
 483:Src/main.c    **** 	MX_TIM15_Init(); 
 484:Src/main.c    **** 
 485:Src/main.c    **** 	/* HAL_TIM_Base_Start(&htim15); */
 486:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 487:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 488:Src/main.c    **** 
 489:Src/main.c    **** 	while (1) {
ARM GAS  /tmp/cc1xqMYQ.s 			page 10


 490:Src/main.c    **** 		if(incomingCommand)
 491:Src/main.c    **** 		{
 492:Src/main.c    **** 			if(command[0] != 'w' &&
 493:Src/main.c    **** 					command[0] != 'a' &&
 494:Src/main.c    **** 					command[0] != 'd'){
 495:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 496:Src/main.c    **** 			}
 497:Src/main.c    **** 			if(command[1])
 498:Src/main.c    **** 			{
 499:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 500:Src/main.c    **** 			}
 501:Src/main.c    **** 		}
 502:Src/main.c    **** 		/*
 503:Src/main.c    **** 		   if(incomingCommand){
 504:Src/main.c    **** 		   if(command[2]){
 505:Src/main.c    **** 		   uint8_t tens = command[1] - '0';
 506:Src/main.c    **** 		   uint8_t huns = command[2] - '0';
 507:Src/main.c    **** 		   ProcessCommandPWM(command[0], 10*tens + huns);
 508:Src/main.c    **** 		   }
 509:Src/main.c    **** 		   }
 510:Src/main.c    **** 		   */
 511:Src/main.c    **** 		HAL_Delay(500);
 512:Src/main.c    **** 	}
 513:Src/main.c    **** }
 514:Src/main.c    **** 
 515:Src/main.c    **** /**
 516:Src/main.c    ****  * @brief System Clock Configuration
 517:Src/main.c    ****  * @retval None
 518:Src/main.c    ****  */
 519:Src/main.c    **** void SystemClock_Config(void)
 520:Src/main.c    **** {
 521:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 522:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 523:Src/main.c    **** 
 524:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 525:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 526:Src/main.c    **** 	 */
 527:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 528:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 529:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 530:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 531:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 532:Src/main.c    **** 	{
 533:Src/main.c    **** 		Error_Handler();
 534:Src/main.c    **** 	}
 535:Src/main.c    **** 
 536:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 537:Src/main.c    **** 	*/
 538:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 539:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 540:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 541:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 542:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 543:Src/main.c    **** 
 544:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 545:Src/main.c    **** 	{
 546:Src/main.c    **** 		Error_Handler();
ARM GAS  /tmp/cc1xqMYQ.s 			page 11


 547:Src/main.c    **** 	}
 548:Src/main.c    **** }
 549:Src/main.c    **** 
 550:Src/main.c    **** /**
 551:Src/main.c    ****  * @brief TIM15 Initialization Function
 552:Src/main.c    ****  * @param None
 553:Src/main.c    ****  * @retval None
 554:Src/main.c    ****  */
 555:Src/main.c    **** static void MX_TIM15_Init(void)
 556:Src/main.c    **** {
 557:Src/main.c    **** 
 558:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 559:Src/main.c    **** 
 560:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 561:Src/main.c    **** 
 562:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 563:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 564:Src/main.c    **** 
 565:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 566:Src/main.c    **** 
 567:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 568:Src/main.c    ****   htim15.Instance = TIM15;
 569:Src/main.c    ****   htim15.Init.Prescaler = 200;
 570:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 571:Src/main.c    ****   htim15.Init.Period = 65535;
 572:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 573:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 574:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 575:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 576:Src/main.c    ****   {
 577:Src/main.c    ****     Error_Handler();
 578:Src/main.c    ****   }
 579:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 580:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 581:Src/main.c    ****   {
 582:Src/main.c    ****     Error_Handler();
 583:Src/main.c    ****   }
 584:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 585:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 586:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 587:Src/main.c    ****   {
 588:Src/main.c    ****     Error_Handler();
 589:Src/main.c    ****   }
 590:Src/main.c    **** 
 591:Src/main.c    ****   __HAL_RCC_TIM15_CLK_ENABLE();
 592:Src/main.c    **** 
 593:Src/main.c    **** 	HAL_TIM_Base_Start(&htim15);
 594:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 595:Src/main.c    **** 
 596:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 597:Src/main.c    **** 
 598:Src/main.c    **** }
 599:Src/main.c    **** 
 600:Src/main.c    **** /**
 601:Src/main.c    ****  * @brief GPIO Initialization Function
 602:Src/main.c    ****  * @param None
 603:Src/main.c    ****  * @retval None
ARM GAS  /tmp/cc1xqMYQ.s 			page 12


 604:Src/main.c    ****  */
 605:Src/main.c    **** static void MX_GPIO_Init(void)
 606:Src/main.c    **** {
  26              		.loc 1 606 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 607:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 607 2 view .LVU1
  39              		.loc 1 607 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 608:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 609:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 610:Src/main.c    **** 
 611:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 612:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 612 2 is_stmt 1 view .LVU3
  46              	.LBB8:
  47              		.loc 1 612 2 view .LVU4
  48              		.loc 1 612 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 612 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 612 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE8:
  62              		.loc 1 612 2 view .LVU8
 613:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 614:Src/main.c    **** 
 615:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 616:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 616 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cc1xqMYQ.s 			page 13


  70              	.LVL1:
 617:Src/main.c    **** 
 618:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 619:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 619 2 view .LVU10
  72              		.loc 1 619 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 620:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 620 2 is_stmt 1 view .LVU12
  76              		.loc 1 620 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 621:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 621 2 is_stmt 1 view .LVU14
  79              		.loc 1 621 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 622:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 622 2 is_stmt 1 view .LVU16
  83              		.loc 1 622 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 623:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 623 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 624:Src/main.c    **** 
 625:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 626:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 627:Src/main.c    **** }
  90              		.loc 1 627 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE58:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 82 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 82 30 is_stmt 0 view .LVU21
ARM GAS  /tmp/cc1xqMYQ.s 			page 14


 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 85 2 is_stmt 1 view .LVU22
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 85 19 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 131              		.loc 1 85 19 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  90:Src/main.c    **** }
 137              		.loc 1 90 2 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  91:Src/main.c    **** 
 142              		.loc 1 91 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  91:Src/main.c    **** 
 146              		.loc 1 91 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  98:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 98 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1xqMYQ.s 			page 15


 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 99 2 view .LVU29
 177              	.LBB9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 99 2 view .LVU30
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 99 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 99 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 99 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 99 2 view .LVU34
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 100 2 view .LVU35
 195              	.LBB10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 100 2 view .LVU36
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 100 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 100 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 100 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 100 2 view .LVU40
 101:Src/main.c    **** 
 211              		.loc 1 101 2 view .LVU41
ARM GAS  /tmp/cc1xqMYQ.s 			page 16


 212              	.LBB11:
 101:Src/main.c    **** 
 213              		.loc 1 101 2 view .LVU42
 101:Src/main.c    **** 
 214              		.loc 1 101 2 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
 101:Src/main.c    **** 
 220              		.loc 1 101 2 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
 101:Src/main.c    **** 
 224              		.loc 1 101 2 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
 226              	.LBE11:
 101:Src/main.c    **** 
 227              		.loc 1 101 2 view .LVU46
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 104 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
 105:Src/main.c    **** 
 234              		.loc 1 105 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 108 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 109 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 110 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
ARM GAS  /tmp/cc1xqMYQ.s 			page 17


 258              		.loc 1 111 2 view .LVU52
 259 006e 2100     		movs	r1, r4
 260 0070 4C31     		adds	r1, r1, #76
 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 112:Src/main.c    **** 
 264              		.loc 1 112 2 view .LVU53
 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 115 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 116 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 117 2 view .LVU56
 283 0096 2100     		movs	r1, r4
 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 118 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 119:Src/main.c    **** 
 294              		.loc 1 119 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 122 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 123:Src/main.c    **** 
 306              		.loc 1 123 2 view .LVU60
ARM GAS  /tmp/cc1xqMYQ.s 			page 18


 307 00be 2100     		movs	r1, r4
 308 00c0 1C31     		adds	r1, r1, #28
 309 00c2 A069     		ldr	r0, [r4, #24]
 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 126 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 127:Src/main.c    **** }
 318              		.loc 1 127 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL23:
 128:Src/main.c    **** 
 324              		.loc 1 128 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 133:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 133 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc1xqMYQ.s 			page 19


 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 362              		.loc 1 134 2 view .LVU65
 363              	.LBB12:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 134 2 view .LVU66
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 134 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 134 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 134 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE12:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 134 2 view .LVU70
 135:Src/main.c    **** 
 380              		.loc 1 135 2 view .LVU71
 135:Src/main.c    **** 
 381              		.loc 1 135 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 135:Src/main.c    **** 
 383              		.loc 1 135 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 138 2 is_stmt 1 view .LVU74
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 138 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 138 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 139:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 139 2 is_stmt 1 view .LVU77
 139:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 139 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 139:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 139 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 139:Src/main.c    **** 												//use with the BT adapter
ARM GAS  /tmp/cc1xqMYQ.s 			page 20


 403              		.loc 1 139 14 view .LVU80
 404 0034 E060     		str	r0, [r4, #12]
 143:Src/main.c    **** 
 405              		.loc 1 143 2 is_stmt 1 view .LVU81
 143:Src/main.c    **** 
 406              		.loc 1 143 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 143:Src/main.c    **** 
 408              		.loc 1 143 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 146:Src/main.c    **** 
 412              		.loc 1 146 2 is_stmt 1 view .LVU84
 146:Src/main.c    **** 
 413              		.loc 1 146 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 146:Src/main.c    **** 
 415              		.loc 1 146 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 149:Src/main.c    **** 
 419              		.loc 1 149 2 is_stmt 1 view .LVU87
 149:Src/main.c    **** 
 420              		.loc 1 149 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
 149:Src/main.c    **** 
 422              		.loc 1 149 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 152:Src/main.c    **** }
 426              		.loc 1 152 2 is_stmt 1 view .LVU90
 152:Src/main.c    **** }
 427              		.loc 1 152 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 152:Src/main.c    **** }
 429              		.loc 1 152 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 153:Src/main.c    **** 
 433              		.loc 1 153 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
ARM GAS  /tmp/cc1xqMYQ.s 			page 21


 448              		.global	USART_SendChar
 449              		.syntax unified
 450              		.code	16
 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 160:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 160 32 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 161:Src/main.c    **** 		;
 462              		.loc 1 161 8 discriminator 1 view .LVU95
 161:Src/main.c    **** 		;
 463              		.loc 1 161 16 is_stmt 0 discriminator 1 view .LVU96
 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 161:Src/main.c    **** 		;
 466              		.loc 1 161 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 164:Src/main.c    **** }
 469              		.loc 1 164 2 is_stmt 1 view .LVU98
 164:Src/main.c    **** }
 470              		.loc 1 164 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
 165:Src/main.c    **** 
 473              		.loc 1 165 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 172:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 172 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 172:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 172 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc1xqMYQ.s 			page 22


 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 173 2 is_stmt 1 view .LVU103
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 505              		.loc 1 173 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 174:Src/main.c    **** 		p_string++;
 509              		.loc 1 174 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 175:Src/main.c    **** 	}
 512              		.loc 1 175 3 view .LVU106
 175:Src/main.c    **** 	}
 513              		.loc 1 175 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 173 18 is_stmt 1 view .LVU108
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 173 8 is_stmt 0 view .LVU109
 519 000c 2078     		ldrb	r0, [r4]
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 173 18 view .LVU110
 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 177:Src/main.c    **** }
 523              		.loc 1 177 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 178:Src/main.c    **** 
 526              		.loc 1 178 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 178:Src/main.c    **** 
 529              		.loc 1 178 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
ARM GAS  /tmp/cc1xqMYQ.s 			page 23


 546              	.LFB48:
 183:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 547              		.loc 1 183 20 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 184 2 view .LVU115
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 184 10 is_stmt 0 view .LVU116
 560 0004 094B     		ldr	r3, .L22
 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 185:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 185 2 is_stmt 1 view .LVU117
 567 0010 0748     		ldr	r0, .L22+4
 568 0012 0322     		movs	r2, #3
 569 0014 0021     		movs	r1, #0
 570 0016 FFF7FEFF 		bl	memset
 571              	.LVL33:
 186:Src/main.c    **** 	USART_SendString(prompt);
 572              		.loc 1 186 2 view .LVU118
 186:Src/main.c    **** 	USART_SendString(prompt);
 573              		.loc 1 186 18 is_stmt 0 view .LVU119
 574 001a 064B     		ldr	r3, .L22+8
 575 001c 0022     		movs	r2, #0
 576 001e 1A70     		strb	r2, [r3]
 187:Src/main.c    **** }
 577              		.loc 1 187 2 is_stmt 1 view .LVU120
 578 0020 6846     		mov	r0, sp
 579 0022 FFF7FEFF 		bl	USART_SendString
 580              	.LVL34:
 188:Src/main.c    **** 
 581              		.loc 1 188 1 is_stmt 0 view .LVU121
 582 0026 03B0     		add	sp, sp, #12
 583              		@ sp needed
 584 0028 00BD     		pop	{pc}
 585              	.L23:
 586 002a C046     		.align	2
 587              	.L22:
 588 002c 00000000 		.word	.LC21
 589 0030 00000000 		.word	command
 590 0034 00000000 		.word	incomingCommand
 591              		.cfi_endproc
 592              	.LFE48:
 594              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 595              		.align	2
ARM GAS  /tmp/cc1xqMYQ.s 			page 24


 596              	.LC25:
 597 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 597      616E6420 
 597      746F6F20 
 597      6C6F6E67 
 597      210A00
 598              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 599              		.align	1
 600              		.global	USART3_4_IRQHandler
 601              		.syntax unified
 602              		.code	16
 603              		.thumb_func
 605              	USART3_4_IRQHandler:
 606              	.LFB49:
 190:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 607              		.loc 1 190 27 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 24
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 30B5     		push	{r4, r5, lr}
 612              	.LCFI11:
 613              		.cfi_def_cfa_offset 12
 614              		.cfi_offset 4, -12
 615              		.cfi_offset 5, -8
 616              		.cfi_offset 14, -4
 617 0002 87B0     		sub	sp, sp, #28
 618              	.LCFI12:
 619              		.cfi_def_cfa_offset 40
 191:Src/main.c    **** 	incomingCommand = 1;
 620              		.loc 1 191 2 view .LVU123
 191:Src/main.c    **** 	incomingCommand = 1;
 621              		.loc 1 191 10 is_stmt 0 view .LVU124
 622 0004 01AA     		add	r2, sp, #4
 623 0006 164B     		ldr	r3, .L31
 624 0008 1800     		movs	r0, r3
 625 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 626 000c 38C2     		stmia	r2!, {r3, r4, r5}
 627 000e 0368     		ldr	r3, [r0]
 628 0010 1360     		str	r3, [r2]
 629 0012 8388     		ldrh	r3, [r0, #4]
 630 0014 9380     		strh	r3, [r2, #4]
 631 0016 8379     		ldrb	r3, [r0, #6]
 632 0018 9371     		strb	r3, [r2, #6]
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 633              		.loc 1 192 2 is_stmt 1 view .LVU125
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 634              		.loc 1 192 18 is_stmt 0 view .LVU126
 635 001a 124B     		ldr	r3, .L31+4
 636 001c 0122     		movs	r2, #1
 637 001e 1A70     		strb	r2, [r3]
 193:Src/main.c    **** 		;
 638              		.loc 1 193 2 is_stmt 1 view .LVU127
 639              	.L25:
 193:Src/main.c    **** 		;
 640              		.loc 1 193 8 discriminator 1 view .LVU128
 193:Src/main.c    **** 		;
 641              		.loc 1 193 16 is_stmt 0 discriminator 1 view .LVU129
ARM GAS  /tmp/cc1xqMYQ.s 			page 25


 642 0020 114B     		ldr	r3, .L31+8
 643 0022 DB69     		ldr	r3, [r3, #28]
 193:Src/main.c    **** 		;
 644              		.loc 1 193 8 discriminator 1 view .LVU130
 645 0024 9B06     		lsls	r3, r3, #26
 646 0026 FBD5     		bpl	.L25
 195:Src/main.c    **** 		if(command[1]){
 647              		.loc 1 195 2 is_stmt 1 view .LVU131
 195:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 195 12 is_stmt 0 view .LVU132
 649 0028 104B     		ldr	r3, .L31+12
 650 002a 1B78     		ldrb	r3, [r3]
 195:Src/main.c    **** 		if(command[1]){
 651              		.loc 1 195 4 view .LVU133
 652 002c 002B     		cmp	r3, #0
 653 002e 0FD0     		beq	.L26
 196:Src/main.c    **** 			USART_SendString(err);
 654              		.loc 1 196 3 is_stmt 1 view .LVU134
 196:Src/main.c    **** 			USART_SendString(err);
 655              		.loc 1 196 13 is_stmt 0 view .LVU135
 656 0030 0E4B     		ldr	r3, .L31+12
 657 0032 5B78     		ldrb	r3, [r3, #1]
 196:Src/main.c    **** 			USART_SendString(err);
 658              		.loc 1 196 5 view .LVU136
 659 0034 002B     		cmp	r3, #0
 660 0036 05D1     		bne	.L30
 201:Src/main.c    **** 		}
 661              		.loc 1 201 4 is_stmt 1 view .LVU137
 201:Src/main.c    **** 		}
 662              		.loc 1 201 23 is_stmt 0 view .LVU138
 663 0038 0B4B     		ldr	r3, .L31+8
 664 003a 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** 		}
 665              		.loc 1 201 15 view .LVU139
 666 003c DBB2     		uxtb	r3, r3
 667 003e 0B4A     		ldr	r2, .L31+12
 668 0040 5370     		strb	r3, [r2, #1]
 669 0042 0AE0     		b	.L24
 670              	.L30:
 197:Src/main.c    **** 			ClearCommand();
 671              		.loc 1 197 4 is_stmt 1 view .LVU140
 672 0044 01A8     		add	r0, sp, #4
 673 0046 FFF7FEFF 		bl	USART_SendString
 674              	.LVL35:
 198:Src/main.c    **** 		}
 675              		.loc 1 198 4 view .LVU141
 676 004a FFF7FEFF 		bl	ClearCommand
 677              	.LVL36:
 678 004e 04E0     		b	.L24
 679              	.L26:
 205:Src/main.c    **** 	}
 680              		.loc 1 205 3 view .LVU142
 205:Src/main.c    **** 	}
 681              		.loc 1 205 22 is_stmt 0 view .LVU143
 682 0050 054B     		ldr	r3, .L31+8
 683 0052 9B8C     		ldrh	r3, [r3, #36]
 205:Src/main.c    **** 	}
ARM GAS  /tmp/cc1xqMYQ.s 			page 26


 684              		.loc 1 205 14 view .LVU144
 685 0054 DBB2     		uxtb	r3, r3
 686 0056 054A     		ldr	r2, .L31+12
 687 0058 1370     		strb	r3, [r2]
 688              	.L24:
 207:Src/main.c    **** 
 689              		.loc 1 207 1 view .LVU145
 690 005a 07B0     		add	sp, sp, #28
 691              		@ sp needed
 692 005c 30BD     		pop	{r4, r5, pc}
 693              	.L32:
 694 005e C046     		.align	2
 695              	.L31:
 696 0060 00000000 		.word	.LC25
 697 0064 00000000 		.word	incomingCommand
 698 0068 00480040 		.word	1073760256
 699 006c 00000000 		.word	command
 700              		.cfi_endproc
 701              	.LFE49:
 703              		.section	.rodata.Proceed.str1.4,"aMS",%progbits,1
 704              		.align	2
 705              	.LC29:
 706 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 706      79657420 
 706      696D706C 
 706      656D656E 
 706      7465640A 
 707              		.section	.text.Proceed,"ax",%progbits
 708              		.align	1
 709              		.global	Proceed
 710              		.syntax unified
 711              		.code	16
 712              		.thumb_func
 714              	Proceed:
 715              	.LFB51:
 220:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 716              		.loc 1 220 15 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720 0000 10B5     		push	{r4, lr}
 721              	.LCFI13:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 4, -8
 724              		.cfi_offset 14, -4
 221:Src/main.c    **** 	USART_SendString(err);
 725              		.loc 1 221 2 view .LVU147
 726              	.LVL37:
 222:Src/main.c    **** }
 727              		.loc 1 222 2 view .LVU148
 728 0002 0248     		ldr	r0, .L34
 729 0004 FFF7FEFF 		bl	USART_SendString
 730              	.LVL38:
 223:Src/main.c    **** 
 731              		.loc 1 223 1 is_stmt 0 view .LVU149
 732              		@ sp needed
 733 0008 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cc1xqMYQ.s 			page 27


 734              	.L35:
 735 000a C046     		.align	2
 736              	.L34:
 737 000c 00000000 		.word	.LC29
 738              		.cfi_endproc
 739              	.LFE51:
 741              		.global	__aeabi_f2d
 742              		.section	.rodata.PrintDistance.str1.4,"aMS",%progbits,1
 743              		.align	2
 744              	.LC31:
 745 0000 25660A00 		.ascii	"%f\012\000"
 746              		.section	.text.PrintDistance,"ax",%progbits
 747              		.align	1
 748              		.global	PrintDistance
 749              		.syntax unified
 750              		.code	16
 751              		.thumb_func
 753              	PrintDistance:
 754              	.LFB53:
 371:Src/main.c    **** 	char dist[32] = "";
 755              		.loc 1 371 1 is_stmt 1 view -0
 756              		.cfi_startproc
 757              		@ args = 0, pretend = 0, frame = 32
 758              		@ frame_needed = 0, uses_anonymous_args = 0
 759 0000 00B5     		push	{lr}
 760              	.LCFI14:
 761              		.cfi_def_cfa_offset 4
 762              		.cfi_offset 14, -4
 763 0002 89B0     		sub	sp, sp, #36
 764              	.LCFI15:
 765              		.cfi_def_cfa_offset 40
 372:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 766              		.loc 1 372 2 view .LVU151
 372:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 767              		.loc 1 372 7 is_stmt 0 view .LVU152
 768 0004 0023     		movs	r3, #0
 769 0006 0093     		str	r3, [sp]
 770 0008 1C22     		movs	r2, #28
 771 000a 0021     		movs	r1, #0
 772 000c 01A8     		add	r0, sp, #4
 773 000e FFF7FEFF 		bl	memset
 774              	.LVL39:
 373:Src/main.c    **** 	USART_SendString(dist);
 775              		.loc 1 373 2 is_stmt 1 view .LVU153
 373:Src/main.c    **** 	USART_SendString(dist);
 776              		.loc 1 373 24 is_stmt 0 view .LVU154
 777 0012 FFF7FEFF 		bl	get_distance
 778              	.LVL40:
 373:Src/main.c    **** 	USART_SendString(dist);
 779              		.loc 1 373 2 view .LVU155
 780 0016 FFF7FEFF 		bl	__aeabi_f2d
 781              	.LVL41:
 782 001a 0200     		movs	r2, r0
 783 001c 0B00     		movs	r3, r1
 784 001e 0449     		ldr	r1, .L37
 785 0020 6846     		mov	r0, sp
 786 0022 FFF7FEFF 		bl	sprintf
ARM GAS  /tmp/cc1xqMYQ.s 			page 28


 787              	.LVL42:
 374:Src/main.c    **** }
 788              		.loc 1 374 2 is_stmt 1 view .LVU156
 789 0026 6846     		mov	r0, sp
 790 0028 FFF7FEFF 		bl	USART_SendString
 791              	.LVL43:
 375:Src/main.c    **** 
 792              		.loc 1 375 1 is_stmt 0 view .LVU157
 793 002c 09B0     		add	sp, sp, #36
 794              		@ sp needed
 795 002e 00BD     		pop	{pc}
 796              	.L38:
 797              		.align	2
 798              	.L37:
 799 0030 00000000 		.word	.LC31
 800              		.cfi_endproc
 801              	.LFE53:
 803              		.section	.rodata.GetUltrasonic.str1.4,"aMS",%progbits,1
 804              		.align	2
 805              	.LC35:
 806 0000 76616C32 		.ascii	"val2: %d, val1: %d\012\000"
 806      3A202564 
 806      2C207661 
 806      6C313A20 
 806      25640A00 
 807              		.section	.text.GetUltrasonic,"ax",%progbits
 808              		.align	1
 809              		.global	GetUltrasonic
 810              		.syntax unified
 811              		.code	16
 812              		.thumb_func
 814              	GetUltrasonic:
 815              	.LVL44:
 816              	.LFB54:
 388:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 817              		.loc 1 388 54 is_stmt 1 view -0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 32
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 388:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 821              		.loc 1 388 54 is_stmt 0 view .LVU159
 822 0000 70B5     		push	{r4, r5, r6, lr}
 823              	.LCFI16:
 824              		.cfi_def_cfa_offset 16
 825              		.cfi_offset 4, -16
 826              		.cfi_offset 5, -12
 827              		.cfi_offset 6, -8
 828              		.cfi_offset 14, -4
 829 0002 88B0     		sub	sp, sp, #32
 830              	.LCFI17:
 831              		.cfi_def_cfa_offset 48
 832 0004 0400     		movs	r4, r0
 389:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_SET);
 833              		.loc 1 389 2 is_stmt 1 view .LVU160
 834 0006 2B4B     		ldr	r3, .L48
 835 0008 1B68     		ldr	r3, [r3]
 836 000a 0022     		movs	r2, #0
ARM GAS  /tmp/cc1xqMYQ.s 			page 29


 837 000c 5A62     		str	r2, [r3, #36]
 390:Src/main.c    **** 	while (__HAL_TIM_GET_COUNTER (&htim15) < 10){
 838              		.loc 1 390 2 view .LVU161
 839 000e 818B     		ldrh	r1, [r0, #28]
 840 0010 8069     		ldr	r0, [r0, #24]
 841              	.LVL45:
 390:Src/main.c    **** 	while (__HAL_TIM_GET_COUNTER (&htim15) < 10){
 842              		.loc 1 390 2 is_stmt 0 view .LVU162
 843 0012 0132     		adds	r2, r2, #1
 844 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 845              	.LVL46:
 391:Src/main.c    **** 		;  // wait for 10 us
 846              		.loc 1 391 2 is_stmt 1 view .LVU163
 847              	.L40:
 392:Src/main.c    **** 	}
 848              		.loc 1 392 3 discriminator 1 view .LVU164
 391:Src/main.c    **** 		;  // wait for 10 us
 849              		.loc 1 391 41 discriminator 1 view .LVU165
 391:Src/main.c    **** 		;  // wait for 10 us
 850              		.loc 1 391 9 is_stmt 0 discriminator 1 view .LVU166
 851 0018 264B     		ldr	r3, .L48
 852 001a 1B68     		ldr	r3, [r3]
 853 001c 5B6A     		ldr	r3, [r3, #36]
 391:Src/main.c    **** 		;  // wait for 10 us
 854              		.loc 1 391 41 discriminator 1 view .LVU167
 855 001e 092B     		cmp	r3, #9
 856 0020 FAD9     		bls	.L40
 394:Src/main.c    **** 
 857              		.loc 1 394 2 is_stmt 1 view .LVU168
 858 0022 A18B     		ldrh	r1, [r4, #28]
 859 0024 A069     		ldr	r0, [r4, #24]
 860 0026 0022     		movs	r2, #0
 861 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 862              	.LVL47:
 396:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 863              		.loc 1 396 2 view .LVU169
 396:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 864              		.loc 1 396 12 is_stmt 0 view .LVU170
 865 002c FFF7FEFF 		bl	HAL_GetTick
 866              	.LVL48:
 396:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 867              		.loc 1 396 10 view .LVU171
 868 0030 214B     		ldr	r3, .L48+4
 869 0032 1860     		str	r0, [r3]
 397:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 10 >  HA
 870              		.loc 1 397 2 is_stmt 1 view .LVU172
 871 0034 1F4B     		ldr	r3, .L48
 872 0036 1B68     		ldr	r3, [r3]
 873 0038 0022     		movs	r2, #0
 874 003a 5A62     		str	r2, [r3, #36]
 398:Src/main.c    **** 	}
 875              		.loc 1 398 2 view .LVU173
 876              	.L42:
 399:Src/main.c    **** 	uint32_t val1 = __HAL_TIM_GET_COUNTER (&htim15);
 877              		.loc 1 399 2 discriminator 2 view .LVU174
 398:Src/main.c    **** 	}
 878              		.loc 1 398 79 discriminator 2 view .LVU175
ARM GAS  /tmp/cc1xqMYQ.s 			page 30


 398:Src/main.c    **** 	}
 879              		.loc 1 398 11 is_stmt 0 discriminator 2 view .LVU176
 880 003c A188     		ldrh	r1, [r4, #4]
 881 003e 2068     		ldr	r0, [r4]
 882 0040 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 883              	.LVL49:
 398:Src/main.c    **** 	}
 884              		.loc 1 398 79 discriminator 2 view .LVU177
 885 0044 0028     		cmp	r0, #0
 886 0046 06D1     		bne	.L41
 398:Src/main.c    **** 	}
 887              		.loc 1 398 90 discriminator 1 view .LVU178
 888 0048 1B4B     		ldr	r3, .L48+4
 889 004a 1D68     		ldr	r5, [r3]
 890 004c 0A35     		adds	r5, r5, #10
 398:Src/main.c    **** 	}
 891              		.loc 1 398 98 discriminator 1 view .LVU179
 892 004e FFF7FEFF 		bl	HAL_GetTick
 893              	.LVL50:
 398:Src/main.c    **** 	}
 894              		.loc 1 398 79 discriminator 1 view .LVU180
 895 0052 8542     		cmp	r5, r0
 896 0054 F2D8     		bhi	.L42
 897              	.L41:
 400:Src/main.c    **** 
 898              		.loc 1 400 2 is_stmt 1 view .LVU181
 400:Src/main.c    **** 
 899              		.loc 1 400 18 is_stmt 0 view .LVU182
 900 0056 174B     		ldr	r3, .L48
 901 0058 1B68     		ldr	r3, [r3]
 400:Src/main.c    **** 
 902              		.loc 1 400 11 view .LVU183
 903 005a 5E6A     		ldr	r6, [r3, #36]
 904              	.LVL51:
 402:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 35 > HAL_
 905              		.loc 1 402 2 is_stmt 1 view .LVU184
 402:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 35 > HAL_
 906              		.loc 1 402 12 is_stmt 0 view .LVU185
 907 005c FFF7FEFF 		bl	HAL_GetTick
 908              	.LVL52:
 402:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 35 > HAL_
 909              		.loc 1 402 10 view .LVU186
 910 0060 154B     		ldr	r3, .L48+4
 911 0062 1860     		str	r0, [r3]
 403:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 912              		.loc 1 403 2 is_stmt 1 view .LVU187
 913              	.L43:
 403:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 914              		.loc 1 403 78 view .LVU188
 403:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 915              		.loc 1 403 10 is_stmt 0 view .LVU189
 916 0064 A188     		ldrh	r1, [r4, #4]
 917 0066 2068     		ldr	r0, [r4]
 918 0068 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 919              	.LVL53:
 403:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 920              		.loc 1 403 78 view .LVU190
ARM GAS  /tmp/cc1xqMYQ.s 			page 31


 921 006c 0028     		cmp	r0, #0
 922 006e 0FD0     		beq	.L45
 403:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 923              		.loc 1 403 89 discriminator 1 view .LVU191
 924 0070 114B     		ldr	r3, .L48+4
 925 0072 1D68     		ldr	r5, [r3]
 926 0074 2335     		adds	r5, r5, #35
 403:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 927              		.loc 1 403 96 discriminator 1 view .LVU192
 928 0076 FFF7FEFF 		bl	HAL_GetTick
 929              	.LVL54:
 403:Src/main.c    **** 		if(HAL_GetTick()-pMillis > ULTRASONIC_TIMEOUT)
 930              		.loc 1 403 78 discriminator 1 view .LVU193
 931 007a 8542     		cmp	r5, r0
 932 007c 08D9     		bls	.L45
 404:Src/main.c    **** 			return 0;
 933              		.loc 1 404 3 is_stmt 1 view .LVU194
 404:Src/main.c    **** 			return 0;
 934              		.loc 1 404 6 is_stmt 0 view .LVU195
 935 007e FFF7FEFF 		bl	HAL_GetTick
 936              	.LVL55:
 404:Src/main.c    **** 			return 0;
 937              		.loc 1 404 19 view .LVU196
 938 0082 0D4B     		ldr	r3, .L48+4
 939 0084 1B68     		ldr	r3, [r3]
 940 0086 C01A     		subs	r0, r0, r3
 404:Src/main.c    **** 			return 0;
 941              		.loc 1 404 5 view .LVU197
 942 0088 3C28     		cmp	r0, #60
 943 008a EBD9     		bls	.L43
 405:Src/main.c    **** 	}
 944              		.loc 1 405 11 view .LVU198
 945 008c 0020     		movs	r0, #0
 946 008e 0FE0     		b	.L39
 947              	.L45:
 408:Src/main.c    **** 
 948              		.loc 1 408 2 is_stmt 1 view .LVU199
 408:Src/main.c    **** 
 949              		.loc 1 408 18 is_stmt 0 view .LVU200
 950 0090 084B     		ldr	r3, .L48
 951 0092 1B68     		ldr	r3, [r3]
 408:Src/main.c    **** 
 952              		.loc 1 408 11 view .LVU201
 953 0094 5C6A     		ldr	r4, [r3, #36]
 954              	.LVL56:
 410:Src/main.c    **** 	sprintf(buff, "val2: %d, val1: %d\n", val2, val1);
 955              		.loc 1 410 2 is_stmt 1 view .LVU202
 411:Src/main.c    **** 	USART_SendString(buff);
 956              		.loc 1 411 2 view .LVU203
 957 0096 0949     		ldr	r1, .L48+8
 958 0098 3300     		movs	r3, r6
 959 009a 2200     		movs	r2, r4
 960 009c 6846     		mov	r0, sp
 961 009e FFF7FEFF 		bl	sprintf
 962              	.LVL57:
 412:Src/main.c    **** 	return (val2-val1)/58;
 963              		.loc 1 412 2 view .LVU204
ARM GAS  /tmp/cc1xqMYQ.s 			page 32


 964 00a2 6846     		mov	r0, sp
 965 00a4 FFF7FEFF 		bl	USART_SendString
 966              	.LVL58:
 413:Src/main.c    **** }
 967              		.loc 1 413 2 view .LVU205
 413:Src/main.c    **** }
 968              		.loc 1 413 14 is_stmt 0 view .LVU206
 969 00a8 A01B     		subs	r0, r4, r6
 413:Src/main.c    **** }
 970              		.loc 1 413 20 view .LVU207
 971 00aa 3A21     		movs	r1, #58
 972 00ac FFF7FEFF 		bl	__aeabi_uidiv
 973              	.LVL59:
 974              	.L39:
 414:Src/main.c    **** /* USER CODE END 0 */
 975              		.loc 1 414 1 view .LVU208
 976 00b0 08B0     		add	sp, sp, #32
 977              		@ sp needed
 978              	.LVL60:
 414:Src/main.c    **** /* USER CODE END 0 */
 979              		.loc 1 414 1 view .LVU209
 980 00b2 70BD     		pop	{r4, r5, r6, pc}
 981              	.L49:
 982              		.align	2
 983              	.L48:
 984 00b4 00000000 		.word	htim15
 985 00b8 00000000 		.word	pMillis
 986 00bc 00000000 		.word	.LC35
 987              		.cfi_endproc
 988              	.LFE54:
 990              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 991              		.align	2
 992              	.LC38:
 993 0000 556C7472 		.ascii	"Ultrasonic left: %u\012\000"
 993      61736F6E 
 993      6963206C 
 993      6566743A 
 993      2025750A 
 994 0015 000000   		.align	2
 995              	.LC41:
 996 0018 556C7472 		.ascii	"Ultrasonic right: %u\012\000"
 996      61736F6E 
 996      69632072 
 996      69676874 
 996      3A202575 
 997              		.section	.text.Log,"ax",%progbits
 998              		.align	1
 999              		.global	Log
 1000              		.syntax unified
 1001              		.code	16
 1002              		.thumb_func
 1004              	Log:
 1005              	.LFB50:
 209:Src/main.c    **** 	uint8_t str_buff[32];
 1006              		.loc 1 209 11 is_stmt 1 view -0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/cc1xqMYQ.s 			page 33


 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010 0000 00B5     		push	{lr}
 1011              	.LCFI18:
 1012              		.cfi_def_cfa_offset 4
 1013              		.cfi_offset 14, -4
 1014 0002 89B0     		sub	sp, sp, #36
 1015              	.LCFI19:
 1016              		.cfi_def_cfa_offset 40
 210:Src/main.c    **** 
 1017              		.loc 1 210 2 view .LVU211
 212:Src/main.c    **** 	USART_SendString(str_buff);
 1018              		.loc 1 212 2 view .LVU212
 1019 0004 0D48     		ldr	r0, .L51
 1020 0006 FFF7FEFF 		bl	GetUltrasonic
 1021              	.LVL61:
 1022 000a 0200     		movs	r2, r0
 1023 000c 0C49     		ldr	r1, .L51+4
 1024 000e 6846     		mov	r0, sp
 1025 0010 FFF7FEFF 		bl	sprintf
 1026              	.LVL62:
 213:Src/main.c    **** 	HAL_Delay(500);
 1027              		.loc 1 213 2 view .LVU213
 1028 0014 6846     		mov	r0, sp
 1029 0016 FFF7FEFF 		bl	USART_SendString
 1030              	.LVL63:
 214:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic right: %u\n", GetUltrasonic(&ultrasonic_right_pins));
 1031              		.loc 1 214 2 view .LVU214
 1032 001a FA20     		movs	r0, #250
 1033 001c 4000     		lsls	r0, r0, #1
 1034 001e FFF7FEFF 		bl	HAL_Delay
 1035              	.LVL64:
 215:Src/main.c    **** 	USART_SendString(str_buff);
 1036              		.loc 1 215 2 view .LVU215
 1037 0022 0848     		ldr	r0, .L51+8
 1038 0024 FFF7FEFF 		bl	GetUltrasonic
 1039              	.LVL65:
 1040 0028 0200     		movs	r2, r0
 1041 002a 0749     		ldr	r1, .L51+12
 1042 002c 6846     		mov	r0, sp
 1043 002e FFF7FEFF 		bl	sprintf
 1044              	.LVL66:
 216:Src/main.c    **** 
 1045              		.loc 1 216 2 view .LVU216
 1046 0032 6846     		mov	r0, sp
 1047 0034 FFF7FEFF 		bl	USART_SendString
 1048              	.LVL67:
 218:Src/main.c    **** 
 1049              		.loc 1 218 1 is_stmt 0 view .LVU217
 1050 0038 09B0     		add	sp, sp, #36
 1051              		@ sp needed
 1052 003a 00BD     		pop	{pc}
 1053              	.L52:
 1054              		.align	2
 1055              	.L51:
 1056 003c 00000000 		.word	ultrasonic_left_pins
 1057 0040 00000000 		.word	.LC38
 1058 0044 00000000 		.word	ultrasonic_right_pins
ARM GAS  /tmp/cc1xqMYQ.s 			page 34


 1059 0048 18000000 		.word	.LC41
 1060              		.cfi_endproc
 1061              	.LFE50:
 1063              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 1064              		.align	2
 1065              	.LC58:
 1066 0000 696E6465 		.ascii	"indefinitely\012\000"
 1066      66696E69 
 1066      74656C79 
 1066      0A00
 1067 000e 0000     		.align	2
 1068              	.LC60:
 1069 0010 25640A00 		.ascii	"%d\012\000"
 1070              		.align	2
 1071              	.LC43:
 1072 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 1072      523A2049 
 1072      6E76616C 
 1072      69642063 
 1072      6F6D6D61 
 1073 002d 000000   		.align	2
 1074              	.LC45:
 1075 0030 4D6F7669 		.ascii	"Moving forward \000"
 1075      6E672066 
 1075      6F727761 
 1075      72642000 
 1076              		.align	2
 1077              	.LC47:
 1078 0040 5475726E 		.ascii	"Turning left \000"
 1078      696E6720 
 1078      6C656674 
 1078      2000
 1079 004e 0000     		.align	2
 1080              	.LC49:
 1081 0050 5475726E 		.ascii	"Turning right \000"
 1081      696E6720 
 1081      72696768 
 1081      742000
 1082 005f 00       		.align	2
 1083              	.LC51:
 1084 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 1084      696E6720 
 1084      73656E73 
 1084      6F722064 
 1084      6174610A 
 1085 0075 000000   		.align	2
 1086              	.LC53:
 1087 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 1087      72696E67 
 1087      20617574 
 1087      6F6E6F6D 
 1087      6F757320 
 1088 0095 000000   		.align	2
 1089              	.LC55:
 1090 0098 53746F70 		.ascii	"Stopping all motors!\012\000"
 1090      70696E67 
 1090      20616C6C 
ARM GAS  /tmp/cc1xqMYQ.s 			page 35


 1090      206D6F74 
 1090      6F727321 
 1091              		.section	.text.ProcessCommand,"ax",%progbits
 1092              		.align	1
 1093              		.global	ProcessCommand
 1094              		.syntax unified
 1095              		.code	16
 1096              		.thumb_func
 1098              	ProcessCommand:
 1099              	.LVL68:
 1100              	.LFB52:
 225:Src/main.c    **** 	uint32_t left_motor_pin;
 1101              		.loc 1 225 57 is_stmt 1 view -0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 184
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 225:Src/main.c    **** 	uint32_t left_motor_pin;
 1105              		.loc 1 225 57 is_stmt 0 view .LVU219
 1106 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1107              	.LCFI20:
 1108              		.cfi_def_cfa_offset 20
 1109              		.cfi_offset 4, -20
 1110              		.cfi_offset 5, -16
 1111              		.cfi_offset 6, -12
 1112              		.cfi_offset 7, -8
 1113              		.cfi_offset 14, -4
 1114 0002 AFB0     		sub	sp, sp, #188
 1115              	.LCFI21:
 1116              		.cfi_def_cfa_offset 208
 1117 0004 0400     		movs	r4, r0
 1118 0006 0D00     		movs	r5, r1
 226:Src/main.c    **** 	uint32_t right_motor_pin;
 1119              		.loc 1 226 2 is_stmt 1 view .LVU220
 227:Src/main.c    **** 	int32_t CH1_DC = 65535;
 1120              		.loc 1 227 2 view .LVU221
 228:Src/main.c    **** 
 1121              		.loc 1 228 2 view .LVU222
 1122              	.LVL69:
 230:Src/main.c    **** 
 1123              		.loc 1 230 2 view .LVU223
 230:Src/main.c    **** 
 1124              		.loc 1 230 10 is_stmt 0 view .LVU224
 1125 0008 27A9     		add	r1, sp, #156
 1126              	.LVL70:
 230:Src/main.c    **** 
 1127              		.loc 1 230 10 view .LVU225
 1128 000a 5C4B     		ldr	r3, .L70
 1129 000c 0A00     		movs	r2, r1
 1130 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 1131 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 1132              	.LVL71:
 230:Src/main.c    **** 
 1133              		.loc 1 230 10 view .LVU226
 1134 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 1135 0014 43C2     		stmia	r2!, {r0, r1, r6}
 1136 0016 1B78     		ldrb	r3, [r3]
 1137 0018 1370     		strb	r3, [r2]
ARM GAS  /tmp/cc1xqMYQ.s 			page 36


 232:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1138              		.loc 1 232 2 is_stmt 1 view .LVU227
 232:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1139              		.loc 1 232 10 is_stmt 0 view .LVU228
 1140 001a 23AA     		add	r2, sp, #140
 1141 001c 584B     		ldr	r3, .L70+4
 1142 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 1143 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 1144 0022 1B68     		ldr	r3, [r3]
 1145 0024 1360     		str	r3, [r2]
 233:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1146              		.loc 1 233 2 is_stmt 1 view .LVU229
 233:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1147              		.loc 1 233 10 is_stmt 0 view .LVU230
 1148 0026 1FAA     		add	r2, sp, #124
 1149 0028 564B     		ldr	r3, .L70+8
 1150 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 1151 002c C1C2     		stmia	r2!, {r0, r6, r7}
 1152 002e 1B88     		ldrh	r3, [r3]
 1153 0030 1380     		strh	r3, [r2]
 234:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1154              		.loc 1 234 2 is_stmt 1 view .LVU231
 234:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1155              		.loc 1 234 10 is_stmt 0 view .LVU232
 1156 0032 1BAA     		add	r2, sp, #108
 1157 0034 544B     		ldr	r3, .L70+12
 1158 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 1159 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 1160 003a 1100     		movs	r1, r2
 1161 003c 1A88     		ldrh	r2, [r3]
 1162 003e 0A80     		strh	r2, [r1]
 1163 0040 9B78     		ldrb	r3, [r3, #2]
 1164 0042 8B70     		strb	r3, [r1, #2]
 235:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1165              		.loc 1 235 2 is_stmt 1 view .LVU233
 235:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1166              		.loc 1 235 10 is_stmt 0 view .LVU234
 1167 0044 15A9     		add	r1, sp, #84
 1168 0046 514B     		ldr	r3, .L70+16
 1169 0048 0A00     		movs	r2, r1
 1170 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 1171 004c C1C2     		stmia	r2!, {r0, r6, r7}
 1172 004e 03CB     		ldmia	r3!, {r0, r1}
 1173 0050 03C2     		stmia	r2!, {r0, r1}
 1174 0052 1B78     		ldrb	r3, [r3]
 1175 0054 1370     		strb	r3, [r2]
 236:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1176              		.loc 1 236 2 is_stmt 1 view .LVU235
 236:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1177              		.loc 1 236 10 is_stmt 0 view .LVU236
 1178 0056 0DA9     		add	r1, sp, #52
 1179 0058 4D4B     		ldr	r3, .L70+20
 1180 005a 0A00     		movs	r2, r1
 1181 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 1182 005e C1C2     		stmia	r2!, {r0, r6, r7}
 1183 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 1184 0062 43C2     		stmia	r2!, {r0, r1, r6}
ARM GAS  /tmp/cc1xqMYQ.s 			page 37


 1185 0064 1968     		ldr	r1, [r3]
 1186 0066 1160     		str	r1, [r2]
 1187 0068 1B79     		ldrb	r3, [r3, #4]
 1188 006a 1371     		strb	r3, [r2, #4]
 237:Src/main.c    **** 
 1189              		.loc 1 237 2 is_stmt 1 view .LVU237
 237:Src/main.c    **** 
 1190              		.loc 1 237 10 is_stmt 0 view .LVU238
 1191 006c 07A9     		add	r1, sp, #28
 1192 006e 494B     		ldr	r3, .L70+24
 1193 0070 0A00     		movs	r2, r1
 1194 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 1195 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 1196 0076 03CB     		ldmia	r3!, {r0, r1}
 1197 0078 03C2     		stmia	r2!, {r0, r1}
 1198 007a 1B88     		ldrh	r3, [r3]
 1199 007c 1380     		strh	r3, [r2]
 239:Src/main.c    **** 
 1200              		.loc 1 239 2 is_stmt 1 view .LVU239
 239:Src/main.c    **** 
 1201              		.loc 1 239 15 is_stmt 0 view .LVU240
 1202 007e 06AB     		add	r3, sp, #24
 1203 0080 0022     		movs	r2, #0
 1204 0082 1A80     		strh	r2, [r3]
 241:Src/main.c    **** 	uint8_t part2[15];
 1205              		.loc 1 241 2 is_stmt 1 view .LVU241
 242:Src/main.c    **** 	uint8_t zero = 0;
 1206              		.loc 1 242 2 view .LVU242
 243:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1207              		.loc 1 243 2 view .LVU243
 243:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1208              		.loc 1 243 10 is_stmt 0 view .LVU244
 1209 0084 6B46     		mov	r3, sp
 1210 0086 D91D     		adds	r1, r3, #7
 1211 0088 0023     		movs	r3, #0
 1212 008a 0B70     		strb	r3, [r1]
 244:Src/main.c    **** 
 1213              		.loc 1 244 2 is_stmt 1 view .LVU245
 1214 008c 0F32     		adds	r2, r2, #15
 1215 008e 02A8     		add	r0, sp, #8
 1216 0090 FFF7FEFF 		bl	memcpy
 1217              	.LVL72:
 246:Src/main.c    **** 		case 'w':
 1218              		.loc 1 246 2 view .LVU246
 1219 0094 2300     		movs	r3, r4
 1220 0096 613B     		subs	r3, r3, #97
 1221 0098 DAB2     		uxtb	r2, r3
 1222 009a 172A     		cmp	r2, #23
 1223 009c 53D8     		bhi	.L54
 1224 009e 9300     		lsls	r3, r2, #2
 1225 00a0 3D4A     		ldr	r2, .L70+28
 1226 00a2 D358     		ldr	r3, [r2, r3]
 1227 00a4 9F46     		mov	pc, r3
 1228              		.section	.rodata.ProcessCommand,"a",%progbits
 1229              		.align	2
 1230              	.L56:
 1231 0000 A6000000 		.word	.L61
ARM GAS  /tmp/cc1xqMYQ.s 			page 38


 1232 0004 46010000 		.word	.L54
 1233 0008 46010000 		.word	.L54
 1234 000c 04010000 		.word	.L60
 1235 0010 46010000 		.word	.L54
 1236 0014 46010000 		.word	.L54
 1237 0018 46010000 		.word	.L54
 1238 001c 46010000 		.word	.L54
 1239 0020 46010000 		.word	.L54
 1240 0024 46010000 		.word	.L54
 1241 0028 46010000 		.word	.L54
 1242 002c 0E010000 		.word	.L59
 1243 0030 46010000 		.word	.L54
 1244 0034 46010000 		.word	.L54
 1245 0038 46010000 		.word	.L54
 1246 003c 1E010000 		.word	.L58
 1247 0040 46010000 		.word	.L54
 1248 0044 46010000 		.word	.L54
 1249 0048 46010000 		.word	.L54
 1250 004c 46010000 		.word	.L54
 1251 0050 46010000 		.word	.L54
 1252 0054 46010000 		.word	.L54
 1253 0058 52010000 		.word	.L67
 1254 005c 2E010000 		.word	.L55
 1255              		.section	.text.ProcessCommand
 1256              	.L61:
 252:Src/main.c    **** 			motorcmd.dir = LEFT;
 1257              		.loc 1 252 4 view .LVU247
 1258              	.LVL73:
 253:Src/main.c    **** 			break;
 1259              		.loc 1 253 4 view .LVU248
 253:Src/main.c    **** 			break;
 1260              		.loc 1 253 17 is_stmt 0 view .LVU249
 1261 00a6 06AB     		add	r3, sp, #24
 1262 00a8 0122     		movs	r2, #1
 1263 00aa 1A70     		strb	r2, [r3]
 254:Src/main.c    **** 		case 'd':
 1264              		.loc 1 254 4 is_stmt 1 view .LVU250
 252:Src/main.c    **** 			motorcmd.dir = LEFT;
 1265              		.loc 1 252 10 is_stmt 0 view .LVU251
 1266 00ac 1FAE     		add	r6, sp, #124
 1267              	.LVL74:
 1268              	.L57:
 286:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1269              		.loc 1 286 2 is_stmt 1 view .LVU252
 286:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1270              		.loc 1 286 4 is_stmt 0 view .LVU253
 1271 00ae 302D     		cmp	r5, #48
 1272 00b0 51D0     		beq	.L68
 1273              	.L63:
 290:Src/main.c    **** 		USART_SendString(err);
 1274              		.loc 1 290 7 is_stmt 1 view .LVU254
 290:Src/main.c    **** 		USART_SendString(err);
 1275              		.loc 1 290 25 is_stmt 0 view .LVU255
 1276 00b2 2B00     		movs	r3, r5
 1277 00b4 313B     		subs	r3, r3, #49
 1278 00b6 DBB2     		uxtb	r3, r3
 290:Src/main.c    **** 		USART_SendString(err);
ARM GAS  /tmp/cc1xqMYQ.s 			page 39


 1279              		.loc 1 290 9 view .LVU256
 1280 00b8 082B     		cmp	r3, #8
 1281 00ba 58D8     		bhi	.L69
 1282              	.LBB13:
 296:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1283              		.loc 1 296 3 is_stmt 1 view .LVU257
 296:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1284              		.loc 1 296 11 is_stmt 0 view .LVU258
 1285 00bc 1424     		movs	r4, #20
 1286 00be 6C43     		muls	r4, r5
 1287 00c0 4034     		adds	r4, r4, #64
 1288 00c2 E4B2     		uxtb	r4, r4
 1289              	.LVL75:
 297:Src/main.c    **** 		motorcmd.amount = dist;
 1290              		.loc 1 297 3 is_stmt 1 view .LVU259
 1291 00c4 3549     		ldr	r1, .L70+32
 1292 00c6 2200     		movs	r2, r4
 1293 00c8 02A8     		add	r0, sp, #8
 1294 00ca FFF7FEFF 		bl	sprintf
 1295              	.LVL76:
 298:Src/main.c    **** 	}
 1296              		.loc 1 298 3 view .LVU260
 298:Src/main.c    **** 	}
 1297              		.loc 1 298 19 is_stmt 0 view .LVU261
 1298 00ce 06AB     		add	r3, sp, #24
 1299 00d0 5C70     		strb	r4, [r3, #1]
 1300              	.LVL77:
 1301              	.L64:
 298:Src/main.c    **** 	}
 1302              		.loc 1 298 19 view .LVU262
 1303              	.LBE13:
 302:Src/main.c    **** 	USART_SendString(part2);
 1304              		.loc 1 302 2 is_stmt 1 view .LVU263
 1305 00d2 3000     		movs	r0, r6
 1306 00d4 FFF7FEFF 		bl	USART_SendString
 1307              	.LVL78:
 303:Src/main.c    **** 
 1308              		.loc 1 303 2 view .LVU264
 1309 00d8 02A8     		add	r0, sp, #8
 1310 00da FFF7FEFF 		bl	USART_SendString
 1311              	.LVL79:
 305:Src/main.c    **** 	HAL_Delay(1000);
 1312              		.loc 1 305 2 view .LVU265
 305:Src/main.c    **** 	HAL_Delay(1000);
 1313              		.loc 1 305 13 is_stmt 0 view .LVU266
 1314 00de 8024     		movs	r4, #128
 1315 00e0 E405     		lsls	r4, r4, #23
 1316 00e2 2F4B     		ldr	r3, .L70+36
 1317 00e4 6363     		str	r3, [r4, #52]
 306:Src/main.c    **** 	TIM2->CCR1 = 0;
 1318              		.loc 1 306 2 is_stmt 1 view .LVU267
 1319 00e6 FA20     		movs	r0, #250
 1320 00e8 8000     		lsls	r0, r0, #2
 1321 00ea FFF7FEFF 		bl	HAL_Delay
 1322              	.LVL80:
 307:Src/main.c    **** 
 1323              		.loc 1 307 2 view .LVU268
ARM GAS  /tmp/cc1xqMYQ.s 			page 40


 307:Src/main.c    **** 
 1324              		.loc 1 307 13 is_stmt 0 view .LVU269
 1325 00ee 0023     		movs	r3, #0
 1326 00f0 6363     		str	r3, [r4, #52]
 309:Src/main.c    **** 	USART_SendString(result);
 1327              		.loc 1 309 2 is_stmt 1 view .LVU270
 309:Src/main.c    **** 	USART_SendString(result);
 1328              		.loc 1 309 20 is_stmt 0 view .LVU271
 1329 00f2 06A8     		add	r0, sp, #24
 1330 00f4 FFF7FEFF 		bl	MoveMotors
 1331              	.LVL81:
 310:Src/main.c    **** 
 1332              		.loc 1 310 2 is_stmt 1 view .LVU272
 1333 00f8 FFF7FEFF 		bl	USART_SendString
 1334              	.LVL82:
 312:Src/main.c    **** 
 1335              		.loc 1 312 2 view .LVU273
 1336 00fc FFF7FEFF 		bl	ClearCommand
 1337              	.LVL83:
 1338              	.L53:
 331:Src/main.c    **** 
 1339              		.loc 1 331 1 is_stmt 0 view .LVU274
 1340 0100 2FB0     		add	sp, sp, #188
 1341              		@ sp needed
 1342 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 1343              	.L60:
 256:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1344              		.loc 1 256 4 is_stmt 1 view .LVU275
 1345              	.LVL84:
 257:Src/main.c    **** 			break;
 1346              		.loc 1 257 4 view .LVU276
 257:Src/main.c    **** 			break;
 1347              		.loc 1 257 17 is_stmt 0 view .LVU277
 1348 0104 06AB     		add	r3, sp, #24
 1349 0106 0222     		movs	r2, #2
 1350 0108 1A70     		strb	r2, [r3]
 258:Src/main.c    **** 		case 'l':
 1351              		.loc 1 258 4 is_stmt 1 view .LVU278
 256:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1352              		.loc 1 256 10 is_stmt 0 view .LVU279
 1353 010a 1BAE     		add	r6, sp, #108
 1354              	.LVL85:
 258:Src/main.c    **** 		case 'l':
 1355              		.loc 1 258 4 view .LVU280
 1356 010c CFE7     		b	.L57
 1357              	.LVL86:
 1358              	.L59:
 260:Src/main.c    **** 			USART_SendString(part1);
 1359              		.loc 1 260 4 is_stmt 1 view .LVU281
 261:Src/main.c    **** 			Log();
 1360              		.loc 1 261 4 view .LVU282
 1361 010e 15A8     		add	r0, sp, #84
 1362              	.LVL87:
 261:Src/main.c    **** 			Log();
 1363              		.loc 1 261 4 is_stmt 0 view .LVU283
 1364 0110 FFF7FEFF 		bl	USART_SendString
 1365              	.LVL88:
ARM GAS  /tmp/cc1xqMYQ.s 			page 41


 262:Src/main.c    **** 			ClearCommand();
 1366              		.loc 1 262 4 is_stmt 1 view .LVU284
 1367 0114 FFF7FEFF 		bl	Log
 1368              	.LVL89:
 263:Src/main.c    **** 			return;
 1369              		.loc 1 263 4 view .LVU285
 1370 0118 FFF7FEFF 		bl	ClearCommand
 1371              	.LVL90:
 264:Src/main.c    **** 		case 'p':
 1372              		.loc 1 264 4 view .LVU286
 1373 011c F0E7     		b	.L53
 1374              	.LVL91:
 1375              	.L58:
 266:Src/main.c    **** 			USART_SendString(part1);
 1376              		.loc 1 266 4 view .LVU287
 267:Src/main.c    **** 			Proceed();
 1377              		.loc 1 267 4 view .LVU288
 1378 011e 0DA8     		add	r0, sp, #52
 1379              	.LVL92:
 267:Src/main.c    **** 			Proceed();
 1380              		.loc 1 267 4 is_stmt 0 view .LVU289
 1381 0120 FFF7FEFF 		bl	USART_SendString
 1382              	.LVL93:
 268:Src/main.c    **** 			ClearCommand();
 1383              		.loc 1 268 4 is_stmt 1 view .LVU290
 1384 0124 FFF7FEFF 		bl	Proceed
 1385              	.LVL94:
 269:Src/main.c    **** 			return;
 1386              		.loc 1 269 4 view .LVU291
 1387 0128 FFF7FEFF 		bl	ClearCommand
 1388              	.LVL95:
 270:Src/main.c    **** 		case 'x':
 1389              		.loc 1 270 4 view .LVU292
 1390 012c E8E7     		b	.L53
 1391              	.LVL96:
 1392              	.L55:
 272:Src/main.c    **** 			USART_SendString(part1);
 1393              		.loc 1 272 4 view .LVU293
 273:Src/main.c    **** 			motorcmd.dir = OFF;
 1394              		.loc 1 273 4 view .LVU294
 1395 012e 07A8     		add	r0, sp, #28
 1396              	.LVL97:
 273:Src/main.c    **** 			motorcmd.dir = OFF;
 1397              		.loc 1 273 4 is_stmt 0 view .LVU295
 1398 0130 FFF7FEFF 		bl	USART_SendString
 1399              	.LVL98:
 274:Src/main.c    **** 			ClearCommand();
 1400              		.loc 1 274 4 is_stmt 1 view .LVU296
 274:Src/main.c    **** 			ClearCommand();
 1401              		.loc 1 274 17 is_stmt 0 view .LVU297
 1402 0134 06AC     		add	r4, sp, #24
 1403 0136 0423     		movs	r3, #4
 1404 0138 2370     		strb	r3, [r4]
 275:Src/main.c    **** 			MoveMotors(&motorcmd);
 1405              		.loc 1 275 4 is_stmt 1 view .LVU298
 1406 013a FFF7FEFF 		bl	ClearCommand
 1407              	.LVL99:
ARM GAS  /tmp/cc1xqMYQ.s 			page 42


 276:Src/main.c    **** 			return;
 1408              		.loc 1 276 4 view .LVU299
 1409 013e 2000     		movs	r0, r4
 1410 0140 FFF7FEFF 		bl	MoveMotors
 1411              	.LVL100:
 277:Src/main.c    **** 		default:
 1412              		.loc 1 277 4 view .LVU300
 1413 0144 DCE7     		b	.L53
 1414              	.LVL101:
 1415              	.L54:
 279:Src/main.c    **** 			ClearCommand();
 1416              		.loc 1 279 4 view .LVU301
 1417 0146 27A8     		add	r0, sp, #156
 1418 0148 FFF7FEFF 		bl	USART_SendString
 1419              	.LVL102:
 280:Src/main.c    **** 			return;
 1420              		.loc 1 280 4 view .LVU302
 1421 014c FFF7FEFF 		bl	ClearCommand
 1422              	.LVL103:
 281:Src/main.c    **** 	}
 1423              		.loc 1 281 4 view .LVU303
 1424 0150 D6E7     		b	.L53
 1425              	.L67:
 246:Src/main.c    **** 		case 'w':
 1426              		.loc 1 246 2 is_stmt 0 view .LVU304
 1427 0152 23AE     		add	r6, sp, #140
 1428 0154 ABE7     		b	.L57
 1429              	.LVL104:
 1430              	.L68:
 286:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1431              		.loc 1 286 21 discriminator 1 view .LVU305
 1432 0156 772C     		cmp	r4, #119
 1433 0158 ABD1     		bne	.L63
 287:Src/main.c    **** 		motorcmd.amount = 0;
 1434              		.loc 1 287 3 is_stmt 1 view .LVU306
 1435 015a 02AA     		add	r2, sp, #8
 1436 015c 114B     		ldr	r3, .L70+40
 1437 015e 31CB     		ldmia	r3!, {r0, r4, r5}
 1438 0160 31C2     		stmia	r2!, {r0, r4, r5}
 1439 0162 1B88     		ldrh	r3, [r3]
 1440 0164 1380     		strh	r3, [r2]
 288:Src/main.c    **** 	}
 1441              		.loc 1 288 3 view .LVU307
 288:Src/main.c    **** 	}
 1442              		.loc 1 288 19 is_stmt 0 view .LVU308
 1443 0166 06AB     		add	r3, sp, #24
 1444 0168 0022     		movs	r2, #0
 1445 016a 5A70     		strb	r2, [r3, #1]
 1446 016c B1E7     		b	.L64
 1447              	.L69:
 291:Src/main.c    **** 		ClearCommand();
 1448              		.loc 1 291 3 is_stmt 1 view .LVU309
 1449 016e 27A8     		add	r0, sp, #156
 1450 0170 FFF7FEFF 		bl	USART_SendString
 1451              	.LVL105:
 292:Src/main.c    **** 		return;
 1452              		.loc 1 292 3 view .LVU310
ARM GAS  /tmp/cc1xqMYQ.s 			page 43


 1453 0174 FFF7FEFF 		bl	ClearCommand
 1454              	.LVL106:
 293:Src/main.c    **** 	}
 1455              		.loc 1 293 3 view .LVU311
 1456 0178 C2E7     		b	.L53
 1457              	.L71:
 1458 017a C046     		.align	2
 1459              	.L70:
 1460 017c 14000000 		.word	.LC43
 1461 0180 30000000 		.word	.LC45
 1462 0184 40000000 		.word	.LC47
 1463 0188 50000000 		.word	.LC49
 1464 018c 60000000 		.word	.LC51
 1465 0190 78000000 		.word	.LC53
 1466 0194 98000000 		.word	.LC55
 1467 0198 00000000 		.word	.L56
 1468 019c 10000000 		.word	.LC60
 1469 01a0 FFFF0000 		.word	65535
 1470 01a4 00000000 		.word	.LC58
 1471              		.cfi_endproc
 1472              	.LFE52:
 1474              		.section	.text.Error_Handler,"ax",%progbits
 1475              		.align	1
 1476              		.global	Error_Handler
 1477              		.syntax unified
 1478              		.code	16
 1479              		.thumb_func
 1481              	Error_Handler:
 1482              	.LFB59:
 628:Src/main.c    **** 
 629:Src/main.c    **** /* USER CODE BEGIN 4 */
 630:Src/main.c    **** 
 631:Src/main.c    **** /* USER CODE END 4 */
 632:Src/main.c    **** 
 633:Src/main.c    **** /**
 634:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 635:Src/main.c    ****  * @retval None
 636:Src/main.c    ****  */
 637:Src/main.c    **** void Error_Handler(void)
 638:Src/main.c    **** {
 1483              		.loc 1 638 1 view -0
 1484              		.cfi_startproc
 1485              		@ Volatile: function does not return.
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 1488              		@ link register save eliminated.
 639:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 640:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 641:Src/main.c    **** 	__disable_irq();
 1489              		.loc 1 641 2 view .LVU313
 1490              	.LBB14:
 1491              	.LBI14:
 1492              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
ARM GAS  /tmp/cc1xqMYQ.s 			page 44


   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
ARM GAS  /tmp/cc1xqMYQ.s 			page 45


  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
ARM GAS  /tmp/cc1xqMYQ.s 			page 46


 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1493              		.loc 2 140 27 view .LVU314
 1494              	.LBB15:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1495              		.loc 2 142 3 view .LVU315
 1496              		.syntax divided
 1497              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1498 0000 72B6     		cpsid i
 1499              	@ 0 "" 2
 1500              		.thumb
 1501              		.syntax unified
 1502              	.L73:
 1503              	.LBE15:
 1504              	.LBE14:
 642:Src/main.c    **** 	while (1)
 1505              		.loc 1 642 2 discriminator 1 view .LVU316
 643:Src/main.c    **** 	{
 644:Src/main.c    **** 	}
 1506              		.loc 1 644 2 discriminator 1 view .LVU317
 642:Src/main.c    **** 	while (1)
 1507              		.loc 1 642 8 discriminator 1 view .LVU318
 1508 0002 FEE7     		b	.L73
 1509              		.cfi_endproc
 1510              	.LFE59:
 1512              		.section	.text.MX_TIM15_Init,"ax",%progbits
 1513              		.align	1
 1514              		.syntax unified
 1515              		.code	16
 1516              		.thumb_func
 1518              	MX_TIM15_Init:
 1519              	.LFB57:
 556:Src/main.c    **** 
 1520              		.loc 1 556 1 view -0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/cc1xqMYQ.s 			page 47


 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524 0000 00B5     		push	{lr}
 1525              	.LCFI22:
 1526              		.cfi_def_cfa_offset 4
 1527              		.cfi_offset 14, -4
 1528 0002 89B0     		sub	sp, sp, #36
 1529              	.LCFI23:
 1530              		.cfi_def_cfa_offset 40
 562:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1531              		.loc 1 562 3 view .LVU320
 562:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1532              		.loc 1 562 26 is_stmt 0 view .LVU321
 1533 0004 1022     		movs	r2, #16
 1534 0006 0021     		movs	r1, #0
 1535 0008 04A8     		add	r0, sp, #16
 1536 000a FFF7FEFF 		bl	memset
 1537              	.LVL107:
 563:Src/main.c    **** 
 1538              		.loc 1 563 3 is_stmt 1 view .LVU322
 563:Src/main.c    **** 
 1539              		.loc 1 563 27 is_stmt 0 view .LVU323
 1540 000e 0822     		movs	r2, #8
 1541 0010 0021     		movs	r1, #0
 1542 0012 02A8     		add	r0, sp, #8
 1543 0014 FFF7FEFF 		bl	memset
 1544              	.LVL108:
 568:Src/main.c    ****   htim15.Init.Prescaler = 200;
 1545              		.loc 1 568 3 is_stmt 1 view .LVU324
 568:Src/main.c    ****   htim15.Init.Prescaler = 200;
 1546              		.loc 1 568 19 is_stmt 0 view .LVU325
 1547 0018 1B48     		ldr	r0, .L81
 1548 001a 1C4B     		ldr	r3, .L81+4
 1549 001c 0360     		str	r3, [r0]
 569:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1550              		.loc 1 569 3 is_stmt 1 view .LVU326
 569:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1551              		.loc 1 569 25 is_stmt 0 view .LVU327
 1552 001e C823     		movs	r3, #200
 1553 0020 4360     		str	r3, [r0, #4]
 570:Src/main.c    ****   htim15.Init.Period = 65535;
 1554              		.loc 1 570 3 is_stmt 1 view .LVU328
 570:Src/main.c    ****   htim15.Init.Period = 65535;
 1555              		.loc 1 570 27 is_stmt 0 view .LVU329
 1556 0022 0023     		movs	r3, #0
 1557 0024 8360     		str	r3, [r0, #8]
 571:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1558              		.loc 1 571 3 is_stmt 1 view .LVU330
 571:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1559              		.loc 1 571 22 is_stmt 0 view .LVU331
 1560 0026 1A4A     		ldr	r2, .L81+8
 1561 0028 C260     		str	r2, [r0, #12]
 572:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 1562              		.loc 1 572 3 is_stmt 1 view .LVU332
 572:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 1563              		.loc 1 572 29 is_stmt 0 view .LVU333
 1564 002a 0361     		str	r3, [r0, #16]
 573:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/cc1xqMYQ.s 			page 48


 1565              		.loc 1 573 3 is_stmt 1 view .LVU334
 573:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1566              		.loc 1 573 33 is_stmt 0 view .LVU335
 1567 002c 4361     		str	r3, [r0, #20]
 574:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1568              		.loc 1 574 3 is_stmt 1 view .LVU336
 574:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1569              		.loc 1 574 33 is_stmt 0 view .LVU337
 1570 002e 8361     		str	r3, [r0, #24]
 575:Src/main.c    ****   {
 1571              		.loc 1 575 3 is_stmt 1 view .LVU338
 575:Src/main.c    ****   {
 1572              		.loc 1 575 7 is_stmt 0 view .LVU339
 1573 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1574              	.LVL109:
 575:Src/main.c    ****   {
 1575              		.loc 1 575 6 view .LVU340
 1576 0034 0028     		cmp	r0, #0
 1577 0036 20D1     		bne	.L78
 579:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1578              		.loc 1 579 3 is_stmt 1 view .LVU341
 579:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1579              		.loc 1 579 34 is_stmt 0 view .LVU342
 1580 0038 8023     		movs	r3, #128
 1581 003a 5B01     		lsls	r3, r3, #5
 1582 003c 0493     		str	r3, [sp, #16]
 580:Src/main.c    ****   {
 1583              		.loc 1 580 3 is_stmt 1 view .LVU343
 580:Src/main.c    ****   {
 1584              		.loc 1 580 7 is_stmt 0 view .LVU344
 1585 003e 1248     		ldr	r0, .L81
 1586 0040 04A9     		add	r1, sp, #16
 1587 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1588              	.LVL110:
 580:Src/main.c    ****   {
 1589              		.loc 1 580 6 view .LVU345
 1590 0046 0028     		cmp	r0, #0
 1591 0048 19D1     		bne	.L79
 584:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1592              		.loc 1 584 3 is_stmt 1 view .LVU346
 584:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1593              		.loc 1 584 37 is_stmt 0 view .LVU347
 1594 004a 0023     		movs	r3, #0
 1595 004c 0293     		str	r3, [sp, #8]
 585:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1596              		.loc 1 585 3 is_stmt 1 view .LVU348
 585:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1597              		.loc 1 585 33 is_stmt 0 view .LVU349
 1598 004e 0393     		str	r3, [sp, #12]
 586:Src/main.c    ****   {
 1599              		.loc 1 586 3 is_stmt 1 view .LVU350
 586:Src/main.c    ****   {
 1600              		.loc 1 586 7 is_stmt 0 view .LVU351
 1601 0050 0D48     		ldr	r0, .L81
 1602 0052 02A9     		add	r1, sp, #8
 1603 0054 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1604              	.LVL111:
ARM GAS  /tmp/cc1xqMYQ.s 			page 49


 586:Src/main.c    ****   {
 1605              		.loc 1 586 6 view .LVU352
 1606 0058 0028     		cmp	r0, #0
 1607 005a 12D1     		bne	.L80
 591:Src/main.c    **** 
 1608              		.loc 1 591 3 is_stmt 1 view .LVU353
 1609              	.LBB16:
 591:Src/main.c    **** 
 1610              		.loc 1 591 3 view .LVU354
 591:Src/main.c    **** 
 1611              		.loc 1 591 3 view .LVU355
 1612 005c 0D4B     		ldr	r3, .L81+12
 1613 005e 9A69     		ldr	r2, [r3, #24]
 1614 0060 8021     		movs	r1, #128
 1615 0062 4902     		lsls	r1, r1, #9
 1616 0064 0A43     		orrs	r2, r1
 1617 0066 9A61     		str	r2, [r3, #24]
 591:Src/main.c    **** 
 1618              		.loc 1 591 3 view .LVU356
 1619 0068 9B69     		ldr	r3, [r3, #24]
 1620 006a 0B40     		ands	r3, r1
 1621 006c 0193     		str	r3, [sp, #4]
 591:Src/main.c    **** 
 1622              		.loc 1 591 3 view .LVU357
 1623 006e 019B     		ldr	r3, [sp, #4]
 1624              	.LBE16:
 591:Src/main.c    **** 
 1625              		.loc 1 591 3 view .LVU358
 593:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 1626              		.loc 1 593 2 view .LVU359
 1627 0070 0548     		ldr	r0, .L81
 1628 0072 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1629              	.LVL112:
 598:Src/main.c    **** 
 1630              		.loc 1 598 1 is_stmt 0 view .LVU360
 1631 0076 09B0     		add	sp, sp, #36
 1632              		@ sp needed
 1633 0078 00BD     		pop	{pc}
 1634              	.L78:
 577:Src/main.c    ****   }
 1635              		.loc 1 577 5 is_stmt 1 view .LVU361
 1636 007a FFF7FEFF 		bl	Error_Handler
 1637              	.LVL113:
 1638              	.L79:
 582:Src/main.c    ****   }
 1639              		.loc 1 582 5 view .LVU362
 1640 007e FFF7FEFF 		bl	Error_Handler
 1641              	.LVL114:
 1642              	.L80:
 588:Src/main.c    ****   }
 1643              		.loc 1 588 5 view .LVU363
 1644 0082 FFF7FEFF 		bl	Error_Handler
 1645              	.LVL115:
 1646              	.L82:
 1647 0086 C046     		.align	2
 1648              	.L81:
 1649 0088 00000000 		.word	htim15
ARM GAS  /tmp/cc1xqMYQ.s 			page 50


 1650 008c 00400140 		.word	1073823744
 1651 0090 FFFF0000 		.word	65535
 1652 0094 00100240 		.word	1073876992
 1653              		.cfi_endproc
 1654              	.LFE57:
 1656              		.section	.text.SystemClock_Config,"ax",%progbits
 1657              		.align	1
 1658              		.global	SystemClock_Config
 1659              		.syntax unified
 1660              		.code	16
 1661              		.thumb_func
 1663              	SystemClock_Config:
 1664              	.LFB56:
 520:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1665              		.loc 1 520 1 view -0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 72
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669 0000 00B5     		push	{lr}
 1670              	.LCFI24:
 1671              		.cfi_def_cfa_offset 4
 1672              		.cfi_offset 14, -4
 1673 0002 93B0     		sub	sp, sp, #76
 1674              	.LCFI25:
 1675              		.cfi_def_cfa_offset 80
 521:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1676              		.loc 1 521 2 view .LVU365
 521:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1677              		.loc 1 521 21 is_stmt 0 view .LVU366
 1678 0004 3422     		movs	r2, #52
 1679 0006 0021     		movs	r1, #0
 1680 0008 05A8     		add	r0, sp, #20
 1681 000a FFF7FEFF 		bl	memset
 1682              	.LVL116:
 522:Src/main.c    **** 
 1683              		.loc 1 522 2 is_stmt 1 view .LVU367
 522:Src/main.c    **** 
 1684              		.loc 1 522 21 is_stmt 0 view .LVU368
 1685 000e 1022     		movs	r2, #16
 1686 0010 0021     		movs	r1, #0
 1687 0012 01A8     		add	r0, sp, #4
 1688 0014 FFF7FEFF 		bl	memset
 1689              	.LVL117:
 527:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1690              		.loc 1 527 2 is_stmt 1 view .LVU369
 527:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1691              		.loc 1 527 35 is_stmt 0 view .LVU370
 1692 0018 0223     		movs	r3, #2
 1693 001a 0593     		str	r3, [sp, #20]
 528:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1694              		.loc 1 528 2 is_stmt 1 view .LVU371
 528:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1695              		.loc 1 528 29 is_stmt 0 view .LVU372
 1696 001c 013B     		subs	r3, r3, #1
 1697 001e 0893     		str	r3, [sp, #32]
 529:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1698              		.loc 1 529 2 is_stmt 1 view .LVU373
ARM GAS  /tmp/cc1xqMYQ.s 			page 51


 529:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1699              		.loc 1 529 40 is_stmt 0 view .LVU374
 1700 0020 0F33     		adds	r3, r3, #15
 1701 0022 0993     		str	r3, [sp, #36]
 530:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1702              		.loc 1 530 2 is_stmt 1 view .LVU375
 531:Src/main.c    **** 	{
 1703              		.loc 1 531 2 view .LVU376
 531:Src/main.c    **** 	{
 1704              		.loc 1 531 6 is_stmt 0 view .LVU377
 1705 0024 05A8     		add	r0, sp, #20
 1706 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1707              	.LVL118:
 531:Src/main.c    **** 	{
 1708              		.loc 1 531 5 view .LVU378
 1709 002a 0028     		cmp	r0, #0
 1710 002c 0DD1     		bne	.L86
 538:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1711              		.loc 1 538 2 is_stmt 1 view .LVU379
 538:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1712              		.loc 1 538 30 is_stmt 0 view .LVU380
 1713 002e 0723     		movs	r3, #7
 1714 0030 0193     		str	r3, [sp, #4]
 540:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1715              		.loc 1 540 2 is_stmt 1 view .LVU381
 540:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1716              		.loc 1 540 33 is_stmt 0 view .LVU382
 1717 0032 0023     		movs	r3, #0
 1718 0034 0293     		str	r3, [sp, #8]
 541:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1719              		.loc 1 541 2 is_stmt 1 view .LVU383
 541:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1720              		.loc 1 541 34 is_stmt 0 view .LVU384
 1721 0036 0393     		str	r3, [sp, #12]
 542:Src/main.c    **** 
 1722              		.loc 1 542 2 is_stmt 1 view .LVU385
 542:Src/main.c    **** 
 1723              		.loc 1 542 35 is_stmt 0 view .LVU386
 1724 0038 0493     		str	r3, [sp, #16]
 544:Src/main.c    **** 	{
 1725              		.loc 1 544 2 is_stmt 1 view .LVU387
 544:Src/main.c    **** 	{
 1726              		.loc 1 544 6 is_stmt 0 view .LVU388
 1727 003a 0021     		movs	r1, #0
 1728 003c 01A8     		add	r0, sp, #4
 1729 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1730              	.LVL119:
 544:Src/main.c    **** 	{
 1731              		.loc 1 544 5 view .LVU389
 1732 0042 0028     		cmp	r0, #0
 1733 0044 03D1     		bne	.L87
 548:Src/main.c    **** 
 1734              		.loc 1 548 1 view .LVU390
 1735 0046 13B0     		add	sp, sp, #76
 1736              		@ sp needed
 1737 0048 00BD     		pop	{pc}
 1738              	.L86:
ARM GAS  /tmp/cc1xqMYQ.s 			page 52


 533:Src/main.c    **** 	}
 1739              		.loc 1 533 3 is_stmt 1 view .LVU391
 1740 004a FFF7FEFF 		bl	Error_Handler
 1741              	.LVL120:
 1742              	.L87:
 546:Src/main.c    **** 	}
 1743              		.loc 1 546 3 view .LVU392
 1744 004e FFF7FEFF 		bl	Error_Handler
 1745              	.LVL121:
 1746              		.cfi_endproc
 1747              	.LFE56:
 1749              		.section	.text.main,"ax",%progbits
 1750              		.align	1
 1751              		.global	main
 1752              		.syntax unified
 1753              		.code	16
 1754              		.thumb_func
 1756              	main:
 1757              	.LFB55:
 465:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1758              		.loc 1 465 1 view -0
 1759              		.cfi_startproc
 1760              		@ Volatile: function does not return.
 1761              		@ args = 0, pretend = 0, frame = 8
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763 0000 10B5     		push	{r4, lr}
 1764              	.LCFI26:
 1765              		.cfi_def_cfa_offset 8
 1766              		.cfi_offset 4, -8
 1767              		.cfi_offset 14, -4
 1768 0002 82B0     		sub	sp, sp, #8
 1769              	.LCFI27:
 1770              		.cfi_def_cfa_offset 16
 466:Src/main.c    **** 	SystemClock_Config();
 1771              		.loc 1 466 2 view .LVU394
 1772 0004 FFF7FEFF 		bl	HAL_Init
 1773              	.LVL122:
 467:Src/main.c    **** 
 1774              		.loc 1 467 2 view .LVU395
 1775 0008 FFF7FEFF 		bl	SystemClock_Config
 1776              	.LVL123:
 470:Src/main.c    **** 	USART_Init();
 1777              		.loc 1 470 2 view .LVU396
 1778 000c FFF7FEFF 		bl	GPIO_AF_Init
 1779              	.LVL124:
 471:Src/main.c    **** 
 1780              		.loc 1 471 2 view .LVU397
 1781 0010 FFF7FEFF 		bl	USART_Init
 1782              	.LVL125:
 473:Src/main.c    **** 
 1783              		.loc 1 473 2 view .LVU398
 1784 0014 FFF7FEFF 		bl	motor_init
 1785              	.LVL126:
 475:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 1786              		.loc 1 475 2 view .LVU399
 1787              	.LBB17:
 1788              	.LBI17:
ARM GAS  /tmp/cc1xqMYQ.s 			page 53


 1789              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
ARM GAS  /tmp/cc1xqMYQ.s 			page 54


  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /tmp/cc1xqMYQ.s 			page 55


 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
ARM GAS  /tmp/cc1xqMYQ.s 			page 56


 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
ARM GAS  /tmp/cc1xqMYQ.s 			page 57


 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
ARM GAS  /tmp/cc1xqMYQ.s 			page 58


 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
ARM GAS  /tmp/cc1xqMYQ.s 			page 59


 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
ARM GAS  /tmp/cc1xqMYQ.s 			page 60


 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc1xqMYQ.s 			page 61


 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
ARM GAS  /tmp/cc1xqMYQ.s 			page 62


 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
ARM GAS  /tmp/cc1xqMYQ.s 			page 63


 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1790              		.loc 3 623 22 view .LVU400
 1791              	.LBB18:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  /tmp/cc1xqMYQ.s 			page 64


 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1792              		.loc 3 625 3 view .LVU401
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1793              		.loc 3 627 5 view .LVU402
 1794              		.loc 3 627 20 is_stmt 0 view .LVU403
 1795 0018 254B     		ldr	r3, .L92
 1796 001a 8022     		movs	r2, #128
 1797 001c 9205     		lsls	r2, r2, #22
 1798 001e 1A60     		str	r2, [r3]
 1799              	.LVL127:
 1800              		.loc 3 627 20 view .LVU404
 1801              	.LBE18:
 1802              	.LBE17:
 476:Src/main.c    **** 
 1803              		.loc 1 476 2 is_stmt 1 view .LVU405
 1804              	.LBB19:
 1805              	.LBI19:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/cc1xqMYQ.s 			page 65


 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
ARM GAS  /tmp/cc1xqMYQ.s 			page 66


 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1806              		.loc 3 730 22 view .LVU406
 1807              	.LBB20:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1808              		.loc 3 732 3 view .LVU407
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1809              		.loc 3 734 5 view .LVU408
 1810              		.loc 3 734 52 is_stmt 0 view .LVU409
 1811 0020 C720     		movs	r0, #199
 1812 0022 8000     		lsls	r0, r0, #2
 1813 0024 1958     		ldr	r1, [r3, r0]
 1814              		.loc 3 734 33 view .LVU410
 1815 0026 234A     		ldr	r2, .L92+4
 1816 0028 1140     		ands	r1, r2
 1817              		.loc 3 734 102 view .LVU411
 1818 002a 8022     		movs	r2, #128
 1819 002c D201     		lsls	r2, r2, #7
 1820 002e 0A43     		orrs	r2, r1
 1821              		.loc 3 734 30 view .LVU412
 1822 0030 1A50     		str	r2, [r3, r0]
 1823              	.LVL128:
 1824              		.loc 3 734 30 view .LVU413
 1825              	.LBE20:
 1826              	.LBE19:
 478:Src/main.c    **** 
 1827              		.loc 1 478 2 is_stmt 1 view .LVU414
 478:Src/main.c    **** 
 1828              		.loc 1 478 10 is_stmt 0 view .LVU415
 1829 0032 214B     		ldr	r3, .L92+8
 1830 0034 1A68     		ldr	r2, [r3]
 1831 0036 0092     		str	r2, [sp]
 1832 0038 9B88     		ldrh	r3, [r3, #4]
 1833 003a 6A46     		mov	r2, sp
 1834 003c 9380     		strh	r3, [r2, #4]
 481:Src/main.c    **** 	/* TIM15_Init(); */
 1835              		.loc 1 481 2 is_stmt 1 view .LVU416
 1836 003e FFF7FEFF 		bl	MX_GPIO_Init
 1837              	.LVL129:
 483:Src/main.c    **** 
 1838              		.loc 1 483 2 view .LVU417
 1839 0042 FFF7FEFF 		bl	MX_TIM15_Init
 1840              	.LVL130:
 486:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1841              		.loc 1 486 2 view .LVU418
 1842 0046 8021     		movs	r1, #128
 1843 0048 1C4C     		ldr	r4, .L92+12
 1844 004a 0022     		movs	r2, #0
 1845 004c 0901     		lsls	r1, r1, #4
 1846 004e 2000     		movs	r0, r4
ARM GAS  /tmp/cc1xqMYQ.s 			page 67


 1847 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1848              	.LVL131:
 487:Src/main.c    **** 
 1849              		.loc 1 487 2 view .LVU419
 1850 0054 8021     		movs	r1, #128
 1851 0056 0022     		movs	r2, #0
 1852 0058 8901     		lsls	r1, r1, #6
 1853 005a 2000     		movs	r0, r4
 1854 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1855              	.LVL132:
 1856 0060 0EE0     		b	.L91
 1857              	.L90:
 497:Src/main.c    **** 			{
 1858              		.loc 1 497 4 view .LVU420
 497:Src/main.c    **** 			{
 1859              		.loc 1 497 14 is_stmt 0 view .LVU421
 1860 0062 174B     		ldr	r3, .L92+16
 1861 0064 5B78     		ldrb	r3, [r3, #1]
 497:Src/main.c    **** 			{
 1862              		.loc 1 497 6 view .LVU422
 1863 0066 002B     		cmp	r3, #0
 1864 0068 06D0     		beq	.L89
 499:Src/main.c    **** 			}
 1865              		.loc 1 499 5 is_stmt 1 view .LVU423
 499:Src/main.c    **** 			}
 1866              		.loc 1 499 27 is_stmt 0 view .LVU424
 1867 006a 154B     		ldr	r3, .L92+16
 1868 006c 1878     		ldrb	r0, [r3]
 1869 006e C0B2     		uxtb	r0, r0
 499:Src/main.c    **** 			}
 1870              		.loc 1 499 39 view .LVU425
 1871 0070 5978     		ldrb	r1, [r3, #1]
 1872 0072 C9B2     		uxtb	r1, r1
 499:Src/main.c    **** 			}
 1873              		.loc 1 499 5 view .LVU426
 1874 0074 FFF7FEFF 		bl	ProcessCommand
 1875              	.LVL133:
 1876              	.L89:
 511:Src/main.c    **** 	}
 1877              		.loc 1 511 3 is_stmt 1 view .LVU427
 1878 0078 FA20     		movs	r0, #250
 1879 007a 4000     		lsls	r0, r0, #1
 1880 007c FFF7FEFF 		bl	HAL_Delay
 1881              	.LVL134:
 489:Src/main.c    **** 		if(incomingCommand)
 1882              		.loc 1 489 8 view .LVU428
 1883              	.L91:
 489:Src/main.c    **** 		if(incomingCommand)
 1884              		.loc 1 489 2 view .LVU429
 490:Src/main.c    **** 		{
 1885              		.loc 1 490 3 view .LVU430
 490:Src/main.c    **** 		{
 1886              		.loc 1 490 6 is_stmt 0 view .LVU431
 1887 0080 104B     		ldr	r3, .L92+20
 1888 0082 1B78     		ldrb	r3, [r3]
 490:Src/main.c    **** 		{
 1889              		.loc 1 490 5 view .LVU432
ARM GAS  /tmp/cc1xqMYQ.s 			page 68


 1890 0084 002B     		cmp	r3, #0
 1891 0086 F7D0     		beq	.L89
 492:Src/main.c    **** 					command[0] != 'a' &&
 1892              		.loc 1 492 4 is_stmt 1 view .LVU433
 492:Src/main.c    **** 					command[0] != 'a' &&
 1893              		.loc 1 492 14 is_stmt 0 view .LVU434
 1894 0088 0D4B     		ldr	r3, .L92+16
 1895 008a 1B78     		ldrb	r3, [r3]
 492:Src/main.c    **** 					command[0] != 'a' &&
 1896              		.loc 1 492 6 view .LVU435
 1897 008c 772B     		cmp	r3, #119
 1898 008e E8D0     		beq	.L90
 493:Src/main.c    **** 					command[0] != 'd'){
 1899              		.loc 1 493 13 discriminator 1 view .LVU436
 1900 0090 0B4B     		ldr	r3, .L92+16
 1901 0092 1B78     		ldrb	r3, [r3]
 492:Src/main.c    **** 					command[0] != 'a' &&
 1902              		.loc 1 492 25 discriminator 1 view .LVU437
 1903 0094 612B     		cmp	r3, #97
 1904 0096 E4D0     		beq	.L90
 494:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 1905              		.loc 1 494 13 view .LVU438
 1906 0098 094B     		ldr	r3, .L92+16
 1907 009a 1B78     		ldrb	r3, [r3]
 493:Src/main.c    **** 					command[0] != 'd'){
 1908              		.loc 1 493 24 view .LVU439
 1909 009c 642B     		cmp	r3, #100
 1910 009e E0D0     		beq	.L90
 495:Src/main.c    **** 			}
 1911              		.loc 1 495 5 is_stmt 1 view .LVU440
 495:Src/main.c    **** 			}
 1912              		.loc 1 495 27 is_stmt 0 view .LVU441
 1913 00a0 074B     		ldr	r3, .L92+16
 1914 00a2 1878     		ldrb	r0, [r3]
 1915 00a4 C0B2     		uxtb	r0, r0
 495:Src/main.c    **** 			}
 1916              		.loc 1 495 5 view .LVU442
 1917 00a6 0021     		movs	r1, #0
 1918 00a8 FFF7FEFF 		bl	ProcessCommand
 1919              	.LVL135:
 1920 00ac D9E7     		b	.L90
 1921              	.L93:
 1922 00ae C046     		.align	2
 1923              	.L92:
 1924 00b0 00E100E0 		.word	-536813312
 1925 00b4 FF00FFFF 		.word	-65281
 1926 00b8 00000000 		.word	.LC21
 1927 00bc 00040048 		.word	1207960576
 1928 00c0 00000000 		.word	command
 1929 00c4 00000000 		.word	incomingCommand
 1930              		.cfi_endproc
 1931              	.LFE55:
 1933              		.global	pulse_end_time
 1934              		.section	.bss.pulse_end_time,"aw",%nobits
 1935              		.align	2
 1938              	pulse_end_time:
 1939 0000 00000000 		.space	4
ARM GAS  /tmp/cc1xqMYQ.s 			page 69


 1940              		.global	pulse_start_time
 1941              		.section	.bss.pulse_start_time,"aw",%nobits
 1942              		.align	2
 1945              	pulse_start_time:
 1946 0000 00000000 		.space	4
 1947              		.global	htim155
 1948              		.section	.bss.htim155,"aw",%nobits
 1949              		.align	2
 1952              	htim155:
 1953 0000 00000000 		.space	64
 1953      00000000 
 1953      00000000 
 1953      00000000 
 1953      00000000 
 1954              		.global	pulseWidth
 1955              		.section	.bss.pulseWidth,"aw",%nobits
 1956              		.align	2
 1959              	pulseWidth:
 1960 0000 00000000 		.space	4
 1961              		.global	fallingEdgeTime
 1962              		.section	.bss.fallingEdgeTime,"aw",%nobits
 1963              		.align	2
 1966              	fallingEdgeTime:
 1967 0000 00000000 		.space	4
 1968              		.global	risingEdgeTime
 1969              		.section	.bss.risingEdgeTime,"aw",%nobits
 1970              		.align	2
 1973              	risingEdgeTime:
 1974 0000 00000000 		.space	4
 1975              		.global	incomingCommand
 1976              		.section	.bss.incomingCommand,"aw",%nobits
 1979              	incomingCommand:
 1980 0000 00       		.space	1
 1981              		.global	command
 1982              		.section	.bss.command,"aw",%nobits
 1983              		.align	2
 1986              	command:
 1987 0000 000000   		.space	3
 1988              		.global	rightDistance
 1989              		.section	.bss.rightDistance,"aw",%nobits
 1990              		.align	1
 1993              	rightDistance:
 1994 0000 0000     		.space	2
 1995              		.global	leftDistance
 1996              		.section	.bss.leftDistance,"aw",%nobits
 1997              		.align	1
 2000              	leftDistance:
 2001 0000 0000     		.space	2
 2002              		.global	Value2
 2003              		.section	.bss.Value2,"aw",%nobits
 2004              		.align	1
 2007              	Value2:
 2008 0000 0000     		.space	2
 2009              		.global	Value1
 2010              		.section	.bss.Value1,"aw",%nobits
 2011              		.align	1
 2014              	Value1:
ARM GAS  /tmp/cc1xqMYQ.s 			page 70


 2015 0000 0000     		.space	2
 2016              		.global	startTime
 2017              		.section	.bss.startTime,"aw",%nobits
 2018              		.align	1
 2021              	startTime:
 2022 0000 0000     		.space	2
 2023              		.global	pMillis
 2024              		.section	.bss.pMillis,"aw",%nobits
 2025              		.align	2
 2028              	pMillis:
 2029 0000 00000000 		.space	4
 2030              		.global	htim15
 2031              		.section	.bss.htim15,"aw",%nobits
 2032              		.align	2
 2035              	htim15:
 2036 0000 00000000 		.space	64
 2036      00000000 
 2036      00000000 
 2036      00000000 
 2036      00000000 
 2037              		.text
 2038              	.Letext0:
 2039              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2040              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2041              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2042              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2043              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2044              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2045              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2046              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2047              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2048              		.file 13 "Inc/pins.h"
 2049              		.file 14 "Inc/motor.h"
 2050              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2051              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2052              		.file 17 "/usr/arm-none-eabi/include/string.h"
 2053              		.file 18 "/usr/arm-none-eabi/include/stdio.h"
 2054              		.file 19 "<built-in>"
ARM GAS  /tmp/cc1xqMYQ.s 			page 71


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc1xqMYQ.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc1xqMYQ.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc1xqMYQ.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/cc1xqMYQ.s:102    .text.LED_Init:00000000 $t
     /tmp/cc1xqMYQ.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/cc1xqMYQ.s:151    .text.LED_Init:00000024 $d
     /tmp/cc1xqMYQ.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/cc1xqMYQ.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/cc1xqMYQ.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/cc1xqMYQ.s:342    .text.USART_Init:00000000 $t
     /tmp/cc1xqMYQ.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/cc1xqMYQ.s:440    .text.USART_Init:0000005c $d
     /tmp/cc1xqMYQ.s:447    .text.USART_SendChar:00000000 $t
     /tmp/cc1xqMYQ.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/cc1xqMYQ.s:479    .text.USART_SendChar:00000010 $d
     /tmp/cc1xqMYQ.s:484    .text.USART_SendString:00000000 $t
     /tmp/cc1xqMYQ.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/cc1xqMYQ.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/cc1xqMYQ.s:539    .text.ClearCommand:00000000 $t
     /tmp/cc1xqMYQ.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/cc1xqMYQ.s:588    .text.ClearCommand:0000002c $d
     /tmp/cc1xqMYQ.s:1986   .bss.command:00000000 command
     /tmp/cc1xqMYQ.s:1979   .bss.incomingCommand:00000000 incomingCommand
     /tmp/cc1xqMYQ.s:595    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/cc1xqMYQ.s:599    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/cc1xqMYQ.s:605    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/cc1xqMYQ.s:696    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/cc1xqMYQ.s:704    .rodata.Proceed.str1.4:00000000 $d
     /tmp/cc1xqMYQ.s:708    .text.Proceed:00000000 $t
     /tmp/cc1xqMYQ.s:714    .text.Proceed:00000000 Proceed
     /tmp/cc1xqMYQ.s:737    .text.Proceed:0000000c $d
     /tmp/cc1xqMYQ.s:743    .rodata.PrintDistance.str1.4:00000000 $d
     /tmp/cc1xqMYQ.s:747    .text.PrintDistance:00000000 $t
     /tmp/cc1xqMYQ.s:753    .text.PrintDistance:00000000 PrintDistance
     /tmp/cc1xqMYQ.s:799    .text.PrintDistance:00000030 $d
     /tmp/cc1xqMYQ.s:804    .rodata.GetUltrasonic.str1.4:00000000 $d
     /tmp/cc1xqMYQ.s:808    .text.GetUltrasonic:00000000 $t
     /tmp/cc1xqMYQ.s:814    .text.GetUltrasonic:00000000 GetUltrasonic
     /tmp/cc1xqMYQ.s:984    .text.GetUltrasonic:000000b4 $d
     /tmp/cc1xqMYQ.s:2035   .bss.htim15:00000000 htim15
     /tmp/cc1xqMYQ.s:2028   .bss.pMillis:00000000 pMillis
     /tmp/cc1xqMYQ.s:991    .rodata.Log.str1.4:00000000 $d
     /tmp/cc1xqMYQ.s:998    .text.Log:00000000 $t
     /tmp/cc1xqMYQ.s:1004   .text.Log:00000000 Log
     /tmp/cc1xqMYQ.s:1056   .text.Log:0000003c $d
     /tmp/cc1xqMYQ.s:1064   .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/cc1xqMYQ.s:1092   .text.ProcessCommand:00000000 $t
     /tmp/cc1xqMYQ.s:1098   .text.ProcessCommand:00000000 ProcessCommand
     /tmp/cc1xqMYQ.s:1229   .rodata.ProcessCommand:00000000 $d
     /tmp/cc1xqMYQ.s:1460   .text.ProcessCommand:0000017c $d
     /tmp/cc1xqMYQ.s:1475   .text.Error_Handler:00000000 $t
     /tmp/cc1xqMYQ.s:1481   .text.Error_Handler:00000000 Error_Handler
     /tmp/cc1xqMYQ.s:1513   .text.MX_TIM15_Init:00000000 $t
     /tmp/cc1xqMYQ.s:1518   .text.MX_TIM15_Init:00000000 MX_TIM15_Init
     /tmp/cc1xqMYQ.s:1649   .text.MX_TIM15_Init:00000088 $d
ARM GAS  /tmp/cc1xqMYQ.s 			page 72


     /tmp/cc1xqMYQ.s:1657   .text.SystemClock_Config:00000000 $t
     /tmp/cc1xqMYQ.s:1663   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc1xqMYQ.s:1750   .text.main:00000000 $t
     /tmp/cc1xqMYQ.s:1756   .text.main:00000000 main
     /tmp/cc1xqMYQ.s:1924   .text.main:000000b0 $d
     /tmp/cc1xqMYQ.s:1938   .bss.pulse_end_time:00000000 pulse_end_time
     /tmp/cc1xqMYQ.s:1935   .bss.pulse_end_time:00000000 $d
     /tmp/cc1xqMYQ.s:1945   .bss.pulse_start_time:00000000 pulse_start_time
     /tmp/cc1xqMYQ.s:1942   .bss.pulse_start_time:00000000 $d
     /tmp/cc1xqMYQ.s:1952   .bss.htim155:00000000 htim155
     /tmp/cc1xqMYQ.s:1949   .bss.htim155:00000000 $d
     /tmp/cc1xqMYQ.s:1959   .bss.pulseWidth:00000000 pulseWidth
     /tmp/cc1xqMYQ.s:1956   .bss.pulseWidth:00000000 $d
     /tmp/cc1xqMYQ.s:1966   .bss.fallingEdgeTime:00000000 fallingEdgeTime
     /tmp/cc1xqMYQ.s:1963   .bss.fallingEdgeTime:00000000 $d
     /tmp/cc1xqMYQ.s:1973   .bss.risingEdgeTime:00000000 risingEdgeTime
     /tmp/cc1xqMYQ.s:1970   .bss.risingEdgeTime:00000000 $d
     /tmp/cc1xqMYQ.s:1980   .bss.incomingCommand:00000000 $d
     /tmp/cc1xqMYQ.s:1983   .bss.command:00000000 $d
     /tmp/cc1xqMYQ.s:1993   .bss.rightDistance:00000000 rightDistance
     /tmp/cc1xqMYQ.s:1990   .bss.rightDistance:00000000 $d
     /tmp/cc1xqMYQ.s:2000   .bss.leftDistance:00000000 leftDistance
     /tmp/cc1xqMYQ.s:1997   .bss.leftDistance:00000000 $d
     /tmp/cc1xqMYQ.s:2007   .bss.Value2:00000000 Value2
     /tmp/cc1xqMYQ.s:2004   .bss.Value2:00000000 $d
     /tmp/cc1xqMYQ.s:2014   .bss.Value1:00000000 Value1
     /tmp/cc1xqMYQ.s:2011   .bss.Value1:00000000 $d
     /tmp/cc1xqMYQ.s:2021   .bss.startTime:00000000 startTime
     /tmp/cc1xqMYQ.s:2018   .bss.startTime:00000000 $d
     /tmp/cc1xqMYQ.s:2025   .bss.pMillis:00000000 $d
     /tmp/cc1xqMYQ.s:2032   .bss.htim15:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
__aeabi_f2d
get_distance
sprintf
HAL_GetTick
HAL_GPIO_ReadPin
HAL_Delay
memcpy
MoveMotors
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_Base_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/cc1xqMYQ.s 			page 73


HAL_Init
motor_init
