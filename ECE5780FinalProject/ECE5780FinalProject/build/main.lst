ARM GAS  /tmp/ccvXlRfF.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB58:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****  * in the root directory of this software component.
  14:Src/main.c    ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  ******************************************************************************
  17:Src/main.c    ****  */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include <stdbool.h>
  24:Src/main.c    **** #include "motor.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccvXlRfF.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim15;
  49:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  50:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  51:Src/main.c    **** #define TRIG_PORT GPIOB
  52:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  53:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  54:Src/main.c    **** #define ECHO_PORT GPIOB
  55:Src/main.c    **** volatile uint32_t pMillis;
  56:Src/main.c    **** volatile uint16_t startTime;
  57:Src/main.c    **** volatile uint16_t Value1 = 0;
  58:Src/main.c    **** volatile uint16_t Value2 = 0;
  59:Src/main.c    **** volatile uint16_t leftDistance = 0;
  60:Src/main.c    **** volatile uint16_t rightDistance = 0;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** static void MX_GPIO_Init(void);
  69:Src/main.c    **** static void MX_TIM15_Init(void);
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** #define LED_RED GPIO_PIN_6
  77:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  78:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  79:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  80:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  81:Src/main.c    **** 
  82:Src/main.c    **** void LED_Init(uint32_t pins) {
  83:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  84:Src/main.c    **** 
  85:Src/main.c    **** 	GPIO_InitTypeDef gpio_led_init = {pins,
  86:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
  87:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
  88:Src/main.c    **** 		GPIO_NOPULL
  89:Src/main.c    **** 	};
  90:Src/main.c    **** 	HAL_GPIO_Init(GPIOC, &gpio_led_init);
ARM GAS  /tmp/ccvXlRfF.s 			page 3


  91:Src/main.c    **** }
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  95:Src/main.c    ****  *        functions appropriately.
  96:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  97:Src/main.c    ****  */
  98:Src/main.c    **** void GPIO_AF_Init() {
  99:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 100:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 101:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 102:Src/main.c    **** 
 103:Src/main.c    **** 	// uart_pins
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 105:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 106:Src/main.c    **** 
 107:Src/main.c    **** 	// motor_left_pins
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 113:Src/main.c    **** 
 114:Src/main.c    **** 	// motor_right_pins
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 119:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 120:Src/main.c    **** 
 121:Src/main.c    **** 	// ultrasonic_left_pins
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 123:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 124:Src/main.c    **** 
 125:Src/main.c    **** 	// ultrasonic_right_pins
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 127:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 128:Src/main.c    **** }
 129:Src/main.c    **** 
 130:Src/main.c    **** /**
 131:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 132:Src/main.c    ****  */
 133:Src/main.c    **** void USART_Init() {
 134:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 135:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	//Set baud rate
 138:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 139:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 140:Src/main.c    **** 												//use with the BT adapter
 141:Src/main.c    **** 
 142:Src/main.c    **** 												//Enable transmitter
 143:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	//Enable receiver
 146:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 147:Src/main.c    **** 
ARM GAS  /tmp/ccvXlRfF.s 			page 4


 148:Src/main.c    **** 	//Enable the receive register not empty interrupt
 149:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	//Enable USART3
 152:Src/main.c    **** 	USART3->CR1 |= 1;
 153:Src/main.c    **** }
 154:Src/main.c    **** 
 155:Src/main.c    **** /**
 156:Src/main.c    ****  * @brief Sends a single character on the USART.
 157:Src/main.c    ****  *
 158:Src/main.c    ****  * @param c: the character to be sent
 159:Src/main.c    ****  */
 160:Src/main.c    **** void USART_SendChar(uint8_t c) {
 161:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 162:Src/main.c    **** 		;
 163:Src/main.c    **** 
 164:Src/main.c    **** 	USART3->TDR = c;
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** /**
 168:Src/main.c    ****  * @brief Sends a string on the USART.
 169:Src/main.c    ****  *
 170:Src/main.c    ****  * @param p_string: pointer to string to send
 171:Src/main.c    ****  */
 172:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 173:Src/main.c    **** 	while(*p_string != 0) {
 174:Src/main.c    **** 		USART_SendChar(*p_string);
 175:Src/main.c    **** 		p_string++;
 176:Src/main.c    **** 	}
 177:Src/main.c    **** 	USART_SendChar(0);
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** volatile uint8_t command[3];
 181:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 182:Src/main.c    **** 
 183:Src/main.c    **** void ClearCommand(){
 184:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 185:Src/main.c    **** 	memset(command, 0, sizeof(command));
 186:Src/main.c    **** 	incomingCommand = 0;
 187:Src/main.c    **** 	USART_SendString(prompt);
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** void USART3_4_IRQHandler(){
 191:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 192:Src/main.c    **** 	incomingCommand = 1;
 193:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 194:Src/main.c    **** 		;
 195:Src/main.c    **** 	if(command[0]){
 196:Src/main.c    **** 		if(command[1]){
 197:Src/main.c    **** 			USART_SendString(err);
 198:Src/main.c    **** 			ClearCommand();
 199:Src/main.c    **** 		}
 200:Src/main.c    **** 		else{
 201:Src/main.c    **** 			command[1] = USART3->RDR;
 202:Src/main.c    **** 		}
 203:Src/main.c    **** 	}
 204:Src/main.c    **** 	else{
ARM GAS  /tmp/ccvXlRfF.s 			page 5


 205:Src/main.c    **** 		command[0] = USART3->RDR;
 206:Src/main.c    **** 	}
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** void Log(){
 210:Src/main.c    **** 	uint8_t str_buff[32];
 211:Src/main.c    **** 
 212:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic left: %u %u %u\n", GetUltrasonic(&ultrasonic_left_pins), GetUltrason
 213:Src/main.c    **** 	USART_SendString(str_buff);
 214:Src/main.c    **** 
 215:Src/main.c    **** 	sprintf(str_buff, "Ultrasonic right: %u %u %u\n", GetUltrasonic(&ultrasonic_right_pins), GetUltras
 216:Src/main.c    **** 	USART_SendString(str_buff);
 217:Src/main.c    **** 
 218:Src/main.c    **** 	sprintf(str_buff, "Distance travelled: %d\n", (int)get_distance());
 219:Src/main.c    **** 	USART_SendString(str_buff);
 220:Src/main.c    **** 
 221:Src/main.c    **** }
 222:Src/main.c    **** 
 223:Src/main.c    **** void Proceed(){
 224:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 225:Src/main.c    **** 	USART_SendString(err);
 226:Src/main.c    **** }
 227:Src/main.c    **** 
 228:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 229:Src/main.c    **** 	uint32_t left_motor_pin;
 230:Src/main.c    **** 	uint32_t right_motor_pin;
 231:Src/main.c    **** 	int32_t CH1_DC = 65535;
 232:Src/main.c    **** 
 233:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 234:Src/main.c    **** 
 235:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 236:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 237:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 238:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 239:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 240:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 241:Src/main.c    **** 
 242:Src/main.c    **** 	MotorCommand motorcmd = {0};
 243:Src/main.c    **** 
 244:Src/main.c    **** 	uint8_t* part1;
 245:Src/main.c    **** 	uint8_t part2[15];
 246:Src/main.c    **** 	uint8_t zero = 0;
 247:Src/main.c    **** 	memcpy(part2, &zero, 15);
 248:Src/main.c    **** 
 249:Src/main.c    **** 	switch(direction){
 250:Src/main.c    **** 		case 'w':
 251:Src/main.c    **** 			part1 = forward;
 252:Src/main.c    **** 			motorcmd.dir = FORWARD;
 253:Src/main.c    **** 			break;
 254:Src/main.c    **** 		case 'a':
 255:Src/main.c    **** 			part1 = left;
 256:Src/main.c    **** 			motorcmd.dir = LEFT;
 257:Src/main.c    **** 			break;
 258:Src/main.c    **** 		case 'd':
 259:Src/main.c    **** 			part1 = right;
 260:Src/main.c    **** 			motorcmd.dir = RIGHT;
 261:Src/main.c    **** 			break;
ARM GAS  /tmp/ccvXlRfF.s 			page 6


 262:Src/main.c    **** 		case 'l':
 263:Src/main.c    **** 			part1 = log;
 264:Src/main.c    **** 			USART_SendString(part1);
 265:Src/main.c    **** 			Log();
 266:Src/main.c    **** 			ClearCommand();
 267:Src/main.c    **** 			return;
 268:Src/main.c    **** 		case 'p':
 269:Src/main.c    **** 			part1 = proceed;
 270:Src/main.c    **** 			USART_SendString(part1);
 271:Src/main.c    **** 			Proceed();
 272:Src/main.c    **** 			ClearCommand();
 273:Src/main.c    **** 			return;
 274:Src/main.c    **** 		case 'x':
 275:Src/main.c    **** 			part1 = stop;
 276:Src/main.c    **** 			USART_SendString(part1);
 277:Src/main.c    **** 			motorcmd.dir = OFF;
 278:Src/main.c    **** 			ClearCommand();
 279:Src/main.c    **** 			MoveMotors(&motorcmd);
 280:Src/main.c    **** 			return;
 281:Src/main.c    **** 		default:
 282:Src/main.c    **** 			USART_SendString(err);
 283:Src/main.c    **** 			ClearCommand();
 284:Src/main.c    **** 			return;
 285:Src/main.c    **** 	}
 286:Src/main.c    **** 
 287:Src/main.c    **** 	//these are for "vector commands" only:
 288:Src/main.c    **** 
 289:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 290:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 291:Src/main.c    **** 		motorcmd.amount = 0;
 292:Src/main.c    **** 	}
 293:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 294:Src/main.c    **** 		USART_SendString(err);
 295:Src/main.c    **** 		ClearCommand();
 296:Src/main.c    **** 		return;
 297:Src/main.c    **** 	}
 298:Src/main.c    **** 	else{
 299:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 300:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 301:Src/main.c    **** 		motorcmd.amount = dist;
 302:Src/main.c    **** 	}
 303:Src/main.c    **** 
 304:Src/main.c    **** 
 305:Src/main.c    **** 	USART_SendString(part1);
 306:Src/main.c    **** 	USART_SendString(part2);
 307:Src/main.c    **** 
 308:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 309:Src/main.c    **** 	HAL_Delay(1000);
 310:Src/main.c    **** 	TIM2->CCR1 = 0;
 311:Src/main.c    **** 
 312:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 313:Src/main.c    **** 	USART_SendString(result);
 314:Src/main.c    **** 
 315:Src/main.c    **** 	ClearCommand();
 316:Src/main.c    **** 
 317:Src/main.c    **** 
 318:Src/main.c    **** 	// Example code while loop
ARM GAS  /tmp/ccvXlRfF.s 			page 7


 319:Src/main.c    **** 	//    while (1)
 320:Src/main.c    **** 	//    {
 321:Src/main.c    **** 	//        while(CH1_DC < 65535)
 322:Src/main.c    **** 	//        {
 323:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 324:Src/main.c    **** 	//            CH1_DC += 70;
 325:Src/main.c    **** 	//            HAL_Delay(1);
 326:Src/main.c    **** 	//        }
 327:Src/main.c    **** 	//        while(CH1_DC > 0)
 328:Src/main.c    **** 	//        {
 329:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 330:Src/main.c    **** 	//            CH1_DC -= 70;
 331:Src/main.c    **** 	//            HAL_Delay(1);
 332:Src/main.c    **** 	//        }
 333:Src/main.c    **** 	//    }
 334:Src/main.c    **** }
 335:Src/main.c    **** 
 336:Src/main.c    **** /*
 337:Src/main.c    ****    void ProcessCommandPWM(uint8_t side, uint8_t amt){
 338:Src/main.c    ****    MotorCommand motorcmd = {0};
 339:Src/main.c    ****    motorcmd.dir = FORWARD;
 340:Src/main.c    ****    motorcmd.amount = 9;
 341:Src/main.c    ****    switch(side){
 342:Src/main.c    ****    case 'l':
 343:Src/main.c    ****    pwm_left = amt;
 344:Src/main.c    ****    break;
 345:Src/main.c    ****    case 'r':
 346:Src/main.c    ****    pwm_right = amt;
 347:Src/main.c    ****    break;
 348:Src/main.c    ****    case 'x':
 349:Src/main.c    ****    motorcmd.dir = OFF;
 350:Src/main.c    ****    break;
 351:Src/main.c    ****    default:
 352:Src/main.c    ****    break;
 353:Src/main.c    ****    }
 354:Src/main.c    ****    MoveMotors(&motorcmd);
 355:Src/main.c    ****    ClearCommand();
 356:Src/main.c    ****    }
 357:Src/main.c    ****    */
 358:Src/main.c    **** 
 359:Src/main.c    **** /*
 360:Src/main.c    ****    void Ultrasonic_Init(uint32_t pins)
 361:Src/main.c    ****    {
 362:Src/main.c    ****    __HAL_RCC_GPIOA_CLK_ENABLE();
 363:Src/main.c    **** 
 364:Src/main.c    ****    GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 365:Src/main.c    ****    GPIO_MODE_INPUT,
 366:Src/main.c    ****    GPIO_SPEED_FREQ_LOW,
 367:Src/main.c    ****    GPIO_NOPULL
 368:Src/main.c    ****    };
 369:Src/main.c    ****    HAL_GPIO_Init(GPIOA, &gpio_init);
 370:Src/main.c    ****    }
 371:Src/main.c    ****    */
 372:Src/main.c    **** 
 373:Src/main.c    **** void PrintDistance()
 374:Src/main.c    **** {
 375:Src/main.c    **** 	char dist[32] = "";
ARM GAS  /tmp/ccvXlRfF.s 			page 8


 376:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 377:Src/main.c    **** 	USART_SendString(dist);
 378:Src/main.c    **** }
 379:Src/main.c    **** 
 380:Src/main.c    **** volatile uint32_t risingEdgeTime;
 381:Src/main.c    **** volatile uint32_t fallingEdgeTime;
 382:Src/main.c    **** volatile uint32_t pulseWidth = 0;
 383:Src/main.c    **** // Define constants
 384:Src/main.c    **** 
 385:Src/main.c    **** // Declare global variables
 386:Src/main.c    **** TIM_HandleTypeDef htim155;
 387:Src/main.c    **** uint32_t pulse_start_time = 0;
 388:Src/main.c    **** uint32_t pulse_end_time = 0;
 389:Src/main.c    **** 
 390:Src/main.c    **** uint32_t GetUltrasonic(ultrasonic_pins_t* ultrasonic){
 391:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 392:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_SET);
 393:Src/main.c    **** 	while (__HAL_TIM_GET_COUNTER (&htim15) < 10){
 394:Src/main.c    **** 		;  // wait for 10 us
 395:Src/main.c    **** 	}
 396:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_RESET);
 397:Src/main.c    **** 
 398:Src/main.c    **** 	pMillis = HAL_GetTick();
 399:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 400:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 10 >  HA
 401:Src/main.c    **** 	}
 402:Src/main.c    **** 	uint32_t val1 = __HAL_TIM_GET_COUNTER (&htim15);
 403:Src/main.c    **** 
 404:Src/main.c    **** 	pMillis = HAL_GetTick();
 405:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 50 > HAL_
 406:Src/main.c    **** 	}
 407:Src/main.c    **** 
 408:Src/main.c    **** 	uint32_t val2 = __HAL_TIM_GET_COUNTER (&htim15);
 409:Src/main.c    **** 
 410:Src/main.c    **** 	return (val2-val1)/470;
 411:Src/main.c    **** }
 412:Src/main.c    **** /* USER CODE END 0 */
 413:Src/main.c    **** 
 414:Src/main.c    **** /**
 415:Src/main.c    ****  * @brief  The application entry point.
 416:Src/main.c    ****  * @retval int
 417:Src/main.c    ****  */
 418:Src/main.c    **** 
 419:Src/main.c    **** //doesn't actually init tim15 but don't worry about it....
 420:Src/main.c    **** /*
 421:Src/main.c    **** void TIM15_Init(){
 422:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 423:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 424:Src/main.c    **** 	TIM_IC_InitTypeDef sConfigIC = {0};
 425:Src/main.c    **** 
 426:Src/main.c    **** 	htim155.Instance = TIM15;
 427:Src/main.c    **** 	htim155.Init.Prescaler = 14;
 428:Src/main.c    **** 	htim155.Init.CounterMode = TIM_COUNTERMODE_UP;
 429:Src/main.c    **** 	htim155.Init.Period = 0xFFFF;
 430:Src/main.c    **** 	htim155.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 431:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim155) != HAL_OK)
 432:Src/main.c    **** 	{
ARM GAS  /tmp/ccvXlRfF.s 			page 9


 433:Src/main.c    **** 		Error_Handler();
 434:Src/main.c    **** 	}
 435:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 436:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim155, &sClockSourceConfig) != HAL_OK)
 437:Src/main.c    **** 	{
 438:Src/main.c    **** 		Error_Handler();
 439:Src/main.c    **** 	}
 440:Src/main.c    **** 	if (HAL_TIM_IC_Init(&htim155) != HAL_OK)
 441:Src/main.c    **** 	{
 442:Src/main.c    **** 		Error_Handler();
 443:Src/main.c    **** 	}
 444:Src/main.c    **** 	sConfigIC.ICPolarity = TIM_ICPOLARITY_BOTHEDGE;
 445:Src/main.c    **** 	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 446:Src/main.c    **** 	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 447:Src/main.c    **** 	sConfigIC.ICFilter = 0;
 448:Src/main.c    **** 	if (HAL_TIM_IC_ConfigChannel(&htim155, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 449:Src/main.c    **** 	{
 450:Src/main.c    **** 		Error_Handler();
 451:Src/main.c    **** 	}
 452:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 453:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 454:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim155, &sMasterConfig) != HAL_OK)
 455:Src/main.c    **** 	{
 456:Src/main.c    **** 		Error_Handler();
 457:Src/main.c    **** 	}
 458:Src/main.c    **** }
 459:Src/main.c    **** */
 460:Src/main.c    **** 
 461:Src/main.c    **** int main(void)
 462:Src/main.c    **** {
 463:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 464:Src/main.c    **** 	SystemClock_Config();
 465:Src/main.c    **** 
 466:Src/main.c    **** 	//USART Initalizations
 467:Src/main.c    **** 	GPIO_AF_Init();
 468:Src/main.c    **** 	USART_Init();
 469:Src/main.c    **** 
 470:Src/main.c    **** 	motor_init();                           // Initialize motor code
 471:Src/main.c    **** 
 472:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 473:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 474:Src/main.c    **** 
 475:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 476:Src/main.c    **** 
 477:Src/main.c    **** 	//PWM and Ultrasonic Initalizations
 478:Src/main.c    **** 	MX_GPIO_Init();
 479:Src/main.c    **** 	/* TIM15_Init(); */
 480:Src/main.c    **** 	MX_TIM15_Init(); 
 481:Src/main.c    **** 
 482:Src/main.c    **** 	/* HAL_TIM_Base_Start(&htim15); */
 483:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 484:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 485:Src/main.c    **** 
 486:Src/main.c    **** 	while (1) {
 487:Src/main.c    **** 		if(incomingCommand)
 488:Src/main.c    **** 		{
 489:Src/main.c    **** 			if(command[0] != 'w' &&
ARM GAS  /tmp/ccvXlRfF.s 			page 10


 490:Src/main.c    **** 					command[0] != 'a' &&
 491:Src/main.c    **** 					command[0] != 'd'){
 492:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 493:Src/main.c    **** 			}
 494:Src/main.c    **** 			if(command[1])
 495:Src/main.c    **** 			{
 496:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 497:Src/main.c    **** 			}
 498:Src/main.c    **** 		}
 499:Src/main.c    **** 		/*
 500:Src/main.c    **** 		   if(incomingCommand){
 501:Src/main.c    **** 		   if(command[2]){
 502:Src/main.c    **** 		   uint8_t tens = command[1] - '0';
 503:Src/main.c    **** 		   uint8_t huns = command[2] - '0';
 504:Src/main.c    **** 		   ProcessCommandPWM(command[0], 10*tens + huns);
 505:Src/main.c    **** 		   }
 506:Src/main.c    **** 		   }
 507:Src/main.c    **** 		   */
 508:Src/main.c    **** 		HAL_Delay(500);
 509:Src/main.c    **** 	}
 510:Src/main.c    **** }
 511:Src/main.c    **** 
 512:Src/main.c    **** /**
 513:Src/main.c    ****  * @brief System Clock Configuration
 514:Src/main.c    ****  * @retval None
 515:Src/main.c    ****  */
 516:Src/main.c    **** void SystemClock_Config(void)
 517:Src/main.c    **** {
 518:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 519:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 520:Src/main.c    **** 
 521:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 522:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 523:Src/main.c    **** 	 */
 524:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 525:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 526:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 527:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 528:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 529:Src/main.c    **** 	{
 530:Src/main.c    **** 		Error_Handler();
 531:Src/main.c    **** 	}
 532:Src/main.c    **** 
 533:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 534:Src/main.c    **** 	*/
 535:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 536:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 537:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 538:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 539:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 540:Src/main.c    **** 
 541:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 542:Src/main.c    **** 	{
 543:Src/main.c    **** 		Error_Handler();
 544:Src/main.c    **** 	}
 545:Src/main.c    **** }
 546:Src/main.c    **** 
ARM GAS  /tmp/ccvXlRfF.s 			page 11


 547:Src/main.c    **** /**
 548:Src/main.c    ****  * @brief TIM15 Initialization Function
 549:Src/main.c    ****  * @param None
 550:Src/main.c    ****  * @retval None
 551:Src/main.c    ****  */
 552:Src/main.c    **** static void MX_TIM15_Init(void)
 553:Src/main.c    **** {
 554:Src/main.c    **** 
 555:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 556:Src/main.c    **** 
 557:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 558:Src/main.c    **** 
 559:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 560:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 561:Src/main.c    **** 
 562:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 563:Src/main.c    **** 
 564:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 565:Src/main.c    ****   htim15.Instance = TIM15;
 566:Src/main.c    ****   htim15.Init.Prescaler = 200;
 567:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 568:Src/main.c    ****   htim15.Init.Period = 65535;
 569:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 570:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 571:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 572:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 573:Src/main.c    ****   {
 574:Src/main.c    ****     Error_Handler();
 575:Src/main.c    ****   }
 576:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 577:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 578:Src/main.c    ****   {
 579:Src/main.c    ****     Error_Handler();
 580:Src/main.c    ****   }
 581:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 582:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 583:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 584:Src/main.c    ****   {
 585:Src/main.c    ****     Error_Handler();
 586:Src/main.c    ****   }
 587:Src/main.c    **** 
 588:Src/main.c    ****   __HAL_RCC_TIM15_CLK_ENABLE();
 589:Src/main.c    **** 
 590:Src/main.c    **** 	HAL_TIM_Base_Start(&htim15);
 591:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 592:Src/main.c    **** 
 593:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 594:Src/main.c    **** 
 595:Src/main.c    **** }
 596:Src/main.c    **** 
 597:Src/main.c    **** /**
 598:Src/main.c    ****  * @brief GPIO Initialization Function
 599:Src/main.c    ****  * @param None
 600:Src/main.c    ****  * @retval None
 601:Src/main.c    ****  */
 602:Src/main.c    **** static void MX_GPIO_Init(void)
 603:Src/main.c    **** {
ARM GAS  /tmp/ccvXlRfF.s 			page 12


  26              		.loc 1 603 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 604:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 604 2 view .LVU1
  39              		.loc 1 604 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 605:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 606:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 607:Src/main.c    **** 
 608:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 609:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 609 2 is_stmt 1 view .LVU3
  46              	.LBB8:
  47              		.loc 1 609 2 view .LVU4
  48              		.loc 1 609 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 609 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 609 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE8:
  62              		.loc 1 609 2 view .LVU8
 610:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 611:Src/main.c    **** 
 612:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 613:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 613 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
 614:Src/main.c    **** 
 615:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
ARM GAS  /tmp/ccvXlRfF.s 			page 13


 616:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 616 2 view .LVU10
  72              		.loc 1 616 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 617:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 617 2 is_stmt 1 view .LVU12
  76              		.loc 1 617 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 618:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 618 2 is_stmt 1 view .LVU14
  79              		.loc 1 618 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 619:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 619 2 is_stmt 1 view .LVU16
  83              		.loc 1 619 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 620:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 620 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 621:Src/main.c    **** 
 622:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 623:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 624:Src/main.c    **** }
  90              		.loc 1 624 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE58:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 82 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 82 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccvXlRfF.s 			page 14


 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 85 2 is_stmt 1 view .LVU22
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 85 19 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 131              		.loc 1 85 19 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  90:Src/main.c    **** }
 137              		.loc 1 90 2 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  91:Src/main.c    **** 
 142              		.loc 1 91 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  91:Src/main.c    **** 
 146              		.loc 1 91 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  98:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 98 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccvXlRfF.s 			page 15


 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 99 2 view .LVU29
 177              	.LBB9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 99 2 view .LVU30
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 99 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 99 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 99 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE9:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 99 2 view .LVU34
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 100 2 view .LVU35
 195              	.LBB10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 100 2 view .LVU36
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 100 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 100 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 100 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE10:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 100 2 view .LVU40
 101:Src/main.c    **** 
 211              		.loc 1 101 2 view .LVU41
 212              	.LBB11:
 101:Src/main.c    **** 
 213              		.loc 1 101 2 view .LVU42
ARM GAS  /tmp/ccvXlRfF.s 			page 16


 101:Src/main.c    **** 
 214              		.loc 1 101 2 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
 101:Src/main.c    **** 
 220              		.loc 1 101 2 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
 101:Src/main.c    **** 
 224              		.loc 1 101 2 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
 226              	.LBE11:
 101:Src/main.c    **** 
 227              		.loc 1 101 2 view .LVU46
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 104 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
 105:Src/main.c    **** 
 234              		.loc 1 105 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 108 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 109 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 110 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 258              		.loc 1 111 2 view .LVU52
 259 006e 2100     		movs	r1, r4
 260 0070 4C31     		adds	r1, r1, #76
ARM GAS  /tmp/ccvXlRfF.s 			page 17


 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 112:Src/main.c    **** 
 264              		.loc 1 112 2 view .LVU53
 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 115 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 116 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 117 2 view .LVU56
 283 0096 2100     		movs	r1, r4
 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 118 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 119:Src/main.c    **** 
 294              		.loc 1 119 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 122 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 123:Src/main.c    **** 
 306              		.loc 1 123 2 view .LVU60
 307 00be 2100     		movs	r1, r4
 308 00c0 1C31     		adds	r1, r1, #28
 309 00c2 A069     		ldr	r0, [r4, #24]
ARM GAS  /tmp/ccvXlRfF.s 			page 18


 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 126 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 127:Src/main.c    **** }
 318              		.loc 1 127 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL23:
 128:Src/main.c    **** 
 324              		.loc 1 128 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 133:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 133 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 362              		.loc 1 134 2 view .LVU65
 363              	.LBB12:
ARM GAS  /tmp/ccvXlRfF.s 			page 19


 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 134 2 view .LVU66
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 134 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 134 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 134 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE12:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 134 2 view .LVU70
 135:Src/main.c    **** 
 380              		.loc 1 135 2 view .LVU71
 135:Src/main.c    **** 
 381              		.loc 1 135 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 135:Src/main.c    **** 
 383              		.loc 1 135 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 138 2 is_stmt 1 view .LVU74
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 138 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 138 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 139:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 139 2 is_stmt 1 view .LVU77
 139:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 139 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 139:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 139 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 139:Src/main.c    **** 												//use with the BT adapter
 403              		.loc 1 139 14 view .LVU80
 404 0034 E060     		str	r0, [r4, #12]
 143:Src/main.c    **** 
ARM GAS  /tmp/ccvXlRfF.s 			page 20


 405              		.loc 1 143 2 is_stmt 1 view .LVU81
 143:Src/main.c    **** 
 406              		.loc 1 143 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 143:Src/main.c    **** 
 408              		.loc 1 143 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 146:Src/main.c    **** 
 412              		.loc 1 146 2 is_stmt 1 view .LVU84
 146:Src/main.c    **** 
 413              		.loc 1 146 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 146:Src/main.c    **** 
 415              		.loc 1 146 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 149:Src/main.c    **** 
 419              		.loc 1 149 2 is_stmt 1 view .LVU87
 149:Src/main.c    **** 
 420              		.loc 1 149 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
 149:Src/main.c    **** 
 422              		.loc 1 149 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 152:Src/main.c    **** }
 426              		.loc 1 152 2 is_stmt 1 view .LVU90
 152:Src/main.c    **** }
 427              		.loc 1 152 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 152:Src/main.c    **** }
 429              		.loc 1 152 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 153:Src/main.c    **** 
 433              		.loc 1 153 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
 448              		.global	USART_SendChar
 449              		.syntax unified
 450              		.code	16
ARM GAS  /tmp/ccvXlRfF.s 			page 21


 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 160:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 160 32 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 161:Src/main.c    **** 		;
 462              		.loc 1 161 8 discriminator 1 view .LVU95
 161:Src/main.c    **** 		;
 463              		.loc 1 161 16 is_stmt 0 discriminator 1 view .LVU96
 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 161:Src/main.c    **** 		;
 466              		.loc 1 161 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 164:Src/main.c    **** }
 469              		.loc 1 164 2 is_stmt 1 view .LVU98
 164:Src/main.c    **** }
 470              		.loc 1 164 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
 165:Src/main.c    **** 
 473              		.loc 1 165 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 172:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 172 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 172:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 172 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
ARM GAS  /tmp/ccvXlRfF.s 			page 22


 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 173 2 is_stmt 1 view .LVU103
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 505              		.loc 1 173 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 174:Src/main.c    **** 		p_string++;
 509              		.loc 1 174 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 175:Src/main.c    **** 	}
 512              		.loc 1 175 3 view .LVU106
 175:Src/main.c    **** 	}
 513              		.loc 1 175 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 173 18 is_stmt 1 view .LVU108
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 173 8 is_stmt 0 view .LVU109
 519 000c 2078     		ldrb	r0, [r4]
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 173 18 view .LVU110
 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 177:Src/main.c    **** }
 523              		.loc 1 177 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 178:Src/main.c    **** 
 526              		.loc 1 178 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 178:Src/main.c    **** 
 529              		.loc 1 178 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
 546              	.LFB48:
 183:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 547              		.loc 1 183 20 is_stmt 1 view -0
ARM GAS  /tmp/ccvXlRfF.s 			page 23


 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 184 2 view .LVU115
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 184 10 is_stmt 0 view .LVU116
 560 0004 094B     		ldr	r3, .L22
 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 185:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 185 2 is_stmt 1 view .LVU117
 567 0010 0748     		ldr	r0, .L22+4
 568 0012 0322     		movs	r2, #3
 569 0014 0021     		movs	r1, #0
 570 0016 FFF7FEFF 		bl	memset
 571              	.LVL33:
 186:Src/main.c    **** 	USART_SendString(prompt);
 572              		.loc 1 186 2 view .LVU118
 186:Src/main.c    **** 	USART_SendString(prompt);
 573              		.loc 1 186 18 is_stmt 0 view .LVU119
 574 001a 064B     		ldr	r3, .L22+8
 575 001c 0022     		movs	r2, #0
 576 001e 1A70     		strb	r2, [r3]
 187:Src/main.c    **** }
 577              		.loc 1 187 2 is_stmt 1 view .LVU120
 578 0020 6846     		mov	r0, sp
 579 0022 FFF7FEFF 		bl	USART_SendString
 580              	.LVL34:
 188:Src/main.c    **** 
 581              		.loc 1 188 1 is_stmt 0 view .LVU121
 582 0026 03B0     		add	sp, sp, #12
 583              		@ sp needed
 584 0028 00BD     		pop	{pc}
 585              	.L23:
 586 002a C046     		.align	2
 587              	.L22:
 588 002c 00000000 		.word	.LC21
 589 0030 00000000 		.word	command
 590 0034 00000000 		.word	incomingCommand
 591              		.cfi_endproc
 592              	.LFE48:
 594              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 595              		.align	2
 596              	.LC25:
 597 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 597      616E6420 
ARM GAS  /tmp/ccvXlRfF.s 			page 24


 597      746F6F20 
 597      6C6F6E67 
 597      210A00
 598              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 599              		.align	1
 600              		.global	USART3_4_IRQHandler
 601              		.syntax unified
 602              		.code	16
 603              		.thumb_func
 605              	USART3_4_IRQHandler:
 606              	.LFB49:
 190:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 607              		.loc 1 190 27 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 24
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 30B5     		push	{r4, r5, lr}
 612              	.LCFI11:
 613              		.cfi_def_cfa_offset 12
 614              		.cfi_offset 4, -12
 615              		.cfi_offset 5, -8
 616              		.cfi_offset 14, -4
 617 0002 87B0     		sub	sp, sp, #28
 618              	.LCFI12:
 619              		.cfi_def_cfa_offset 40
 191:Src/main.c    **** 	incomingCommand = 1;
 620              		.loc 1 191 2 view .LVU123
 191:Src/main.c    **** 	incomingCommand = 1;
 621              		.loc 1 191 10 is_stmt 0 view .LVU124
 622 0004 01AA     		add	r2, sp, #4
 623 0006 164B     		ldr	r3, .L31
 624 0008 1800     		movs	r0, r3
 625 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 626 000c 38C2     		stmia	r2!, {r3, r4, r5}
 627 000e 0368     		ldr	r3, [r0]
 628 0010 1360     		str	r3, [r2]
 629 0012 8388     		ldrh	r3, [r0, #4]
 630 0014 9380     		strh	r3, [r2, #4]
 631 0016 8379     		ldrb	r3, [r0, #6]
 632 0018 9371     		strb	r3, [r2, #6]
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 633              		.loc 1 192 2 is_stmt 1 view .LVU125
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 634              		.loc 1 192 18 is_stmt 0 view .LVU126
 635 001a 124B     		ldr	r3, .L31+4
 636 001c 0122     		movs	r2, #1
 637 001e 1A70     		strb	r2, [r3]
 193:Src/main.c    **** 		;
 638              		.loc 1 193 2 is_stmt 1 view .LVU127
 639              	.L25:
 193:Src/main.c    **** 		;
 640              		.loc 1 193 8 discriminator 1 view .LVU128
 193:Src/main.c    **** 		;
 641              		.loc 1 193 16 is_stmt 0 discriminator 1 view .LVU129
 642 0020 114B     		ldr	r3, .L31+8
 643 0022 DB69     		ldr	r3, [r3, #28]
 193:Src/main.c    **** 		;
ARM GAS  /tmp/ccvXlRfF.s 			page 25


 644              		.loc 1 193 8 discriminator 1 view .LVU130
 645 0024 9B06     		lsls	r3, r3, #26
 646 0026 FBD5     		bpl	.L25
 195:Src/main.c    **** 		if(command[1]){
 647              		.loc 1 195 2 is_stmt 1 view .LVU131
 195:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 195 12 is_stmt 0 view .LVU132
 649 0028 104B     		ldr	r3, .L31+12
 650 002a 1B78     		ldrb	r3, [r3]
 195:Src/main.c    **** 		if(command[1]){
 651              		.loc 1 195 4 view .LVU133
 652 002c 002B     		cmp	r3, #0
 653 002e 0FD0     		beq	.L26
 196:Src/main.c    **** 			USART_SendString(err);
 654              		.loc 1 196 3 is_stmt 1 view .LVU134
 196:Src/main.c    **** 			USART_SendString(err);
 655              		.loc 1 196 13 is_stmt 0 view .LVU135
 656 0030 0E4B     		ldr	r3, .L31+12
 657 0032 5B78     		ldrb	r3, [r3, #1]
 196:Src/main.c    **** 			USART_SendString(err);
 658              		.loc 1 196 5 view .LVU136
 659 0034 002B     		cmp	r3, #0
 660 0036 05D1     		bne	.L30
 201:Src/main.c    **** 		}
 661              		.loc 1 201 4 is_stmt 1 view .LVU137
 201:Src/main.c    **** 		}
 662              		.loc 1 201 23 is_stmt 0 view .LVU138
 663 0038 0B4B     		ldr	r3, .L31+8
 664 003a 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** 		}
 665              		.loc 1 201 15 view .LVU139
 666 003c DBB2     		uxtb	r3, r3
 667 003e 0B4A     		ldr	r2, .L31+12
 668 0040 5370     		strb	r3, [r2, #1]
 669 0042 0AE0     		b	.L24
 670              	.L30:
 197:Src/main.c    **** 			ClearCommand();
 671              		.loc 1 197 4 is_stmt 1 view .LVU140
 672 0044 01A8     		add	r0, sp, #4
 673 0046 FFF7FEFF 		bl	USART_SendString
 674              	.LVL35:
 198:Src/main.c    **** 		}
 675              		.loc 1 198 4 view .LVU141
 676 004a FFF7FEFF 		bl	ClearCommand
 677              	.LVL36:
 678 004e 04E0     		b	.L24
 679              	.L26:
 205:Src/main.c    **** 	}
 680              		.loc 1 205 3 view .LVU142
 205:Src/main.c    **** 	}
 681              		.loc 1 205 22 is_stmt 0 view .LVU143
 682 0050 054B     		ldr	r3, .L31+8
 683 0052 9B8C     		ldrh	r3, [r3, #36]
 205:Src/main.c    **** 	}
 684              		.loc 1 205 14 view .LVU144
 685 0054 DBB2     		uxtb	r3, r3
 686 0056 054A     		ldr	r2, .L31+12
ARM GAS  /tmp/ccvXlRfF.s 			page 26


 687 0058 1370     		strb	r3, [r2]
 688              	.L24:
 207:Src/main.c    **** 
 689              		.loc 1 207 1 view .LVU145
 690 005a 07B0     		add	sp, sp, #28
 691              		@ sp needed
 692 005c 30BD     		pop	{r4, r5, pc}
 693              	.L32:
 694 005e C046     		.align	2
 695              	.L31:
 696 0060 00000000 		.word	.LC25
 697 0064 00000000 		.word	incomingCommand
 698 0068 00480040 		.word	1073760256
 699 006c 00000000 		.word	command
 700              		.cfi_endproc
 701              	.LFE49:
 703              		.section	.rodata.Proceed.str1.4,"aMS",%progbits,1
 704              		.align	2
 705              	.LC29:
 706 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 706      79657420 
 706      696D706C 
 706      656D656E 
 706      7465640A 
 707              		.section	.text.Proceed,"ax",%progbits
 708              		.align	1
 709              		.global	Proceed
 710              		.syntax unified
 711              		.code	16
 712              		.thumb_func
 714              	Proceed:
 715              	.LFB51:
 223:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 716              		.loc 1 223 15 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720 0000 10B5     		push	{r4, lr}
 721              	.LCFI13:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 4, -8
 724              		.cfi_offset 14, -4
 224:Src/main.c    **** 	USART_SendString(err);
 725              		.loc 1 224 2 view .LVU147
 726              	.LVL37:
 225:Src/main.c    **** }
 727              		.loc 1 225 2 view .LVU148
 728 0002 0248     		ldr	r0, .L34
 729 0004 FFF7FEFF 		bl	USART_SendString
 730              	.LVL38:
 226:Src/main.c    **** 
 731              		.loc 1 226 1 is_stmt 0 view .LVU149
 732              		@ sp needed
 733 0008 10BD     		pop	{r4, pc}
 734              	.L35:
 735 000a C046     		.align	2
 736              	.L34:
ARM GAS  /tmp/ccvXlRfF.s 			page 27


 737 000c 00000000 		.word	.LC29
 738              		.cfi_endproc
 739              	.LFE51:
 741              		.global	__aeabi_f2d
 742              		.section	.rodata.PrintDistance.str1.4,"aMS",%progbits,1
 743              		.align	2
 744              	.LC31:
 745 0000 25660A00 		.ascii	"%f\012\000"
 746              		.section	.text.PrintDistance,"ax",%progbits
 747              		.align	1
 748              		.global	PrintDistance
 749              		.syntax unified
 750              		.code	16
 751              		.thumb_func
 753              	PrintDistance:
 754              	.LFB53:
 374:Src/main.c    **** 	char dist[32] = "";
 755              		.loc 1 374 1 is_stmt 1 view -0
 756              		.cfi_startproc
 757              		@ args = 0, pretend = 0, frame = 32
 758              		@ frame_needed = 0, uses_anonymous_args = 0
 759 0000 00B5     		push	{lr}
 760              	.LCFI14:
 761              		.cfi_def_cfa_offset 4
 762              		.cfi_offset 14, -4
 763 0002 89B0     		sub	sp, sp, #36
 764              	.LCFI15:
 765              		.cfi_def_cfa_offset 40
 375:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 766              		.loc 1 375 2 view .LVU151
 375:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 767              		.loc 1 375 7 is_stmt 0 view .LVU152
 768 0004 0023     		movs	r3, #0
 769 0006 0093     		str	r3, [sp]
 770 0008 1C22     		movs	r2, #28
 771 000a 0021     		movs	r1, #0
 772 000c 01A8     		add	r0, sp, #4
 773 000e FFF7FEFF 		bl	memset
 774              	.LVL39:
 376:Src/main.c    **** 	USART_SendString(dist);
 775              		.loc 1 376 2 is_stmt 1 view .LVU153
 376:Src/main.c    **** 	USART_SendString(dist);
 776              		.loc 1 376 24 is_stmt 0 view .LVU154
 777 0012 FFF7FEFF 		bl	get_distance
 778              	.LVL40:
 376:Src/main.c    **** 	USART_SendString(dist);
 779              		.loc 1 376 2 view .LVU155
 780 0016 FFF7FEFF 		bl	__aeabi_f2d
 781              	.LVL41:
 782 001a 0200     		movs	r2, r0
 783 001c 0B00     		movs	r3, r1
 784 001e 0449     		ldr	r1, .L37
 785 0020 6846     		mov	r0, sp
 786 0022 FFF7FEFF 		bl	sprintf
 787              	.LVL42:
 377:Src/main.c    **** }
 788              		.loc 1 377 2 is_stmt 1 view .LVU156
ARM GAS  /tmp/ccvXlRfF.s 			page 28


 789 0026 6846     		mov	r0, sp
 790 0028 FFF7FEFF 		bl	USART_SendString
 791              	.LVL43:
 378:Src/main.c    **** 
 792              		.loc 1 378 1 is_stmt 0 view .LVU157
 793 002c 09B0     		add	sp, sp, #36
 794              		@ sp needed
 795 002e 00BD     		pop	{pc}
 796              	.L38:
 797              		.align	2
 798              	.L37:
 799 0030 00000000 		.word	.LC31
 800              		.cfi_endproc
 801              	.LFE53:
 803              		.section	.text.GetUltrasonic,"ax",%progbits
 804              		.align	1
 805              		.global	GetUltrasonic
 806              		.syntax unified
 807              		.code	16
 808              		.thumb_func
 810              	GetUltrasonic:
 811              	.LVL44:
 812              	.LFB54:
 390:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 813              		.loc 1 390 54 is_stmt 1 view -0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 390:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 817              		.loc 1 390 54 is_stmt 0 view .LVU159
 818 0000 70B5     		push	{r4, r5, r6, lr}
 819              	.LCFI16:
 820              		.cfi_def_cfa_offset 16
 821              		.cfi_offset 4, -16
 822              		.cfi_offset 5, -12
 823              		.cfi_offset 6, -8
 824              		.cfi_offset 14, -4
 825 0002 0400     		movs	r4, r0
 391:Src/main.c    **** 	HAL_GPIO_WritePin(ultrasonic->trig.gpio, ultrasonic->trig.pin.Pin, GPIO_PIN_SET);
 826              		.loc 1 391 2 is_stmt 1 view .LVU160
 827 0004 224B     		ldr	r3, .L45
 828 0006 1B68     		ldr	r3, [r3]
 829 0008 0022     		movs	r2, #0
 830 000a 5A62     		str	r2, [r3, #36]
 392:Src/main.c    **** 	while (__HAL_TIM_GET_COUNTER (&htim15) < 10){
 831              		.loc 1 392 2 view .LVU161
 832 000c 818B     		ldrh	r1, [r0, #28]
 833 000e 8069     		ldr	r0, [r0, #24]
 834              	.LVL45:
 392:Src/main.c    **** 	while (__HAL_TIM_GET_COUNTER (&htim15) < 10){
 835              		.loc 1 392 2 is_stmt 0 view .LVU162
 836 0010 0132     		adds	r2, r2, #1
 837 0012 FFF7FEFF 		bl	HAL_GPIO_WritePin
 838              	.LVL46:
 393:Src/main.c    **** 		;  // wait for 10 us
 839              		.loc 1 393 2 is_stmt 1 view .LVU163
 840              	.L40:
ARM GAS  /tmp/ccvXlRfF.s 			page 29


 394:Src/main.c    **** 	}
 841              		.loc 1 394 3 discriminator 1 view .LVU164
 393:Src/main.c    **** 		;  // wait for 10 us
 842              		.loc 1 393 41 discriminator 1 view .LVU165
 393:Src/main.c    **** 		;  // wait for 10 us
 843              		.loc 1 393 9 is_stmt 0 discriminator 1 view .LVU166
 844 0016 1E4B     		ldr	r3, .L45
 845 0018 1B68     		ldr	r3, [r3]
 846 001a 5B6A     		ldr	r3, [r3, #36]
 393:Src/main.c    **** 		;  // wait for 10 us
 847              		.loc 1 393 41 discriminator 1 view .LVU167
 848 001c 092B     		cmp	r3, #9
 849 001e FAD9     		bls	.L40
 396:Src/main.c    **** 
 850              		.loc 1 396 2 is_stmt 1 view .LVU168
 851 0020 A18B     		ldrh	r1, [r4, #28]
 852 0022 A069     		ldr	r0, [r4, #24]
 853 0024 0022     		movs	r2, #0
 854 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 855              	.LVL47:
 398:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 856              		.loc 1 398 2 view .LVU169
 398:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 857              		.loc 1 398 12 is_stmt 0 view .LVU170
 858 002a FFF7FEFF 		bl	HAL_GetTick
 859              	.LVL48:
 398:Src/main.c    **** 	__HAL_TIM_SET_COUNTER(&htim15, 0);
 860              		.loc 1 398 10 view .LVU171
 861 002e 194B     		ldr	r3, .L45+4
 862 0030 1860     		str	r0, [r3]
 399:Src/main.c    **** 	while (!(HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 10 >  HA
 863              		.loc 1 399 2 is_stmt 1 view .LVU172
 864 0032 174B     		ldr	r3, .L45
 865 0034 1B68     		ldr	r3, [r3]
 866 0036 0022     		movs	r2, #0
 867 0038 5A62     		str	r2, [r3, #36]
 400:Src/main.c    **** 	}
 868              		.loc 1 400 2 view .LVU173
 869              	.L42:
 401:Src/main.c    **** 	uint32_t val1 = __HAL_TIM_GET_COUNTER (&htim15);
 870              		.loc 1 401 2 discriminator 2 view .LVU174
 400:Src/main.c    **** 	}
 871              		.loc 1 400 79 discriminator 2 view .LVU175
 400:Src/main.c    **** 	}
 872              		.loc 1 400 11 is_stmt 0 discriminator 2 view .LVU176
 873 003a A188     		ldrh	r1, [r4, #4]
 874 003c 2068     		ldr	r0, [r4]
 875 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 876              	.LVL49:
 400:Src/main.c    **** 	}
 877              		.loc 1 400 79 discriminator 2 view .LVU177
 878 0042 0028     		cmp	r0, #0
 879 0044 06D1     		bne	.L41
 400:Src/main.c    **** 	}
 880              		.loc 1 400 90 discriminator 1 view .LVU178
 881 0046 134B     		ldr	r3, .L45+4
 882 0048 1D68     		ldr	r5, [r3]
ARM GAS  /tmp/ccvXlRfF.s 			page 30


 883 004a 0A35     		adds	r5, r5, #10
 400:Src/main.c    **** 	}
 884              		.loc 1 400 98 discriminator 1 view .LVU179
 885 004c FFF7FEFF 		bl	HAL_GetTick
 886              	.LVL50:
 400:Src/main.c    **** 	}
 887              		.loc 1 400 79 discriminator 1 view .LVU180
 888 0050 8542     		cmp	r5, r0
 889 0052 F2D8     		bhi	.L42
 890              	.L41:
 402:Src/main.c    **** 
 891              		.loc 1 402 2 is_stmt 1 view .LVU181
 402:Src/main.c    **** 
 892              		.loc 1 402 18 is_stmt 0 view .LVU182
 893 0054 0E4B     		ldr	r3, .L45
 894 0056 1B68     		ldr	r3, [r3]
 402:Src/main.c    **** 
 895              		.loc 1 402 11 view .LVU183
 896 0058 5E6A     		ldr	r6, [r3, #36]
 897              	.LVL51:
 404:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 50 > HAL_
 898              		.loc 1 404 2 is_stmt 1 view .LVU184
 404:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 50 > HAL_
 899              		.loc 1 404 12 is_stmt 0 view .LVU185
 900 005a FFF7FEFF 		bl	HAL_GetTick
 901              	.LVL52:
 404:Src/main.c    **** 	while ((HAL_GPIO_ReadPin (ultrasonic->echo.gpio, ultrasonic->echo.pin.Pin)) && pMillis + 50 > HAL_
 902              		.loc 1 404 10 view .LVU186
 903 005e 0D4B     		ldr	r3, .L45+4
 904 0060 1860     		str	r0, [r3]
 405:Src/main.c    **** 	}
 905              		.loc 1 405 2 is_stmt 1 view .LVU187
 906              	.L44:
 406:Src/main.c    **** 
 907              		.loc 1 406 2 discriminator 2 view .LVU188
 405:Src/main.c    **** 	}
 908              		.loc 1 405 78 discriminator 2 view .LVU189
 405:Src/main.c    **** 	}
 909              		.loc 1 405 10 is_stmt 0 discriminator 2 view .LVU190
 910 0062 A188     		ldrh	r1, [r4, #4]
 911 0064 2068     		ldr	r0, [r4]
 912 0066 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 913              	.LVL53:
 405:Src/main.c    **** 	}
 914              		.loc 1 405 78 discriminator 2 view .LVU191
 915 006a 0028     		cmp	r0, #0
 916 006c 06D0     		beq	.L43
 405:Src/main.c    **** 	}
 917              		.loc 1 405 89 discriminator 1 view .LVU192
 918 006e 094B     		ldr	r3, .L45+4
 919 0070 1D68     		ldr	r5, [r3]
 920 0072 3235     		adds	r5, r5, #50
 405:Src/main.c    **** 	}
 921              		.loc 1 405 96 discriminator 1 view .LVU193
 922 0074 FFF7FEFF 		bl	HAL_GetTick
 923              	.LVL54:
 405:Src/main.c    **** 	}
ARM GAS  /tmp/ccvXlRfF.s 			page 31


 924              		.loc 1 405 78 discriminator 1 view .LVU194
 925 0078 8542     		cmp	r5, r0
 926 007a F2D8     		bhi	.L44
 927              	.L43:
 408:Src/main.c    **** 
 928              		.loc 1 408 2 is_stmt 1 view .LVU195
 408:Src/main.c    **** 
 929              		.loc 1 408 18 is_stmt 0 view .LVU196
 930 007c 044B     		ldr	r3, .L45
 931 007e 1B68     		ldr	r3, [r3]
 408:Src/main.c    **** 
 932              		.loc 1 408 11 view .LVU197
 933 0080 586A     		ldr	r0, [r3, #36]
 934              	.LVL55:
 410:Src/main.c    **** }
 935              		.loc 1 410 2 is_stmt 1 view .LVU198
 410:Src/main.c    **** }
 936              		.loc 1 410 14 is_stmt 0 view .LVU199
 937 0082 801B     		subs	r0, r0, r6
 938              	.LVL56:
 410:Src/main.c    **** }
 939              		.loc 1 410 20 view .LVU200
 940 0084 EB21     		movs	r1, #235
 941 0086 4900     		lsls	r1, r1, #1
 942 0088 FFF7FEFF 		bl	__aeabi_uidiv
 943              	.LVL57:
 411:Src/main.c    **** /* USER CODE END 0 */
 944              		.loc 1 411 1 view .LVU201
 945              		@ sp needed
 946              	.LVL58:
 947              	.LVL59:
 411:Src/main.c    **** /* USER CODE END 0 */
 948              		.loc 1 411 1 view .LVU202
 949 008c 70BD     		pop	{r4, r5, r6, pc}
 950              	.L46:
 951 008e C046     		.align	2
 952              	.L45:
 953 0090 00000000 		.word	htim15
 954 0094 00000000 		.word	pMillis
 955              		.cfi_endproc
 956              	.LFE54:
 958              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 959              		.align	2
 960              	.LC36:
 961 0000 556C7472 		.ascii	"Ultrasonic left: %u %u %u\012\000"
 961      61736F6E 
 961      6963206C 
 961      6566743A 
 961      20257520 
 962 001b 00       		.align	2
 963              	.LC39:
 964 001c 556C7472 		.ascii	"Ultrasonic right: %u %u %u\012\000"
 964      61736F6E 
 964      69632072 
 964      69676874 
 964      3A202575 
 965              		.global	__aeabi_f2iz
ARM GAS  /tmp/ccvXlRfF.s 			page 32


 966              		.align	2
 967              	.LC41:
 968 0038 44697374 		.ascii	"Distance travelled: %d\012\000"
 968      616E6365 
 968      20747261 
 968      76656C6C 
 968      65643A20 
 969              		.section	.text.Log,"ax",%progbits
 970              		.align	1
 971              		.global	Log
 972              		.syntax unified
 973              		.code	16
 974              		.thumb_func
 976              	Log:
 977              	.LFB50:
 209:Src/main.c    **** 	uint8_t str_buff[32];
 978              		.loc 1 209 11 is_stmt 1 view -0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 32
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982 0000 70B5     		push	{r4, r5, r6, lr}
 983              	.LCFI17:
 984              		.cfi_def_cfa_offset 16
 985              		.cfi_offset 4, -16
 986              		.cfi_offset 5, -12
 987              		.cfi_offset 6, -8
 988              		.cfi_offset 14, -4
 989 0002 8AB0     		sub	sp, sp, #40
 990              	.LCFI18:
 991              		.cfi_def_cfa_offset 56
 210:Src/main.c    **** 
 992              		.loc 1 210 2 view .LVU204
 212:Src/main.c    **** 	USART_SendString(str_buff);
 993              		.loc 1 212 2 view .LVU205
 994 0004 1C4E     		ldr	r6, .L48
 995 0006 3000     		movs	r0, r6
 996 0008 FFF7FEFF 		bl	GetUltrasonic
 997              	.LVL60:
 998 000c 0400     		movs	r4, r0
 999 000e 3000     		movs	r0, r6
 1000 0010 FFF7FEFF 		bl	GetUltrasonic
 1001              	.LVL61:
 1002 0014 0500     		movs	r5, r0
 1003 0016 3000     		movs	r0, r6
 1004 0018 FFF7FEFF 		bl	GetUltrasonic
 1005              	.LVL62:
 1006 001c 1749     		ldr	r1, .L48+4
 1007 001e 0090     		str	r0, [sp]
 1008 0020 2B00     		movs	r3, r5
 1009 0022 2200     		movs	r2, r4
 1010 0024 02A8     		add	r0, sp, #8
 1011 0026 FFF7FEFF 		bl	sprintf
 1012              	.LVL63:
 213:Src/main.c    **** 
 1013              		.loc 1 213 2 view .LVU206
 1014 002a 02A8     		add	r0, sp, #8
 1015 002c FFF7FEFF 		bl	USART_SendString
ARM GAS  /tmp/ccvXlRfF.s 			page 33


 1016              	.LVL64:
 215:Src/main.c    **** 	USART_SendString(str_buff);
 1017              		.loc 1 215 2 view .LVU207
 1018 0030 134E     		ldr	r6, .L48+8
 1019 0032 3000     		movs	r0, r6
 1020 0034 FFF7FEFF 		bl	GetUltrasonic
 1021              	.LVL65:
 1022 0038 0400     		movs	r4, r0
 1023 003a 3000     		movs	r0, r6
 1024 003c FFF7FEFF 		bl	GetUltrasonic
 1025              	.LVL66:
 1026 0040 0500     		movs	r5, r0
 1027 0042 3000     		movs	r0, r6
 1028 0044 FFF7FEFF 		bl	GetUltrasonic
 1029              	.LVL67:
 1030 0048 0E49     		ldr	r1, .L48+12
 1031 004a 0090     		str	r0, [sp]
 1032 004c 2B00     		movs	r3, r5
 1033 004e 2200     		movs	r2, r4
 1034 0050 02A8     		add	r0, sp, #8
 1035 0052 FFF7FEFF 		bl	sprintf
 1036              	.LVL68:
 216:Src/main.c    **** 
 1037              		.loc 1 216 2 view .LVU208
 1038 0056 02A8     		add	r0, sp, #8
 1039 0058 FFF7FEFF 		bl	USART_SendString
 1040              	.LVL69:
 218:Src/main.c    **** 	USART_SendString(str_buff);
 1041              		.loc 1 218 2 view .LVU209
 218:Src/main.c    **** 	USART_SendString(str_buff);
 1042              		.loc 1 218 53 is_stmt 0 view .LVU210
 1043 005c FFF7FEFF 		bl	get_distance
 1044              	.LVL70:
 218:Src/main.c    **** 	USART_SendString(str_buff);
 1045              		.loc 1 218 2 view .LVU211
 1046 0060 FFF7FEFF 		bl	__aeabi_f2iz
 1047              	.LVL71:
 1048 0064 0200     		movs	r2, r0
 1049 0066 0849     		ldr	r1, .L48+16
 1050 0068 02A8     		add	r0, sp, #8
 1051 006a FFF7FEFF 		bl	sprintf
 1052              	.LVL72:
 219:Src/main.c    **** 
 1053              		.loc 1 219 2 is_stmt 1 view .LVU212
 1054 006e 02A8     		add	r0, sp, #8
 1055 0070 FFF7FEFF 		bl	USART_SendString
 1056              	.LVL73:
 221:Src/main.c    **** 
 1057              		.loc 1 221 1 is_stmt 0 view .LVU213
 1058 0074 0AB0     		add	sp, sp, #40
 1059              		@ sp needed
 1060 0076 70BD     		pop	{r4, r5, r6, pc}
 1061              	.L49:
 1062              		.align	2
 1063              	.L48:
 1064 0078 00000000 		.word	ultrasonic_left_pins
 1065 007c 00000000 		.word	.LC36
ARM GAS  /tmp/ccvXlRfF.s 			page 34


 1066 0080 00000000 		.word	ultrasonic_right_pins
 1067 0084 1C000000 		.word	.LC39
 1068 0088 38000000 		.word	.LC41
 1069              		.cfi_endproc
 1070              	.LFE50:
 1072              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 1073              		.align	2
 1074              	.LC58:
 1075 0000 696E6465 		.ascii	"indefinitely\012\000"
 1075      66696E69 
 1075      74656C79 
 1075      0A00
 1076 000e 0000     		.align	2
 1077              	.LC60:
 1078 0010 25640A00 		.ascii	"%d\012\000"
 1079              		.align	2
 1080              	.LC43:
 1081 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 1081      523A2049 
 1081      6E76616C 
 1081      69642063 
 1081      6F6D6D61 
 1082 002d 000000   		.align	2
 1083              	.LC45:
 1084 0030 4D6F7669 		.ascii	"Moving forward \000"
 1084      6E672066 
 1084      6F727761 
 1084      72642000 
 1085              		.align	2
 1086              	.LC47:
 1087 0040 5475726E 		.ascii	"Turning left \000"
 1087      696E6720 
 1087      6C656674 
 1087      2000
 1088 004e 0000     		.align	2
 1089              	.LC49:
 1090 0050 5475726E 		.ascii	"Turning right \000"
 1090      696E6720 
 1090      72696768 
 1090      742000
 1091 005f 00       		.align	2
 1092              	.LC51:
 1093 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 1093      696E6720 
 1093      73656E73 
 1093      6F722064 
 1093      6174610A 
 1094 0075 000000   		.align	2
 1095              	.LC53:
 1096 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 1096      72696E67 
 1096      20617574 
 1096      6F6E6F6D 
 1096      6F757320 
 1097 0095 000000   		.align	2
 1098              	.LC55:
 1099 0098 53746F70 		.ascii	"Stopping all motors!\012\000"
ARM GAS  /tmp/ccvXlRfF.s 			page 35


 1099      70696E67 
 1099      20616C6C 
 1099      206D6F74 
 1099      6F727321 
 1100              		.section	.text.ProcessCommand,"ax",%progbits
 1101              		.align	1
 1102              		.global	ProcessCommand
 1103              		.syntax unified
 1104              		.code	16
 1105              		.thumb_func
 1107              	ProcessCommand:
 1108              	.LVL74:
 1109              	.LFB52:
 228:Src/main.c    **** 	uint32_t left_motor_pin;
 1110              		.loc 1 228 57 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 184
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 228:Src/main.c    **** 	uint32_t left_motor_pin;
 1114              		.loc 1 228 57 is_stmt 0 view .LVU215
 1115 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1116              	.LCFI19:
 1117              		.cfi_def_cfa_offset 20
 1118              		.cfi_offset 4, -20
 1119              		.cfi_offset 5, -16
 1120              		.cfi_offset 6, -12
 1121              		.cfi_offset 7, -8
 1122              		.cfi_offset 14, -4
 1123 0002 AFB0     		sub	sp, sp, #188
 1124              	.LCFI20:
 1125              		.cfi_def_cfa_offset 208
 1126 0004 0400     		movs	r4, r0
 1127 0006 0D00     		movs	r5, r1
 229:Src/main.c    **** 	uint32_t right_motor_pin;
 1128              		.loc 1 229 2 is_stmt 1 view .LVU216
 230:Src/main.c    **** 	int32_t CH1_DC = 65535;
 1129              		.loc 1 230 2 view .LVU217
 231:Src/main.c    **** 
 1130              		.loc 1 231 2 view .LVU218
 1131              	.LVL75:
 233:Src/main.c    **** 
 1132              		.loc 1 233 2 view .LVU219
 233:Src/main.c    **** 
 1133              		.loc 1 233 10 is_stmt 0 view .LVU220
 1134 0008 27A9     		add	r1, sp, #156
 1135              	.LVL76:
 233:Src/main.c    **** 
 1136              		.loc 1 233 10 view .LVU221
 1137 000a 5C4B     		ldr	r3, .L67
 1138 000c 0A00     		movs	r2, r1
 1139 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 1140 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 1141              	.LVL77:
 233:Src/main.c    **** 
 1142              		.loc 1 233 10 view .LVU222
 1143 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 1144 0014 43C2     		stmia	r2!, {r0, r1, r6}
ARM GAS  /tmp/ccvXlRfF.s 			page 36


 1145 0016 1B78     		ldrb	r3, [r3]
 1146 0018 1370     		strb	r3, [r2]
 235:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1147              		.loc 1 235 2 is_stmt 1 view .LVU223
 235:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 1148              		.loc 1 235 10 is_stmt 0 view .LVU224
 1149 001a 23AA     		add	r2, sp, #140
 1150 001c 584B     		ldr	r3, .L67+4
 1151 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 1152 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 1153 0022 1B68     		ldr	r3, [r3]
 1154 0024 1360     		str	r3, [r2]
 236:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1155              		.loc 1 236 2 is_stmt 1 view .LVU225
 236:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 1156              		.loc 1 236 10 is_stmt 0 view .LVU226
 1157 0026 1FAA     		add	r2, sp, #124
 1158 0028 564B     		ldr	r3, .L67+8
 1159 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 1160 002c C1C2     		stmia	r2!, {r0, r6, r7}
 1161 002e 1B88     		ldrh	r3, [r3]
 1162 0030 1380     		strh	r3, [r2]
 237:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1163              		.loc 1 237 2 is_stmt 1 view .LVU227
 237:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 1164              		.loc 1 237 10 is_stmt 0 view .LVU228
 1165 0032 1BAA     		add	r2, sp, #108
 1166 0034 544B     		ldr	r3, .L67+12
 1167 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 1168 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 1169 003a 1100     		movs	r1, r2
 1170 003c 1A88     		ldrh	r2, [r3]
 1171 003e 0A80     		strh	r2, [r1]
 1172 0040 9B78     		ldrb	r3, [r3, #2]
 1173 0042 8B70     		strb	r3, [r1, #2]
 238:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1174              		.loc 1 238 2 is_stmt 1 view .LVU229
 238:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 1175              		.loc 1 238 10 is_stmt 0 view .LVU230
 1176 0044 15A9     		add	r1, sp, #84
 1177 0046 514B     		ldr	r3, .L67+16
 1178 0048 0A00     		movs	r2, r1
 1179 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 1180 004c C1C2     		stmia	r2!, {r0, r6, r7}
 1181 004e 03CB     		ldmia	r3!, {r0, r1}
 1182 0050 03C2     		stmia	r2!, {r0, r1}
 1183 0052 1B78     		ldrb	r3, [r3]
 1184 0054 1370     		strb	r3, [r2]
 239:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1185              		.loc 1 239 2 is_stmt 1 view .LVU231
 239:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 1186              		.loc 1 239 10 is_stmt 0 view .LVU232
 1187 0056 0DA9     		add	r1, sp, #52
 1188 0058 4D4B     		ldr	r3, .L67+20
 1189 005a 0A00     		movs	r2, r1
 1190 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 1191 005e C1C2     		stmia	r2!, {r0, r6, r7}
ARM GAS  /tmp/ccvXlRfF.s 			page 37


 1192 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 1193 0062 43C2     		stmia	r2!, {r0, r1, r6}
 1194 0064 1968     		ldr	r1, [r3]
 1195 0066 1160     		str	r1, [r2]
 1196 0068 1B79     		ldrb	r3, [r3, #4]
 1197 006a 1371     		strb	r3, [r2, #4]
 240:Src/main.c    **** 
 1198              		.loc 1 240 2 is_stmt 1 view .LVU233
 240:Src/main.c    **** 
 1199              		.loc 1 240 10 is_stmt 0 view .LVU234
 1200 006c 07A9     		add	r1, sp, #28
 1201 006e 494B     		ldr	r3, .L67+24
 1202 0070 0A00     		movs	r2, r1
 1203 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 1204 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 1205 0076 03CB     		ldmia	r3!, {r0, r1}
 1206 0078 03C2     		stmia	r2!, {r0, r1}
 1207 007a 1B88     		ldrh	r3, [r3]
 1208 007c 1380     		strh	r3, [r2]
 242:Src/main.c    **** 
 1209              		.loc 1 242 2 is_stmt 1 view .LVU235
 242:Src/main.c    **** 
 1210              		.loc 1 242 15 is_stmt 0 view .LVU236
 1211 007e 06AB     		add	r3, sp, #24
 1212 0080 0022     		movs	r2, #0
 1213 0082 1A80     		strh	r2, [r3]
 244:Src/main.c    **** 	uint8_t part2[15];
 1214              		.loc 1 244 2 is_stmt 1 view .LVU237
 245:Src/main.c    **** 	uint8_t zero = 0;
 1215              		.loc 1 245 2 view .LVU238
 246:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1216              		.loc 1 246 2 view .LVU239
 246:Src/main.c    **** 	memcpy(part2, &zero, 15);
 1217              		.loc 1 246 10 is_stmt 0 view .LVU240
 1218 0084 6B46     		mov	r3, sp
 1219 0086 D91D     		adds	r1, r3, #7
 1220 0088 0023     		movs	r3, #0
 1221 008a 0B70     		strb	r3, [r1]
 247:Src/main.c    **** 
 1222              		.loc 1 247 2 is_stmt 1 view .LVU241
 1223 008c 0F32     		adds	r2, r2, #15
 1224 008e 02A8     		add	r0, sp, #8
 1225 0090 FFF7FEFF 		bl	memcpy
 1226              	.LVL78:
 249:Src/main.c    **** 		case 'w':
 1227              		.loc 1 249 2 view .LVU242
 1228 0094 2300     		movs	r3, r4
 1229 0096 613B     		subs	r3, r3, #97
 1230 0098 DAB2     		uxtb	r2, r3
 1231 009a 172A     		cmp	r2, #23
 1232 009c 53D8     		bhi	.L51
 1233 009e 9300     		lsls	r3, r2, #2
 1234 00a0 3D4A     		ldr	r2, .L67+28
 1235 00a2 D358     		ldr	r3, [r2, r3]
 1236 00a4 9F46     		mov	pc, r3
 1237              		.section	.rodata.ProcessCommand,"a",%progbits
 1238              		.align	2
ARM GAS  /tmp/ccvXlRfF.s 			page 38


 1239              	.L53:
 1240 0000 A6000000 		.word	.L58
 1241 0004 46010000 		.word	.L51
 1242 0008 46010000 		.word	.L51
 1243 000c 04010000 		.word	.L57
 1244 0010 46010000 		.word	.L51
 1245 0014 46010000 		.word	.L51
 1246 0018 46010000 		.word	.L51
 1247 001c 46010000 		.word	.L51
 1248 0020 46010000 		.word	.L51
 1249 0024 46010000 		.word	.L51
 1250 0028 46010000 		.word	.L51
 1251 002c 0E010000 		.word	.L56
 1252 0030 46010000 		.word	.L51
 1253 0034 46010000 		.word	.L51
 1254 0038 46010000 		.word	.L51
 1255 003c 1E010000 		.word	.L55
 1256 0040 46010000 		.word	.L51
 1257 0044 46010000 		.word	.L51
 1258 0048 46010000 		.word	.L51
 1259 004c 46010000 		.word	.L51
 1260 0050 46010000 		.word	.L51
 1261 0054 46010000 		.word	.L51
 1262 0058 52010000 		.word	.L64
 1263 005c 2E010000 		.word	.L52
 1264              		.section	.text.ProcessCommand
 1265              	.L58:
 255:Src/main.c    **** 			motorcmd.dir = LEFT;
 1266              		.loc 1 255 4 view .LVU243
 1267              	.LVL79:
 256:Src/main.c    **** 			break;
 1268              		.loc 1 256 4 view .LVU244
 256:Src/main.c    **** 			break;
 1269              		.loc 1 256 17 is_stmt 0 view .LVU245
 1270 00a6 06AB     		add	r3, sp, #24
 1271 00a8 0122     		movs	r2, #1
 1272 00aa 1A70     		strb	r2, [r3]
 257:Src/main.c    **** 		case 'd':
 1273              		.loc 1 257 4 is_stmt 1 view .LVU246
 255:Src/main.c    **** 			motorcmd.dir = LEFT;
 1274              		.loc 1 255 10 is_stmt 0 view .LVU247
 1275 00ac 1FAE     		add	r6, sp, #124
 1276              	.LVL80:
 1277              	.L54:
 289:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1278              		.loc 1 289 2 is_stmt 1 view .LVU248
 289:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1279              		.loc 1 289 4 is_stmt 0 view .LVU249
 1280 00ae 302D     		cmp	r5, #48
 1281 00b0 51D0     		beq	.L65
 1282              	.L60:
 293:Src/main.c    **** 		USART_SendString(err);
 1283              		.loc 1 293 7 is_stmt 1 view .LVU250
 293:Src/main.c    **** 		USART_SendString(err);
 1284              		.loc 1 293 25 is_stmt 0 view .LVU251
 1285 00b2 2B00     		movs	r3, r5
 1286 00b4 313B     		subs	r3, r3, #49
ARM GAS  /tmp/ccvXlRfF.s 			page 39


 1287 00b6 DBB2     		uxtb	r3, r3
 293:Src/main.c    **** 		USART_SendString(err);
 1288              		.loc 1 293 9 view .LVU252
 1289 00b8 082B     		cmp	r3, #8
 1290 00ba 58D8     		bhi	.L66
 1291              	.LBB13:
 299:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1292              		.loc 1 299 3 is_stmt 1 view .LVU253
 299:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 1293              		.loc 1 299 11 is_stmt 0 view .LVU254
 1294 00bc 1424     		movs	r4, #20
 1295 00be 6C43     		muls	r4, r5
 1296 00c0 4034     		adds	r4, r4, #64
 1297 00c2 E4B2     		uxtb	r4, r4
 1298              	.LVL81:
 300:Src/main.c    **** 		motorcmd.amount = dist;
 1299              		.loc 1 300 3 is_stmt 1 view .LVU255
 1300 00c4 3549     		ldr	r1, .L67+32
 1301 00c6 2200     		movs	r2, r4
 1302 00c8 02A8     		add	r0, sp, #8
 1303 00ca FFF7FEFF 		bl	sprintf
 1304              	.LVL82:
 301:Src/main.c    **** 	}
 1305              		.loc 1 301 3 view .LVU256
 301:Src/main.c    **** 	}
 1306              		.loc 1 301 19 is_stmt 0 view .LVU257
 1307 00ce 06AB     		add	r3, sp, #24
 1308 00d0 5C70     		strb	r4, [r3, #1]
 1309              	.LVL83:
 1310              	.L61:
 301:Src/main.c    **** 	}
 1311              		.loc 1 301 19 view .LVU258
 1312              	.LBE13:
 305:Src/main.c    **** 	USART_SendString(part2);
 1313              		.loc 1 305 2 is_stmt 1 view .LVU259
 1314 00d2 3000     		movs	r0, r6
 1315 00d4 FFF7FEFF 		bl	USART_SendString
 1316              	.LVL84:
 306:Src/main.c    **** 
 1317              		.loc 1 306 2 view .LVU260
 1318 00d8 02A8     		add	r0, sp, #8
 1319 00da FFF7FEFF 		bl	USART_SendString
 1320              	.LVL85:
 308:Src/main.c    **** 	HAL_Delay(1000);
 1321              		.loc 1 308 2 view .LVU261
 308:Src/main.c    **** 	HAL_Delay(1000);
 1322              		.loc 1 308 13 is_stmt 0 view .LVU262
 1323 00de 8024     		movs	r4, #128
 1324 00e0 E405     		lsls	r4, r4, #23
 1325 00e2 2F4B     		ldr	r3, .L67+36
 1326 00e4 6363     		str	r3, [r4, #52]
 309:Src/main.c    **** 	TIM2->CCR1 = 0;
 1327              		.loc 1 309 2 is_stmt 1 view .LVU263
 1328 00e6 FA20     		movs	r0, #250
 1329 00e8 8000     		lsls	r0, r0, #2
 1330 00ea FFF7FEFF 		bl	HAL_Delay
 1331              	.LVL86:
ARM GAS  /tmp/ccvXlRfF.s 			page 40


 310:Src/main.c    **** 
 1332              		.loc 1 310 2 view .LVU264
 310:Src/main.c    **** 
 1333              		.loc 1 310 13 is_stmt 0 view .LVU265
 1334 00ee 0023     		movs	r3, #0
 1335 00f0 6363     		str	r3, [r4, #52]
 312:Src/main.c    **** 	USART_SendString(result);
 1336              		.loc 1 312 2 is_stmt 1 view .LVU266
 312:Src/main.c    **** 	USART_SendString(result);
 1337              		.loc 1 312 20 is_stmt 0 view .LVU267
 1338 00f2 06A8     		add	r0, sp, #24
 1339 00f4 FFF7FEFF 		bl	MoveMotors
 1340              	.LVL87:
 313:Src/main.c    **** 
 1341              		.loc 1 313 2 is_stmt 1 view .LVU268
 1342 00f8 FFF7FEFF 		bl	USART_SendString
 1343              	.LVL88:
 315:Src/main.c    **** 
 1344              		.loc 1 315 2 view .LVU269
 1345 00fc FFF7FEFF 		bl	ClearCommand
 1346              	.LVL89:
 1347              	.L50:
 334:Src/main.c    **** 
 1348              		.loc 1 334 1 is_stmt 0 view .LVU270
 1349 0100 2FB0     		add	sp, sp, #188
 1350              		@ sp needed
 1351 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 1352              	.L57:
 259:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1353              		.loc 1 259 4 is_stmt 1 view .LVU271
 1354              	.LVL90:
 260:Src/main.c    **** 			break;
 1355              		.loc 1 260 4 view .LVU272
 260:Src/main.c    **** 			break;
 1356              		.loc 1 260 17 is_stmt 0 view .LVU273
 1357 0104 06AB     		add	r3, sp, #24
 1358 0106 0222     		movs	r2, #2
 1359 0108 1A70     		strb	r2, [r3]
 261:Src/main.c    **** 		case 'l':
 1360              		.loc 1 261 4 is_stmt 1 view .LVU274
 259:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1361              		.loc 1 259 10 is_stmt 0 view .LVU275
 1362 010a 1BAE     		add	r6, sp, #108
 1363              	.LVL91:
 261:Src/main.c    **** 		case 'l':
 1364              		.loc 1 261 4 view .LVU276
 1365 010c CFE7     		b	.L54
 1366              	.LVL92:
 1367              	.L56:
 263:Src/main.c    **** 			USART_SendString(part1);
 1368              		.loc 1 263 4 is_stmt 1 view .LVU277
 264:Src/main.c    **** 			Log();
 1369              		.loc 1 264 4 view .LVU278
 1370 010e 15A8     		add	r0, sp, #84
 1371              	.LVL93:
 264:Src/main.c    **** 			Log();
 1372              		.loc 1 264 4 is_stmt 0 view .LVU279
ARM GAS  /tmp/ccvXlRfF.s 			page 41


 1373 0110 FFF7FEFF 		bl	USART_SendString
 1374              	.LVL94:
 265:Src/main.c    **** 			ClearCommand();
 1375              		.loc 1 265 4 is_stmt 1 view .LVU280
 1376 0114 FFF7FEFF 		bl	Log
 1377              	.LVL95:
 266:Src/main.c    **** 			return;
 1378              		.loc 1 266 4 view .LVU281
 1379 0118 FFF7FEFF 		bl	ClearCommand
 1380              	.LVL96:
 267:Src/main.c    **** 		case 'p':
 1381              		.loc 1 267 4 view .LVU282
 1382 011c F0E7     		b	.L50
 1383              	.LVL97:
 1384              	.L55:
 269:Src/main.c    **** 			USART_SendString(part1);
 1385              		.loc 1 269 4 view .LVU283
 270:Src/main.c    **** 			Proceed();
 1386              		.loc 1 270 4 view .LVU284
 1387 011e 0DA8     		add	r0, sp, #52
 1388              	.LVL98:
 270:Src/main.c    **** 			Proceed();
 1389              		.loc 1 270 4 is_stmt 0 view .LVU285
 1390 0120 FFF7FEFF 		bl	USART_SendString
 1391              	.LVL99:
 271:Src/main.c    **** 			ClearCommand();
 1392              		.loc 1 271 4 is_stmt 1 view .LVU286
 1393 0124 FFF7FEFF 		bl	Proceed
 1394              	.LVL100:
 272:Src/main.c    **** 			return;
 1395              		.loc 1 272 4 view .LVU287
 1396 0128 FFF7FEFF 		bl	ClearCommand
 1397              	.LVL101:
 273:Src/main.c    **** 		case 'x':
 1398              		.loc 1 273 4 view .LVU288
 1399 012c E8E7     		b	.L50
 1400              	.LVL102:
 1401              	.L52:
 275:Src/main.c    **** 			USART_SendString(part1);
 1402              		.loc 1 275 4 view .LVU289
 276:Src/main.c    **** 			motorcmd.dir = OFF;
 1403              		.loc 1 276 4 view .LVU290
 1404 012e 07A8     		add	r0, sp, #28
 1405              	.LVL103:
 276:Src/main.c    **** 			motorcmd.dir = OFF;
 1406              		.loc 1 276 4 is_stmt 0 view .LVU291
 1407 0130 FFF7FEFF 		bl	USART_SendString
 1408              	.LVL104:
 277:Src/main.c    **** 			ClearCommand();
 1409              		.loc 1 277 4 is_stmt 1 view .LVU292
 277:Src/main.c    **** 			ClearCommand();
 1410              		.loc 1 277 17 is_stmt 0 view .LVU293
 1411 0134 06AC     		add	r4, sp, #24
 1412 0136 0423     		movs	r3, #4
 1413 0138 2370     		strb	r3, [r4]
 278:Src/main.c    **** 			MoveMotors(&motorcmd);
 1414              		.loc 1 278 4 is_stmt 1 view .LVU294
ARM GAS  /tmp/ccvXlRfF.s 			page 42


 1415 013a FFF7FEFF 		bl	ClearCommand
 1416              	.LVL105:
 279:Src/main.c    **** 			return;
 1417              		.loc 1 279 4 view .LVU295
 1418 013e 2000     		movs	r0, r4
 1419 0140 FFF7FEFF 		bl	MoveMotors
 1420              	.LVL106:
 280:Src/main.c    **** 		default:
 1421              		.loc 1 280 4 view .LVU296
 1422 0144 DCE7     		b	.L50
 1423              	.LVL107:
 1424              	.L51:
 282:Src/main.c    **** 			ClearCommand();
 1425              		.loc 1 282 4 view .LVU297
 1426 0146 27A8     		add	r0, sp, #156
 1427 0148 FFF7FEFF 		bl	USART_SendString
 1428              	.LVL108:
 283:Src/main.c    **** 			return;
 1429              		.loc 1 283 4 view .LVU298
 1430 014c FFF7FEFF 		bl	ClearCommand
 1431              	.LVL109:
 284:Src/main.c    **** 	}
 1432              		.loc 1 284 4 view .LVU299
 1433 0150 D6E7     		b	.L50
 1434              	.L64:
 249:Src/main.c    **** 		case 'w':
 1435              		.loc 1 249 2 is_stmt 0 view .LVU300
 1436 0152 23AE     		add	r6, sp, #140
 1437 0154 ABE7     		b	.L54
 1438              	.LVL110:
 1439              	.L65:
 289:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1440              		.loc 1 289 21 discriminator 1 view .LVU301
 1441 0156 772C     		cmp	r4, #119
 1442 0158 ABD1     		bne	.L60
 290:Src/main.c    **** 		motorcmd.amount = 0;
 1443              		.loc 1 290 3 is_stmt 1 view .LVU302
 1444 015a 02AA     		add	r2, sp, #8
 1445 015c 114B     		ldr	r3, .L67+40
 1446 015e 31CB     		ldmia	r3!, {r0, r4, r5}
 1447 0160 31C2     		stmia	r2!, {r0, r4, r5}
 1448 0162 1B88     		ldrh	r3, [r3]
 1449 0164 1380     		strh	r3, [r2]
 291:Src/main.c    **** 	}
 1450              		.loc 1 291 3 view .LVU303
 291:Src/main.c    **** 	}
 1451              		.loc 1 291 19 is_stmt 0 view .LVU304
 1452 0166 06AB     		add	r3, sp, #24
 1453 0168 0022     		movs	r2, #0
 1454 016a 5A70     		strb	r2, [r3, #1]
 1455 016c B1E7     		b	.L61
 1456              	.L66:
 294:Src/main.c    **** 		ClearCommand();
 1457              		.loc 1 294 3 is_stmt 1 view .LVU305
 1458 016e 27A8     		add	r0, sp, #156
 1459 0170 FFF7FEFF 		bl	USART_SendString
 1460              	.LVL111:
ARM GAS  /tmp/ccvXlRfF.s 			page 43


 295:Src/main.c    **** 		return;
 1461              		.loc 1 295 3 view .LVU306
 1462 0174 FFF7FEFF 		bl	ClearCommand
 1463              	.LVL112:
 296:Src/main.c    **** 	}
 1464              		.loc 1 296 3 view .LVU307
 1465 0178 C2E7     		b	.L50
 1466              	.L68:
 1467 017a C046     		.align	2
 1468              	.L67:
 1469 017c 14000000 		.word	.LC43
 1470 0180 30000000 		.word	.LC45
 1471 0184 40000000 		.word	.LC47
 1472 0188 50000000 		.word	.LC49
 1473 018c 60000000 		.word	.LC51
 1474 0190 78000000 		.word	.LC53
 1475 0194 98000000 		.word	.LC55
 1476 0198 00000000 		.word	.L53
 1477 019c 10000000 		.word	.LC60
 1478 01a0 FFFF0000 		.word	65535
 1479 01a4 00000000 		.word	.LC58
 1480              		.cfi_endproc
 1481              	.LFE52:
 1483              		.section	.text.Error_Handler,"ax",%progbits
 1484              		.align	1
 1485              		.global	Error_Handler
 1486              		.syntax unified
 1487              		.code	16
 1488              		.thumb_func
 1490              	Error_Handler:
 1491              	.LFB59:
 625:Src/main.c    **** 
 626:Src/main.c    **** /* USER CODE BEGIN 4 */
 627:Src/main.c    **** 
 628:Src/main.c    **** /* USER CODE END 4 */
 629:Src/main.c    **** 
 630:Src/main.c    **** /**
 631:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 632:Src/main.c    ****  * @retval None
 633:Src/main.c    ****  */
 634:Src/main.c    **** void Error_Handler(void)
 635:Src/main.c    **** {
 1492              		.loc 1 635 1 view -0
 1493              		.cfi_startproc
 1494              		@ Volatile: function does not return.
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497              		@ link register save eliminated.
 636:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 637:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 638:Src/main.c    **** 	__disable_irq();
 1498              		.loc 1 638 2 view .LVU309
 1499              	.LBB14:
 1500              	.LBI14:
 1501              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  /tmp/ccvXlRfF.s 			page 44


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  /tmp/ccvXlRfF.s 			page 45


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccvXlRfF.s 			page 46


 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1502              		.loc 2 140 27 view .LVU310
 1503              	.LBB15:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1504              		.loc 2 142 3 view .LVU311
 1505              		.syntax divided
 1506              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1507 0000 72B6     		cpsid i
 1508              	@ 0 "" 2
 1509              		.thumb
 1510              		.syntax unified
 1511              	.L70:
 1512              	.LBE15:
 1513              	.LBE14:
 639:Src/main.c    **** 	while (1)
 1514              		.loc 1 639 2 discriminator 1 view .LVU312
 640:Src/main.c    **** 	{
 641:Src/main.c    **** 	}
 1515              		.loc 1 641 2 discriminator 1 view .LVU313
 639:Src/main.c    **** 	while (1)
 1516              		.loc 1 639 8 discriminator 1 view .LVU314
 1517 0002 FEE7     		b	.L70
 1518              		.cfi_endproc
 1519              	.LFE59:
 1521              		.section	.text.MX_TIM15_Init,"ax",%progbits
 1522              		.align	1
 1523              		.syntax unified
 1524              		.code	16
 1525              		.thumb_func
 1527              	MX_TIM15_Init:
 1528              	.LFB57:
 553:Src/main.c    **** 
 1529              		.loc 1 553 1 view -0
ARM GAS  /tmp/ccvXlRfF.s 			page 47


 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 32
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533 0000 00B5     		push	{lr}
 1534              	.LCFI21:
 1535              		.cfi_def_cfa_offset 4
 1536              		.cfi_offset 14, -4
 1537 0002 89B0     		sub	sp, sp, #36
 1538              	.LCFI22:
 1539              		.cfi_def_cfa_offset 40
 559:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1540              		.loc 1 559 3 view .LVU316
 559:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1541              		.loc 1 559 26 is_stmt 0 view .LVU317
 1542 0004 1022     		movs	r2, #16
 1543 0006 0021     		movs	r1, #0
 1544 0008 04A8     		add	r0, sp, #16
 1545 000a FFF7FEFF 		bl	memset
 1546              	.LVL113:
 560:Src/main.c    **** 
 1547              		.loc 1 560 3 is_stmt 1 view .LVU318
 560:Src/main.c    **** 
 1548              		.loc 1 560 27 is_stmt 0 view .LVU319
 1549 000e 0822     		movs	r2, #8
 1550 0010 0021     		movs	r1, #0
 1551 0012 02A8     		add	r0, sp, #8
 1552 0014 FFF7FEFF 		bl	memset
 1553              	.LVL114:
 565:Src/main.c    ****   htim15.Init.Prescaler = 200;
 1554              		.loc 1 565 3 is_stmt 1 view .LVU320
 565:Src/main.c    ****   htim15.Init.Prescaler = 200;
 1555              		.loc 1 565 19 is_stmt 0 view .LVU321
 1556 0018 1B48     		ldr	r0, .L78
 1557 001a 1C4B     		ldr	r3, .L78+4
 1558 001c 0360     		str	r3, [r0]
 566:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1559              		.loc 1 566 3 is_stmt 1 view .LVU322
 566:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1560              		.loc 1 566 25 is_stmt 0 view .LVU323
 1561 001e C823     		movs	r3, #200
 1562 0020 4360     		str	r3, [r0, #4]
 567:Src/main.c    ****   htim15.Init.Period = 65535;
 1563              		.loc 1 567 3 is_stmt 1 view .LVU324
 567:Src/main.c    ****   htim15.Init.Period = 65535;
 1564              		.loc 1 567 27 is_stmt 0 view .LVU325
 1565 0022 0023     		movs	r3, #0
 1566 0024 8360     		str	r3, [r0, #8]
 568:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1567              		.loc 1 568 3 is_stmt 1 view .LVU326
 568:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1568              		.loc 1 568 22 is_stmt 0 view .LVU327
 1569 0026 1A4A     		ldr	r2, .L78+8
 1570 0028 C260     		str	r2, [r0, #12]
 569:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 1571              		.loc 1 569 3 is_stmt 1 view .LVU328
 569:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 1572              		.loc 1 569 29 is_stmt 0 view .LVU329
ARM GAS  /tmp/ccvXlRfF.s 			page 48


 1573 002a 0361     		str	r3, [r0, #16]
 570:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1574              		.loc 1 570 3 is_stmt 1 view .LVU330
 570:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1575              		.loc 1 570 33 is_stmt 0 view .LVU331
 1576 002c 4361     		str	r3, [r0, #20]
 571:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1577              		.loc 1 571 3 is_stmt 1 view .LVU332
 571:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1578              		.loc 1 571 33 is_stmt 0 view .LVU333
 1579 002e 8361     		str	r3, [r0, #24]
 572:Src/main.c    ****   {
 1580              		.loc 1 572 3 is_stmt 1 view .LVU334
 572:Src/main.c    ****   {
 1581              		.loc 1 572 7 is_stmt 0 view .LVU335
 1582 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1583              	.LVL115:
 572:Src/main.c    ****   {
 1584              		.loc 1 572 6 view .LVU336
 1585 0034 0028     		cmp	r0, #0
 1586 0036 20D1     		bne	.L75
 576:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1587              		.loc 1 576 3 is_stmt 1 view .LVU337
 576:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1588              		.loc 1 576 34 is_stmt 0 view .LVU338
 1589 0038 8023     		movs	r3, #128
 1590 003a 5B01     		lsls	r3, r3, #5
 1591 003c 0493     		str	r3, [sp, #16]
 577:Src/main.c    ****   {
 1592              		.loc 1 577 3 is_stmt 1 view .LVU339
 577:Src/main.c    ****   {
 1593              		.loc 1 577 7 is_stmt 0 view .LVU340
 1594 003e 1248     		ldr	r0, .L78
 1595 0040 04A9     		add	r1, sp, #16
 1596 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1597              	.LVL116:
 577:Src/main.c    ****   {
 1598              		.loc 1 577 6 view .LVU341
 1599 0046 0028     		cmp	r0, #0
 1600 0048 19D1     		bne	.L76
 581:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1601              		.loc 1 581 3 is_stmt 1 view .LVU342
 581:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1602              		.loc 1 581 37 is_stmt 0 view .LVU343
 1603 004a 0023     		movs	r3, #0
 1604 004c 0293     		str	r3, [sp, #8]
 582:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1605              		.loc 1 582 3 is_stmt 1 view .LVU344
 582:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1606              		.loc 1 582 33 is_stmt 0 view .LVU345
 1607 004e 0393     		str	r3, [sp, #12]
 583:Src/main.c    ****   {
 1608              		.loc 1 583 3 is_stmt 1 view .LVU346
 583:Src/main.c    ****   {
 1609              		.loc 1 583 7 is_stmt 0 view .LVU347
 1610 0050 0D48     		ldr	r0, .L78
 1611 0052 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccvXlRfF.s 			page 49


 1612 0054 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1613              	.LVL117:
 583:Src/main.c    ****   {
 1614              		.loc 1 583 6 view .LVU348
 1615 0058 0028     		cmp	r0, #0
 1616 005a 12D1     		bne	.L77
 588:Src/main.c    **** 
 1617              		.loc 1 588 3 is_stmt 1 view .LVU349
 1618              	.LBB16:
 588:Src/main.c    **** 
 1619              		.loc 1 588 3 view .LVU350
 588:Src/main.c    **** 
 1620              		.loc 1 588 3 view .LVU351
 1621 005c 0D4B     		ldr	r3, .L78+12
 1622 005e 9A69     		ldr	r2, [r3, #24]
 1623 0060 8021     		movs	r1, #128
 1624 0062 4902     		lsls	r1, r1, #9
 1625 0064 0A43     		orrs	r2, r1
 1626 0066 9A61     		str	r2, [r3, #24]
 588:Src/main.c    **** 
 1627              		.loc 1 588 3 view .LVU352
 1628 0068 9B69     		ldr	r3, [r3, #24]
 1629 006a 0B40     		ands	r3, r1
 1630 006c 0193     		str	r3, [sp, #4]
 588:Src/main.c    **** 
 1631              		.loc 1 588 3 view .LVU353
 1632 006e 019B     		ldr	r3, [sp, #4]
 1633              	.LBE16:
 588:Src/main.c    **** 
 1634              		.loc 1 588 3 view .LVU354
 590:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 1635              		.loc 1 590 2 view .LVU355
 1636 0070 0548     		ldr	r0, .L78
 1637 0072 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1638              	.LVL118:
 595:Src/main.c    **** 
 1639              		.loc 1 595 1 is_stmt 0 view .LVU356
 1640 0076 09B0     		add	sp, sp, #36
 1641              		@ sp needed
 1642 0078 00BD     		pop	{pc}
 1643              	.L75:
 574:Src/main.c    ****   }
 1644              		.loc 1 574 5 is_stmt 1 view .LVU357
 1645 007a FFF7FEFF 		bl	Error_Handler
 1646              	.LVL119:
 1647              	.L76:
 579:Src/main.c    ****   }
 1648              		.loc 1 579 5 view .LVU358
 1649 007e FFF7FEFF 		bl	Error_Handler
 1650              	.LVL120:
 1651              	.L77:
 585:Src/main.c    ****   }
 1652              		.loc 1 585 5 view .LVU359
 1653 0082 FFF7FEFF 		bl	Error_Handler
 1654              	.LVL121:
 1655              	.L79:
 1656 0086 C046     		.align	2
ARM GAS  /tmp/ccvXlRfF.s 			page 50


 1657              	.L78:
 1658 0088 00000000 		.word	htim15
 1659 008c 00400140 		.word	1073823744
 1660 0090 FFFF0000 		.word	65535
 1661 0094 00100240 		.word	1073876992
 1662              		.cfi_endproc
 1663              	.LFE57:
 1665              		.section	.text.SystemClock_Config,"ax",%progbits
 1666              		.align	1
 1667              		.global	SystemClock_Config
 1668              		.syntax unified
 1669              		.code	16
 1670              		.thumb_func
 1672              	SystemClock_Config:
 1673              	.LFB56:
 517:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1674              		.loc 1 517 1 view -0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 72
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678 0000 00B5     		push	{lr}
 1679              	.LCFI23:
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 14, -4
 1682 0002 93B0     		sub	sp, sp, #76
 1683              	.LCFI24:
 1684              		.cfi_def_cfa_offset 80
 518:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1685              		.loc 1 518 2 view .LVU361
 518:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1686              		.loc 1 518 21 is_stmt 0 view .LVU362
 1687 0004 3422     		movs	r2, #52
 1688 0006 0021     		movs	r1, #0
 1689 0008 05A8     		add	r0, sp, #20
 1690 000a FFF7FEFF 		bl	memset
 1691              	.LVL122:
 519:Src/main.c    **** 
 1692              		.loc 1 519 2 is_stmt 1 view .LVU363
 519:Src/main.c    **** 
 1693              		.loc 1 519 21 is_stmt 0 view .LVU364
 1694 000e 1022     		movs	r2, #16
 1695 0010 0021     		movs	r1, #0
 1696 0012 01A8     		add	r0, sp, #4
 1697 0014 FFF7FEFF 		bl	memset
 1698              	.LVL123:
 524:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1699              		.loc 1 524 2 is_stmt 1 view .LVU365
 524:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1700              		.loc 1 524 35 is_stmt 0 view .LVU366
 1701 0018 0223     		movs	r3, #2
 1702 001a 0593     		str	r3, [sp, #20]
 525:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1703              		.loc 1 525 2 is_stmt 1 view .LVU367
 525:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1704              		.loc 1 525 29 is_stmt 0 view .LVU368
 1705 001c 013B     		subs	r3, r3, #1
 1706 001e 0893     		str	r3, [sp, #32]
ARM GAS  /tmp/ccvXlRfF.s 			page 51


 526:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1707              		.loc 1 526 2 is_stmt 1 view .LVU369
 526:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1708              		.loc 1 526 40 is_stmt 0 view .LVU370
 1709 0020 0F33     		adds	r3, r3, #15
 1710 0022 0993     		str	r3, [sp, #36]
 527:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1711              		.loc 1 527 2 is_stmt 1 view .LVU371
 528:Src/main.c    **** 	{
 1712              		.loc 1 528 2 view .LVU372
 528:Src/main.c    **** 	{
 1713              		.loc 1 528 6 is_stmt 0 view .LVU373
 1714 0024 05A8     		add	r0, sp, #20
 1715 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1716              	.LVL124:
 528:Src/main.c    **** 	{
 1717              		.loc 1 528 5 view .LVU374
 1718 002a 0028     		cmp	r0, #0
 1719 002c 0DD1     		bne	.L83
 535:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1720              		.loc 1 535 2 is_stmt 1 view .LVU375
 535:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1721              		.loc 1 535 30 is_stmt 0 view .LVU376
 1722 002e 0723     		movs	r3, #7
 1723 0030 0193     		str	r3, [sp, #4]
 537:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1724              		.loc 1 537 2 is_stmt 1 view .LVU377
 537:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1725              		.loc 1 537 33 is_stmt 0 view .LVU378
 1726 0032 0023     		movs	r3, #0
 1727 0034 0293     		str	r3, [sp, #8]
 538:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1728              		.loc 1 538 2 is_stmt 1 view .LVU379
 538:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1729              		.loc 1 538 34 is_stmt 0 view .LVU380
 1730 0036 0393     		str	r3, [sp, #12]
 539:Src/main.c    **** 
 1731              		.loc 1 539 2 is_stmt 1 view .LVU381
 539:Src/main.c    **** 
 1732              		.loc 1 539 35 is_stmt 0 view .LVU382
 1733 0038 0493     		str	r3, [sp, #16]
 541:Src/main.c    **** 	{
 1734              		.loc 1 541 2 is_stmt 1 view .LVU383
 541:Src/main.c    **** 	{
 1735              		.loc 1 541 6 is_stmt 0 view .LVU384
 1736 003a 0021     		movs	r1, #0
 1737 003c 01A8     		add	r0, sp, #4
 1738 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1739              	.LVL125:
 541:Src/main.c    **** 	{
 1740              		.loc 1 541 5 view .LVU385
 1741 0042 0028     		cmp	r0, #0
 1742 0044 03D1     		bne	.L84
 545:Src/main.c    **** 
 1743              		.loc 1 545 1 view .LVU386
 1744 0046 13B0     		add	sp, sp, #76
 1745              		@ sp needed
ARM GAS  /tmp/ccvXlRfF.s 			page 52


 1746 0048 00BD     		pop	{pc}
 1747              	.L83:
 530:Src/main.c    **** 	}
 1748              		.loc 1 530 3 is_stmt 1 view .LVU387
 1749 004a FFF7FEFF 		bl	Error_Handler
 1750              	.LVL126:
 1751              	.L84:
 543:Src/main.c    **** 	}
 1752              		.loc 1 543 3 view .LVU388
 1753 004e FFF7FEFF 		bl	Error_Handler
 1754              	.LVL127:
 1755              		.cfi_endproc
 1756              	.LFE56:
 1758              		.section	.text.main,"ax",%progbits
 1759              		.align	1
 1760              		.global	main
 1761              		.syntax unified
 1762              		.code	16
 1763              		.thumb_func
 1765              	main:
 1766              	.LFB55:
 462:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1767              		.loc 1 462 1 view -0
 1768              		.cfi_startproc
 1769              		@ Volatile: function does not return.
 1770              		@ args = 0, pretend = 0, frame = 8
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 1772 0000 10B5     		push	{r4, lr}
 1773              	.LCFI25:
 1774              		.cfi_def_cfa_offset 8
 1775              		.cfi_offset 4, -8
 1776              		.cfi_offset 14, -4
 1777 0002 82B0     		sub	sp, sp, #8
 1778              	.LCFI26:
 1779              		.cfi_def_cfa_offset 16
 463:Src/main.c    **** 	SystemClock_Config();
 1780              		.loc 1 463 2 view .LVU390
 1781 0004 FFF7FEFF 		bl	HAL_Init
 1782              	.LVL128:
 464:Src/main.c    **** 
 1783              		.loc 1 464 2 view .LVU391
 1784 0008 FFF7FEFF 		bl	SystemClock_Config
 1785              	.LVL129:
 467:Src/main.c    **** 	USART_Init();
 1786              		.loc 1 467 2 view .LVU392
 1787 000c FFF7FEFF 		bl	GPIO_AF_Init
 1788              	.LVL130:
 468:Src/main.c    **** 
 1789              		.loc 1 468 2 view .LVU393
 1790 0010 FFF7FEFF 		bl	USART_Init
 1791              	.LVL131:
 470:Src/main.c    **** 
 1792              		.loc 1 470 2 view .LVU394
 1793 0014 FFF7FEFF 		bl	motor_init
 1794              	.LVL132:
 472:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 1795              		.loc 1 472 2 view .LVU395
ARM GAS  /tmp/ccvXlRfF.s 			page 53


 1796              	.LBB17:
 1797              	.LBI17:
 1798              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccvXlRfF.s 			page 54


  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccvXlRfF.s 			page 55


 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
ARM GAS  /tmp/ccvXlRfF.s 			page 56


 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccvXlRfF.s 			page 57


 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccvXlRfF.s 			page 58


 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
ARM GAS  /tmp/ccvXlRfF.s 			page 59


 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
ARM GAS  /tmp/ccvXlRfF.s 			page 60


 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
ARM GAS  /tmp/ccvXlRfF.s 			page 61


 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
ARM GAS  /tmp/ccvXlRfF.s 			page 62


 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccvXlRfF.s 			page 63


 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1799              		.loc 3 623 22 view .LVU396
ARM GAS  /tmp/ccvXlRfF.s 			page 64


 1800              	.LBB18:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1801              		.loc 3 625 3 view .LVU397
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1802              		.loc 3 627 5 view .LVU398
 1803              		.loc 3 627 20 is_stmt 0 view .LVU399
 1804 0018 254B     		ldr	r3, .L89
 1805 001a 8022     		movs	r2, #128
 1806 001c 9205     		lsls	r2, r2, #22
 1807 001e 1A60     		str	r2, [r3]
 1808              	.LVL133:
 1809              		.loc 3 627 20 view .LVU400
 1810              	.LBE18:
 1811              	.LBE17:
 473:Src/main.c    **** 
 1812              		.loc 1 473 2 is_stmt 1 view .LVU401
 1813              	.LBB19:
 1814              	.LBI19:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
ARM GAS  /tmp/ccvXlRfF.s 			page 65


 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccvXlRfF.s 			page 66


 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1815              		.loc 3 730 22 view .LVU402
 1816              	.LBB20:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1817              		.loc 3 732 3 view .LVU403
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1818              		.loc 3 734 5 view .LVU404
 1819              		.loc 3 734 52 is_stmt 0 view .LVU405
 1820 0020 C720     		movs	r0, #199
 1821 0022 8000     		lsls	r0, r0, #2
 1822 0024 1958     		ldr	r1, [r3, r0]
 1823              		.loc 3 734 33 view .LVU406
 1824 0026 234A     		ldr	r2, .L89+4
 1825 0028 1140     		ands	r1, r2
 1826              		.loc 3 734 102 view .LVU407
 1827 002a 8022     		movs	r2, #128
 1828 002c D201     		lsls	r2, r2, #7
 1829 002e 0A43     		orrs	r2, r1
 1830              		.loc 3 734 30 view .LVU408
 1831 0030 1A50     		str	r2, [r3, r0]
 1832              	.LVL134:
 1833              		.loc 3 734 30 view .LVU409
 1834              	.LBE20:
 1835              	.LBE19:
 475:Src/main.c    **** 
 1836              		.loc 1 475 2 is_stmt 1 view .LVU410
 475:Src/main.c    **** 
 1837              		.loc 1 475 10 is_stmt 0 view .LVU411
 1838 0032 214B     		ldr	r3, .L89+8
 1839 0034 1A68     		ldr	r2, [r3]
 1840 0036 0092     		str	r2, [sp]
 1841 0038 9B88     		ldrh	r3, [r3, #4]
 1842 003a 6A46     		mov	r2, sp
 1843 003c 9380     		strh	r3, [r2, #4]
 478:Src/main.c    **** 	/* TIM15_Init(); */
 1844              		.loc 1 478 2 is_stmt 1 view .LVU412
 1845 003e FFF7FEFF 		bl	MX_GPIO_Init
 1846              	.LVL135:
 480:Src/main.c    **** 
 1847              		.loc 1 480 2 view .LVU413
 1848 0042 FFF7FEFF 		bl	MX_TIM15_Init
 1849              	.LVL136:
 483:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1850              		.loc 1 483 2 view .LVU414
 1851 0046 8021     		movs	r1, #128
 1852 0048 1C4C     		ldr	r4, .L89+12
 1853 004a 0022     		movs	r2, #0
ARM GAS  /tmp/ccvXlRfF.s 			page 67


 1854 004c 0901     		lsls	r1, r1, #4
 1855 004e 2000     		movs	r0, r4
 1856 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1857              	.LVL137:
 484:Src/main.c    **** 
 1858              		.loc 1 484 2 view .LVU415
 1859 0054 8021     		movs	r1, #128
 1860 0056 0022     		movs	r2, #0
 1861 0058 8901     		lsls	r1, r1, #6
 1862 005a 2000     		movs	r0, r4
 1863 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1864              	.LVL138:
 1865 0060 0EE0     		b	.L88
 1866              	.L87:
 494:Src/main.c    **** 			{
 1867              		.loc 1 494 4 view .LVU416
 494:Src/main.c    **** 			{
 1868              		.loc 1 494 14 is_stmt 0 view .LVU417
 1869 0062 174B     		ldr	r3, .L89+16
 1870 0064 5B78     		ldrb	r3, [r3, #1]
 494:Src/main.c    **** 			{
 1871              		.loc 1 494 6 view .LVU418
 1872 0066 002B     		cmp	r3, #0
 1873 0068 06D0     		beq	.L86
 496:Src/main.c    **** 			}
 1874              		.loc 1 496 5 is_stmt 1 view .LVU419
 496:Src/main.c    **** 			}
 1875              		.loc 1 496 27 is_stmt 0 view .LVU420
 1876 006a 154B     		ldr	r3, .L89+16
 1877 006c 1878     		ldrb	r0, [r3]
 1878 006e C0B2     		uxtb	r0, r0
 496:Src/main.c    **** 			}
 1879              		.loc 1 496 39 view .LVU421
 1880 0070 5978     		ldrb	r1, [r3, #1]
 1881 0072 C9B2     		uxtb	r1, r1
 496:Src/main.c    **** 			}
 1882              		.loc 1 496 5 view .LVU422
 1883 0074 FFF7FEFF 		bl	ProcessCommand
 1884              	.LVL139:
 1885              	.L86:
 508:Src/main.c    **** 	}
 1886              		.loc 1 508 3 is_stmt 1 view .LVU423
 1887 0078 FA20     		movs	r0, #250
 1888 007a 4000     		lsls	r0, r0, #1
 1889 007c FFF7FEFF 		bl	HAL_Delay
 1890              	.LVL140:
 486:Src/main.c    **** 		if(incomingCommand)
 1891              		.loc 1 486 8 view .LVU424
 1892              	.L88:
 486:Src/main.c    **** 		if(incomingCommand)
 1893              		.loc 1 486 2 view .LVU425
 487:Src/main.c    **** 		{
 1894              		.loc 1 487 3 view .LVU426
 487:Src/main.c    **** 		{
 1895              		.loc 1 487 6 is_stmt 0 view .LVU427
 1896 0080 104B     		ldr	r3, .L89+20
 1897 0082 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/ccvXlRfF.s 			page 68


 487:Src/main.c    **** 		{
 1898              		.loc 1 487 5 view .LVU428
 1899 0084 002B     		cmp	r3, #0
 1900 0086 F7D0     		beq	.L86
 489:Src/main.c    **** 					command[0] != 'a' &&
 1901              		.loc 1 489 4 is_stmt 1 view .LVU429
 489:Src/main.c    **** 					command[0] != 'a' &&
 1902              		.loc 1 489 14 is_stmt 0 view .LVU430
 1903 0088 0D4B     		ldr	r3, .L89+16
 1904 008a 1B78     		ldrb	r3, [r3]
 489:Src/main.c    **** 					command[0] != 'a' &&
 1905              		.loc 1 489 6 view .LVU431
 1906 008c 772B     		cmp	r3, #119
 1907 008e E8D0     		beq	.L87
 490:Src/main.c    **** 					command[0] != 'd'){
 1908              		.loc 1 490 13 discriminator 1 view .LVU432
 1909 0090 0B4B     		ldr	r3, .L89+16
 1910 0092 1B78     		ldrb	r3, [r3]
 489:Src/main.c    **** 					command[0] != 'a' &&
 1911              		.loc 1 489 25 discriminator 1 view .LVU433
 1912 0094 612B     		cmp	r3, #97
 1913 0096 E4D0     		beq	.L87
 491:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 1914              		.loc 1 491 13 view .LVU434
 1915 0098 094B     		ldr	r3, .L89+16
 1916 009a 1B78     		ldrb	r3, [r3]
 490:Src/main.c    **** 					command[0] != 'd'){
 1917              		.loc 1 490 24 view .LVU435
 1918 009c 642B     		cmp	r3, #100
 1919 009e E0D0     		beq	.L87
 492:Src/main.c    **** 			}
 1920              		.loc 1 492 5 is_stmt 1 view .LVU436
 492:Src/main.c    **** 			}
 1921              		.loc 1 492 27 is_stmt 0 view .LVU437
 1922 00a0 074B     		ldr	r3, .L89+16
 1923 00a2 1878     		ldrb	r0, [r3]
 1924 00a4 C0B2     		uxtb	r0, r0
 492:Src/main.c    **** 			}
 1925              		.loc 1 492 5 view .LVU438
 1926 00a6 0021     		movs	r1, #0
 1927 00a8 FFF7FEFF 		bl	ProcessCommand
 1928              	.LVL141:
 1929 00ac D9E7     		b	.L87
 1930              	.L90:
 1931 00ae C046     		.align	2
 1932              	.L89:
 1933 00b0 00E100E0 		.word	-536813312
 1934 00b4 FF00FFFF 		.word	-65281
 1935 00b8 00000000 		.word	.LC21
 1936 00bc 00040048 		.word	1207960576
 1937 00c0 00000000 		.word	command
 1938 00c4 00000000 		.word	incomingCommand
 1939              		.cfi_endproc
 1940              	.LFE55:
 1942              		.global	pulse_end_time
 1943              		.section	.bss.pulse_end_time,"aw",%nobits
 1944              		.align	2
ARM GAS  /tmp/ccvXlRfF.s 			page 69


 1947              	pulse_end_time:
 1948 0000 00000000 		.space	4
 1949              		.global	pulse_start_time
 1950              		.section	.bss.pulse_start_time,"aw",%nobits
 1951              		.align	2
 1954              	pulse_start_time:
 1955 0000 00000000 		.space	4
 1956              		.global	htim155
 1957              		.section	.bss.htim155,"aw",%nobits
 1958              		.align	2
 1961              	htim155:
 1962 0000 00000000 		.space	64
 1962      00000000 
 1962      00000000 
 1962      00000000 
 1962      00000000 
 1963              		.global	pulseWidth
 1964              		.section	.bss.pulseWidth,"aw",%nobits
 1965              		.align	2
 1968              	pulseWidth:
 1969 0000 00000000 		.space	4
 1970              		.global	fallingEdgeTime
 1971              		.section	.bss.fallingEdgeTime,"aw",%nobits
 1972              		.align	2
 1975              	fallingEdgeTime:
 1976 0000 00000000 		.space	4
 1977              		.global	risingEdgeTime
 1978              		.section	.bss.risingEdgeTime,"aw",%nobits
 1979              		.align	2
 1982              	risingEdgeTime:
 1983 0000 00000000 		.space	4
 1984              		.global	incomingCommand
 1985              		.section	.bss.incomingCommand,"aw",%nobits
 1988              	incomingCommand:
 1989 0000 00       		.space	1
 1990              		.global	command
 1991              		.section	.bss.command,"aw",%nobits
 1992              		.align	2
 1995              	command:
 1996 0000 000000   		.space	3
 1997              		.global	rightDistance
 1998              		.section	.bss.rightDistance,"aw",%nobits
 1999              		.align	1
 2002              	rightDistance:
 2003 0000 0000     		.space	2
 2004              		.global	leftDistance
 2005              		.section	.bss.leftDistance,"aw",%nobits
 2006              		.align	1
 2009              	leftDistance:
 2010 0000 0000     		.space	2
 2011              		.global	Value2
 2012              		.section	.bss.Value2,"aw",%nobits
 2013              		.align	1
 2016              	Value2:
 2017 0000 0000     		.space	2
 2018              		.global	Value1
 2019              		.section	.bss.Value1,"aw",%nobits
ARM GAS  /tmp/ccvXlRfF.s 			page 70


 2020              		.align	1
 2023              	Value1:
 2024 0000 0000     		.space	2
 2025              		.global	startTime
 2026              		.section	.bss.startTime,"aw",%nobits
 2027              		.align	1
 2030              	startTime:
 2031 0000 0000     		.space	2
 2032              		.global	pMillis
 2033              		.section	.bss.pMillis,"aw",%nobits
 2034              		.align	2
 2037              	pMillis:
 2038 0000 00000000 		.space	4
 2039              		.global	htim15
 2040              		.section	.bss.htim15,"aw",%nobits
 2041              		.align	2
 2044              	htim15:
 2045 0000 00000000 		.space	64
 2045      00000000 
 2045      00000000 
 2045      00000000 
 2045      00000000 
 2046              		.text
 2047              	.Letext0:
 2048              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2049              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2050              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2051              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2052              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2053              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2054              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2055              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2056              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2057              		.file 13 "Inc/pins.h"
 2058              		.file 14 "Inc/motor.h"
 2059              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2060              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2061              		.file 17 "/usr/arm-none-eabi/include/string.h"
 2062              		.file 18 "/usr/arm-none-eabi/include/stdio.h"
 2063              		.file 19 "<built-in>"
ARM GAS  /tmp/ccvXlRfF.s 			page 71


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccvXlRfF.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccvXlRfF.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccvXlRfF.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/ccvXlRfF.s:102    .text.LED_Init:00000000 $t
     /tmp/ccvXlRfF.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/ccvXlRfF.s:151    .text.LED_Init:00000024 $d
     /tmp/ccvXlRfF.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccvXlRfF.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccvXlRfF.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/ccvXlRfF.s:342    .text.USART_Init:00000000 $t
     /tmp/ccvXlRfF.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/ccvXlRfF.s:440    .text.USART_Init:0000005c $d
     /tmp/ccvXlRfF.s:447    .text.USART_SendChar:00000000 $t
     /tmp/ccvXlRfF.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccvXlRfF.s:479    .text.USART_SendChar:00000010 $d
     /tmp/ccvXlRfF.s:484    .text.USART_SendString:00000000 $t
     /tmp/ccvXlRfF.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccvXlRfF.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccvXlRfF.s:539    .text.ClearCommand:00000000 $t
     /tmp/ccvXlRfF.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccvXlRfF.s:588    .text.ClearCommand:0000002c $d
     /tmp/ccvXlRfF.s:1995   .bss.command:00000000 command
     /tmp/ccvXlRfF.s:1988   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccvXlRfF.s:595    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccvXlRfF.s:599    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccvXlRfF.s:605    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccvXlRfF.s:696    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/ccvXlRfF.s:704    .rodata.Proceed.str1.4:00000000 $d
     /tmp/ccvXlRfF.s:708    .text.Proceed:00000000 $t
     /tmp/ccvXlRfF.s:714    .text.Proceed:00000000 Proceed
     /tmp/ccvXlRfF.s:737    .text.Proceed:0000000c $d
     /tmp/ccvXlRfF.s:743    .rodata.PrintDistance.str1.4:00000000 $d
     /tmp/ccvXlRfF.s:747    .text.PrintDistance:00000000 $t
     /tmp/ccvXlRfF.s:753    .text.PrintDistance:00000000 PrintDistance
     /tmp/ccvXlRfF.s:799    .text.PrintDistance:00000030 $d
     /tmp/ccvXlRfF.s:804    .text.GetUltrasonic:00000000 $t
     /tmp/ccvXlRfF.s:810    .text.GetUltrasonic:00000000 GetUltrasonic
     /tmp/ccvXlRfF.s:953    .text.GetUltrasonic:00000090 $d
     /tmp/ccvXlRfF.s:2044   .bss.htim15:00000000 htim15
     /tmp/ccvXlRfF.s:2037   .bss.pMillis:00000000 pMillis
     /tmp/ccvXlRfF.s:959    .rodata.Log.str1.4:00000000 $d
     /tmp/ccvXlRfF.s:970    .text.Log:00000000 $t
     /tmp/ccvXlRfF.s:976    .text.Log:00000000 Log
     /tmp/ccvXlRfF.s:1064   .text.Log:00000078 $d
     /tmp/ccvXlRfF.s:1073   .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccvXlRfF.s:1101   .text.ProcessCommand:00000000 $t
     /tmp/ccvXlRfF.s:1107   .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccvXlRfF.s:1238   .rodata.ProcessCommand:00000000 $d
     /tmp/ccvXlRfF.s:1469   .text.ProcessCommand:0000017c $d
     /tmp/ccvXlRfF.s:1484   .text.Error_Handler:00000000 $t
     /tmp/ccvXlRfF.s:1490   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccvXlRfF.s:1522   .text.MX_TIM15_Init:00000000 $t
     /tmp/ccvXlRfF.s:1527   .text.MX_TIM15_Init:00000000 MX_TIM15_Init
     /tmp/ccvXlRfF.s:1658   .text.MX_TIM15_Init:00000088 $d
     /tmp/ccvXlRfF.s:1666   .text.SystemClock_Config:00000000 $t
ARM GAS  /tmp/ccvXlRfF.s 			page 72


     /tmp/ccvXlRfF.s:1672   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccvXlRfF.s:1759   .text.main:00000000 $t
     /tmp/ccvXlRfF.s:1765   .text.main:00000000 main
     /tmp/ccvXlRfF.s:1933   .text.main:000000b0 $d
     /tmp/ccvXlRfF.s:1947   .bss.pulse_end_time:00000000 pulse_end_time
     /tmp/ccvXlRfF.s:1944   .bss.pulse_end_time:00000000 $d
     /tmp/ccvXlRfF.s:1954   .bss.pulse_start_time:00000000 pulse_start_time
     /tmp/ccvXlRfF.s:1951   .bss.pulse_start_time:00000000 $d
     /tmp/ccvXlRfF.s:1961   .bss.htim155:00000000 htim155
     /tmp/ccvXlRfF.s:1958   .bss.htim155:00000000 $d
     /tmp/ccvXlRfF.s:1968   .bss.pulseWidth:00000000 pulseWidth
     /tmp/ccvXlRfF.s:1965   .bss.pulseWidth:00000000 $d
     /tmp/ccvXlRfF.s:1975   .bss.fallingEdgeTime:00000000 fallingEdgeTime
     /tmp/ccvXlRfF.s:1972   .bss.fallingEdgeTime:00000000 $d
     /tmp/ccvXlRfF.s:1982   .bss.risingEdgeTime:00000000 risingEdgeTime
     /tmp/ccvXlRfF.s:1979   .bss.risingEdgeTime:00000000 $d
     /tmp/ccvXlRfF.s:1989   .bss.incomingCommand:00000000 $d
     /tmp/ccvXlRfF.s:1992   .bss.command:00000000 $d
     /tmp/ccvXlRfF.s:2002   .bss.rightDistance:00000000 rightDistance
     /tmp/ccvXlRfF.s:1999   .bss.rightDistance:00000000 $d
     /tmp/ccvXlRfF.s:2009   .bss.leftDistance:00000000 leftDistance
     /tmp/ccvXlRfF.s:2006   .bss.leftDistance:00000000 $d
     /tmp/ccvXlRfF.s:2016   .bss.Value2:00000000 Value2
     /tmp/ccvXlRfF.s:2013   .bss.Value2:00000000 $d
     /tmp/ccvXlRfF.s:2023   .bss.Value1:00000000 Value1
     /tmp/ccvXlRfF.s:2020   .bss.Value1:00000000 $d
     /tmp/ccvXlRfF.s:2030   .bss.startTime:00000000 startTime
     /tmp/ccvXlRfF.s:2027   .bss.startTime:00000000 $d
     /tmp/ccvXlRfF.s:2034   .bss.pMillis:00000000 $d
     /tmp/ccvXlRfF.s:2041   .bss.htim15:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
__aeabi_f2d
get_distance
sprintf
HAL_GetTick
HAL_GPIO_ReadPin
__aeabi_f2iz
memcpy
HAL_Delay
MoveMotors
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_Base_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccvXlRfF.s 			page 73


HAL_Init
motor_init
