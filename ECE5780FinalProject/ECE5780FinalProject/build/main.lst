ARM GAS  /tmp/ccLdO6Pf.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB57:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include "motor.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/ccLdO6Pf.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** TIM_HandleTypeDef htim1;
  47:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  48:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  49:Src/main.c    **** #define TRIG_PORT GPIOB
  50:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  51:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  52:Src/main.c    **** #define ECHO_PORT GPIOB
  53:Src/main.c    **** volatile uint32_t pMillis;
  54:Src/main.c    **** volatile uint16_t startTime;
  55:Src/main.c    **** volatile uint16_t Value1 = 0;
  56:Src/main.c    **** volatile uint16_t Value2 = 0;
  57:Src/main.c    **** volatile uint16_t leftDistance = 0;
  58:Src/main.c    **** volatile uint16_t rightDistance = 0;
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  65:Src/main.c    **** void SystemClock_Config(void);
  66:Src/main.c    **** static void MX_GPIO_Init(void);
  67:Src/main.c    **** static void MX_TIM1_Init(void);
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** #define LED_RED GPIO_PIN_6
  75:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  76:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  77:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  78:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  79:Src/main.c    **** 
  80:Src/main.c    **** void LED_Init(uint32_t pins) {
  81:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  82:Src/main.c    **** 
  83:Src/main.c    ****     GPIO_InitTypeDef gpio_led_init = {pins,
  84:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
  85:Src/main.c    ****         GPIO_SPEED_FREQ_LOW,
  86:Src/main.c    ****         GPIO_NOPULL
  87:Src/main.c    ****     };
  88:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpio_led_init);
  89:Src/main.c    **** }
  90:Src/main.c    **** 
ARM GAS  /tmp/ccLdO6Pf.s 			page 3


  91:Src/main.c    **** /**
  92:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  93:Src/main.c    ****  *        functions appropriately.
  94:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  95:Src/main.c    ****  */
  96:Src/main.c    **** void GPIO_AF_Init() {
  97:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  98:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
  99:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 100:Src/main.c    **** 
 101:Src/main.c    **** 	// uart_pins
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 103:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 104:Src/main.c    **** 
 105:Src/main.c    **** 	// motor_left_pins
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 111:Src/main.c    **** 
 112:Src/main.c    **** 	// motor_right_pins
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 118:Src/main.c    **** 
 119:Src/main.c    **** 	// ultrasonic_left_pins
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 121:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 122:Src/main.c    **** 
 123:Src/main.c    **** 	// ultrasonic_right_pins
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 125:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 126:Src/main.c    **** }
 127:Src/main.c    **** 
 128:Src/main.c    **** /**
 129:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 130:Src/main.c    ****  */
 131:Src/main.c    **** void USART_Init() {
 132:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 133:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//Set baud rate
 136:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 137:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 138:Src/main.c    **** 												//use with the BT adapter
 139:Src/main.c    **** 
 140:Src/main.c    **** 	//Enable transmitter
 141:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 142:Src/main.c    **** 
 143:Src/main.c    **** 	//Enable receiver
 144:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 145:Src/main.c    **** 
 146:Src/main.c    **** 	//Enable the receive register not empty interrupt
 147:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /tmp/ccLdO6Pf.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    **** 	//Enable USART3
 150:Src/main.c    **** 	USART3->CR1 |= 1;
 151:Src/main.c    **** }
 152:Src/main.c    **** 
 153:Src/main.c    **** /**
 154:Src/main.c    ****  * @brief Sends a single character on the USART.
 155:Src/main.c    ****  *
 156:Src/main.c    ****  * @param c: the character to be sent
 157:Src/main.c    ****  */
 158:Src/main.c    **** void USART_SendChar(uint8_t c) {
 159:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 160:Src/main.c    **** 		;
 161:Src/main.c    **** 
 162:Src/main.c    **** 	USART3->TDR = c;
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
 166:Src/main.c    ****  * @brief Sends a string on the USART.
 167:Src/main.c    ****  *
 168:Src/main.c    ****  * @param p_string: pointer to string to send
 169:Src/main.c    ****  */
 170:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 171:Src/main.c    **** 	while(*p_string != 0) {
 172:Src/main.c    **** 		USART_SendChar(*p_string);
 173:Src/main.c    **** 		p_string++;
 174:Src/main.c    **** 	}
 175:Src/main.c    **** 	USART_SendChar(0);
 176:Src/main.c    **** }
 177:Src/main.c    **** 
 178:Src/main.c    **** volatile uint8_t command[2];
 179:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 180:Src/main.c    **** 
 181:Src/main.c    **** void ClearCommand(){
 182:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 183:Src/main.c    **** 	memset(command, 0, sizeof(command));
 184:Src/main.c    **** 	incomingCommand = 0;
 185:Src/main.c    **** 	USART_SendString(prompt);
 186:Src/main.c    **** }
 187:Src/main.c    **** 
 188:Src/main.c    **** void USART3_4_IRQHandler(){
 189:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 190:Src/main.c    **** 	incomingCommand = 1;
 191:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 192:Src/main.c    **** 		;
 193:Src/main.c    **** 	if(command[0])
 194:Src/main.c    **** 		if(command[1]){
 195:Src/main.c    **** 			USART_SendString(err);
 196:Src/main.c    **** 			ClearCommand();
 197:Src/main.c    **** 		}
 198:Src/main.c    **** 		else
 199:Src/main.c    **** 			command[1] = USART3->RDR;
 200:Src/main.c    **** 	else
 201:Src/main.c    **** 		command[0] = USART3->RDR;
 202:Src/main.c    **** }
 203:Src/main.c    **** 
 204:Src/main.c    **** void Log(){
ARM GAS  /tmp/ccLdO6Pf.s 			page 5


 205:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 206:Src/main.c    **** 	USART_SendString(err);
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** void Proceed(){
 210:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 211:Src/main.c    **** 	USART_SendString(err);
 212:Src/main.c    **** }
 213:Src/main.c    **** 
 214:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 215:Src/main.c    **** 	uint32_t left_motor_pin;
 216:Src/main.c    **** 	uint32_t right_motor_pin;
 217:Src/main.c    **** 	int32_t CH1_DC = 65535;
 218:Src/main.c    **** 
 219:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 220:Src/main.c    **** 
 221:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 222:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 223:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 224:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 225:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 226:Src/main.c    **** 
 227:Src/main.c    **** 	if(direction != 'w' && direction != 'a' && direction != 'd'){
 228:Src/main.c    **** 		USART_SendString(err);
 229:Src/main.c    **** 		ClearCommand();
 230:Src/main.c    **** 		return;
 231:Src/main.c    **** 	}
 232:Src/main.c    **** 
 233:Src/main.c    **** 	MotorCommand motorcmd = {0};
 234:Src/main.c    **** 
 235:Src/main.c    **** 	uint8_t* part1;
 236:Src/main.c    **** 	uint8_t part2[15];
 237:Src/main.c    **** 	memcpy(part2, 0, 15);
 238:Src/main.c    **** 
 239:Src/main.c    **** 	switch(direction){
 240:Src/main.c    **** 		case 'w':
 241:Src/main.c    **** 			part1 = forward;
 242:Src/main.c    **** 			motorcmd.dir = FORWARD;
 243:Src/main.c    **** 			break;
 244:Src/main.c    **** 		case 'a':
 245:Src/main.c    **** 			part1 = left;
 246:Src/main.c    **** 			motorcmd.dir = LEFT;
 247:Src/main.c    **** 			break;
 248:Src/main.c    **** 		case 'd':
 249:Src/main.c    **** 			part1 = right;
 250:Src/main.c    **** 			motorcmd.dir = RIGHT;
 251:Src/main.c    **** 			break;
 252:Src/main.c    **** 		case 'l':
 253:Src/main.c    **** 			part1 = log;
 254:Src/main.c    **** 			USART_SendString(part1);
 255:Src/main.c    **** 			Log();
 256:Src/main.c    **** 			ClearCommand();
 257:Src/main.c    **** 			return;
 258:Src/main.c    **** 		case 'p':
 259:Src/main.c    **** 			part1 = proceed;
 260:Src/main.c    **** 			USART_SendString(part1);
 261:Src/main.c    **** 			Proceed();
ARM GAS  /tmp/ccLdO6Pf.s 			page 6


 262:Src/main.c    **** 			ClearCommand();
 263:Src/main.c    **** 			return;
 264:Src/main.c    **** 		default:
 265:Src/main.c    **** 			USART_SendString(err);
 266:Src/main.c    **** 			ClearCommand();
 267:Src/main.c    **** 	}
 268:Src/main.c    **** 
 269:Src/main.c    **** 	//these are for "vector commands" only:
 270:Src/main.c    **** 	
 271:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 272:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 273:Src/main.c    **** 		motorcmd.amount = 0;
 274:Src/main.c    **** 	}
 275:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 276:Src/main.c    **** 		USART_SendString(err);
 277:Src/main.c    **** 		ClearCommand();
 278:Src/main.c    **** 		return;
 279:Src/main.c    **** 	}
 280:Src/main.c    **** 	else{
 281:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 282:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 283:Src/main.c    **** 		motorcmd.amount = dist;
 284:Src/main.c    **** 	}
 285:Src/main.c    **** 
 286:Src/main.c    **** 
 287:Src/main.c    **** 	USART_SendString(part1);
 288:Src/main.c    **** 	USART_SendString(part2);
 289:Src/main.c    **** 
 290:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 291:Src/main.c    **** 	HAL_Delay(1000);
 292:Src/main.c    **** 	TIM2->CCR1 = 0;
 293:Src/main.c    **** 
 294:Src/main.c    **** 	MoveMotors(&motorcmd);
 295:Src/main.c    **** 
 296:Src/main.c    **** 	ClearCommand();
 297:Src/main.c    **** 
 298:Src/main.c    **** 
 299:Src/main.c    **** 	// Example code while loop
 300:Src/main.c    **** 	//    while (1)
 301:Src/main.c    **** 	//    {
 302:Src/main.c    **** 	//        while(CH1_DC < 65535)
 303:Src/main.c    **** 	//        {
 304:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 305:Src/main.c    **** 	//            CH1_DC += 70;
 306:Src/main.c    **** 	//            HAL_Delay(1);
 307:Src/main.c    **** 	//        }
 308:Src/main.c    **** 	//        while(CH1_DC > 0)
 309:Src/main.c    **** 	//        {
 310:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 311:Src/main.c    **** 	//            CH1_DC -= 70;
 312:Src/main.c    **** 	//            HAL_Delay(1);
 313:Src/main.c    **** 	//        }
 314:Src/main.c    **** 	//    }
 315:Src/main.c    **** }
 316:Src/main.c    **** 
 317:Src/main.c    **** /*
 318:Src/main.c    **** void Ultrasonic_Init(uint32_t pins)
ARM GAS  /tmp/ccLdO6Pf.s 			page 7


 319:Src/main.c    **** {
 320:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 321:Src/main.c    **** 
 322:Src/main.c    **** 	GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 323:Src/main.c    **** 		GPIO_MODE_INPUT,
 324:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
 325:Src/main.c    **** 		GPIO_NOPULL
 326:Src/main.c    **** 	};
 327:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &gpio_init);
 328:Src/main.c    **** }
 329:Src/main.c    **** */
 330:Src/main.c    **** 
 331:Src/main.c    **** void GetDistance()
 332:Src/main.c    **** {
 333:Src/main.c    **** 
 334:Src/main.c    **** }
 335:Src/main.c    **** 
 336:Src/main.c    **** /* USER CODE END 0 */
 337:Src/main.c    **** 
 338:Src/main.c    **** /**
 339:Src/main.c    ****  * @brief  The application entry point.
 340:Src/main.c    ****  * @retval int
 341:Src/main.c    ****  */
 342:Src/main.c    **** int main(void)
 343:Src/main.c    **** {
 344:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 345:Src/main.c    ****     SystemClock_Config();
 346:Src/main.c    ****     
 347:Src/main.c    ****     //USART Initalizations
 348:Src/main.c    ****     GPIO_AF_Init();
 349:Src/main.c    ****     USART_Init();
 350:Src/main.c    **** 
 351:Src/main.c    ****     motor_init();                           // Initialize motor code
 352:Src/main.c    ****     
 353:Src/main.c    ****     NVIC_EnableIRQ(USART3_4_IRQn);
 354:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 355:Src/main.c    **** 
 356:Src/main.c    ****     uint8_t prompt[] = "CMD> ";
 357:Src/main.c    ****     
 358:Src/main.c    ****     //PWM and Ultrasonic Initalizations
 359:Src/main.c    ****     MX_GPIO_Init();
 360:Src/main.c    ****     MX_TIM1_Init();
 361:Src/main.c    ****     
 362:Src/main.c    ****     HAL_TIM_Base_Start(&htim1);
 363:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 364:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 365:Src/main.c    **** 	
 366:Src/main.c    **** 	while (1) {
 367:Src/main.c    ****         int32_t counter = 0;
 368:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 369:Src/main.c    ****         
 370:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
 371:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 372:Src/main.c    ****         while (counter < 10){
 373:Src/main.c    ****             counter++;
 374:Src/main.c    ****         }  // wait for 10 us
 375:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
ARM GAS  /tmp/ccLdO6Pf.s 			page 8


 376:Src/main.c    ****         
 377:Src/main.c    ****         
 378:Src/main.c    ****         startTime = HAL_GetTick();
 379:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 380:Src/main.c    ****         
 381:Src/main.c    ****         // wait for the echo pin to go high
 382:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 10 >  HAL_GetTick())
 383:Src/main.c    ****         {
 384:Src/main.c    ****          
 385:Src/main.c    ****         }
 386:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 387:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
 388:Src/main.c    ****         
 389:Src/main.c    **** 
 390:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 391:Src/main.c    ****       // wait for the echo pin to go low
 392:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 50 > HAL_GetTick())
 393:Src/main.c    ****         {
 394:Src/main.c    ****             
 395:Src/main.c    ****         }
 396:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 397:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 398:Src/main.c    **** 
 399:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 400:Src/main.c    ****         leftDistance = (Value2 - Value1);
 401:Src/main.c    ****         if(leftDistance < 10)
 402:Src/main.c    ****         {
 403:Src/main.c    ****             char strLeft[32];
 404:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 405:Src/main.c    **** 			/*
 406:Src/main.c    ****             USART_SendString("Left Ultrasonic: ");
 407:Src/main.c    ****             USART_SendString(strLeft);
 408:Src/main.c    ****             USART_SendString("\n");
 409:Src/main.c    **** 			*/
 410:Src/main.c    ****         }
 411:Src/main.c    ****         
 412:Src/main.c    ****         counter = 0;
 413:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 414:Src/main.c    ****         
 415:Src/main.c    ****         //__HAL_TIM_SET_COUNTER(&htim1, 0);
 416:Src/main.c    ****         //while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 417:Src/main.c    ****         while (counter < 10){
 418:Src/main.c    ****             counter++;
 419:Src/main.c    ****         }  // wait for 10 us
 420:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 421:Src/main.c    ****         
 422:Src/main.c    ****         
 423:Src/main.c    ****         startTime = HAL_GetTick();
 424:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 425:Src/main.c    ****         
 426:Src/main.c    ****         // wait for the echo pin to go high
 427:Src/main.c    ****         while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 10 >  HAL_GetTick())
 428:Src/main.c    ****         {
 429:Src/main.c    ****          
 430:Src/main.c    ****         }
 431:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 432:Src/main.c    ****         Value1 = (HAL_GetTick() - startTime);
ARM GAS  /tmp/ccLdO6Pf.s 			page 9


 433:Src/main.c    ****         
 434:Src/main.c    **** 
 435:Src/main.c    ****       pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 436:Src/main.c    ****       // wait for the echo pin to go low
 437:Src/main.c    ****         while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 50 > HAL_GetTick())
 438:Src/main.c    ****         {
 439:Src/main.c    ****             
 440:Src/main.c    ****         }
 441:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 442:Src/main.c    ****         Value2 = (HAL_GetTick() - startTime);
 443:Src/main.c    **** 
 444:Src/main.c    ****       //Distance = ((Value2-Value1)* 0.034)/2;
 445:Src/main.c    ****         rightDistance = (Value2 - Value1);
 446:Src/main.c    ****         if(rightDistance < 10)
 447:Src/main.c    ****         {
 448:Src/main.c    ****             char strRight[32];
 449:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 450:Src/main.c    **** 			/*
 451:Src/main.c    ****             USART_SendString("Right Ultrasonic: ");
 452:Src/main.c    ****             USART_SendString(strRight);
 453:Src/main.c    ****             USART_SendString("\n");
 454:Src/main.c    **** 			*/
 455:Src/main.c    **** 	}
 456:Src/main.c    **** 
 457:Src/main.c    **** 		if(incomingCommand)
 458:Src/main.c    **** 		{
 459:Src/main.c    **** 			if(command[1])
 460:Src/main.c    **** 			{
 461:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 462:Src/main.c    **** 			}
 463:Src/main.c    **** 		}
 464:Src/main.c    **** 	 HAL_Delay(500);
 465:Src/main.c    **** 	}
 466:Src/main.c    **** }
 467:Src/main.c    **** 
 468:Src/main.c    **** /**
 469:Src/main.c    ****  * @brief System Clock Configuration
 470:Src/main.c    ****  * @retval None
 471:Src/main.c    ****  */
 472:Src/main.c    **** void SystemClock_Config(void)
 473:Src/main.c    **** {
 474:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 475:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 476:Src/main.c    **** 
 477:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 478:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 479:Src/main.c    **** 	 */
 480:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 481:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 482:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 483:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 484:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 485:Src/main.c    **** 	{
 486:Src/main.c    **** 		Error_Handler();
 487:Src/main.c    **** 	}
 488:Src/main.c    **** 
 489:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
ARM GAS  /tmp/ccLdO6Pf.s 			page 10


 490:Src/main.c    **** 	*/
 491:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 492:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 493:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 494:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 495:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 496:Src/main.c    **** 
 497:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 498:Src/main.c    **** 	{
 499:Src/main.c    **** 		Error_Handler();
 500:Src/main.c    **** 	}
 501:Src/main.c    **** }
 502:Src/main.c    **** 
 503:Src/main.c    **** /**
 504:Src/main.c    ****  * @brief TIM2 Initialization Function
 505:Src/main.c    ****  * @param None
 506:Src/main.c    ****  * @retval None
 507:Src/main.c    ****  */
 508:Src/main.c    **** static void MX_TIM1_Init(void)
 509:Src/main.c    **** {
 510:Src/main.c    **** 
 511:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 512:Src/main.c    **** 
 513:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 514:Src/main.c    **** 
 515:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 516:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 517:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 518:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 521:Src/main.c    **** 
 522:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 523:Src/main.c    ****   htim1.Instance = TIM1;
 524:Src/main.c    ****   htim1.Init.Prescaler = 0;
 525:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 526:Src/main.c    ****   htim1.Init.Period = 65535;
 527:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 528:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 529:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 530:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 531:Src/main.c    ****   {
 532:Src/main.c    ****     Error_Handler();
 533:Src/main.c    ****   }
 534:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 535:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 536:Src/main.c    ****   {
 537:Src/main.c    ****     Error_Handler();
 538:Src/main.c    ****   }
 539:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 540:Src/main.c    ****   {
 541:Src/main.c    ****     Error_Handler();
 542:Src/main.c    ****   }
 543:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 544:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 545:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 546:Src/main.c    ****   {
ARM GAS  /tmp/ccLdO6Pf.s 			page 11


 547:Src/main.c    ****     Error_Handler();
 548:Src/main.c    ****   }
 549:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 550:Src/main.c    ****   sConfigOC.Pulse = 0;
 551:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 552:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 553:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 554:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 555:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 556:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 557:Src/main.c    ****   {
 558:Src/main.c    ****     Error_Handler();
 559:Src/main.c    ****   }
 560:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 561:Src/main.c    ****   {
 562:Src/main.c    ****     Error_Handler();
 563:Src/main.c    ****   }
 564:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 565:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 566:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 567:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 568:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 569:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 570:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 571:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 572:Src/main.c    ****   {
 573:Src/main.c    ****     Error_Handler();
 574:Src/main.c    ****   }
 575:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 576:Src/main.c    **** 
 577:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 578:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 579:Src/main.c    **** 
 580:Src/main.c    **** }
 581:Src/main.c    **** 
 582:Src/main.c    **** /**
 583:Src/main.c    ****  * @brief GPIO Initialization Function
 584:Src/main.c    ****  * @param None
 585:Src/main.c    ****  * @retval None
 586:Src/main.c    ****  */
 587:Src/main.c    **** static void MX_GPIO_Init(void)
 588:Src/main.c    **** {
  26              		.loc 1 588 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 589:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 589 2 view .LVU1
  39              		.loc 1 589 19 is_stmt 0 view .LVU2
ARM GAS  /tmp/ccLdO6Pf.s 			page 12


  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 590:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 591:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 592:Src/main.c    **** 
 593:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 594:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 594 2 is_stmt 1 view .LVU3
  46              	.LBB11:
  47              		.loc 1 594 2 view .LVU4
  48              		.loc 1 594 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 594 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 594 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE11:
  62              		.loc 1 594 2 view .LVU8
 595:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 596:Src/main.c    **** 
 597:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 598:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 598 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
 599:Src/main.c    **** 
 600:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 601:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 601 2 view .LVU10
  72              		.loc 1 601 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 602:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 602 2 is_stmt 1 view .LVU12
  76              		.loc 1 602 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 603:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 603 2 is_stmt 1 view .LVU14
  79              		.loc 1 603 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 604:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccLdO6Pf.s 			page 13


  82              		.loc 1 604 2 is_stmt 1 view .LVU16
  83              		.loc 1 604 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 605:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 605 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 606:Src/main.c    **** 
 607:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 608:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 609:Src/main.c    **** }
  90              		.loc 1 609 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE57:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 80 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  80:Src/main.c    ****     /* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 80 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 83 5 is_stmt 1 view .LVU22
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 83 22 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  83:Src/main.c    ****         GPIO_MODE_OUTPUT_PP,
ARM GAS  /tmp/ccLdO6Pf.s 			page 14


 131              		.loc 1 83 22 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  88:Src/main.c    **** }
 137              		.loc 1 88 5 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  89:Src/main.c    **** 
 142              		.loc 1 89 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  89:Src/main.c    **** 
 146              		.loc 1 89 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  96:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 96 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 97 2 view .LVU29
 177              	.LBB12:
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 97 2 view .LVU30
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 97 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
ARM GAS  /tmp/ccLdO6Pf.s 			page 15


 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 97 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 190              		.loc 1 97 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE12:
  97:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 97 2 view .LVU34
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 98 2 view .LVU35
 195              	.LBB13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 98 2 view .LVU36
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 98 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 98 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 98 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE13:
  98:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 98 2 view .LVU40
  99:Src/main.c    **** 
 211              		.loc 1 99 5 view .LVU41
 212              	.LBB14:
  99:Src/main.c    **** 
 213              		.loc 1 99 5 view .LVU42
  99:Src/main.c    **** 
 214              		.loc 1 99 5 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 
 220              		.loc 1 99 5 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
  99:Src/main.c    **** 
 224              		.loc 1 99 5 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccLdO6Pf.s 			page 16


 226              	.LBE14:
  99:Src/main.c    **** 
 227              		.loc 1 99 5 view .LVU46
 102:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 102 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL8:
 103:Src/main.c    **** 
 234              		.loc 1 103 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 106:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 106 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 107:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 107 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 108 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 258              		.loc 1 109 2 view .LVU52
 259 006e 2100     		movs	r1, r4
 260 0070 4C31     		adds	r1, r1, #76
 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 110:Src/main.c    **** 
 264              		.loc 1 110 2 view .LVU53
 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 113:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 113 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
ARM GAS  /tmp/ccLdO6Pf.s 			page 17


 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 114:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 114 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 115 2 view .LVU56
 283 0096 2100     		movs	r1, r4
 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 116 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 117:Src/main.c    **** 
 294              		.loc 1 117 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 120:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 120 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 121:Src/main.c    **** 
 306              		.loc 1 121 2 view .LVU60
 307 00be 2100     		movs	r1, r4
 308 00c0 1C31     		adds	r1, r1, #28
 309 00c2 A069     		ldr	r0, [r4, #24]
 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 124:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 124 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 125:Src/main.c    **** }
 318              		.loc 1 125 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccLdO6Pf.s 			page 18


 323              	.LVL23:
 126:Src/main.c    **** 
 324              		.loc 1 126 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 131:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 131 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 362              		.loc 1 132 2 view .LVU65
 363              	.LBB15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 132 2 view .LVU66
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 132 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 132 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
ARM GAS  /tmp/ccLdO6Pf.s 			page 19


 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 132 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE15:
 132:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 132 2 view .LVU70
 133:Src/main.c    **** 
 380              		.loc 1 133 2 view .LVU71
 133:Src/main.c    **** 
 381              		.loc 1 133 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 133:Src/main.c    **** 
 383              		.loc 1 133 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 136 2 is_stmt 1 view .LVU74
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 136 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 136:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 136 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 137:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 137 2 is_stmt 1 view .LVU77
 137:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 137 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 137:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 137 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 137:Src/main.c    **** 												//use with the BT adapter
 403              		.loc 1 137 14 view .LVU80
 404 0034 E060     		str	r0, [r4, #12]
 141:Src/main.c    **** 
 405              		.loc 1 141 2 is_stmt 1 view .LVU81
 141:Src/main.c    **** 
 406              		.loc 1 141 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 141:Src/main.c    **** 
 408              		.loc 1 141 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 144:Src/main.c    **** 
 412              		.loc 1 144 2 is_stmt 1 view .LVU84
 144:Src/main.c    **** 
 413              		.loc 1 144 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 144:Src/main.c    **** 
ARM GAS  /tmp/ccLdO6Pf.s 			page 20


 415              		.loc 1 144 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 147:Src/main.c    **** 
 419              		.loc 1 147 2 is_stmt 1 view .LVU87
 147:Src/main.c    **** 
 420              		.loc 1 147 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
 147:Src/main.c    **** 
 422              		.loc 1 147 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 150:Src/main.c    **** }
 426              		.loc 1 150 2 is_stmt 1 view .LVU90
 150:Src/main.c    **** }
 427              		.loc 1 150 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 150:Src/main.c    **** }
 429              		.loc 1 150 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 151:Src/main.c    **** 
 433              		.loc 1 151 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
 448              		.global	USART_SendChar
 449              		.syntax unified
 450              		.code	16
 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 158:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 158 32 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 159:Src/main.c    **** 		;
 462              		.loc 1 159 8 discriminator 1 view .LVU95
 159:Src/main.c    **** 		;
 463              		.loc 1 159 16 is_stmt 0 discriminator 1 view .LVU96
ARM GAS  /tmp/ccLdO6Pf.s 			page 21


 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 159:Src/main.c    **** 		;
 466              		.loc 1 159 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 162:Src/main.c    **** }
 469              		.loc 1 162 2 is_stmt 1 view .LVU98
 162:Src/main.c    **** }
 470              		.loc 1 162 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
 163:Src/main.c    **** 
 473              		.loc 1 163 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 170:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 170 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 170:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 170 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 171 2 is_stmt 1 view .LVU103
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 505              		.loc 1 171 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 172:Src/main.c    **** 		p_string++;
 509              		.loc 1 172 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 173:Src/main.c    **** 	}
 512              		.loc 1 173 3 view .LVU106
ARM GAS  /tmp/ccLdO6Pf.s 			page 22


 173:Src/main.c    **** 	}
 513              		.loc 1 173 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 171 18 is_stmt 1 view .LVU108
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 171 8 is_stmt 0 view .LVU109
 519 000c 2078     		ldrb	r0, [r4]
 171:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 171 18 view .LVU110
 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 175:Src/main.c    **** }
 523              		.loc 1 175 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 176:Src/main.c    **** 
 526              		.loc 1 176 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 176:Src/main.c    **** 
 529              		.loc 1 176 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
 546              	.LFB48:
 181:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 547              		.loc 1 181 20 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 182 2 view .LVU115
 182:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 182 10 is_stmt 0 view .LVU116
 560 0004 074B     		ldr	r3, .L22
ARM GAS  /tmp/ccLdO6Pf.s 			page 23


 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 183:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 183 2 is_stmt 1 view .LVU117
 567 0010 054B     		ldr	r3, .L22+4
 568 0012 0022     		movs	r2, #0
 569 0014 1A80     		strh	r2, [r3]
 184:Src/main.c    **** 	USART_SendString(prompt);
 570              		.loc 1 184 2 view .LVU118
 184:Src/main.c    **** 	USART_SendString(prompt);
 571              		.loc 1 184 18 is_stmt 0 view .LVU119
 572 0016 054B     		ldr	r3, .L22+8
 573 0018 1A70     		strb	r2, [r3]
 185:Src/main.c    **** }
 574              		.loc 1 185 2 is_stmt 1 view .LVU120
 575 001a 6846     		mov	r0, sp
 576 001c FFF7FEFF 		bl	USART_SendString
 577              	.LVL33:
 186:Src/main.c    **** 
 578              		.loc 1 186 1 is_stmt 0 view .LVU121
 579 0020 03B0     		add	sp, sp, #12
 580              		@ sp needed
 581 0022 00BD     		pop	{pc}
 582              	.L23:
 583              		.align	2
 584              	.L22:
 585 0024 00000000 		.word	.LC21
 586 0028 00000000 		.word	command
 587 002c 00000000 		.word	incomingCommand
 588              		.cfi_endproc
 589              	.LFE48:
 591              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 592              		.align	2
 593              	.LC25:
 594 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 594      616E6420 
 594      746F6F20 
 594      6C6F6E67 
 594      210A00
 595              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 596              		.align	1
 597              		.global	USART3_4_IRQHandler
 598              		.syntax unified
 599              		.code	16
 600              		.thumb_func
 602              	USART3_4_IRQHandler:
 603              	.LFB49:
 188:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 604              		.loc 1 188 27 is_stmt 1 view -0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 24
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608 0000 30B5     		push	{r4, r5, lr}
 609              	.LCFI11:
ARM GAS  /tmp/ccLdO6Pf.s 			page 24


 610              		.cfi_def_cfa_offset 12
 611              		.cfi_offset 4, -12
 612              		.cfi_offset 5, -8
 613              		.cfi_offset 14, -4
 614 0002 87B0     		sub	sp, sp, #28
 615              	.LCFI12:
 616              		.cfi_def_cfa_offset 40
 189:Src/main.c    **** 	incomingCommand = 1;
 617              		.loc 1 189 2 view .LVU123
 189:Src/main.c    **** 	incomingCommand = 1;
 618              		.loc 1 189 10 is_stmt 0 view .LVU124
 619 0004 01AA     		add	r2, sp, #4
 620 0006 164B     		ldr	r3, .L31
 621 0008 1800     		movs	r0, r3
 622 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 623 000c 38C2     		stmia	r2!, {r3, r4, r5}
 624 000e 0368     		ldr	r3, [r0]
 625 0010 1360     		str	r3, [r2]
 626 0012 8388     		ldrh	r3, [r0, #4]
 627 0014 9380     		strh	r3, [r2, #4]
 628 0016 8379     		ldrb	r3, [r0, #6]
 629 0018 9371     		strb	r3, [r2, #6]
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 630              		.loc 1 190 2 is_stmt 1 view .LVU125
 190:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 631              		.loc 1 190 18 is_stmt 0 view .LVU126
 632 001a 124B     		ldr	r3, .L31+4
 633 001c 0122     		movs	r2, #1
 634 001e 1A70     		strb	r2, [r3]
 191:Src/main.c    **** 		;
 635              		.loc 1 191 2 is_stmt 1 view .LVU127
 636              	.L25:
 191:Src/main.c    **** 		;
 637              		.loc 1 191 8 discriminator 1 view .LVU128
 191:Src/main.c    **** 		;
 638              		.loc 1 191 16 is_stmt 0 discriminator 1 view .LVU129
 639 0020 114B     		ldr	r3, .L31+8
 640 0022 DB69     		ldr	r3, [r3, #28]
 191:Src/main.c    **** 		;
 641              		.loc 1 191 8 discriminator 1 view .LVU130
 642 0024 9B06     		lsls	r3, r3, #26
 643 0026 FBD5     		bpl	.L25
 193:Src/main.c    **** 		if(command[1]){
 644              		.loc 1 193 2 is_stmt 1 view .LVU131
 193:Src/main.c    **** 		if(command[1]){
 645              		.loc 1 193 12 is_stmt 0 view .LVU132
 646 0028 104B     		ldr	r3, .L31+12
 647 002a 1B78     		ldrb	r3, [r3]
 193:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 193 4 view .LVU133
 649 002c 002B     		cmp	r3, #0
 650 002e 0FD0     		beq	.L26
 194:Src/main.c    **** 			USART_SendString(err);
 651              		.loc 1 194 3 is_stmt 1 view .LVU134
 194:Src/main.c    **** 			USART_SendString(err);
 652              		.loc 1 194 13 is_stmt 0 view .LVU135
 653 0030 0E4B     		ldr	r3, .L31+12
ARM GAS  /tmp/ccLdO6Pf.s 			page 25


 654 0032 5B78     		ldrb	r3, [r3, #1]
 194:Src/main.c    **** 			USART_SendString(err);
 655              		.loc 1 194 5 view .LVU136
 656 0034 002B     		cmp	r3, #0
 657 0036 05D1     		bne	.L30
 199:Src/main.c    **** 	else
 658              		.loc 1 199 4 is_stmt 1 view .LVU137
 199:Src/main.c    **** 	else
 659              		.loc 1 199 23 is_stmt 0 view .LVU138
 660 0038 0B4B     		ldr	r3, .L31+8
 661 003a 9B8C     		ldrh	r3, [r3, #36]
 199:Src/main.c    **** 	else
 662              		.loc 1 199 15 view .LVU139
 663 003c DBB2     		uxtb	r3, r3
 664 003e 0B4A     		ldr	r2, .L31+12
 665 0040 5370     		strb	r3, [r2, #1]
 666 0042 0AE0     		b	.L24
 667              	.L30:
 195:Src/main.c    **** 			ClearCommand();
 668              		.loc 1 195 4 is_stmt 1 view .LVU140
 669 0044 01A8     		add	r0, sp, #4
 670 0046 FFF7FEFF 		bl	USART_SendString
 671              	.LVL34:
 196:Src/main.c    **** 		}
 672              		.loc 1 196 4 view .LVU141
 673 004a FFF7FEFF 		bl	ClearCommand
 674              	.LVL35:
 675 004e 04E0     		b	.L24
 676              	.L26:
 201:Src/main.c    **** }
 677              		.loc 1 201 3 view .LVU142
 201:Src/main.c    **** }
 678              		.loc 1 201 22 is_stmt 0 view .LVU143
 679 0050 054B     		ldr	r3, .L31+8
 680 0052 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** }
 681              		.loc 1 201 14 view .LVU144
 682 0054 DBB2     		uxtb	r3, r3
 683 0056 054A     		ldr	r2, .L31+12
 684 0058 1370     		strb	r3, [r2]
 685              	.L24:
 202:Src/main.c    **** 
 686              		.loc 1 202 1 view .LVU145
 687 005a 07B0     		add	sp, sp, #28
 688              		@ sp needed
 689 005c 30BD     		pop	{r4, r5, pc}
 690              	.L32:
 691 005e C046     		.align	2
 692              	.L31:
 693 0060 00000000 		.word	.LC25
 694 0064 00000000 		.word	incomingCommand
 695 0068 00480040 		.word	1073760256
 696 006c 00000000 		.word	command
 697              		.cfi_endproc
 698              	.LFE49:
 700              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 701              		.align	2
ARM GAS  /tmp/ccLdO6Pf.s 			page 26


 702              	.LC29:
 703 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 703      79657420 
 703      696D706C 
 703      656D656E 
 703      7465640A 
 704              		.section	.text.Log,"ax",%progbits
 705              		.align	1
 706              		.global	Log
 707              		.syntax unified
 708              		.code	16
 709              		.thumb_func
 711              	Log:
 712              	.LFB50:
 204:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 713              		.loc 1 204 11 is_stmt 1 view -0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 717 0000 10B5     		push	{r4, lr}
 718              	.LCFI13:
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 4, -8
 721              		.cfi_offset 14, -4
 205:Src/main.c    **** 	USART_SendString(err);
 722              		.loc 1 205 2 view .LVU147
 723              	.LVL36:
 206:Src/main.c    **** }
 724              		.loc 1 206 2 view .LVU148
 725 0002 0248     		ldr	r0, .L34
 726 0004 FFF7FEFF 		bl	USART_SendString
 727              	.LVL37:
 207:Src/main.c    **** 
 728              		.loc 1 207 1 is_stmt 0 view .LVU149
 729              		@ sp needed
 730 0008 10BD     		pop	{r4, pc}
 731              	.L35:
 732 000a C046     		.align	2
 733              	.L34:
 734 000c 00000000 		.word	.LC29
 735              		.cfi_endproc
 736              	.LFE50:
 738              		.section	.text.Proceed,"ax",%progbits
 739              		.align	1
 740              		.global	Proceed
 741              		.syntax unified
 742              		.code	16
 743              		.thumb_func
 745              	Proceed:
 746              	.LFB51:
 209:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 747              		.loc 1 209 15 is_stmt 1 view -0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751 0000 10B5     		push	{r4, lr}
 752              	.LCFI14:
ARM GAS  /tmp/ccLdO6Pf.s 			page 27


 753              		.cfi_def_cfa_offset 8
 754              		.cfi_offset 4, -8
 755              		.cfi_offset 14, -4
 210:Src/main.c    **** 	USART_SendString(err);
 756              		.loc 1 210 2 view .LVU151
 757              	.LVL38:
 211:Src/main.c    **** }
 758              		.loc 1 211 2 view .LVU152
 759 0002 0248     		ldr	r0, .L37
 760 0004 FFF7FEFF 		bl	USART_SendString
 761              	.LVL39:
 212:Src/main.c    **** 
 762              		.loc 1 212 1 is_stmt 0 view .LVU153
 763              		@ sp needed
 764 0008 10BD     		pop	{r4, pc}
 765              	.L38:
 766 000a C046     		.align	2
 767              	.L37:
 768 000c 00000000 		.word	.LC29
 769              		.cfi_endproc
 770              	.LFE51:
 772              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 773              		.align	2
 774              	.LC45:
 775 0000 696E6465 		.ascii	"indefinitely\012\000"
 775      66696E69 
 775      74656C79 
 775      0A00
 776 000e 0000     		.align	2
 777              	.LC47:
 778 0010 25640A00 		.ascii	"%d\012\000"
 779              		.align	2
 780              	.LC32:
 781 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 781      523A2049 
 781      6E76616C 
 781      69642063 
 781      6F6D6D61 
 782 002d 000000   		.align	2
 783              	.LC34:
 784 0030 4D6F7669 		.ascii	"Moving forward \000"
 784      6E672066 
 784      6F727761 
 784      72642000 
 785              		.align	2
 786              	.LC36:
 787 0040 5475726E 		.ascii	"Turning left \000"
 787      696E6720 
 787      6C656674 
 787      2000
 788 004e 0000     		.align	2
 789              	.LC38:
 790 0050 5475726E 		.ascii	"Turning right \000"
 790      696E6720 
 790      72696768 
 790      742000
 791 005f 00       		.align	2
ARM GAS  /tmp/ccLdO6Pf.s 			page 28


 792              	.LC40:
 793 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 793      696E6720 
 793      73656E73 
 793      6F722064 
 793      6174610A 
 794 0075 000000   		.align	2
 795              	.LC42:
 796 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 796      72696E67 
 796      20617574 
 796      6F6E6F6D 
 796      6F757320 
 797              		.section	.text.ProcessCommand,"ax",%progbits
 798              		.align	1
 799              		.global	ProcessCommand
 800              		.syntax unified
 801              		.code	16
 802              		.thumb_func
 804              	ProcessCommand:
 805              	.LVL40:
 806              	.LFB52:
 214:Src/main.c    **** 	uint32_t left_motor_pin;
 807              		.loc 1 214 57 is_stmt 1 view -0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 152
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 214:Src/main.c    **** 	uint32_t left_motor_pin;
 811              		.loc 1 214 57 is_stmt 0 view .LVU155
 812 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 813              	.LCFI15:
 814              		.cfi_def_cfa_offset 20
 815              		.cfi_offset 4, -20
 816              		.cfi_offset 5, -16
 817              		.cfi_offset 6, -12
 818              		.cfi_offset 7, -8
 819              		.cfi_offset 14, -4
 820 0002 A7B0     		sub	sp, sp, #156
 821              	.LCFI16:
 822              		.cfi_def_cfa_offset 176
 823 0004 0400     		movs	r4, r0
 824 0006 0D00     		movs	r5, r1
 215:Src/main.c    **** 	uint32_t right_motor_pin;
 825              		.loc 1 215 2 is_stmt 1 view .LVU156
 216:Src/main.c    **** 	int32_t CH1_DC = 65535;
 826              		.loc 1 216 2 view .LVU157
 217:Src/main.c    **** 
 827              		.loc 1 217 2 view .LVU158
 828              	.LVL41:
 219:Src/main.c    **** 
 829              		.loc 1 219 2 view .LVU159
 219:Src/main.c    **** 
 830              		.loc 1 219 10 is_stmt 0 view .LVU160
 831 0008 1FA9     		add	r1, sp, #124
 832              	.LVL42:
 219:Src/main.c    **** 
 833              		.loc 1 219 10 view .LVU161
ARM GAS  /tmp/ccLdO6Pf.s 			page 29


 834 000a 554B     		ldr	r3, .L57
 835 000c 0A00     		movs	r2, r1
 836 000e 83CB     		ldmia	r3!, {r0, r1, r7}
 837 0010 83C2     		stmia	r2!, {r0, r1, r7}
 838              	.LVL43:
 219:Src/main.c    **** 
 839              		.loc 1 219 10 view .LVU162
 840 0012 83CB     		ldmia	r3!, {r0, r1, r7}
 841 0014 83C2     		stmia	r2!, {r0, r1, r7}
 842 0016 1B78     		ldrb	r3, [r3]
 843 0018 1370     		strb	r3, [r2]
 221:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 844              		.loc 1 221 2 is_stmt 1 view .LVU163
 221:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 845              		.loc 1 221 10 is_stmt 0 view .LVU164
 846 001a 1BAA     		add	r2, sp, #108
 847 001c 514B     		ldr	r3, .L57+4
 848 001e 83CB     		ldmia	r3!, {r0, r1, r7}
 849 0020 83C2     		stmia	r2!, {r0, r1, r7}
 850 0022 1B68     		ldr	r3, [r3]
 851 0024 1360     		str	r3, [r2]
 222:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 852              		.loc 1 222 2 is_stmt 1 view .LVU165
 222:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 853              		.loc 1 222 10 is_stmt 0 view .LVU166
 854 0026 17AA     		add	r2, sp, #92
 855 0028 4F4B     		ldr	r3, .L57+8
 856 002a 83CB     		ldmia	r3!, {r0, r1, r7}
 857 002c 83C2     		stmia	r2!, {r0, r1, r7}
 858 002e 1B88     		ldrh	r3, [r3]
 859 0030 1380     		strh	r3, [r2]
 223:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 860              		.loc 1 223 2 is_stmt 1 view .LVU167
 223:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 861              		.loc 1 223 10 is_stmt 0 view .LVU168
 862 0032 13AA     		add	r2, sp, #76
 863 0034 4D4B     		ldr	r3, .L57+12
 864 0036 83CB     		ldmia	r3!, {r0, r1, r7}
 865 0038 83C2     		stmia	r2!, {r0, r1, r7}
 866 003a 1100     		movs	r1, r2
 867 003c 1A88     		ldrh	r2, [r3]
 868 003e 0A80     		strh	r2, [r1]
 869 0040 9B78     		ldrb	r3, [r3, #2]
 870 0042 8B70     		strb	r3, [r1, #2]
 224:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 871              		.loc 1 224 2 is_stmt 1 view .LVU169
 224:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 872              		.loc 1 224 10 is_stmt 0 view .LVU170
 873 0044 0DA9     		add	r1, sp, #52
 874 0046 4A4B     		ldr	r3, .L57+16
 875 0048 0A00     		movs	r2, r1
 876 004a 83CB     		ldmia	r3!, {r0, r1, r7}
 877 004c 83C2     		stmia	r2!, {r0, r1, r7}
 878 004e 03CB     		ldmia	r3!, {r0, r1}
 879 0050 03C2     		stmia	r2!, {r0, r1}
 880 0052 1B78     		ldrb	r3, [r3]
 881 0054 1370     		strb	r3, [r2]
ARM GAS  /tmp/ccLdO6Pf.s 			page 30


 225:Src/main.c    **** 
 882              		.loc 1 225 2 is_stmt 1 view .LVU171
 225:Src/main.c    **** 
 883              		.loc 1 225 10 is_stmt 0 view .LVU172
 884 0056 05A9     		add	r1, sp, #20
 885 0058 464B     		ldr	r3, .L57+20
 886 005a 0A00     		movs	r2, r1
 887 005c 83CB     		ldmia	r3!, {r0, r1, r7}
 888 005e 83C2     		stmia	r2!, {r0, r1, r7}
 889 0060 83CB     		ldmia	r3!, {r0, r1, r7}
 890 0062 83C2     		stmia	r2!, {r0, r1, r7}
 891 0064 1968     		ldr	r1, [r3]
 892 0066 1160     		str	r1, [r2]
 893 0068 1B79     		ldrb	r3, [r3, #4]
 894 006a 1371     		strb	r3, [r2, #4]
 227:Src/main.c    **** 		USART_SendString(err);
 895              		.loc 1 227 2 is_stmt 1 view .LVU173
 227:Src/main.c    **** 		USART_SendString(err);
 896              		.loc 1 227 4 is_stmt 0 view .LVU174
 897 006c 772C     		cmp	r4, #119
 898 006e 03D0     		beq	.L40
 227:Src/main.c    **** 		USART_SendString(err);
 899              		.loc 1 227 22 discriminator 1 view .LVU175
 900 0070 612C     		cmp	r4, #97
 901 0072 01D0     		beq	.L40
 227:Src/main.c    **** 		USART_SendString(err);
 902              		.loc 1 227 42 discriminator 2 view .LVU176
 903 0074 642C     		cmp	r4, #100
 904 0076 10D1     		bne	.L54
 905              	.L40:
 233:Src/main.c    **** 
 906              		.loc 1 233 2 is_stmt 1 view .LVU177
 233:Src/main.c    **** 
 907              		.loc 1 233 15 is_stmt 0 view .LVU178
 908 0078 04AB     		add	r3, sp, #16
 909 007a 0022     		movs	r2, #0
 910 007c 1A80     		strh	r2, [r3]
 235:Src/main.c    **** 	uint8_t part2[15];
 911              		.loc 1 235 2 is_stmt 1 view .LVU179
 236:Src/main.c    **** 	memcpy(part2, 0, 15);
 912              		.loc 1 236 2 view .LVU180
 237:Src/main.c    **** 
 913              		.loc 1 237 2 view .LVU181
 914 007e 0F32     		adds	r2, r2, #15
 915 0080 0021     		movs	r1, #0
 916 0082 6846     		mov	r0, sp
 917 0084 FFF7FEFF 		bl	memcpy
 918              	.LVL44:
 239:Src/main.c    **** 		case 'w':
 919              		.loc 1 239 2 view .LVU182
 920 0088 2300     		movs	r3, r4
 921 008a 613B     		subs	r3, r3, #97
 922 008c DAB2     		uxtb	r2, r3
 923 008e 162A     		cmp	r2, #22
 924 0090 4BD8     		bhi	.L42
 925 0092 9300     		lsls	r3, r2, #2
 926 0094 384A     		ldr	r2, .L57+24
ARM GAS  /tmp/ccLdO6Pf.s 			page 31


 927 0096 D358     		ldr	r3, [r2, r3]
 928 0098 9F46     		mov	pc, r3
 929              		.section	.rodata.ProcessCommand,"a",%progbits
 930              		.align	2
 931              	.L44:
 932 0000 A6000000 		.word	.L48
 933 0004 2A010000 		.word	.L42
 934 0008 2A010000 		.word	.L42
 935 000c 00010000 		.word	.L47
 936 0010 2A010000 		.word	.L42
 937 0014 2A010000 		.word	.L42
 938 0018 2A010000 		.word	.L42
 939 001c 2A010000 		.word	.L42
 940 0020 2A010000 		.word	.L42
 941 0024 2A010000 		.word	.L42
 942 0028 2A010000 		.word	.L42
 943 002c 0A010000 		.word	.L46
 944 0030 2A010000 		.word	.L42
 945 0034 2A010000 		.word	.L42
 946 0038 2A010000 		.word	.L42
 947 003c 1A010000 		.word	.L45
 948 0040 2A010000 		.word	.L42
 949 0044 2A010000 		.word	.L42
 950 0048 2A010000 		.word	.L42
 951 004c 2A010000 		.word	.L42
 952 0050 2A010000 		.word	.L42
 953 0054 2A010000 		.word	.L42
 954 0058 36010000 		.word	.L53
 955              		.section	.text.ProcessCommand
 956              	.L54:
 228:Src/main.c    **** 		ClearCommand();
 957              		.loc 1 228 3 view .LVU183
 958 009a 1FA8     		add	r0, sp, #124
 959 009c FFF7FEFF 		bl	USART_SendString
 960              	.LVL45:
 229:Src/main.c    **** 		return;
 961              		.loc 1 229 3 view .LVU184
 962 00a0 FFF7FEFF 		bl	ClearCommand
 963              	.LVL46:
 230:Src/main.c    **** 	}
 964              		.loc 1 230 3 view .LVU185
 965 00a4 2AE0     		b	.L39
 966              	.L48:
 245:Src/main.c    **** 			motorcmd.dir = LEFT;
 967              		.loc 1 245 4 view .LVU186
 968              	.LVL47:
 246:Src/main.c    **** 			break;
 969              		.loc 1 246 4 view .LVU187
 246:Src/main.c    **** 			break;
 970              		.loc 1 246 17 is_stmt 0 view .LVU188
 971 00a6 04AB     		add	r3, sp, #16
 972 00a8 0122     		movs	r2, #1
 973 00aa 1A70     		strb	r2, [r3]
 247:Src/main.c    **** 		case 'd':
 974              		.loc 1 247 4 is_stmt 1 view .LVU189
 245:Src/main.c    **** 			motorcmd.dir = LEFT;
 975              		.loc 1 245 10 is_stmt 0 view .LVU190
ARM GAS  /tmp/ccLdO6Pf.s 			page 32


 976 00ac 17AE     		add	r6, sp, #92
 977              	.LVL48:
 978              	.L43:
 271:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 979              		.loc 1 271 2 is_stmt 1 view .LVU191
 271:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 980              		.loc 1 271 4 is_stmt 0 view .LVU192
 981 00ae 302D     		cmp	r5, #48
 982 00b0 43D0     		beq	.L55
 983              	.L49:
 275:Src/main.c    **** 		USART_SendString(err);
 984              		.loc 1 275 7 is_stmt 1 view .LVU193
 275:Src/main.c    **** 		USART_SendString(err);
 985              		.loc 1 275 25 is_stmt 0 view .LVU194
 986 00b2 2B00     		movs	r3, r5
 987 00b4 313B     		subs	r3, r3, #49
 988 00b6 DBB2     		uxtb	r3, r3
 275:Src/main.c    **** 		USART_SendString(err);
 989              		.loc 1 275 9 view .LVU195
 990 00b8 082B     		cmp	r3, #8
 991 00ba 4AD8     		bhi	.L56
 992              	.LBB16:
 281:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 993              		.loc 1 281 3 is_stmt 1 view .LVU196
 281:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 994              		.loc 1 281 11 is_stmt 0 view .LVU197
 995 00bc 1424     		movs	r4, #20
 996 00be 6C43     		muls	r4, r5
 997 00c0 4034     		adds	r4, r4, #64
 998 00c2 E4B2     		uxtb	r4, r4
 999              	.LVL49:
 282:Src/main.c    **** 		motorcmd.amount = dist;
 1000              		.loc 1 282 3 is_stmt 1 view .LVU198
 1001 00c4 2D49     		ldr	r1, .L57+28
 1002 00c6 2200     		movs	r2, r4
 1003 00c8 6846     		mov	r0, sp
 1004 00ca FFF7FEFF 		bl	sprintf
 1005              	.LVL50:
 283:Src/main.c    **** 	}
 1006              		.loc 1 283 3 view .LVU199
 283:Src/main.c    **** 	}
 1007              		.loc 1 283 19 is_stmt 0 view .LVU200
 1008 00ce 04AB     		add	r3, sp, #16
 1009 00d0 5C70     		strb	r4, [r3, #1]
 1010              	.LVL51:
 1011              	.L50:
 283:Src/main.c    **** 	}
 1012              		.loc 1 283 19 view .LVU201
 1013              	.LBE16:
 287:Src/main.c    **** 	USART_SendString(part2);
 1014              		.loc 1 287 2 is_stmt 1 view .LVU202
 1015 00d2 3000     		movs	r0, r6
 1016 00d4 FFF7FEFF 		bl	USART_SendString
 1017              	.LVL52:
 288:Src/main.c    **** 
 1018              		.loc 1 288 2 view .LVU203
 1019 00d8 6846     		mov	r0, sp
ARM GAS  /tmp/ccLdO6Pf.s 			page 33


 1020 00da FFF7FEFF 		bl	USART_SendString
 1021              	.LVL53:
 290:Src/main.c    **** 	HAL_Delay(1000);
 1022              		.loc 1 290 2 view .LVU204
 290:Src/main.c    **** 	HAL_Delay(1000);
 1023              		.loc 1 290 13 is_stmt 0 view .LVU205
 1024 00de 8024     		movs	r4, #128
 1025 00e0 E405     		lsls	r4, r4, #23
 1026 00e2 274B     		ldr	r3, .L57+32
 1027 00e4 6363     		str	r3, [r4, #52]
 291:Src/main.c    **** 	TIM2->CCR1 = 0;
 1028              		.loc 1 291 2 is_stmt 1 view .LVU206
 1029 00e6 FA20     		movs	r0, #250
 1030 00e8 8000     		lsls	r0, r0, #2
 1031 00ea FFF7FEFF 		bl	HAL_Delay
 1032              	.LVL54:
 292:Src/main.c    **** 
 1033              		.loc 1 292 2 view .LVU207
 292:Src/main.c    **** 
 1034              		.loc 1 292 13 is_stmt 0 view .LVU208
 1035 00ee 0023     		movs	r3, #0
 1036 00f0 6363     		str	r3, [r4, #52]
 294:Src/main.c    **** 
 1037              		.loc 1 294 2 is_stmt 1 view .LVU209
 1038 00f2 04A8     		add	r0, sp, #16
 1039 00f4 FFF7FEFF 		bl	MoveMotors
 1040              	.LVL55:
 296:Src/main.c    **** 
 1041              		.loc 1 296 2 view .LVU210
 1042 00f8 FFF7FEFF 		bl	ClearCommand
 1043              	.LVL56:
 1044              	.L39:
 315:Src/main.c    **** 
 1045              		.loc 1 315 1 is_stmt 0 view .LVU211
 1046 00fc 27B0     		add	sp, sp, #156
 1047              		@ sp needed
 1048 00fe F0BD     		pop	{r4, r5, r6, r7, pc}
 1049              	.L47:
 249:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1050              		.loc 1 249 4 is_stmt 1 view .LVU212
 1051              	.LVL57:
 250:Src/main.c    **** 			break;
 1052              		.loc 1 250 4 view .LVU213
 250:Src/main.c    **** 			break;
 1053              		.loc 1 250 17 is_stmt 0 view .LVU214
 1054 0100 04AB     		add	r3, sp, #16
 1055 0102 0222     		movs	r2, #2
 1056 0104 1A70     		strb	r2, [r3]
 251:Src/main.c    **** 		case 'l':
 1057              		.loc 1 251 4 is_stmt 1 view .LVU215
 249:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1058              		.loc 1 249 10 is_stmt 0 view .LVU216
 1059 0106 13AE     		add	r6, sp, #76
 1060              	.LVL58:
 251:Src/main.c    **** 		case 'l':
 1061              		.loc 1 251 4 view .LVU217
 1062 0108 D1E7     		b	.L43
ARM GAS  /tmp/ccLdO6Pf.s 			page 34


 1063              	.LVL59:
 1064              	.L46:
 253:Src/main.c    **** 			USART_SendString(part1);
 1065              		.loc 1 253 4 is_stmt 1 view .LVU218
 254:Src/main.c    **** 			Log();
 1066              		.loc 1 254 4 view .LVU219
 1067 010a 0DA8     		add	r0, sp, #52
 1068              	.LVL60:
 254:Src/main.c    **** 			Log();
 1069              		.loc 1 254 4 is_stmt 0 view .LVU220
 1070 010c FFF7FEFF 		bl	USART_SendString
 1071              	.LVL61:
 255:Src/main.c    **** 			ClearCommand();
 1072              		.loc 1 255 4 is_stmt 1 view .LVU221
 1073 0110 FFF7FEFF 		bl	Log
 1074              	.LVL62:
 256:Src/main.c    **** 			return;
 1075              		.loc 1 256 4 view .LVU222
 1076 0114 FFF7FEFF 		bl	ClearCommand
 1077              	.LVL63:
 257:Src/main.c    **** 		case 'p':
 1078              		.loc 1 257 4 view .LVU223
 1079 0118 F0E7     		b	.L39
 1080              	.LVL64:
 1081              	.L45:
 259:Src/main.c    **** 			USART_SendString(part1);
 1082              		.loc 1 259 4 view .LVU224
 260:Src/main.c    **** 			Proceed();
 1083              		.loc 1 260 4 view .LVU225
 1084 011a 05A8     		add	r0, sp, #20
 1085              	.LVL65:
 260:Src/main.c    **** 			Proceed();
 1086              		.loc 1 260 4 is_stmt 0 view .LVU226
 1087 011c FFF7FEFF 		bl	USART_SendString
 1088              	.LVL66:
 261:Src/main.c    **** 			ClearCommand();
 1089              		.loc 1 261 4 is_stmt 1 view .LVU227
 1090 0120 FFF7FEFF 		bl	Proceed
 1091              	.LVL67:
 262:Src/main.c    **** 			return;
 1092              		.loc 1 262 4 view .LVU228
 1093 0124 FFF7FEFF 		bl	ClearCommand
 1094              	.LVL68:
 263:Src/main.c    **** 		default:
 1095              		.loc 1 263 4 view .LVU229
 1096 0128 E8E7     		b	.L39
 1097              	.LVL69:
 1098              	.L42:
 265:Src/main.c    **** 			ClearCommand();
 1099              		.loc 1 265 4 view .LVU230
 1100 012a 1FA8     		add	r0, sp, #124
 1101 012c FFF7FEFF 		bl	USART_SendString
 1102              	.LVL70:
 266:Src/main.c    **** 	}
 1103              		.loc 1 266 4 view .LVU231
 1104 0130 FFF7FEFF 		bl	ClearCommand
 1105              	.LVL71:
ARM GAS  /tmp/ccLdO6Pf.s 			page 35


 1106 0134 BBE7     		b	.L43
 1107              	.L53:
 239:Src/main.c    **** 		case 'w':
 1108              		.loc 1 239 2 is_stmt 0 view .LVU232
 1109 0136 1BAE     		add	r6, sp, #108
 1110 0138 B9E7     		b	.L43
 1111              	.LVL72:
 1112              	.L55:
 271:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1113              		.loc 1 271 21 discriminator 1 view .LVU233
 1114 013a 772C     		cmp	r4, #119
 1115 013c B9D1     		bne	.L49
 272:Src/main.c    **** 		motorcmd.amount = 0;
 1116              		.loc 1 272 3 is_stmt 1 view .LVU234
 1117 013e 6A46     		mov	r2, sp
 1118 0140 104B     		ldr	r3, .L57+36
 1119 0142 31CB     		ldmia	r3!, {r0, r4, r5}
 1120 0144 31C2     		stmia	r2!, {r0, r4, r5}
 1121 0146 1B88     		ldrh	r3, [r3]
 1122 0148 1380     		strh	r3, [r2]
 273:Src/main.c    **** 	}
 1123              		.loc 1 273 3 view .LVU235
 273:Src/main.c    **** 	}
 1124              		.loc 1 273 19 is_stmt 0 view .LVU236
 1125 014a 04AB     		add	r3, sp, #16
 1126 014c 0022     		movs	r2, #0
 1127 014e 5A70     		strb	r2, [r3, #1]
 1128 0150 BFE7     		b	.L50
 1129              	.L56:
 276:Src/main.c    **** 		ClearCommand();
 1130              		.loc 1 276 3 is_stmt 1 view .LVU237
 1131 0152 1FA8     		add	r0, sp, #124
 1132 0154 FFF7FEFF 		bl	USART_SendString
 1133              	.LVL73:
 277:Src/main.c    **** 		return;
 1134              		.loc 1 277 3 view .LVU238
 1135 0158 FFF7FEFF 		bl	ClearCommand
 1136              	.LVL74:
 278:Src/main.c    **** 	}
 1137              		.loc 1 278 3 view .LVU239
 1138 015c CEE7     		b	.L39
 1139              	.L58:
 1140 015e C046     		.align	2
 1141              	.L57:
 1142 0160 14000000 		.word	.LC32
 1143 0164 30000000 		.word	.LC34
 1144 0168 40000000 		.word	.LC36
 1145 016c 50000000 		.word	.LC38
 1146 0170 60000000 		.word	.LC40
 1147 0174 78000000 		.word	.LC42
 1148 0178 00000000 		.word	.L44
 1149 017c 10000000 		.word	.LC47
 1150 0180 FFFF0000 		.word	65535
 1151 0184 00000000 		.word	.LC45
 1152              		.cfi_endproc
 1153              	.LFE52:
 1155              		.section	.text.GetDistance,"ax",%progbits
ARM GAS  /tmp/ccLdO6Pf.s 			page 36


 1156              		.align	1
 1157              		.global	GetDistance
 1158              		.syntax unified
 1159              		.code	16
 1160              		.thumb_func
 1162              	GetDistance:
 1163              	.LFB53:
 332:Src/main.c    **** 
 1164              		.loc 1 332 1 view -0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 0
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 334:Src/main.c    **** 
 1169              		.loc 1 334 1 view .LVU241
 1170              		@ sp needed
 1171 0000 7047     		bx	lr
 1172              		.cfi_endproc
 1173              	.LFE53:
 1175              		.section	.text.Error_Handler,"ax",%progbits
 1176              		.align	1
 1177              		.global	Error_Handler
 1178              		.syntax unified
 1179              		.code	16
 1180              		.thumb_func
 1182              	Error_Handler:
 1183              	.LFB58:
 610:Src/main.c    **** 
 611:Src/main.c    **** /* USER CODE BEGIN 4 */
 612:Src/main.c    **** 
 613:Src/main.c    **** /* USER CODE END 4 */
 614:Src/main.c    **** 
 615:Src/main.c    **** /**
 616:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 617:Src/main.c    ****  * @retval None
 618:Src/main.c    ****  */
 619:Src/main.c    **** void Error_Handler(void)
 620:Src/main.c    **** {
 1184              		.loc 1 620 1 view -0
 1185              		.cfi_startproc
 1186              		@ Volatile: function does not return.
 1187              		@ args = 0, pretend = 0, frame = 0
 1188              		@ frame_needed = 0, uses_anonymous_args = 0
 1189              		@ link register save eliminated.
 621:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 622:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 623:Src/main.c    **** 	__disable_irq();
 1190              		.loc 1 623 2 view .LVU243
 1191              	.LBB17:
 1192              	.LBI17:
 1193              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  /tmp/ccLdO6Pf.s 			page 37


   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccLdO6Pf.s 			page 38


  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/ccLdO6Pf.s 			page 39


 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1194              		.loc 2 140 27 view .LVU244
 1195              	.LBB18:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1196              		.loc 2 142 3 view .LVU245
 1197              		.syntax divided
 1198              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1199 0000 72B6     		cpsid i
 1200              	@ 0 "" 2
 1201              		.thumb
 1202              		.syntax unified
 1203              	.L61:
 1204              	.LBE18:
 1205              	.LBE17:
 624:Src/main.c    **** 	while (1)
 1206              		.loc 1 624 2 discriminator 1 view .LVU246
 625:Src/main.c    **** 	{
 626:Src/main.c    **** 	}
 1207              		.loc 1 626 2 discriminator 1 view .LVU247
 624:Src/main.c    **** 	while (1)
 1208              		.loc 1 624 8 discriminator 1 view .LVU248
 1209 0002 FEE7     		b	.L61
 1210              		.cfi_endproc
 1211              	.LFE58:
 1213              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1214              		.align	1
 1215              		.syntax unified
 1216              		.code	16
 1217              		.thumb_func
 1219              	MX_TIM1_Init:
 1220              	.LFB56:
 509:Src/main.c    **** 
 1221              		.loc 1 509 1 view -0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 88
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 1225 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccLdO6Pf.s 			page 40


 1226              	.LCFI17:
 1227              		.cfi_def_cfa_offset 4
 1228              		.cfi_offset 14, -4
 1229 0002 97B0     		sub	sp, sp, #92
 1230              	.LCFI18:
 1231              		.cfi_def_cfa_offset 96
 515:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1232              		.loc 1 515 3 view .LVU250
 515:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1233              		.loc 1 515 26 is_stmt 0 view .LVU251
 1234 0004 1022     		movs	r2, #16
 1235 0006 0021     		movs	r1, #0
 1236 0008 12A8     		add	r0, sp, #72
 1237 000a FFF7FEFF 		bl	memset
 1238              	.LVL75:
 516:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1239              		.loc 1 516 3 is_stmt 1 view .LVU252
 516:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1240              		.loc 1 516 27 is_stmt 0 view .LVU253
 1241 000e 0822     		movs	r2, #8
 1242 0010 0021     		movs	r1, #0
 1243 0012 10A8     		add	r0, sp, #64
 1244 0014 FFF7FEFF 		bl	memset
 1245              	.LVL76:
 517:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1246              		.loc 1 517 3 is_stmt 1 view .LVU254
 517:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1247              		.loc 1 517 22 is_stmt 0 view .LVU255
 1248 0018 1C22     		movs	r2, #28
 1249 001a 0021     		movs	r1, #0
 1250 001c 09A8     		add	r0, sp, #36
 1251 001e FFF7FEFF 		bl	memset
 1252              	.LVL77:
 518:Src/main.c    **** 
 1253              		.loc 1 518 3 is_stmt 1 view .LVU256
 518:Src/main.c    **** 
 1254              		.loc 1 518 34 is_stmt 0 view .LVU257
 1255 0022 2022     		movs	r2, #32
 1256 0024 0021     		movs	r1, #0
 1257 0026 01A8     		add	r0, sp, #4
 1258 0028 FFF7FEFF 		bl	memset
 1259              	.LVL78:
 523:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1260              		.loc 1 523 3 is_stmt 1 view .LVU258
 523:Src/main.c    ****   htim1.Init.Prescaler = 0;
 1261              		.loc 1 523 18 is_stmt 0 view .LVU259
 1262 002c 3048     		ldr	r0, .L77
 1263 002e 314B     		ldr	r3, .L77+4
 1264 0030 0360     		str	r3, [r0]
 524:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1265              		.loc 1 524 3 is_stmt 1 view .LVU260
 524:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1266              		.loc 1 524 24 is_stmt 0 view .LVU261
 1267 0032 0023     		movs	r3, #0
 1268 0034 4360     		str	r3, [r0, #4]
 525:Src/main.c    ****   htim1.Init.Period = 65535;
 1269              		.loc 1 525 3 is_stmt 1 view .LVU262
ARM GAS  /tmp/ccLdO6Pf.s 			page 41


 525:Src/main.c    ****   htim1.Init.Period = 65535;
 1270              		.loc 1 525 26 is_stmt 0 view .LVU263
 1271 0036 8360     		str	r3, [r0, #8]
 526:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1272              		.loc 1 526 3 is_stmt 1 view .LVU264
 526:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1273              		.loc 1 526 21 is_stmt 0 view .LVU265
 1274 0038 2F4A     		ldr	r2, .L77+8
 1275 003a C260     		str	r2, [r0, #12]
 527:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1276              		.loc 1 527 3 is_stmt 1 view .LVU266
 527:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1277              		.loc 1 527 28 is_stmt 0 view .LVU267
 1278 003c 0361     		str	r3, [r0, #16]
 528:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1279              		.loc 1 528 3 is_stmt 1 view .LVU268
 528:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1280              		.loc 1 528 32 is_stmt 0 view .LVU269
 1281 003e 4361     		str	r3, [r0, #20]
 529:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1282              		.loc 1 529 3 is_stmt 1 view .LVU270
 529:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1283              		.loc 1 529 32 is_stmt 0 view .LVU271
 1284 0040 8033     		adds	r3, r3, #128
 1285 0042 8361     		str	r3, [r0, #24]
 530:Src/main.c    ****   {
 1286              		.loc 1 530 3 is_stmt 1 view .LVU272
 530:Src/main.c    ****   {
 1287              		.loc 1 530 7 is_stmt 0 view .LVU273
 1288 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1289              	.LVL79:
 530:Src/main.c    ****   {
 1290              		.loc 1 530 6 view .LVU274
 1291 0048 0028     		cmp	r0, #0
 1292 004a 42D1     		bne	.L70
 534:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1293              		.loc 1 534 3 is_stmt 1 view .LVU275
 534:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1294              		.loc 1 534 34 is_stmt 0 view .LVU276
 1295 004c 8023     		movs	r3, #128
 1296 004e 5B01     		lsls	r3, r3, #5
 1297 0050 1293     		str	r3, [sp, #72]
 535:Src/main.c    ****   {
 1298              		.loc 1 535 3 is_stmt 1 view .LVU277
 535:Src/main.c    ****   {
 1299              		.loc 1 535 7 is_stmt 0 view .LVU278
 1300 0052 2748     		ldr	r0, .L77
 1301 0054 12A9     		add	r1, sp, #72
 1302 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1303              	.LVL80:
 535:Src/main.c    ****   {
 1304              		.loc 1 535 6 view .LVU279
 1305 005a 0028     		cmp	r0, #0
 1306 005c 3BD1     		bne	.L71
 539:Src/main.c    ****   {
 1307              		.loc 1 539 3 is_stmt 1 view .LVU280
 539:Src/main.c    ****   {
ARM GAS  /tmp/ccLdO6Pf.s 			page 42


 1308              		.loc 1 539 7 is_stmt 0 view .LVU281
 1309 005e 2448     		ldr	r0, .L77
 1310 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1311              	.LVL81:
 539:Src/main.c    ****   {
 1312              		.loc 1 539 6 view .LVU282
 1313 0064 0028     		cmp	r0, #0
 1314 0066 38D1     		bne	.L72
 543:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1315              		.loc 1 543 3 is_stmt 1 view .LVU283
 543:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1316              		.loc 1 543 37 is_stmt 0 view .LVU284
 1317 0068 0023     		movs	r3, #0
 1318 006a 1093     		str	r3, [sp, #64]
 544:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1319              		.loc 1 544 3 is_stmt 1 view .LVU285
 544:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1320              		.loc 1 544 33 is_stmt 0 view .LVU286
 1321 006c 1193     		str	r3, [sp, #68]
 545:Src/main.c    ****   {
 1322              		.loc 1 545 3 is_stmt 1 view .LVU287
 545:Src/main.c    ****   {
 1323              		.loc 1 545 7 is_stmt 0 view .LVU288
 1324 006e 2048     		ldr	r0, .L77
 1325 0070 10A9     		add	r1, sp, #64
 1326 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1327              	.LVL82:
 545:Src/main.c    ****   {
 1328              		.loc 1 545 6 view .LVU289
 1329 0076 0028     		cmp	r0, #0
 1330 0078 31D1     		bne	.L73
 549:Src/main.c    ****   sConfigOC.Pulse = 0;
 1331              		.loc 1 549 3 is_stmt 1 view .LVU290
 549:Src/main.c    ****   sConfigOC.Pulse = 0;
 1332              		.loc 1 549 20 is_stmt 0 view .LVU291
 1333 007a 6023     		movs	r3, #96
 1334 007c 0993     		str	r3, [sp, #36]
 550:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1335              		.loc 1 550 3 is_stmt 1 view .LVU292
 550:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1336              		.loc 1 550 19 is_stmt 0 view .LVU293
 1337 007e 0023     		movs	r3, #0
 1338 0080 0A93     		str	r3, [sp, #40]
 551:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1339              		.loc 1 551 3 is_stmt 1 view .LVU294
 551:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1340              		.loc 1 551 24 is_stmt 0 view .LVU295
 1341 0082 0B93     		str	r3, [sp, #44]
 552:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1342              		.loc 1 552 3 is_stmt 1 view .LVU296
 552:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1343              		.loc 1 552 25 is_stmt 0 view .LVU297
 1344 0084 0C93     		str	r3, [sp, #48]
 553:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1345              		.loc 1 553 3 is_stmt 1 view .LVU298
 553:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1346              		.loc 1 553 24 is_stmt 0 view .LVU299
ARM GAS  /tmp/ccLdO6Pf.s 			page 43


 1347 0086 0D93     		str	r3, [sp, #52]
 554:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1348              		.loc 1 554 3 is_stmt 1 view .LVU300
 554:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1349              		.loc 1 554 25 is_stmt 0 view .LVU301
 1350 0088 0E93     		str	r3, [sp, #56]
 555:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1351              		.loc 1 555 3 is_stmt 1 view .LVU302
 555:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1352              		.loc 1 555 26 is_stmt 0 view .LVU303
 1353 008a 0F93     		str	r3, [sp, #60]
 556:Src/main.c    ****   {
 1354              		.loc 1 556 3 is_stmt 1 view .LVU304
 556:Src/main.c    ****   {
 1355              		.loc 1 556 7 is_stmt 0 view .LVU305
 1356 008c 1848     		ldr	r0, .L77
 1357 008e 0022     		movs	r2, #0
 1358 0090 09A9     		add	r1, sp, #36
 1359 0092 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1360              	.LVL83:
 556:Src/main.c    ****   {
 1361              		.loc 1 556 6 view .LVU306
 1362 0096 0028     		cmp	r0, #0
 1363 0098 23D1     		bne	.L74
 560:Src/main.c    ****   {
 1364              		.loc 1 560 3 is_stmt 1 view .LVU307
 560:Src/main.c    ****   {
 1365              		.loc 1 560 7 is_stmt 0 view .LVU308
 1366 009a 1548     		ldr	r0, .L77
 1367 009c 0422     		movs	r2, #4
 1368 009e 09A9     		add	r1, sp, #36
 1369 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1370              	.LVL84:
 560:Src/main.c    ****   {
 1371              		.loc 1 560 6 view .LVU309
 1372 00a4 0028     		cmp	r0, #0
 1373 00a6 1ED1     		bne	.L75
 564:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1374              		.loc 1 564 3 is_stmt 1 view .LVU310
 564:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1375              		.loc 1 564 40 is_stmt 0 view .LVU311
 1376 00a8 0023     		movs	r3, #0
 1377 00aa 0193     		str	r3, [sp, #4]
 565:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1378              		.loc 1 565 3 is_stmt 1 view .LVU312
 565:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1379              		.loc 1 565 41 is_stmt 0 view .LVU313
 1380 00ac 0293     		str	r3, [sp, #8]
 566:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1381              		.loc 1 566 3 is_stmt 1 view .LVU314
 566:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1382              		.loc 1 566 34 is_stmt 0 view .LVU315
 1383 00ae 0393     		str	r3, [sp, #12]
 567:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1384              		.loc 1 567 3 is_stmt 1 view .LVU316
 567:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1385              		.loc 1 567 33 is_stmt 0 view .LVU317
ARM GAS  /tmp/ccLdO6Pf.s 			page 44


 1386 00b0 0493     		str	r3, [sp, #16]
 568:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1387              		.loc 1 568 3 is_stmt 1 view .LVU318
 568:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1388              		.loc 1 568 35 is_stmt 0 view .LVU319
 1389 00b2 0593     		str	r3, [sp, #20]
 569:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1390              		.loc 1 569 3 is_stmt 1 view .LVU320
 569:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1391              		.loc 1 569 38 is_stmt 0 view .LVU321
 1392 00b4 8022     		movs	r2, #128
 1393 00b6 9201     		lsls	r2, r2, #6
 1394 00b8 0692     		str	r2, [sp, #24]
 570:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1395              		.loc 1 570 3 is_stmt 1 view .LVU322
 570:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1396              		.loc 1 570 40 is_stmt 0 view .LVU323
 1397 00ba 0893     		str	r3, [sp, #32]
 571:Src/main.c    ****   {
 1398              		.loc 1 571 3 is_stmt 1 view .LVU324
 571:Src/main.c    ****   {
 1399              		.loc 1 571 7 is_stmt 0 view .LVU325
 1400 00bc 0C48     		ldr	r0, .L77
 1401 00be 01A9     		add	r1, sp, #4
 1402 00c0 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1403              	.LVL85:
 571:Src/main.c    ****   {
 1404              		.loc 1 571 6 view .LVU326
 1405 00c4 0028     		cmp	r0, #0
 1406 00c6 10D1     		bne	.L76
 578:Src/main.c    **** 
 1407              		.loc 1 578 3 is_stmt 1 view .LVU327
 1408 00c8 0948     		ldr	r0, .L77
 1409 00ca FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1410              	.LVL86:
 580:Src/main.c    **** 
 1411              		.loc 1 580 1 is_stmt 0 view .LVU328
 1412 00ce 17B0     		add	sp, sp, #92
 1413              		@ sp needed
 1414 00d0 00BD     		pop	{pc}
 1415              	.L70:
 532:Src/main.c    ****   }
 1416              		.loc 1 532 5 is_stmt 1 view .LVU329
 1417 00d2 FFF7FEFF 		bl	Error_Handler
 1418              	.LVL87:
 1419              	.L71:
 537:Src/main.c    ****   }
 1420              		.loc 1 537 5 view .LVU330
 1421 00d6 FFF7FEFF 		bl	Error_Handler
 1422              	.LVL88:
 1423              	.L72:
 541:Src/main.c    ****   }
 1424              		.loc 1 541 5 view .LVU331
 1425 00da FFF7FEFF 		bl	Error_Handler
 1426              	.LVL89:
 1427              	.L73:
 547:Src/main.c    ****   }
ARM GAS  /tmp/ccLdO6Pf.s 			page 45


 1428              		.loc 1 547 5 view .LVU332
 1429 00de FFF7FEFF 		bl	Error_Handler
 1430              	.LVL90:
 1431              	.L74:
 558:Src/main.c    ****   }
 1432              		.loc 1 558 5 view .LVU333
 1433 00e2 FFF7FEFF 		bl	Error_Handler
 1434              	.LVL91:
 1435              	.L75:
 562:Src/main.c    ****   }
 1436              		.loc 1 562 5 view .LVU334
 1437 00e6 FFF7FEFF 		bl	Error_Handler
 1438              	.LVL92:
 1439              	.L76:
 573:Src/main.c    ****   }
 1440              		.loc 1 573 5 view .LVU335
 1441 00ea FFF7FEFF 		bl	Error_Handler
 1442              	.LVL93:
 1443              	.L78:
 1444 00ee C046     		.align	2
 1445              	.L77:
 1446 00f0 00000000 		.word	htim1
 1447 00f4 002C0140 		.word	1073818624
 1448 00f8 FFFF0000 		.word	65535
 1449              		.cfi_endproc
 1450              	.LFE56:
 1452              		.section	.text.SystemClock_Config,"ax",%progbits
 1453              		.align	1
 1454              		.global	SystemClock_Config
 1455              		.syntax unified
 1456              		.code	16
 1457              		.thumb_func
 1459              	SystemClock_Config:
 1460              	.LFB55:
 473:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1461              		.loc 1 473 1 view -0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 72
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465 0000 00B5     		push	{lr}
 1466              	.LCFI19:
 1467              		.cfi_def_cfa_offset 4
 1468              		.cfi_offset 14, -4
 1469 0002 93B0     		sub	sp, sp, #76
 1470              	.LCFI20:
 1471              		.cfi_def_cfa_offset 80
 474:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1472              		.loc 1 474 2 view .LVU337
 474:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1473              		.loc 1 474 21 is_stmt 0 view .LVU338
 1474 0004 3422     		movs	r2, #52
 1475 0006 0021     		movs	r1, #0
 1476 0008 05A8     		add	r0, sp, #20
 1477 000a FFF7FEFF 		bl	memset
 1478              	.LVL94:
 475:Src/main.c    **** 
 1479              		.loc 1 475 2 is_stmt 1 view .LVU339
ARM GAS  /tmp/ccLdO6Pf.s 			page 46


 475:Src/main.c    **** 
 1480              		.loc 1 475 21 is_stmt 0 view .LVU340
 1481 000e 1022     		movs	r2, #16
 1482 0010 0021     		movs	r1, #0
 1483 0012 01A8     		add	r0, sp, #4
 1484 0014 FFF7FEFF 		bl	memset
 1485              	.LVL95:
 480:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1486              		.loc 1 480 2 is_stmt 1 view .LVU341
 480:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1487              		.loc 1 480 35 is_stmt 0 view .LVU342
 1488 0018 0223     		movs	r3, #2
 1489 001a 0593     		str	r3, [sp, #20]
 481:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1490              		.loc 1 481 2 is_stmt 1 view .LVU343
 481:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1491              		.loc 1 481 29 is_stmt 0 view .LVU344
 1492 001c 013B     		subs	r3, r3, #1
 1493 001e 0893     		str	r3, [sp, #32]
 482:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1494              		.loc 1 482 2 is_stmt 1 view .LVU345
 482:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1495              		.loc 1 482 40 is_stmt 0 view .LVU346
 1496 0020 0F33     		adds	r3, r3, #15
 1497 0022 0993     		str	r3, [sp, #36]
 483:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1498              		.loc 1 483 2 is_stmt 1 view .LVU347
 484:Src/main.c    **** 	{
 1499              		.loc 1 484 2 view .LVU348
 484:Src/main.c    **** 	{
 1500              		.loc 1 484 6 is_stmt 0 view .LVU349
 1501 0024 05A8     		add	r0, sp, #20
 1502 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1503              	.LVL96:
 484:Src/main.c    **** 	{
 1504              		.loc 1 484 5 view .LVU350
 1505 002a 0028     		cmp	r0, #0
 1506 002c 0DD1     		bne	.L82
 491:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1507              		.loc 1 491 2 is_stmt 1 view .LVU351
 491:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1508              		.loc 1 491 30 is_stmt 0 view .LVU352
 1509 002e 0723     		movs	r3, #7
 1510 0030 0193     		str	r3, [sp, #4]
 493:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1511              		.loc 1 493 2 is_stmt 1 view .LVU353
 493:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1512              		.loc 1 493 33 is_stmt 0 view .LVU354
 1513 0032 0023     		movs	r3, #0
 1514 0034 0293     		str	r3, [sp, #8]
 494:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1515              		.loc 1 494 2 is_stmt 1 view .LVU355
 494:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1516              		.loc 1 494 34 is_stmt 0 view .LVU356
 1517 0036 0393     		str	r3, [sp, #12]
 495:Src/main.c    **** 
 1518              		.loc 1 495 2 is_stmt 1 view .LVU357
ARM GAS  /tmp/ccLdO6Pf.s 			page 47


 495:Src/main.c    **** 
 1519              		.loc 1 495 35 is_stmt 0 view .LVU358
 1520 0038 0493     		str	r3, [sp, #16]
 497:Src/main.c    **** 	{
 1521              		.loc 1 497 2 is_stmt 1 view .LVU359
 497:Src/main.c    **** 	{
 1522              		.loc 1 497 6 is_stmt 0 view .LVU360
 1523 003a 0021     		movs	r1, #0
 1524 003c 01A8     		add	r0, sp, #4
 1525 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1526              	.LVL97:
 497:Src/main.c    **** 	{
 1527              		.loc 1 497 5 view .LVU361
 1528 0042 0028     		cmp	r0, #0
 1529 0044 03D1     		bne	.L83
 501:Src/main.c    **** 
 1530              		.loc 1 501 1 view .LVU362
 1531 0046 13B0     		add	sp, sp, #76
 1532              		@ sp needed
 1533 0048 00BD     		pop	{pc}
 1534              	.L82:
 486:Src/main.c    **** 	}
 1535              		.loc 1 486 3 is_stmt 1 view .LVU363
 1536 004a FFF7FEFF 		bl	Error_Handler
 1537              	.LVL98:
 1538              	.L83:
 499:Src/main.c    **** 	}
 1539              		.loc 1 499 3 view .LVU364
 1540 004e FFF7FEFF 		bl	Error_Handler
 1541              	.LVL99:
 1542              		.cfi_endproc
 1543              	.LFE55:
 1545              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1546              		.align	2
 1547              	.LC57:
 1548 0000 257500   		.ascii	"%u\000"
 1549              		.section	.text.main,"ax",%progbits
 1550              		.align	1
 1551              		.global	main
 1552              		.syntax unified
 1553              		.code	16
 1554              		.thumb_func
 1556              	main:
 1557              	.LFB54:
 343:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1558              		.loc 1 343 1 view -0
 1559              		.cfi_startproc
 1560              		@ args = 0, pretend = 0, frame = 40
 1561              		@ frame_needed = 0, uses_anonymous_args = 0
 1562 0000 10B5     		push	{r4, lr}
 1563              	.LCFI21:
 1564              		.cfi_def_cfa_offset 8
 1565              		.cfi_offset 4, -8
 1566              		.cfi_offset 14, -4
 1567 0002 8AB0     		sub	sp, sp, #40
 1568              	.LCFI22:
 1569              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccLdO6Pf.s 			page 48


 344:Src/main.c    ****     SystemClock_Config();
 1570              		.loc 1 344 2 view .LVU366
 1571 0004 FFF7FEFF 		bl	HAL_Init
 1572              	.LVL100:
 345:Src/main.c    ****     
 1573              		.loc 1 345 5 view .LVU367
 1574 0008 FFF7FEFF 		bl	SystemClock_Config
 1575              	.LVL101:
 348:Src/main.c    ****     USART_Init();
 1576              		.loc 1 348 5 view .LVU368
 1577 000c FFF7FEFF 		bl	GPIO_AF_Init
 1578              	.LVL102:
 349:Src/main.c    **** 
 1579              		.loc 1 349 5 view .LVU369
 1580 0010 FFF7FEFF 		bl	USART_Init
 1581              	.LVL103:
 351:Src/main.c    ****     
 1582              		.loc 1 351 5 view .LVU370
 1583 0014 FFF7FEFF 		bl	motor_init
 1584              	.LVL104:
 353:Src/main.c    ****     NVIC_SetPriority(USART3_4_IRQn,1);
 1585              		.loc 1 353 5 view .LVU371
 1586              	.LBB19:
 1587              	.LBI19:
 1588              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
ARM GAS  /tmp/ccLdO6Pf.s 			page 49


  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
ARM GAS  /tmp/ccLdO6Pf.s 			page 50


  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
ARM GAS  /tmp/ccLdO6Pf.s 			page 51


 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
ARM GAS  /tmp/ccLdO6Pf.s 			page 52


 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
ARM GAS  /tmp/ccLdO6Pf.s 			page 53


 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
ARM GAS  /tmp/ccLdO6Pf.s 			page 54


 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
ARM GAS  /tmp/ccLdO6Pf.s 			page 55


 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
ARM GAS  /tmp/ccLdO6Pf.s 			page 56


 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccLdO6Pf.s 			page 57


 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccLdO6Pf.s 			page 58


 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
ARM GAS  /tmp/ccLdO6Pf.s 			page 59


 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1589              		.loc 3 623 22 view .LVU372
 1590              	.LBB20:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1591              		.loc 3 625 3 view .LVU373
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1592              		.loc 3 627 5 view .LVU374
 1593              		.loc 3 627 20 is_stmt 0 view .LVU375
 1594 0018 794B     		ldr	r3, .L104
 1595 001a 8022     		movs	r2, #128
 1596 001c 9205     		lsls	r2, r2, #22
 1597 001e 1A60     		str	r2, [r3]
 1598              	.LVL105:
 1599              		.loc 3 627 20 view .LVU376
 1600              	.LBE20:
 1601              	.LBE19:
 354:Src/main.c    **** 
 1602              		.loc 1 354 5 is_stmt 1 view .LVU377
 1603              	.LBB21:
 1604              	.LBI21:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/ccLdO6Pf.s 			page 60


 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/ccLdO6Pf.s 			page 61


 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1605              		.loc 3 730 22 view .LVU378
 1606              	.LBB22:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1607              		.loc 3 732 3 view .LVU379
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1608              		.loc 3 734 5 view .LVU380
 1609              		.loc 3 734 52 is_stmt 0 view .LVU381
 1610 0020 C720     		movs	r0, #199
 1611 0022 8000     		lsls	r0, r0, #2
 1612 0024 1958     		ldr	r1, [r3, r0]
 1613              		.loc 3 734 33 view .LVU382
 1614 0026 774A     		ldr	r2, .L104+4
 1615 0028 1140     		ands	r1, r2
 1616              		.loc 3 734 102 view .LVU383
 1617 002a 8022     		movs	r2, #128
 1618 002c D201     		lsls	r2, r2, #7
 1619 002e 0A43     		orrs	r2, r1
 1620              		.loc 3 734 30 view .LVU384
 1621 0030 1A50     		str	r2, [r3, r0]
 1622              	.LVL106:
 1623              		.loc 3 734 30 view .LVU385
 1624              	.LBE22:
 1625              	.LBE21:
 356:Src/main.c    ****     
ARM GAS  /tmp/ccLdO6Pf.s 			page 62


 1626              		.loc 1 356 5 is_stmt 1 view .LVU386
 356:Src/main.c    ****     
 1627              		.loc 1 356 13 is_stmt 0 view .LVU387
 1628 0032 754B     		ldr	r3, .L104+8
 1629 0034 1A68     		ldr	r2, [r3]
 1630 0036 0892     		str	r2, [sp, #32]
 1631 0038 9A88     		ldrh	r2, [r3, #4]
 1632 003a 08AB     		add	r3, sp, #32
 1633 003c 9A80     		strh	r2, [r3, #4]
 359:Src/main.c    ****     MX_TIM1_Init();
 1634              		.loc 1 359 5 is_stmt 1 view .LVU388
 1635 003e FFF7FEFF 		bl	MX_GPIO_Init
 1636              	.LVL107:
 360:Src/main.c    ****     
 1637              		.loc 1 360 5 view .LVU389
 1638 0042 FFF7FEFF 		bl	MX_TIM1_Init
 1639              	.LVL108:
 362:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 1640              		.loc 1 362 5 view .LVU390
 1641 0046 7148     		ldr	r0, .L104+12
 1642 0048 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1643              	.LVL109:
 363:Src/main.c    ****     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1644              		.loc 1 363 5 view .LVU391
 1645 004c 8021     		movs	r1, #128
 1646 004e 704C     		ldr	r4, .L104+16
 1647 0050 0022     		movs	r2, #0
 1648 0052 0901     		lsls	r1, r1, #4
 1649 0054 2000     		movs	r0, r4
 1650 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1651              	.LVL110:
 364:Src/main.c    **** 	
 1652              		.loc 1 364 5 view .LVU392
 1653 005a 8021     		movs	r1, #128
 1654 005c 0022     		movs	r2, #0
 1655 005e 8901     		lsls	r1, r1, #6
 1656 0060 2000     		movs	r0, r4
 1657 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1658              	.LVL111:
 1659 0066 B8E0     		b	.L100
 1660              	.LVL112:
 1661              	.L103:
 1662              	.LBB23:
 375:Src/main.c    ****         
 1663              		.loc 1 375 9 view .LVU393
 1664 0068 8021     		movs	r1, #128
 1665 006a 0022     		movs	r2, #0
 1666 006c 0901     		lsls	r1, r1, #4
 1667 006e 6848     		ldr	r0, .L104+16
 1668 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1669              	.LVL113:
 378:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1670              		.loc 1 378 9 view .LVU394
 378:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1671              		.loc 1 378 21 is_stmt 0 view .LVU395
 1672 0074 FFF7FEFF 		bl	HAL_GetTick
 1673              	.LVL114:
ARM GAS  /tmp/ccLdO6Pf.s 			page 63


 378:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1674              		.loc 1 378 19 view .LVU396
 1675 0078 80B2     		uxth	r0, r0
 1676 007a 664B     		ldr	r3, .L104+20
 1677 007c 1880     		strh	r0, [r3]
 379:Src/main.c    ****         
 1678              		.loc 1 379 9 is_stmt 1 view .LVU397
 379:Src/main.c    ****         
 1679              		.loc 1 379 19 is_stmt 0 view .LVU398
 1680 007e FFF7FEFF 		bl	HAL_GetTick
 1681              	.LVL115:
 379:Src/main.c    ****         
 1682              		.loc 1 379 17 view .LVU399
 1683 0082 654B     		ldr	r3, .L104+24
 1684 0084 1860     		str	r0, [r3]
 382:Src/main.c    ****         {
 1685              		.loc 1 382 9 is_stmt 1 view .LVU400
 1686              	.L88:
 385:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1687              		.loc 1 385 9 discriminator 2 view .LVU401
 382:Src/main.c    ****         {
 1688              		.loc 1 382 63 discriminator 2 view .LVU402
 382:Src/main.c    ****         {
 1689              		.loc 1 382 18 is_stmt 0 discriminator 2 view .LVU403
 1690 0086 8021     		movs	r1, #128
 1691 0088 4901     		lsls	r1, r1, #5
 1692 008a 6148     		ldr	r0, .L104+16
 1693 008c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1694              	.LVL116:
 382:Src/main.c    ****         {
 1695              		.loc 1 382 63 discriminator 2 view .LVU404
 1696 0090 0028     		cmp	r0, #0
 1697 0092 06D1     		bne	.L87
 382:Src/main.c    ****         {
 1698              		.loc 1 382 74 discriminator 1 view .LVU405
 1699 0094 604B     		ldr	r3, .L104+24
 1700 0096 1C68     		ldr	r4, [r3]
 1701 0098 0A34     		adds	r4, r4, #10
 382:Src/main.c    ****         {
 1702              		.loc 1 382 82 discriminator 1 view .LVU406
 1703 009a FFF7FEFF 		bl	HAL_GetTick
 1704              	.LVL117:
 382:Src/main.c    ****         {
 1705              		.loc 1 382 63 discriminator 1 view .LVU407
 1706 009e 8442     		cmp	r4, r0
 1707 00a0 F1D8     		bhi	.L88
 1708              	.L87:
 387:Src/main.c    ****         
 1709              		.loc 1 387 9 is_stmt 1 view .LVU408
 387:Src/main.c    ****         
 1710              		.loc 1 387 19 is_stmt 0 view .LVU409
 1711 00a2 FFF7FEFF 		bl	HAL_GetTick
 1712              	.LVL118:
 387:Src/main.c    ****         
 1713              		.loc 1 387 33 view .LVU410
 1714 00a6 5B4B     		ldr	r3, .L104+20
 1715 00a8 1B88     		ldrh	r3, [r3]
ARM GAS  /tmp/ccLdO6Pf.s 			page 64


 1716 00aa C01A     		subs	r0, r0, r3
 1717 00ac 80B2     		uxth	r0, r0
 387:Src/main.c    ****         
 1718              		.loc 1 387 16 view .LVU411
 1719 00ae 5B4B     		ldr	r3, .L104+28
 1720 00b0 1880     		strh	r0, [r3]
 390:Src/main.c    ****       // wait for the echo pin to go low
 1721              		.loc 1 390 7 is_stmt 1 view .LVU412
 390:Src/main.c    ****       // wait for the echo pin to go low
 1722              		.loc 1 390 17 is_stmt 0 view .LVU413
 1723 00b2 FFF7FEFF 		bl	HAL_GetTick
 1724              	.LVL119:
 390:Src/main.c    ****       // wait for the echo pin to go low
 1725              		.loc 1 390 15 view .LVU414
 1726 00b6 584B     		ldr	r3, .L104+24
 1727 00b8 1860     		str	r0, [r3]
 392:Src/main.c    ****         {
 1728              		.loc 1 392 9 is_stmt 1 view .LVU415
 1729              	.L90:
 395:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1730              		.loc 1 395 9 discriminator 2 view .LVU416
 392:Src/main.c    ****         {
 1731              		.loc 1 392 62 discriminator 2 view .LVU417
 392:Src/main.c    ****         {
 1732              		.loc 1 392 17 is_stmt 0 discriminator 2 view .LVU418
 1733 00ba 8021     		movs	r1, #128
 1734 00bc 4901     		lsls	r1, r1, #5
 1735 00be 5448     		ldr	r0, .L104+16
 1736 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1737              	.LVL120:
 392:Src/main.c    ****         {
 1738              		.loc 1 392 62 discriminator 2 view .LVU419
 1739 00c4 0028     		cmp	r0, #0
 1740 00c6 06D0     		beq	.L89
 392:Src/main.c    ****         {
 1741              		.loc 1 392 73 discriminator 1 view .LVU420
 1742 00c8 534B     		ldr	r3, .L104+24
 1743 00ca 1C68     		ldr	r4, [r3]
 1744 00cc 3234     		adds	r4, r4, #50
 392:Src/main.c    ****         {
 1745              		.loc 1 392 80 discriminator 1 view .LVU421
 1746 00ce FFF7FEFF 		bl	HAL_GetTick
 1747              	.LVL121:
 392:Src/main.c    ****         {
 1748              		.loc 1 392 62 discriminator 1 view .LVU422
 1749 00d2 8442     		cmp	r4, r0
 1750 00d4 F1D8     		bhi	.L90
 1751              	.L89:
 397:Src/main.c    **** 
 1752              		.loc 1 397 9 is_stmt 1 view .LVU423
 397:Src/main.c    **** 
 1753              		.loc 1 397 19 is_stmt 0 view .LVU424
 1754 00d6 FFF7FEFF 		bl	HAL_GetTick
 1755              	.LVL122:
 397:Src/main.c    **** 
 1756              		.loc 1 397 33 view .LVU425
 1757 00da 4E4B     		ldr	r3, .L104+20
ARM GAS  /tmp/ccLdO6Pf.s 			page 65


 1758 00dc 1B88     		ldrh	r3, [r3]
 1759 00de C01A     		subs	r0, r0, r3
 1760 00e0 80B2     		uxth	r0, r0
 397:Src/main.c    **** 
 1761              		.loc 1 397 16 view .LVU426
 1762 00e2 4F4B     		ldr	r3, .L104+32
 1763 00e4 1880     		strh	r0, [r3]
 400:Src/main.c    ****         if(leftDistance < 10)
 1764              		.loc 1 400 9 is_stmt 1 view .LVU427
 400:Src/main.c    ****         if(leftDistance < 10)
 1765              		.loc 1 400 32 is_stmt 0 view .LVU428
 1766 00e6 1B88     		ldrh	r3, [r3]
 1767 00e8 4C4A     		ldr	r2, .L104+28
 1768 00ea 1288     		ldrh	r2, [r2]
 1769 00ec 9B1A     		subs	r3, r3, r2
 1770 00ee 9BB2     		uxth	r3, r3
 400:Src/main.c    ****         if(leftDistance < 10)
 1771              		.loc 1 400 22 view .LVU429
 1772 00f0 4C4A     		ldr	r2, .L104+36
 1773 00f2 1380     		strh	r3, [r2]
 401:Src/main.c    ****         {
 1774              		.loc 1 401 9 is_stmt 1 view .LVU430
 401:Src/main.c    ****         {
 1775              		.loc 1 401 25 is_stmt 0 view .LVU431
 1776 00f4 1388     		ldrh	r3, [r2]
 1777 00f6 9BB2     		uxth	r3, r3
 401:Src/main.c    ****         {
 1778              		.loc 1 401 11 view .LVU432
 1779 00f8 092B     		cmp	r3, #9
 1780 00fa 07D9     		bls	.L101
 1781              	.L91:
 412:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1782              		.loc 1 412 9 is_stmt 1 view .LVU433
 1783              	.LVL123:
 413:Src/main.c    ****         
 1784              		.loc 1 413 9 view .LVU434
 1785 00fc 8021     		movs	r1, #128
 1786 00fe 0122     		movs	r2, #1
 1787 0100 8901     		lsls	r1, r1, #6
 1788 0102 4348     		ldr	r0, .L104+16
 1789 0104 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1790              	.LVL124:
 417:Src/main.c    ****             counter++;
 1791              		.loc 1 417 9 view .LVU435
 412:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1792              		.loc 1 412 17 is_stmt 0 view .LVU436
 1793 0108 0023     		movs	r3, #0
 417:Src/main.c    ****             counter++;
 1794              		.loc 1 417 15 view .LVU437
 1795 010a 07E0     		b	.L92
 1796              	.LVL125:
 1797              	.L101:
 1798              	.LBB24:
 403:Src/main.c    ****             sprintf(strLeft, "%u", leftDistance);
 1799              		.loc 1 403 13 is_stmt 1 view .LVU438
 404:Src/main.c    **** 			/*
 1800              		.loc 1 404 13 view .LVU439
ARM GAS  /tmp/ccLdO6Pf.s 			page 66


 1801 010c 1288     		ldrh	r2, [r2]
 1802 010e 92B2     		uxth	r2, r2
 1803 0110 4549     		ldr	r1, .L104+40
 1804 0112 6846     		mov	r0, sp
 1805 0114 FFF7FEFF 		bl	sprintf
 1806              	.LVL126:
 1807 0118 F0E7     		b	.L91
 1808              	.LVL127:
 1809              	.L93:
 404:Src/main.c    **** 			/*
 1810              		.loc 1 404 13 is_stmt 0 view .LVU440
 1811              	.LBE24:
 418:Src/main.c    ****         }  // wait for 10 us
 1812              		.loc 1 418 13 is_stmt 1 view .LVU441
 418:Src/main.c    ****         }  // wait for 10 us
 1813              		.loc 1 418 20 is_stmt 0 view .LVU442
 1814 011a 0133     		adds	r3, r3, #1
 1815              	.LVL128:
 1816              	.L92:
 417:Src/main.c    ****             counter++;
 1817              		.loc 1 417 24 is_stmt 1 view .LVU443
 1818 011c 092B     		cmp	r3, #9
 1819 011e FCDD     		ble	.L93
 420:Src/main.c    ****         
 1820              		.loc 1 420 9 view .LVU444
 1821 0120 8021     		movs	r1, #128
 1822 0122 0022     		movs	r2, #0
 1823 0124 8901     		lsls	r1, r1, #6
 1824 0126 3A48     		ldr	r0, .L104+16
 1825 0128 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1826              	.LVL129:
 423:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1827              		.loc 1 423 9 view .LVU445
 423:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1828              		.loc 1 423 21 is_stmt 0 view .LVU446
 1829 012c FFF7FEFF 		bl	HAL_GetTick
 1830              	.LVL130:
 423:Src/main.c    ****         pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1831              		.loc 1 423 19 view .LVU447
 1832 0130 80B2     		uxth	r0, r0
 1833 0132 384B     		ldr	r3, .L104+20
 1834 0134 1880     		strh	r0, [r3]
 424:Src/main.c    ****         
 1835              		.loc 1 424 9 is_stmt 1 view .LVU448
 424:Src/main.c    ****         
 1836              		.loc 1 424 19 is_stmt 0 view .LVU449
 1837 0136 FFF7FEFF 		bl	HAL_GetTick
 1838              	.LVL131:
 424:Src/main.c    ****         
 1839              		.loc 1 424 17 view .LVU450
 1840 013a 374B     		ldr	r3, .L104+24
 1841 013c 1860     		str	r0, [r3]
 427:Src/main.c    ****         {
 1842              		.loc 1 427 9 is_stmt 1 view .LVU451
 1843              	.L95:
 430:Src/main.c    ****         //Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1844              		.loc 1 430 9 discriminator 2 view .LVU452
ARM GAS  /tmp/ccLdO6Pf.s 			page 67


 427:Src/main.c    ****         {
 1845              		.loc 1 427 64 discriminator 2 view .LVU453
 427:Src/main.c    ****         {
 1846              		.loc 1 427 18 is_stmt 0 discriminator 2 view .LVU454
 1847 013e 8021     		movs	r1, #128
 1848 0140 C901     		lsls	r1, r1, #7
 1849 0142 3348     		ldr	r0, .L104+16
 1850 0144 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1851              	.LVL132:
 427:Src/main.c    ****         {
 1852              		.loc 1 427 64 discriminator 2 view .LVU455
 1853 0148 0028     		cmp	r0, #0
 1854 014a 06D1     		bne	.L94
 427:Src/main.c    ****         {
 1855              		.loc 1 427 75 discriminator 1 view .LVU456
 1856 014c 324B     		ldr	r3, .L104+24
 1857 014e 1C68     		ldr	r4, [r3]
 1858 0150 0A34     		adds	r4, r4, #10
 427:Src/main.c    ****         {
 1859              		.loc 1 427 83 discriminator 1 view .LVU457
 1860 0152 FFF7FEFF 		bl	HAL_GetTick
 1861              	.LVL133:
 427:Src/main.c    ****         {
 1862              		.loc 1 427 64 discriminator 1 view .LVU458
 1863 0156 8442     		cmp	r4, r0
 1864 0158 F1D8     		bhi	.L95
 1865              	.L94:
 432:Src/main.c    ****         
 1866              		.loc 1 432 9 is_stmt 1 view .LVU459
 432:Src/main.c    ****         
 1867              		.loc 1 432 19 is_stmt 0 view .LVU460
 1868 015a FFF7FEFF 		bl	HAL_GetTick
 1869              	.LVL134:
 432:Src/main.c    ****         
 1870              		.loc 1 432 33 view .LVU461
 1871 015e 2D4B     		ldr	r3, .L104+20
 1872 0160 1B88     		ldrh	r3, [r3]
 1873 0162 C01A     		subs	r0, r0, r3
 1874 0164 80B2     		uxth	r0, r0
 432:Src/main.c    ****         
 1875              		.loc 1 432 16 view .LVU462
 1876 0166 2D4B     		ldr	r3, .L104+28
 1877 0168 1880     		strh	r0, [r3]
 435:Src/main.c    ****       // wait for the echo pin to go low
 1878              		.loc 1 435 7 is_stmt 1 view .LVU463
 435:Src/main.c    ****       // wait for the echo pin to go low
 1879              		.loc 1 435 17 is_stmt 0 view .LVU464
 1880 016a FFF7FEFF 		bl	HAL_GetTick
 1881              	.LVL135:
 435:Src/main.c    ****       // wait for the echo pin to go low
 1882              		.loc 1 435 15 view .LVU465
 1883 016e 2A4B     		ldr	r3, .L104+24
 1884 0170 1860     		str	r0, [r3]
 437:Src/main.c    ****         {
 1885              		.loc 1 437 9 is_stmt 1 view .LVU466
 1886              	.L97:
 440:Src/main.c    ****       //Value2 = __HAL_TIM_GET_COUNTER (&htim1);
ARM GAS  /tmp/ccLdO6Pf.s 			page 68


 1887              		.loc 1 440 9 discriminator 2 view .LVU467
 437:Src/main.c    ****         {
 1888              		.loc 1 437 63 discriminator 2 view .LVU468
 437:Src/main.c    ****         {
 1889              		.loc 1 437 17 is_stmt 0 discriminator 2 view .LVU469
 1890 0172 8021     		movs	r1, #128
 1891 0174 C901     		lsls	r1, r1, #7
 1892 0176 2648     		ldr	r0, .L104+16
 1893 0178 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1894              	.LVL136:
 437:Src/main.c    ****         {
 1895              		.loc 1 437 63 discriminator 2 view .LVU470
 1896 017c 0028     		cmp	r0, #0
 1897 017e 06D0     		beq	.L96
 437:Src/main.c    ****         {
 1898              		.loc 1 437 74 discriminator 1 view .LVU471
 1899 0180 254B     		ldr	r3, .L104+24
 1900 0182 1C68     		ldr	r4, [r3]
 1901 0184 3234     		adds	r4, r4, #50
 437:Src/main.c    ****         {
 1902              		.loc 1 437 81 discriminator 1 view .LVU472
 1903 0186 FFF7FEFF 		bl	HAL_GetTick
 1904              	.LVL137:
 437:Src/main.c    ****         {
 1905              		.loc 1 437 63 discriminator 1 view .LVU473
 1906 018a 8442     		cmp	r4, r0
 1907 018c F1D8     		bhi	.L97
 1908              	.L96:
 442:Src/main.c    **** 
 1909              		.loc 1 442 9 is_stmt 1 view .LVU474
 442:Src/main.c    **** 
 1910              		.loc 1 442 19 is_stmt 0 view .LVU475
 1911 018e FFF7FEFF 		bl	HAL_GetTick
 1912              	.LVL138:
 442:Src/main.c    **** 
 1913              		.loc 1 442 33 view .LVU476
 1914 0192 204B     		ldr	r3, .L104+20
 1915 0194 1B88     		ldrh	r3, [r3]
 1916 0196 C01A     		subs	r0, r0, r3
 1917 0198 80B2     		uxth	r0, r0
 442:Src/main.c    **** 
 1918              		.loc 1 442 16 view .LVU477
 1919 019a 214B     		ldr	r3, .L104+32
 1920 019c 1880     		strh	r0, [r3]
 445:Src/main.c    ****         if(rightDistance < 10)
 1921              		.loc 1 445 9 is_stmt 1 view .LVU478
 445:Src/main.c    ****         if(rightDistance < 10)
 1922              		.loc 1 445 33 is_stmt 0 view .LVU479
 1923 019e 1B88     		ldrh	r3, [r3]
 1924 01a0 1E4A     		ldr	r2, .L104+28
 1925 01a2 1288     		ldrh	r2, [r2]
 1926 01a4 9B1A     		subs	r3, r3, r2
 1927 01a6 9BB2     		uxth	r3, r3
 445:Src/main.c    ****         if(rightDistance < 10)
 1928              		.loc 1 445 23 view .LVU480
 1929 01a8 204A     		ldr	r2, .L104+44
 1930 01aa 1380     		strh	r3, [r2]
ARM GAS  /tmp/ccLdO6Pf.s 			page 69


 446:Src/main.c    ****         {
 1931              		.loc 1 446 9 is_stmt 1 view .LVU481
 446:Src/main.c    ****         {
 1932              		.loc 1 446 26 is_stmt 0 view .LVU482
 1933 01ac 1388     		ldrh	r3, [r2]
 1934 01ae 9BB2     		uxth	r3, r3
 446:Src/main.c    ****         {
 1935              		.loc 1 446 11 view .LVU483
 1936 01b0 092B     		cmp	r3, #9
 1937 01b2 1ED9     		bls	.L102
 1938              	.L98:
 457:Src/main.c    **** 		{
 1939              		.loc 1 457 3 is_stmt 1 view .LVU484
 457:Src/main.c    **** 		{
 1940              		.loc 1 457 6 is_stmt 0 view .LVU485
 1941 01b4 1E4B     		ldr	r3, .L104+48
 1942 01b6 1B78     		ldrb	r3, [r3]
 457:Src/main.c    **** 		{
 1943              		.loc 1 457 5 view .LVU486
 1944 01b8 002B     		cmp	r3, #0
 1945 01ba 0AD0     		beq	.L99
 459:Src/main.c    **** 			{
 1946              		.loc 1 459 4 is_stmt 1 view .LVU487
 459:Src/main.c    **** 			{
 1947              		.loc 1 459 14 is_stmt 0 view .LVU488
 1948 01bc 1D4B     		ldr	r3, .L104+52
 1949 01be 5B78     		ldrb	r3, [r3, #1]
 459:Src/main.c    **** 			{
 1950              		.loc 1 459 6 view .LVU489
 1951 01c0 002B     		cmp	r3, #0
 1952 01c2 06D0     		beq	.L99
 461:Src/main.c    **** 			}
 1953              		.loc 1 461 5 is_stmt 1 view .LVU490
 461:Src/main.c    **** 			}
 1954              		.loc 1 461 27 is_stmt 0 view .LVU491
 1955 01c4 1B4B     		ldr	r3, .L104+52
 1956 01c6 1878     		ldrb	r0, [r3]
 1957 01c8 C0B2     		uxtb	r0, r0
 461:Src/main.c    **** 			}
 1958              		.loc 1 461 39 view .LVU492
 1959 01ca 5978     		ldrb	r1, [r3, #1]
 1960 01cc C9B2     		uxtb	r1, r1
 461:Src/main.c    **** 			}
 1961              		.loc 1 461 5 view .LVU493
 1962 01ce FFF7FEFF 		bl	ProcessCommand
 1963              	.LVL139:
 1964              	.L99:
 464:Src/main.c    **** 	}
 1965              		.loc 1 464 3 is_stmt 1 view .LVU494
 1966 01d2 FA20     		movs	r0, #250
 1967 01d4 4000     		lsls	r0, r0, #1
 1968 01d6 FFF7FEFF 		bl	HAL_Delay
 1969              	.LVL140:
 1970              	.LBE23:
 366:Src/main.c    ****         int32_t counter = 0;
 1971              		.loc 1 366 8 view .LVU495
 1972              	.L100:
ARM GAS  /tmp/ccLdO6Pf.s 			page 70


 366:Src/main.c    ****         int32_t counter = 0;
 1973              		.loc 1 366 2 view .LVU496
 1974              	.LBB26:
 367:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1975              		.loc 1 367 9 view .LVU497
 368:Src/main.c    ****         
 1976              		.loc 1 368 9 view .LVU498
 1977 01da 8021     		movs	r1, #128
 1978 01dc 0122     		movs	r2, #1
 1979 01de 0901     		lsls	r1, r1, #4
 1980 01e0 0B48     		ldr	r0, .L104+16
 1981 01e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1982              	.LVL141:
 372:Src/main.c    ****             counter++;
 1983              		.loc 1 372 9 view .LVU499
 367:Src/main.c    ****         HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1984              		.loc 1 367 17 is_stmt 0 view .LVU500
 1985 01e6 0023     		movs	r3, #0
 1986              	.LVL142:
 1987              	.L85:
 372:Src/main.c    ****             counter++;
 1988              		.loc 1 372 24 is_stmt 1 view .LVU501
 1989 01e8 092B     		cmp	r3, #9
 1990 01ea 00DD     		ble	.LCB1594
 1991 01ec 3CE7     		b	.L103	@long jump
 1992              	.LCB1594:
 373:Src/main.c    ****         }  // wait for 10 us
 1993              		.loc 1 373 13 view .LVU502
 373:Src/main.c    ****         }  // wait for 10 us
 1994              		.loc 1 373 20 is_stmt 0 view .LVU503
 1995 01ee 0133     		adds	r3, r3, #1
 1996              	.LVL143:
 373:Src/main.c    ****         }  // wait for 10 us
 1997              		.loc 1 373 20 view .LVU504
 1998 01f0 FAE7     		b	.L85
 1999              	.LVL144:
 2000              	.L102:
 2001              	.LBB25:
 448:Src/main.c    ****             sprintf(strRight, "%u", rightDistance);
 2002              		.loc 1 448 13 is_stmt 1 view .LVU505
 449:Src/main.c    **** 			/*
 2003              		.loc 1 449 13 view .LVU506
 2004 01f2 1288     		ldrh	r2, [r2]
 2005 01f4 92B2     		uxth	r2, r2
 2006 01f6 0C49     		ldr	r1, .L104+40
 2007 01f8 6846     		mov	r0, sp
 2008 01fa FFF7FEFF 		bl	sprintf
 2009              	.LVL145:
 2010 01fe D9E7     		b	.L98
 2011              	.L105:
 2012              		.align	2
 2013              	.L104:
 2014 0200 00E100E0 		.word	-536813312
 2015 0204 FF00FFFF 		.word	-65281
 2016 0208 00000000 		.word	.LC21
 2017 020c 00000000 		.word	htim1
 2018 0210 00040048 		.word	1207960576
ARM GAS  /tmp/ccLdO6Pf.s 			page 71


 2019 0214 00000000 		.word	startTime
 2020 0218 00000000 		.word	pMillis
 2021 021c 00000000 		.word	Value1
 2022 0220 00000000 		.word	Value2
 2023 0224 00000000 		.word	leftDistance
 2024 0228 00000000 		.word	.LC57
 2025 022c 00000000 		.word	rightDistance
 2026 0230 00000000 		.word	incomingCommand
 2027 0234 00000000 		.word	command
 2028              	.LBE25:
 2029              	.LBE26:
 2030              		.cfi_endproc
 2031              	.LFE54:
 2033              		.global	incomingCommand
 2034              		.section	.bss.incomingCommand,"aw",%nobits
 2037              	incomingCommand:
 2038 0000 00       		.space	1
 2039              		.global	command
 2040              		.section	.bss.command,"aw",%nobits
 2041              		.align	2
 2044              	command:
 2045 0000 0000     		.space	2
 2046              		.global	rightDistance
 2047              		.section	.bss.rightDistance,"aw",%nobits
 2048              		.align	1
 2051              	rightDistance:
 2052 0000 0000     		.space	2
 2053              		.global	leftDistance
 2054              		.section	.bss.leftDistance,"aw",%nobits
 2055              		.align	1
 2058              	leftDistance:
 2059 0000 0000     		.space	2
 2060              		.global	Value2
 2061              		.section	.bss.Value2,"aw",%nobits
 2062              		.align	1
 2065              	Value2:
 2066 0000 0000     		.space	2
 2067              		.global	Value1
 2068              		.section	.bss.Value1,"aw",%nobits
 2069              		.align	1
 2072              	Value1:
 2073 0000 0000     		.space	2
 2074              		.global	startTime
 2075              		.section	.bss.startTime,"aw",%nobits
 2076              		.align	1
 2079              	startTime:
 2080 0000 0000     		.space	2
 2081              		.global	pMillis
 2082              		.section	.bss.pMillis,"aw",%nobits
 2083              		.align	2
 2086              	pMillis:
 2087 0000 00000000 		.space	4
 2088              		.global	htim1
 2089              		.section	.bss.htim1,"aw",%nobits
 2090              		.align	2
 2093              	htim1:
 2094 0000 00000000 		.space	64
ARM GAS  /tmp/ccLdO6Pf.s 			page 72


 2094      00000000 
 2094      00000000 
 2094      00000000 
 2094      00000000 
 2095              		.text
 2096              	.Letext0:
 2097              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2098              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2099              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2100              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2101              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2102              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2103              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2104              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2105              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2106              		.file 13 "Inc/main.h"
 2107              		.file 14 "Inc/pins.h"
 2108              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2109              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2110              		.file 17 "/usr/arm-none-eabi/include/stdio.h"
 2111              		.file 18 "/usr/arm-none-eabi/include/string.h"
 2112              		.file 19 "<built-in>"
 2113              		.file 20 "Inc/motor.h"
ARM GAS  /tmp/ccLdO6Pf.s 			page 73


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccLdO6Pf.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccLdO6Pf.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccLdO6Pf.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/ccLdO6Pf.s:102    .text.LED_Init:00000000 $t
     /tmp/ccLdO6Pf.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/ccLdO6Pf.s:151    .text.LED_Init:00000024 $d
     /tmp/ccLdO6Pf.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccLdO6Pf.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccLdO6Pf.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/ccLdO6Pf.s:342    .text.USART_Init:00000000 $t
     /tmp/ccLdO6Pf.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/ccLdO6Pf.s:440    .text.USART_Init:0000005c $d
     /tmp/ccLdO6Pf.s:447    .text.USART_SendChar:00000000 $t
     /tmp/ccLdO6Pf.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccLdO6Pf.s:479    .text.USART_SendChar:00000010 $d
     /tmp/ccLdO6Pf.s:484    .text.USART_SendString:00000000 $t
     /tmp/ccLdO6Pf.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccLdO6Pf.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccLdO6Pf.s:539    .text.ClearCommand:00000000 $t
     /tmp/ccLdO6Pf.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccLdO6Pf.s:585    .text.ClearCommand:00000024 $d
     /tmp/ccLdO6Pf.s:2044   .bss.command:00000000 command
     /tmp/ccLdO6Pf.s:2037   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccLdO6Pf.s:592    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccLdO6Pf.s:596    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccLdO6Pf.s:602    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccLdO6Pf.s:693    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/ccLdO6Pf.s:701    .rodata.Log.str1.4:00000000 $d
     /tmp/ccLdO6Pf.s:705    .text.Log:00000000 $t
     /tmp/ccLdO6Pf.s:711    .text.Log:00000000 Log
     /tmp/ccLdO6Pf.s:734    .text.Log:0000000c $d
     /tmp/ccLdO6Pf.s:739    .text.Proceed:00000000 $t
     /tmp/ccLdO6Pf.s:745    .text.Proceed:00000000 Proceed
     /tmp/ccLdO6Pf.s:768    .text.Proceed:0000000c $d
     /tmp/ccLdO6Pf.s:773    .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccLdO6Pf.s:798    .text.ProcessCommand:00000000 $t
     /tmp/ccLdO6Pf.s:804    .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccLdO6Pf.s:930    .rodata.ProcessCommand:00000000 $d
     /tmp/ccLdO6Pf.s:1142   .text.ProcessCommand:00000160 $d
     /tmp/ccLdO6Pf.s:1156   .text.GetDistance:00000000 $t
     /tmp/ccLdO6Pf.s:1162   .text.GetDistance:00000000 GetDistance
     /tmp/ccLdO6Pf.s:1176   .text.Error_Handler:00000000 $t
     /tmp/ccLdO6Pf.s:1182   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccLdO6Pf.s:1214   .text.MX_TIM1_Init:00000000 $t
     /tmp/ccLdO6Pf.s:1219   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/ccLdO6Pf.s:1446   .text.MX_TIM1_Init:000000f0 $d
     /tmp/ccLdO6Pf.s:2093   .bss.htim1:00000000 htim1
     /tmp/ccLdO6Pf.s:1453   .text.SystemClock_Config:00000000 $t
     /tmp/ccLdO6Pf.s:1459   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccLdO6Pf.s:1546   .rodata.main.str1.4:00000000 $d
     /tmp/ccLdO6Pf.s:1550   .text.main:00000000 $t
     /tmp/ccLdO6Pf.s:1556   .text.main:00000000 main
     /tmp/ccLdO6Pf.s:2014   .text.main:00000200 $d
     /tmp/ccLdO6Pf.s:2079   .bss.startTime:00000000 startTime
     /tmp/ccLdO6Pf.s:2086   .bss.pMillis:00000000 pMillis
ARM GAS  /tmp/ccLdO6Pf.s 			page 74


     /tmp/ccLdO6Pf.s:2072   .bss.Value1:00000000 Value1
     /tmp/ccLdO6Pf.s:2065   .bss.Value2:00000000 Value2
     /tmp/ccLdO6Pf.s:2058   .bss.leftDistance:00000000 leftDistance
     /tmp/ccLdO6Pf.s:2051   .bss.rightDistance:00000000 rightDistance
     /tmp/ccLdO6Pf.s:2038   .bss.incomingCommand:00000000 $d
     /tmp/ccLdO6Pf.s:2041   .bss.command:00000000 $d
     /tmp/ccLdO6Pf.s:2048   .bss.rightDistance:00000000 $d
     /tmp/ccLdO6Pf.s:2055   .bss.leftDistance:00000000 $d
     /tmp/ccLdO6Pf.s:2062   .bss.Value2:00000000 $d
     /tmp/ccLdO6Pf.s:2069   .bss.Value1:00000000 $d
     /tmp/ccLdO6Pf.s:2076   .bss.startTime:00000000 $d
     /tmp/ccLdO6Pf.s:2083   .bss.pMillis:00000000 $d
     /tmp/ccLdO6Pf.s:2090   .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
memcpy
sprintf
HAL_Delay
MoveMotors
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
HAL_TIM_Base_Start
HAL_GetTick
HAL_GPIO_ReadPin
