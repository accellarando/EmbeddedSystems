ARM GAS  /tmp/ccufSi0X.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB57:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****  * in the root directory of this software component.
  14:Src/main.c    ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  ******************************************************************************
  17:Src/main.c    ****  */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include <string.h>
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "pins.h"
  23:Src/main.c    **** #include <stdbool.h>
  24:Src/main.c    **** #include "motor.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccufSi0X.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim1;
  49:Src/main.c    **** #define TRIG_PIN_LEFT GPIO_PIN_11
  50:Src/main.c    **** #define TRIG_PIN_RIGHT GPIO_PIN_13
  51:Src/main.c    **** #define TRIG_PORT GPIOB
  52:Src/main.c    **** #define ECHO_PIN_LEFT GPIO_PIN_12
  53:Src/main.c    **** #define ECHO_PIN_RIGHT GPIO_PIN_14
  54:Src/main.c    **** #define ECHO_PORT GPIOB
  55:Src/main.c    **** volatile uint32_t pMillis;
  56:Src/main.c    **** volatile uint16_t startTime;
  57:Src/main.c    **** volatile uint16_t Value1 = 0;
  58:Src/main.c    **** volatile uint16_t Value2 = 0;
  59:Src/main.c    **** volatile uint16_t leftDistance = 0;
  60:Src/main.c    **** volatile uint16_t rightDistance = 0;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** static void MX_GPIO_Init(void);
  69:Src/main.c    **** static void MX_TIM1_Init(void);
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** #define LED_RED GPIO_PIN_6
  77:Src/main.c    **** #define LED_BLUE GPIO_PIN_7
  78:Src/main.c    **** #define LED_ORANGE GPIO_PIN_8
  79:Src/main.c    **** #define LED_GREEN GPIO_PIN_9
  80:Src/main.c    **** #define TOGGLE_LED(led) (HAL_GPIO_TogglePin(GPIOC, led))
  81:Src/main.c    **** 
  82:Src/main.c    **** void LED_Init(uint32_t pins) {
  83:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
  84:Src/main.c    **** 
  85:Src/main.c    **** 	GPIO_InitTypeDef gpio_led_init = {pins,
  86:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
  87:Src/main.c    **** 		GPIO_SPEED_FREQ_LOW,
  88:Src/main.c    **** 		GPIO_NOPULL
  89:Src/main.c    **** 	};
  90:Src/main.c    **** 	HAL_GPIO_Init(GPIOC, &gpio_led_init);
ARM GAS  /tmp/ccufSi0X.s 			page 3


  91:Src/main.c    **** }
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****  * @brief Enable proper GPIO pins and set up their alternate
  95:Src/main.c    ****  *        functions appropriately.
  96:Src/main.c    ****  *        Pins defined in pins.h and pins.c.
  97:Src/main.c    ****  */
  98:Src/main.c    **** void GPIO_AF_Init() {
  99:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 100:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 101:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 102:Src/main.c    **** 
 103:Src/main.c    **** 	// uart_pins
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.rx.gpio, &(uart_pins.rx.pin));
 105:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 106:Src/main.c    **** 
 107:Src/main.c    **** 	// motor_left_pins
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enable.gpio, &motor_left_pins.enable.pin);
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 112:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 113:Src/main.c    **** 
 114:Src/main.c    **** 	// motor_right_pins
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enable.gpio, &motor_right_pins.enable.pin);
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 119:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 120:Src/main.c    **** 
 121:Src/main.c    **** 	// ultrasonic_left_pins
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.echo.gpio, &ultrasonic_left_pins.echo.pin);
 123:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 124:Src/main.c    **** 
 125:Src/main.c    **** 	// ultrasonic_right_pins
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.echo.gpio, &ultrasonic_right_pins.echo.pin);
 127:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 128:Src/main.c    **** }
 129:Src/main.c    **** 
 130:Src/main.c    **** /**
 131:Src/main.c    ****  * @brief Enable the USART3 peripheral.
 132:Src/main.c    ****  */
 133:Src/main.c    **** void USART_Init() {
 134:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 135:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	//Set baud rate
 138:Src/main.c    **** 	USART3->CR1 &= ~(1<<15);
 139:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 140:Src/main.c    **** 												//use with the BT adapter
 141:Src/main.c    **** 
 142:Src/main.c    **** 												//Enable transmitter
 143:Src/main.c    **** 	USART3->CR1 |= (1<<3);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	//Enable receiver
 146:Src/main.c    **** 	USART3->CR1 |= (1<<2);
 147:Src/main.c    **** 
ARM GAS  /tmp/ccufSi0X.s 			page 4


 148:Src/main.c    **** 	//Enable the receive register not empty interrupt
 149:Src/main.c    **** 	USART3->CR1 |= USART_CR1_RXNEIE;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	//Enable USART3
 152:Src/main.c    **** 	USART3->CR1 |= 1;
 153:Src/main.c    **** }
 154:Src/main.c    **** 
 155:Src/main.c    **** /**
 156:Src/main.c    ****  * @brief Sends a single character on the USART.
 157:Src/main.c    ****  *
 158:Src/main.c    ****  * @param c: the character to be sent
 159:Src/main.c    ****  */
 160:Src/main.c    **** void USART_SendChar(uint8_t c) {
 161:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 162:Src/main.c    **** 		;
 163:Src/main.c    **** 
 164:Src/main.c    **** 	USART3->TDR = c;
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** /**
 168:Src/main.c    ****  * @brief Sends a string on the USART.
 169:Src/main.c    ****  *
 170:Src/main.c    ****  * @param p_string: pointer to string to send
 171:Src/main.c    ****  */
 172:Src/main.c    **** void USART_SendString(uint8_t* p_string) {
 173:Src/main.c    **** 	while(*p_string != 0) {
 174:Src/main.c    **** 		USART_SendChar(*p_string);
 175:Src/main.c    **** 		p_string++;
 176:Src/main.c    **** 	}
 177:Src/main.c    **** 	USART_SendChar(0);
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** volatile uint8_t command[3];
 181:Src/main.c    **** volatile uint8_t incomingCommand = 0;
 182:Src/main.c    **** 
 183:Src/main.c    **** void ClearCommand(){
 184:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 185:Src/main.c    **** 	memset(command, 0, sizeof(command));
 186:Src/main.c    **** 	incomingCommand = 0;
 187:Src/main.c    **** 	USART_SendString(prompt);
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** void USART3_4_IRQHandler(){
 191:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 192:Src/main.c    **** 	incomingCommand = 1;
 193:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 194:Src/main.c    **** 		;
 195:Src/main.c    **** 	if(command[0]){
 196:Src/main.c    **** 		if(command[1]){
 197:Src/main.c    **** 			USART_SendString(err);
 198:Src/main.c    **** 			ClearCommand();
 199:Src/main.c    **** 		}
 200:Src/main.c    **** 		else{
 201:Src/main.c    **** 			command[1] = USART3->RDR;
 202:Src/main.c    **** 		}
 203:Src/main.c    **** 	}
 204:Src/main.c    **** 	else{
ARM GAS  /tmp/ccufSi0X.s 			page 5


 205:Src/main.c    **** 		command[0] = USART3->RDR;
 206:Src/main.c    **** 	}
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** void Log(){
 210:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 211:Src/main.c    **** 	USART_SendString(err);
 212:Src/main.c    **** }
 213:Src/main.c    **** 
 214:Src/main.c    **** void Proceed(){
 215:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 216:Src/main.c    **** 	USART_SendString(err);
 217:Src/main.c    **** }
 218:Src/main.c    **** 
 219:Src/main.c    **** void ProcessCommand(uint8_t direction, uint8_t distance){
 220:Src/main.c    **** 	uint32_t left_motor_pin;
 221:Src/main.c    **** 	uint32_t right_motor_pin;
 222:Src/main.c    **** 	int32_t CH1_DC = 65535;
 223:Src/main.c    **** 
 224:Src/main.c    **** 	uint8_t err[] = "ERROR: Invalid command!\n";
 225:Src/main.c    **** 
 226:Src/main.c    **** 	uint8_t forward[] = "Moving forward ";
 227:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 228:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 229:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 230:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 231:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 232:Src/main.c    **** 
 233:Src/main.c    **** 	MotorCommand motorcmd = {0};
 234:Src/main.c    **** 
 235:Src/main.c    **** 	uint8_t* part1;
 236:Src/main.c    **** 	uint8_t part2[15];
 237:Src/main.c    **** 	uint8_t zero = 0;
 238:Src/main.c    **** 	memcpy(part2, &zero, 15);
 239:Src/main.c    **** 
 240:Src/main.c    **** 	switch(direction){
 241:Src/main.c    **** 		case 'w':
 242:Src/main.c    **** 			part1 = forward;
 243:Src/main.c    **** 			motorcmd.dir = FORWARD;
 244:Src/main.c    **** 			break;
 245:Src/main.c    **** 		case 'a':
 246:Src/main.c    **** 			part1 = left;
 247:Src/main.c    **** 			motorcmd.dir = LEFT;
 248:Src/main.c    **** 			break;
 249:Src/main.c    **** 		case 'd':
 250:Src/main.c    **** 			part1 = right;
 251:Src/main.c    **** 			motorcmd.dir = RIGHT;
 252:Src/main.c    **** 			break;
 253:Src/main.c    **** 		case 'l':
 254:Src/main.c    **** 			part1 = log;
 255:Src/main.c    **** 			USART_SendString(part1);
 256:Src/main.c    **** 			Log();
 257:Src/main.c    **** 			ClearCommand();
 258:Src/main.c    **** 			return;
 259:Src/main.c    **** 		case 'p':
 260:Src/main.c    **** 			part1 = proceed;
 261:Src/main.c    **** 			USART_SendString(part1);
ARM GAS  /tmp/ccufSi0X.s 			page 6


 262:Src/main.c    **** 			Proceed();
 263:Src/main.c    **** 			ClearCommand();
 264:Src/main.c    **** 			return;
 265:Src/main.c    **** 		case 'x':
 266:Src/main.c    **** 			part1 = stop;
 267:Src/main.c    **** 			USART_SendString(part1);
 268:Src/main.c    **** 			motorcmd.dir = OFF;
 269:Src/main.c    **** 			ClearCommand();
 270:Src/main.c    **** 			MoveMotors(&motorcmd);
 271:Src/main.c    **** 			return;
 272:Src/main.c    **** 		default:
 273:Src/main.c    **** 			USART_SendString(err);
 274:Src/main.c    **** 			ClearCommand();
 275:Src/main.c    **** 			return;
 276:Src/main.c    **** 	}
 277:Src/main.c    **** 
 278:Src/main.c    **** 	//these are for "vector commands" only:
 279:Src/main.c    **** 
 280:Src/main.c    **** 	if(distance == '0' && direction == 'w'){
 281:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 282:Src/main.c    **** 		motorcmd.amount = 0;
 283:Src/main.c    **** 	}
 284:Src/main.c    **** 	else if(distance < '1' || distance > '9'){
 285:Src/main.c    **** 		USART_SendString(err);
 286:Src/main.c    **** 		ClearCommand();
 287:Src/main.c    **** 		return;
 288:Src/main.c    **** 	}
 289:Src/main.c    **** 	else{
 290:Src/main.c    **** 		uint8_t dist = (distance - '0') * 20;
 291:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 292:Src/main.c    **** 		motorcmd.amount = dist;
 293:Src/main.c    **** 	}
 294:Src/main.c    **** 
 295:Src/main.c    **** 
 296:Src/main.c    **** 	USART_SendString(part1);
 297:Src/main.c    **** 	USART_SendString(part2);
 298:Src/main.c    **** 
 299:Src/main.c    **** 	TIM2->CCR1 = CH1_DC;
 300:Src/main.c    **** 	HAL_Delay(1000);
 301:Src/main.c    **** 	TIM2->CCR1 = 0;
 302:Src/main.c    **** 
 303:Src/main.c    **** 	uint8_t* result = MoveMotors(&motorcmd);
 304:Src/main.c    **** 	USART_SendString(result);
 305:Src/main.c    **** 
 306:Src/main.c    **** 	ClearCommand();
 307:Src/main.c    **** 
 308:Src/main.c    **** 
 309:Src/main.c    **** 	// Example code while loop
 310:Src/main.c    **** 	//    while (1)
 311:Src/main.c    **** 	//    {
 312:Src/main.c    **** 	//        while(CH1_DC < 65535)
 313:Src/main.c    **** 	//        {
 314:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 315:Src/main.c    **** 	//            CH1_DC += 70;
 316:Src/main.c    **** 	//            HAL_Delay(1);
 317:Src/main.c    **** 	//        }
 318:Src/main.c    **** 	//        while(CH1_DC > 0)
ARM GAS  /tmp/ccufSi0X.s 			page 7


 319:Src/main.c    **** 	//        {
 320:Src/main.c    **** 	//            TIM2->CCR1 = CH1_DC;
 321:Src/main.c    **** 	//            CH1_DC -= 70;
 322:Src/main.c    **** 	//            HAL_Delay(1);
 323:Src/main.c    **** 	//        }
 324:Src/main.c    **** 	//    }
 325:Src/main.c    **** }
 326:Src/main.c    **** 
 327:Src/main.c    **** /*
 328:Src/main.c    ****    void ProcessCommandPWM(uint8_t side, uint8_t amt){
 329:Src/main.c    ****    MotorCommand motorcmd = {0};
 330:Src/main.c    ****    motorcmd.dir = FORWARD;
 331:Src/main.c    ****    motorcmd.amount = 9;
 332:Src/main.c    ****    switch(side){
 333:Src/main.c    ****    case 'l':
 334:Src/main.c    ****    pwm_left = amt;
 335:Src/main.c    ****    break;
 336:Src/main.c    ****    case 'r':
 337:Src/main.c    ****    pwm_right = amt;
 338:Src/main.c    ****    break;
 339:Src/main.c    ****    case 'x':
 340:Src/main.c    ****    motorcmd.dir = OFF;
 341:Src/main.c    ****    break;
 342:Src/main.c    ****    default:
 343:Src/main.c    ****    break;
 344:Src/main.c    ****    }
 345:Src/main.c    ****    MoveMotors(&motorcmd);
 346:Src/main.c    ****    ClearCommand();
 347:Src/main.c    ****    }
 348:Src/main.c    ****    */
 349:Src/main.c    **** 
 350:Src/main.c    **** /*
 351:Src/main.c    ****    void Ultrasonic_Init(uint32_t pins)
 352:Src/main.c    ****    {
 353:Src/main.c    ****    __HAL_RCC_GPIOA_CLK_ENABLE();
 354:Src/main.c    **** 
 355:Src/main.c    ****    GPIO_InitTypeDef gpio_init = {GPIO_PIN_8 | GPIO_PIN_9,
 356:Src/main.c    ****    GPIO_MODE_INPUT,
 357:Src/main.c    ****    GPIO_SPEED_FREQ_LOW,
 358:Src/main.c    ****    GPIO_NOPULL
 359:Src/main.c    ****    };
 360:Src/main.c    ****    HAL_GPIO_Init(GPIOA, &gpio_init);
 361:Src/main.c    ****    }
 362:Src/main.c    ****    */
 363:Src/main.c    **** 
 364:Src/main.c    **** void GetDistance()
 365:Src/main.c    **** {
 366:Src/main.c    **** 	char dist[32] = "";
 367:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 368:Src/main.c    **** 	USART_SendString(dist);
 369:Src/main.c    **** }
 370:Src/main.c    **** 
 371:Src/main.c    **** /* USER CODE END 0 */
 372:Src/main.c    **** 
 373:Src/main.c    **** /**
 374:Src/main.c    ****  * @brief  The application entry point.
 375:Src/main.c    ****  * @retval int
ARM GAS  /tmp/ccufSi0X.s 			page 8


 376:Src/main.c    ****  */
 377:Src/main.c    **** int main(void)
 378:Src/main.c    **** {
 379:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 380:Src/main.c    **** 	SystemClock_Config();
 381:Src/main.c    **** 
 382:Src/main.c    **** 	//USART Initalizations
 383:Src/main.c    **** 	GPIO_AF_Init();
 384:Src/main.c    **** 	USART_Init();
 385:Src/main.c    **** 
 386:Src/main.c    **** 	motor_init();                           // Initialize motor code
 387:Src/main.c    **** 
 388:Src/main.c    **** 	NVIC_EnableIRQ(USART3_4_IRQn);
 389:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 390:Src/main.c    **** 
 391:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 392:Src/main.c    **** 
 393:Src/main.c    **** 	//PWM and Ultrasonic Initalizations
 394:Src/main.c    **** 	MX_GPIO_Init();
 395:Src/main.c    **** 	MX_TIM1_Init();
 396:Src/main.c    **** 
 397:Src/main.c    **** 	HAL_TIM_Base_Start(&htim1);
 398:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 399:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 400:Src/main.c    **** 
 401:Src/main.c    **** 	while (1) {
 402:Src/main.c    **** 		int32_t counter = 0;
 403:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 404:Src/main.c    **** 
 405:Src/main.c    **** 		//__HAL_TIM_SET_COUNTER(&htim1, 0);
 406:Src/main.c    **** 		//while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 407:Src/main.c    **** 		while (counter < 10){
 408:Src/main.c    **** 			counter++;
 409:Src/main.c    **** 		}  // wait for 10 us
 410:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 411:Src/main.c    **** 
 412:Src/main.c    **** 
 413:Src/main.c    **** 		startTime = HAL_GetTick();
 414:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 415:Src/main.c    **** 
 416:Src/main.c    **** 		// wait for the echo pin to go high
 417:Src/main.c    **** 		while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 10 >  HAL_GetTick())
 418:Src/main.c    **** 		{
 419:Src/main.c    **** 
 420:Src/main.c    **** 		}
 421:Src/main.c    **** 		//Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 422:Src/main.c    **** 		Value1 = (HAL_GetTick() - startTime);
 423:Src/main.c    **** 
 424:Src/main.c    **** 
 425:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 426:Src/main.c    **** 								 // wait for the echo pin to go low
 427:Src/main.c    **** 		while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_LEFT)) && pMillis + 50 > HAL_GetTick())
 428:Src/main.c    **** 		{
 429:Src/main.c    **** 
 430:Src/main.c    **** 		}
 431:Src/main.c    **** 		//Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 432:Src/main.c    **** 		Value2 = (HAL_GetTick() - startTime);
ARM GAS  /tmp/ccufSi0X.s 			page 9


 433:Src/main.c    **** 
 434:Src/main.c    **** 		//Distance = ((Value2-Value1)* 0.034)/2;
 435:Src/main.c    **** 		leftDistance = (Value2 - Value1);
 436:Src/main.c    **** 		if(leftDistance < 10)
 437:Src/main.c    **** 		{
 438:Src/main.c    **** 			char strLeft[32];
 439:Src/main.c    **** 			sprintf(strLeft, "%u", leftDistance);
 440:Src/main.c    **** 			/*
 441:Src/main.c    **** 			   USART_SendString("Left Ultrasonic: ");
 442:Src/main.c    **** 			   USART_SendString(strLeft);
 443:Src/main.c    **** 			   USART_SendString("\n");
 444:Src/main.c    **** 			   */
 445:Src/main.c    **** 		}
 446:Src/main.c    **** 
 447:Src/main.c    **** 		counter = 0;
 448:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 449:Src/main.c    **** 
 450:Src/main.c    **** 		//__HAL_TIM_SET_COUNTER(&htim1, 0);
 451:Src/main.c    **** 		//while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 452:Src/main.c    **** 		while (counter < 10){
 453:Src/main.c    **** 			counter++;
 454:Src/main.c    **** 		}  // wait for 10 us
 455:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 456:Src/main.c    **** 
 457:Src/main.c    **** 
 458:Src/main.c    **** 		startTime = HAL_GetTick();
 459:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 460:Src/main.c    **** 
 461:Src/main.c    **** 		// wait for the echo pin to go high
 462:Src/main.c    **** 		while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 10 >  HAL_GetTick())
 463:Src/main.c    **** 		{
 464:Src/main.c    **** 
 465:Src/main.c    **** 		}
 466:Src/main.c    **** 		//Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 467:Src/main.c    **** 		Value1 = (HAL_GetTick() - startTime);
 468:Src/main.c    **** 
 469:Src/main.c    **** 
 470:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 471:Src/main.c    **** 								 // wait for the echo pin to go low
 472:Src/main.c    **** 		while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN_RIGHT)) && pMillis + 50 > HAL_GetTick())
 473:Src/main.c    **** 		{
 474:Src/main.c    **** 
 475:Src/main.c    **** 		}
 476:Src/main.c    **** 		//Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 477:Src/main.c    **** 		Value2 = (HAL_GetTick() - startTime);
 478:Src/main.c    **** 
 479:Src/main.c    **** 		//Distance = ((Value2-Value1)* 0.034)/2;
 480:Src/main.c    **** 		rightDistance = (Value2 - Value1);
 481:Src/main.c    **** 		if(rightDistance < 10)
 482:Src/main.c    **** 		{
 483:Src/main.c    **** 			char strRight[32];
 484:Src/main.c    **** 			sprintf(strRight, "%u", rightDistance);
 485:Src/main.c    **** 			/*
 486:Src/main.c    **** 			   USART_SendString("Right Ultrasonic: ");
 487:Src/main.c    **** 			   USART_SendString(strRight);
 488:Src/main.c    **** 			   USART_SendString("\n");
 489:Src/main.c    **** 			   */
ARM GAS  /tmp/ccufSi0X.s 			page 10


 490:Src/main.c    **** 		}
 491:Src/main.c    **** 		if(incomingCommand)
 492:Src/main.c    **** 		{
 493:Src/main.c    **** 			if(command[0] != 'w' &&
 494:Src/main.c    **** 					command[0] != 'a' &&
 495:Src/main.c    **** 					command[0] != 'd'){
 496:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 497:Src/main.c    **** 			}
 498:Src/main.c    **** 			if(command[1])
 499:Src/main.c    **** 			{
 500:Src/main.c    **** 				ProcessCommand(command[0], command[1]);
 501:Src/main.c    **** 			}
 502:Src/main.c    **** 		}
 503:Src/main.c    **** 		/*
 504:Src/main.c    **** 		   if(incomingCommand){
 505:Src/main.c    **** 		   if(command[2]){
 506:Src/main.c    **** 		   uint8_t tens = command[1] - '0';
 507:Src/main.c    **** 		   uint8_t huns = command[2] - '0';
 508:Src/main.c    **** 		   ProcessCommandPWM(command[0], 10*tens + huns);
 509:Src/main.c    **** 		   }
 510:Src/main.c    **** 		   }
 511:Src/main.c    **** 		   */
 512:Src/main.c    **** 		HAL_Delay(500);
 513:Src/main.c    **** 	}
 514:Src/main.c    **** }
 515:Src/main.c    **** 
 516:Src/main.c    **** /**
 517:Src/main.c    ****  * @brief System Clock Configuration
 518:Src/main.c    ****  * @retval None
 519:Src/main.c    ****  */
 520:Src/main.c    **** void SystemClock_Config(void)
 521:Src/main.c    **** {
 522:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 523:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 524:Src/main.c    **** 
 525:Src/main.c    **** 	/** Initializes the RCC Oscillators according to the specified parameters
 526:Src/main.c    **** 	 * in the RCC_OscInitTypeDef structure.
 527:Src/main.c    **** 	 */
 528:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 529:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 530:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 531:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 532:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 533:Src/main.c    **** 	{
 534:Src/main.c    **** 		Error_Handler();
 535:Src/main.c    **** 	}
 536:Src/main.c    **** 
 537:Src/main.c    **** 	/** Initializes the CPU, AHB and APB buses clocks
 538:Src/main.c    **** 	*/
 539:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 540:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 541:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 542:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 543:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 544:Src/main.c    **** 
 545:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 546:Src/main.c    **** 	{
ARM GAS  /tmp/ccufSi0X.s 			page 11


 547:Src/main.c    **** 		Error_Handler();
 548:Src/main.c    **** 	}
 549:Src/main.c    **** }
 550:Src/main.c    **** 
 551:Src/main.c    **** /**
 552:Src/main.c    ****  * @brief TIM2 Initialization Function
 553:Src/main.c    ****  * @param None
 554:Src/main.c    ****  * @retval None
 555:Src/main.c    ****  */
 556:Src/main.c    **** static void MX_TIM1_Init(void)
 557:Src/main.c    **** {
 558:Src/main.c    **** 
 559:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 0 */
 560:Src/main.c    **** 
 561:Src/main.c    **** 	/* USER CODE END TIM1_Init 0 */
 562:Src/main.c    **** 
 563:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 564:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 565:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 566:Src/main.c    **** 	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 567:Src/main.c    **** 
 568:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 1 */
 569:Src/main.c    **** 
 570:Src/main.c    **** 	/* USER CODE END TIM1_Init 1 */
 571:Src/main.c    **** 	htim1.Instance = TIM1;
 572:Src/main.c    **** 	htim1.Init.Prescaler = 0;
 573:Src/main.c    **** 	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 574:Src/main.c    **** 	htim1.Init.Period = 65535;
 575:Src/main.c    **** 	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 576:Src/main.c    **** 	htim1.Init.RepetitionCounter = 0;
 577:Src/main.c    **** 	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 578:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 579:Src/main.c    **** 	{
 580:Src/main.c    **** 		Error_Handler();
 581:Src/main.c    **** 	}
 582:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 583:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 584:Src/main.c    **** 	{
 585:Src/main.c    **** 		Error_Handler();
 586:Src/main.c    **** 	}
 587:Src/main.c    **** 	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 588:Src/main.c    **** 	{
 589:Src/main.c    **** 		Error_Handler();
 590:Src/main.c    **** 	}
 591:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 592:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 593:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 594:Src/main.c    **** 	{
 595:Src/main.c    **** 		Error_Handler();
 596:Src/main.c    **** 	}
 597:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 598:Src/main.c    **** 	sConfigOC.Pulse = 0;
 599:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 600:Src/main.c    **** 	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 601:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 602:Src/main.c    **** 	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 603:Src/main.c    **** 	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
ARM GAS  /tmp/ccufSi0X.s 			page 12


 604:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 605:Src/main.c    **** 	{
 606:Src/main.c    **** 		Error_Handler();
 607:Src/main.c    **** 	}
 608:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 609:Src/main.c    **** 	{
 610:Src/main.c    **** 		Error_Handler();
 611:Src/main.c    **** 	}
 612:Src/main.c    **** 	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 613:Src/main.c    **** 	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 614:Src/main.c    **** 	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 615:Src/main.c    **** 	sBreakDeadTimeConfig.DeadTime = 0;
 616:Src/main.c    **** 	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 617:Src/main.c    **** 	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 618:Src/main.c    **** 	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 619:Src/main.c    **** 	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 620:Src/main.c    **** 	{
 621:Src/main.c    **** 		Error_Handler();
 622:Src/main.c    **** 	}
 623:Src/main.c    **** 	/* USER CODE BEGIN TIM1_Init 2 */
 624:Src/main.c    **** 
 625:Src/main.c    **** 	/* USER CODE END TIM1_Init 2 */
 626:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim1);
 627:Src/main.c    **** 
 628:Src/main.c    **** }
 629:Src/main.c    **** 
 630:Src/main.c    **** /**
 631:Src/main.c    ****  * @brief GPIO Initialization Function
 632:Src/main.c    ****  * @param None
 633:Src/main.c    ****  * @retval None
 634:Src/main.c    ****  */
 635:Src/main.c    **** static void MX_GPIO_Init(void)
 636:Src/main.c    **** {
  26              		.loc 1 636 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
 637:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 637 2 view .LVU1
  39              		.loc 1 637 19 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 638:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_1 */
 639:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_1 */
 640:Src/main.c    **** 
 641:Src/main.c    **** 	/* GPIO Ports Clock Enable */
ARM GAS  /tmp/ccufSi0X.s 			page 13


 642:Src/main.c    **** 	__HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 642 2 is_stmt 1 view .LVU3
  46              	.LBB11:
  47              		.loc 1 642 2 view .LVU4
  48              		.loc 1 642 2 view .LVU5
  49 000e 0E4B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C903     		lsls	r1, r1, #15
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 642 2 view .LVU6
  56 001a 5B69     		ldr	r3, [r3, #20]
  57 001c 0B40     		ands	r3, r1
  58 001e 0093     		str	r3, [sp]
  59              		.loc 1 642 2 view .LVU7
  60 0020 009B     		ldr	r3, [sp]
  61              	.LBE11:
  62              		.loc 1 642 2 view .LVU8
 643:Src/main.c    **** 	/* __HAL_RCC_GPIOA_CLK_ENABLE(); */
 644:Src/main.c    **** 
 645:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 646:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  63              		.loc 1 646 2 view .LVU9
  64 0022 9024     		movs	r4, #144
  65 0024 E405     		lsls	r4, r4, #23
  66 0026 0022     		movs	r2, #0
  67 0028 0121     		movs	r1, #1
  68 002a 2000     		movs	r0, r4
  69 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
 647:Src/main.c    **** 
 648:Src/main.c    **** 	/*Configure GPIO pin : PA0 */
 649:Src/main.c    **** 	GPIO_InitStruct.Pin = GPIO_PIN_0;
  71              		.loc 1 649 2 view .LVU10
  72              		.loc 1 649 22 is_stmt 0 view .LVU11
  73 0030 0123     		movs	r3, #1
  74 0032 0193     		str	r3, [sp, #4]
 650:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 650 2 is_stmt 1 view .LVU12
  76              		.loc 1 650 23 is_stmt 0 view .LVU13
  77 0034 0293     		str	r3, [sp, #8]
 651:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 651 2 is_stmt 1 view .LVU14
  79              		.loc 1 651 23 is_stmt 0 view .LVU15
  80 0036 0023     		movs	r3, #0
  81 0038 0393     		str	r3, [sp, #12]
 652:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 652 2 is_stmt 1 view .LVU16
  83              		.loc 1 652 24 is_stmt 0 view .LVU17
  84 003a 0493     		str	r3, [sp, #16]
 653:Src/main.c    **** 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 653 2 is_stmt 1 view .LVU18
  86 003c 01A9     		add	r1, sp, #4
  87 003e 2000     		movs	r0, r4
  88 0040 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
ARM GAS  /tmp/ccufSi0X.s 			page 14


 654:Src/main.c    **** 
 655:Src/main.c    **** 	/* USER CODE BEGIN MX_GPIO_Init_2 */
 656:Src/main.c    **** 	/* USER CODE END MX_GPIO_Init_2 */
 657:Src/main.c    **** }
  90              		.loc 1 657 1 is_stmt 0 view .LVU19
  91 0044 06B0     		add	sp, sp, #24
  92              		@ sp needed
  93 0046 10BD     		pop	{r4, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0048 00100240 		.word	1073876992
  98              		.cfi_endproc
  99              	.LFE57:
 101              		.section	.text.LED_Init,"ax",%progbits
 102              		.align	1
 103              		.global	LED_Init
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	LED_Init:
 109              	.LVL3:
 110              	.LFB43:
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 111              		.loc 1 82 30 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 24
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Src/main.c    **** 	/* __HAL_RCC_GPIOC_CLK_ENABLE(); */
 115              		.loc 1 82 30 is_stmt 0 view .LVU21
 116 0000 10B5     		push	{r4, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 86B0     		sub	sp, sp, #24
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 32
 124 0004 0400     		movs	r4, r0
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 125              		.loc 1 85 2 is_stmt 1 view .LVU22
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 126              		.loc 1 85 19 is_stmt 0 view .LVU23
 127 0006 1422     		movs	r2, #20
 128 0008 0021     		movs	r1, #0
 129 000a 01A8     		add	r0, sp, #4
 130              	.LVL4:
  85:Src/main.c    **** 		GPIO_MODE_OUTPUT_PP,
 131              		.loc 1 85 19 view .LVU24
 132 000c FFF7FEFF 		bl	memset
 133              	.LVL5:
 134 0010 0194     		str	r4, [sp, #4]
 135 0012 0123     		movs	r3, #1
 136 0014 0293     		str	r3, [sp, #8]
  90:Src/main.c    **** }
 137              		.loc 1 90 2 is_stmt 1 view .LVU25
 138 0016 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccufSi0X.s 			page 15


 139 0018 0248     		ldr	r0, .L5
 140 001a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL6:
  91:Src/main.c    **** 
 142              		.loc 1 91 1 is_stmt 0 view .LVU26
 143 001e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145              	.LVL7:
  91:Src/main.c    **** 
 146              		.loc 1 91 1 view .LVU27
 147 0020 10BD     		pop	{r4, pc}
 148              	.L6:
 149 0022 C046     		.align	2
 150              	.L5:
 151 0024 00080048 		.word	1207961600
 152              		.cfi_endproc
 153              	.LFE43:
 155              		.section	.text.GPIO_AF_Init,"ax",%progbits
 156              		.align	1
 157              		.global	GPIO_AF_Init
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 162              	GPIO_AF_Init:
 163              	.LFB44:
  98:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 164              		.loc 1 98 21 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 173 0002 84B0     		sub	sp, sp, #16
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 24
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 176              		.loc 1 99 2 view .LVU29
 177              	.LBB12:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 178              		.loc 1 99 2 view .LVU30
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 179              		.loc 1 99 2 view .LVU31
 180 0004 364B     		ldr	r3, .L8
 181 0006 5A69     		ldr	r2, [r3, #20]
 182 0008 8021     		movs	r1, #128
 183 000a 8902     		lsls	r1, r1, #10
 184 000c 0A43     		orrs	r2, r1
 185 000e 5A61     		str	r2, [r3, #20]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 99 2 view .LVU32
 187 0010 5A69     		ldr	r2, [r3, #20]
 188 0012 0A40     		ands	r2, r1
 189 0014 0192     		str	r2, [sp, #4]
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/ccufSi0X.s 			page 16


 190              		.loc 1 99 2 view .LVU33
 191 0016 019A     		ldr	r2, [sp, #4]
 192              	.LBE12:
  99:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 193              		.loc 1 99 2 view .LVU34
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 194              		.loc 1 100 2 view .LVU35
 195              	.LBB13:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 196              		.loc 1 100 2 view .LVU36
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 197              		.loc 1 100 2 view .LVU37
 198 0018 5A69     		ldr	r2, [r3, #20]
 199 001a 8021     		movs	r1, #128
 200 001c C902     		lsls	r1, r1, #11
 201 001e 0A43     		orrs	r2, r1
 202 0020 5A61     		str	r2, [r3, #20]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 203              		.loc 1 100 2 view .LVU38
 204 0022 5A69     		ldr	r2, [r3, #20]
 205 0024 0A40     		ands	r2, r1
 206 0026 0292     		str	r2, [sp, #8]
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 100 2 view .LVU39
 208 0028 029A     		ldr	r2, [sp, #8]
 209              	.LBE13:
 100:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 210              		.loc 1 100 2 view .LVU40
 101:Src/main.c    **** 
 211              		.loc 1 101 2 view .LVU41
 212              	.LBB14:
 101:Src/main.c    **** 
 213              		.loc 1 101 2 view .LVU42
 101:Src/main.c    **** 
 214              		.loc 1 101 2 view .LVU43
 215 002a 5A69     		ldr	r2, [r3, #20]
 216 002c 8021     		movs	r1, #128
 217 002e 0903     		lsls	r1, r1, #12
 218 0030 0A43     		orrs	r2, r1
 219 0032 5A61     		str	r2, [r3, #20]
 101:Src/main.c    **** 
 220              		.loc 1 101 2 view .LVU44
 221 0034 5B69     		ldr	r3, [r3, #20]
 222 0036 0B40     		ands	r3, r1
 223 0038 0393     		str	r3, [sp, #12]
 101:Src/main.c    **** 
 224              		.loc 1 101 2 view .LVU45
 225 003a 039B     		ldr	r3, [sp, #12]
 226              	.LBE14:
 101:Src/main.c    **** 
 227              		.loc 1 101 2 view .LVU46
 104:Src/main.c    **** 	HAL_GPIO_Init(uart_pins.tx.gpio, &(uart_pins.tx.pin));
 228              		.loc 1 104 2 view .LVU47
 229 003c 2949     		ldr	r1, .L8+4
 230 003e 0C1F     		subs	r4, r1, #4
 231 0040 2068     		ldr	r0, [r4]
 232 0042 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccufSi0X.s 			page 17


 233              	.LVL8:
 105:Src/main.c    **** 
 234              		.loc 1 105 2 view .LVU48
 235 0046 2100     		movs	r1, r4
 236 0048 1C31     		adds	r1, r1, #28
 237 004a A069     		ldr	r0, [r4, #24]
 238 004c FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL9:
 108:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_a.gpio, &motor_left_pins.dir_a.pin);
 240              		.loc 1 108 2 view .LVU49
 241 0050 2549     		ldr	r1, .L8+8
 242 0052 0C1F     		subs	r4, r1, #4
 243 0054 2068     		ldr	r0, [r4]
 244 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL10:
 109:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.dir_b.gpio, &motor_left_pins.dir_b.pin);
 246              		.loc 1 109 2 view .LVU50
 247 005a 2100     		movs	r1, r4
 248 005c 1C31     		adds	r1, r1, #28
 249 005e A069     		ldr	r0, [r4, #24]
 250 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 251              	.LVL11:
 110:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_a.gpio, &motor_left_pins.enc_a.pin);
 252              		.loc 1 110 2 view .LVU51
 253 0064 2100     		movs	r1, r4
 254 0066 3431     		adds	r1, r1, #52
 255 0068 206B     		ldr	r0, [r4, #48]
 256 006a FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL12:
 111:Src/main.c    **** 	HAL_GPIO_Init(motor_left_pins.enc_b.gpio, &motor_left_pins.enc_b.pin);
 258              		.loc 1 111 2 view .LVU52
 259 006e 2100     		movs	r1, r4
 260 0070 4C31     		adds	r1, r1, #76
 261 0072 A06C     		ldr	r0, [r4, #72]
 262 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL13:
 112:Src/main.c    **** 
 264              		.loc 1 112 2 view .LVU53
 265 0078 2100     		movs	r1, r4
 266 007a 6431     		adds	r1, r1, #100
 267 007c 206E     		ldr	r0, [r4, #96]
 268 007e FFF7FEFF 		bl	HAL_GPIO_Init
 269              	.LVL14:
 115:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_a.gpio, &motor_right_pins.dir_a.pin);
 270              		.loc 1 115 2 view .LVU54
 271 0082 1A49     		ldr	r1, .L8+12
 272 0084 0C1F     		subs	r4, r1, #4
 273 0086 2068     		ldr	r0, [r4]
 274 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 275              	.LVL15:
 116:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.dir_b.gpio, &motor_right_pins.dir_b.pin);
 276              		.loc 1 116 2 view .LVU55
 277 008c 2100     		movs	r1, r4
 278 008e 1C31     		adds	r1, r1, #28
 279 0090 A069     		ldr	r0, [r4, #24]
 280 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL16:
ARM GAS  /tmp/ccufSi0X.s 			page 18


 117:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_a.gpio, &motor_right_pins.enc_a.pin);
 282              		.loc 1 117 2 view .LVU56
 283 0096 2100     		movs	r1, r4
 284 0098 3431     		adds	r1, r1, #52
 285 009a 206B     		ldr	r0, [r4, #48]
 286 009c FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL17:
 118:Src/main.c    **** 	HAL_GPIO_Init(motor_right_pins.enc_b.gpio, &motor_right_pins.enc_b.pin);
 288              		.loc 1 118 2 view .LVU57
 289 00a0 2100     		movs	r1, r4
 290 00a2 4C31     		adds	r1, r1, #76
 291 00a4 A06C     		ldr	r0, [r4, #72]
 292 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 293              	.LVL18:
 119:Src/main.c    **** 
 294              		.loc 1 119 2 view .LVU58
 295 00aa 2100     		movs	r1, r4
 296 00ac 6431     		adds	r1, r1, #100
 297 00ae 206E     		ldr	r0, [r4, #96]
 298 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 122:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_left_pins.trig.gpio, &ultrasonic_left_pins.trig.pin);
 300              		.loc 1 122 2 view .LVU59
 301 00b4 0E49     		ldr	r1, .L8+16
 302 00b6 0C1F     		subs	r4, r1, #4
 303 00b8 2068     		ldr	r0, [r4]
 304 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 305              	.LVL20:
 123:Src/main.c    **** 
 306              		.loc 1 123 2 view .LVU60
 307 00be 2100     		movs	r1, r4
 308 00c0 1C31     		adds	r1, r1, #28
 309 00c2 A069     		ldr	r0, [r4, #24]
 310 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL21:
 126:Src/main.c    **** 	HAL_GPIO_Init(ultrasonic_right_pins.trig.gpio, &ultrasonic_right_pins.trig.pin);
 312              		.loc 1 126 2 view .LVU61
 313 00c8 0A49     		ldr	r1, .L8+20
 314 00ca 0C1F     		subs	r4, r1, #4
 315 00cc 2068     		ldr	r0, [r4]
 316 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL22:
 127:Src/main.c    **** }
 318              		.loc 1 127 2 view .LVU62
 319 00d2 2100     		movs	r1, r4
 320 00d4 1C31     		adds	r1, r1, #28
 321 00d6 A069     		ldr	r0, [r4, #24]
 322 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 323              	.LVL23:
 128:Src/main.c    **** 
 324              		.loc 1 128 1 is_stmt 0 view .LVU63
 325 00dc 04B0     		add	sp, sp, #16
 326              		@ sp needed
 327 00de 10BD     		pop	{r4, pc}
 328              	.L9:
 329              		.align	2
 330              	.L8:
ARM GAS  /tmp/ccufSi0X.s 			page 19


 331 00e0 00100240 		.word	1073876992
 332 00e4 04000000 		.word	uart_pins+4
 333 00e8 04000000 		.word	motor_left_pins+4
 334 00ec 04000000 		.word	motor_right_pins+4
 335 00f0 04000000 		.word	ultrasonic_left_pins+4
 336 00f4 04000000 		.word	ultrasonic_right_pins+4
 337              		.cfi_endproc
 338              	.LFE44:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.USART_Init,"ax",%progbits
 342              		.align	1
 343              		.global	USART_Init
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	USART_Init:
 349              	.LFB45:
 133:Src/main.c    **** 	__HAL_RCC_USART3_CLK_ENABLE();
 350              		.loc 1 133 19 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359 0002 82B0     		sub	sp, sp, #8
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 362              		.loc 1 134 2 view .LVU65
 363              	.LBB15:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 364              		.loc 1 134 2 view .LVU66
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 365              		.loc 1 134 2 view .LVU67
 366 0004 154B     		ldr	r3, .L11
 367 0006 D969     		ldr	r1, [r3, #28]
 368 0008 8022     		movs	r2, #128
 369 000a D202     		lsls	r2, r2, #11
 370 000c 1143     		orrs	r1, r2
 371 000e D961     		str	r1, [r3, #28]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 372              		.loc 1 134 2 view .LVU68
 373 0010 D969     		ldr	r1, [r3, #28]
 374 0012 1140     		ands	r1, r2
 375 0014 0191     		str	r1, [sp, #4]
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 376              		.loc 1 134 2 view .LVU69
 377 0016 0199     		ldr	r1, [sp, #4]
 378              	.LBE15:
 134:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 379              		.loc 1 134 2 view .LVU70
 135:Src/main.c    **** 
 380              		.loc 1 135 2 view .LVU71
 135:Src/main.c    **** 
ARM GAS  /tmp/ccufSi0X.s 			page 20


 381              		.loc 1 135 5 is_stmt 0 view .LVU72
 382 0018 D969     		ldr	r1, [r3, #28]
 135:Src/main.c    **** 
 383              		.loc 1 135 15 view .LVU73
 384 001a 0A43     		orrs	r2, r1
 385 001c DA61     		str	r2, [r3, #28]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 386              		.loc 1 138 2 is_stmt 1 view .LVU74
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 387              		.loc 1 138 8 is_stmt 0 view .LVU75
 388 001e 104C     		ldr	r4, .L11+4
 389 0020 2368     		ldr	r3, [r4]
 138:Src/main.c    **** 	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600; //this is the baud rate we need to 
 390              		.loc 1 138 14 view .LVU76
 391 0022 104A     		ldr	r2, .L11+8
 392 0024 1340     		ands	r3, r2
 393 0026 2360     		str	r3, [r4]
 139:Src/main.c    **** 												//use with the BT adapter
 394              		.loc 1 139 2 is_stmt 1 view .LVU77
 139:Src/main.c    **** 												//use with the BT adapter
 395              		.loc 1 139 16 is_stmt 0 view .LVU78
 396 0028 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 397              	.LVL24:
 139:Src/main.c    **** 												//use with the BT adapter
 398              		.loc 1 139 38 view .LVU79
 399 002c 9621     		movs	r1, #150
 400 002e 8901     		lsls	r1, r1, #6
 401 0030 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL25:
 139:Src/main.c    **** 												//use with the BT adapter
 403              		.loc 1 139 14 view .LVU80
 404 0034 E060     		str	r0, [r4, #12]
 143:Src/main.c    **** 
 405              		.loc 1 143 2 is_stmt 1 view .LVU81
 143:Src/main.c    **** 
 406              		.loc 1 143 8 is_stmt 0 view .LVU82
 407 0036 2368     		ldr	r3, [r4]
 143:Src/main.c    **** 
 408              		.loc 1 143 14 view .LVU83
 409 0038 0822     		movs	r2, #8
 410 003a 1343     		orrs	r3, r2
 411 003c 2360     		str	r3, [r4]
 146:Src/main.c    **** 
 412              		.loc 1 146 2 is_stmt 1 view .LVU84
 146:Src/main.c    **** 
 413              		.loc 1 146 8 is_stmt 0 view .LVU85
 414 003e 2368     		ldr	r3, [r4]
 146:Src/main.c    **** 
 415              		.loc 1 146 14 view .LVU86
 416 0040 043A     		subs	r2, r2, #4
 417 0042 1343     		orrs	r3, r2
 418 0044 2360     		str	r3, [r4]
 149:Src/main.c    **** 
 419              		.loc 1 149 2 is_stmt 1 view .LVU87
 149:Src/main.c    **** 
 420              		.loc 1 149 8 is_stmt 0 view .LVU88
 421 0046 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccufSi0X.s 			page 21


 149:Src/main.c    **** 
 422              		.loc 1 149 14 view .LVU89
 423 0048 1C32     		adds	r2, r2, #28
 424 004a 1343     		orrs	r3, r2
 425 004c 2360     		str	r3, [r4]
 152:Src/main.c    **** }
 426              		.loc 1 152 2 is_stmt 1 view .LVU90
 152:Src/main.c    **** }
 427              		.loc 1 152 8 is_stmt 0 view .LVU91
 428 004e 2368     		ldr	r3, [r4]
 152:Src/main.c    **** }
 429              		.loc 1 152 14 view .LVU92
 430 0050 1F3A     		subs	r2, r2, #31
 431 0052 1343     		orrs	r3, r2
 432 0054 2360     		str	r3, [r4]
 153:Src/main.c    **** 
 433              		.loc 1 153 1 view .LVU93
 434 0056 02B0     		add	sp, sp, #8
 435              		@ sp needed
 436 0058 10BD     		pop	{r4, pc}
 437              	.L12:
 438 005a C046     		.align	2
 439              	.L11:
 440 005c 00100240 		.word	1073876992
 441 0060 00480040 		.word	1073760256
 442 0064 FF7FFFFF 		.word	-32769
 443              		.cfi_endproc
 444              	.LFE45:
 446              		.section	.text.USART_SendChar,"ax",%progbits
 447              		.align	1
 448              		.global	USART_SendChar
 449              		.syntax unified
 450              		.code	16
 451              		.thumb_func
 453              	USART_SendChar:
 454              	.LFB46:
 160:Src/main.c    **** 	while(!(USART3->ISR & USART_ISR_TXE))
 455              		.loc 1 160 32 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL26:
 461              	.L14:
 161:Src/main.c    **** 		;
 462              		.loc 1 161 8 discriminator 1 view .LVU95
 161:Src/main.c    **** 		;
 463              		.loc 1 161 16 is_stmt 0 discriminator 1 view .LVU96
 464 0000 034B     		ldr	r3, .L16
 465 0002 DB69     		ldr	r3, [r3, #28]
 161:Src/main.c    **** 		;
 466              		.loc 1 161 8 discriminator 1 view .LVU97
 467 0004 1B06     		lsls	r3, r3, #24
 468 0006 FBD5     		bpl	.L14
 164:Src/main.c    **** }
 469              		.loc 1 164 2 is_stmt 1 view .LVU98
 164:Src/main.c    **** }
ARM GAS  /tmp/ccufSi0X.s 			page 22


 470              		.loc 1 164 14 is_stmt 0 view .LVU99
 471 0008 014B     		ldr	r3, .L16
 472 000a 1885     		strh	r0, [r3, #40]
 165:Src/main.c    **** 
 473              		.loc 1 165 1 view .LVU100
 474              		@ sp needed
 475 000c 7047     		bx	lr
 476              	.L17:
 477 000e C046     		.align	2
 478              	.L16:
 479 0010 00480040 		.word	1073760256
 480              		.cfi_endproc
 481              	.LFE46:
 483              		.section	.text.USART_SendString,"ax",%progbits
 484              		.align	1
 485              		.global	USART_SendString
 486              		.syntax unified
 487              		.code	16
 488              		.thumb_func
 490              	USART_SendString:
 491              	.LVL27:
 492              	.LFB47:
 172:Src/main.c    **** 	while(*p_string != 0) {
 493              		.loc 1 172 42 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 172:Src/main.c    **** 	while(*p_string != 0) {
 497              		.loc 1 172 42 is_stmt 0 view .LVU102
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0400     		movs	r4, r0
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 504              		.loc 1 173 2 is_stmt 1 view .LVU103
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 505              		.loc 1 173 7 is_stmt 0 view .LVU104
 506 0004 02E0     		b	.L19
 507              	.LVL28:
 508              	.L20:
 174:Src/main.c    **** 		p_string++;
 509              		.loc 1 174 3 is_stmt 1 view .LVU105
 510 0006 FFF7FEFF 		bl	USART_SendChar
 511              	.LVL29:
 175:Src/main.c    **** 	}
 512              		.loc 1 175 3 view .LVU106
 175:Src/main.c    **** 	}
 513              		.loc 1 175 11 is_stmt 0 view .LVU107
 514 000a 0134     		adds	r4, r4, #1
 515              	.LVL30:
 516              	.L19:
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 517              		.loc 1 173 18 is_stmt 1 view .LVU108
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 518              		.loc 1 173 8 is_stmt 0 view .LVU109
ARM GAS  /tmp/ccufSi0X.s 			page 23


 519 000c 2078     		ldrb	r0, [r4]
 173:Src/main.c    **** 		USART_SendChar(*p_string);
 520              		.loc 1 173 18 view .LVU110
 521 000e 0028     		cmp	r0, #0
 522 0010 F9D1     		bne	.L20
 177:Src/main.c    **** }
 523              		.loc 1 177 2 is_stmt 1 view .LVU111
 524 0012 FFF7FEFF 		bl	USART_SendChar
 525              	.LVL31:
 178:Src/main.c    **** 
 526              		.loc 1 178 1 is_stmt 0 view .LVU112
 527              		@ sp needed
 528              	.LVL32:
 178:Src/main.c    **** 
 529              		.loc 1 178 1 view .LVU113
 530 0016 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE47:
 534              		.section	.rodata.ClearCommand.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC21:
 537 0000 434D443E 		.ascii	"CMD> \000"
 537      2000
 538              		.section	.text.ClearCommand,"ax",%progbits
 539              		.align	1
 540              		.global	ClearCommand
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	ClearCommand:
 546              	.LFB48:
 183:Src/main.c    **** 	uint8_t prompt[] = "CMD> ";
 547              		.loc 1 183 20 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 14, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              	.LCFI10:
 557              		.cfi_def_cfa_offset 16
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 558              		.loc 1 184 2 view .LVU115
 184:Src/main.c    **** 	memset(command, 0, sizeof(command));
 559              		.loc 1 184 10 is_stmt 0 view .LVU116
 560 0004 094B     		ldr	r3, .L22
 561 0006 1A68     		ldr	r2, [r3]
 562 0008 0092     		str	r2, [sp]
 563 000a 9B88     		ldrh	r3, [r3, #4]
 564 000c 6A46     		mov	r2, sp
 565 000e 9380     		strh	r3, [r2, #4]
 185:Src/main.c    **** 	incomingCommand = 0;
 566              		.loc 1 185 2 is_stmt 1 view .LVU117
 567 0010 0748     		ldr	r0, .L22+4
 568 0012 0322     		movs	r2, #3
ARM GAS  /tmp/ccufSi0X.s 			page 24


 569 0014 0021     		movs	r1, #0
 570 0016 FFF7FEFF 		bl	memset
 571              	.LVL33:
 186:Src/main.c    **** 	USART_SendString(prompt);
 572              		.loc 1 186 2 view .LVU118
 186:Src/main.c    **** 	USART_SendString(prompt);
 573              		.loc 1 186 18 is_stmt 0 view .LVU119
 574 001a 064B     		ldr	r3, .L22+8
 575 001c 0022     		movs	r2, #0
 576 001e 1A70     		strb	r2, [r3]
 187:Src/main.c    **** }
 577              		.loc 1 187 2 is_stmt 1 view .LVU120
 578 0020 6846     		mov	r0, sp
 579 0022 FFF7FEFF 		bl	USART_SendString
 580              	.LVL34:
 188:Src/main.c    **** 
 581              		.loc 1 188 1 is_stmt 0 view .LVU121
 582 0026 03B0     		add	sp, sp, #12
 583              		@ sp needed
 584 0028 00BD     		pop	{pc}
 585              	.L23:
 586 002a C046     		.align	2
 587              	.L22:
 588 002c 00000000 		.word	.LC21
 589 0030 00000000 		.word	command
 590 0034 00000000 		.word	incomingCommand
 591              		.cfi_endproc
 592              	.LFE48:
 594              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 595              		.align	2
 596              	.LC25:
 597 0000 436F6D6D 		.ascii	"Command too long!\012\000"
 597      616E6420 
 597      746F6F20 
 597      6C6F6E67 
 597      210A00
 598              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 599              		.align	1
 600              		.global	USART3_4_IRQHandler
 601              		.syntax unified
 602              		.code	16
 603              		.thumb_func
 605              	USART3_4_IRQHandler:
 606              	.LFB49:
 190:Src/main.c    **** 	uint8_t err[] = "Command too long!\n";
 607              		.loc 1 190 27 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 24
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 30B5     		push	{r4, r5, lr}
 612              	.LCFI11:
 613              		.cfi_def_cfa_offset 12
 614              		.cfi_offset 4, -12
 615              		.cfi_offset 5, -8
 616              		.cfi_offset 14, -4
 617 0002 87B0     		sub	sp, sp, #28
 618              	.LCFI12:
ARM GAS  /tmp/ccufSi0X.s 			page 25


 619              		.cfi_def_cfa_offset 40
 191:Src/main.c    **** 	incomingCommand = 1;
 620              		.loc 1 191 2 view .LVU123
 191:Src/main.c    **** 	incomingCommand = 1;
 621              		.loc 1 191 10 is_stmt 0 view .LVU124
 622 0004 01AA     		add	r2, sp, #4
 623 0006 164B     		ldr	r3, .L31
 624 0008 1800     		movs	r0, r3
 625 000a 38C8     		ldmia	r0!, {r3, r4, r5}
 626 000c 38C2     		stmia	r2!, {r3, r4, r5}
 627 000e 0368     		ldr	r3, [r0]
 628 0010 1360     		str	r3, [r2]
 629 0012 8388     		ldrh	r3, [r0, #4]
 630 0014 9380     		strh	r3, [r2, #4]
 631 0016 8379     		ldrb	r3, [r0, #6]
 632 0018 9371     		strb	r3, [r2, #6]
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 633              		.loc 1 192 2 is_stmt 1 view .LVU125
 192:Src/main.c    **** 	while(!(USART3->ISR & (1<<5)))
 634              		.loc 1 192 18 is_stmt 0 view .LVU126
 635 001a 124B     		ldr	r3, .L31+4
 636 001c 0122     		movs	r2, #1
 637 001e 1A70     		strb	r2, [r3]
 193:Src/main.c    **** 		;
 638              		.loc 1 193 2 is_stmt 1 view .LVU127
 639              	.L25:
 193:Src/main.c    **** 		;
 640              		.loc 1 193 8 discriminator 1 view .LVU128
 193:Src/main.c    **** 		;
 641              		.loc 1 193 16 is_stmt 0 discriminator 1 view .LVU129
 642 0020 114B     		ldr	r3, .L31+8
 643 0022 DB69     		ldr	r3, [r3, #28]
 193:Src/main.c    **** 		;
 644              		.loc 1 193 8 discriminator 1 view .LVU130
 645 0024 9B06     		lsls	r3, r3, #26
 646 0026 FBD5     		bpl	.L25
 195:Src/main.c    **** 		if(command[1]){
 647              		.loc 1 195 2 is_stmt 1 view .LVU131
 195:Src/main.c    **** 		if(command[1]){
 648              		.loc 1 195 12 is_stmt 0 view .LVU132
 649 0028 104B     		ldr	r3, .L31+12
 650 002a 1B78     		ldrb	r3, [r3]
 195:Src/main.c    **** 		if(command[1]){
 651              		.loc 1 195 4 view .LVU133
 652 002c 002B     		cmp	r3, #0
 653 002e 0FD0     		beq	.L26
 196:Src/main.c    **** 			USART_SendString(err);
 654              		.loc 1 196 3 is_stmt 1 view .LVU134
 196:Src/main.c    **** 			USART_SendString(err);
 655              		.loc 1 196 13 is_stmt 0 view .LVU135
 656 0030 0E4B     		ldr	r3, .L31+12
 657 0032 5B78     		ldrb	r3, [r3, #1]
 196:Src/main.c    **** 			USART_SendString(err);
 658              		.loc 1 196 5 view .LVU136
 659 0034 002B     		cmp	r3, #0
 660 0036 05D1     		bne	.L30
 201:Src/main.c    **** 		}
ARM GAS  /tmp/ccufSi0X.s 			page 26


 661              		.loc 1 201 4 is_stmt 1 view .LVU137
 201:Src/main.c    **** 		}
 662              		.loc 1 201 23 is_stmt 0 view .LVU138
 663 0038 0B4B     		ldr	r3, .L31+8
 664 003a 9B8C     		ldrh	r3, [r3, #36]
 201:Src/main.c    **** 		}
 665              		.loc 1 201 15 view .LVU139
 666 003c DBB2     		uxtb	r3, r3
 667 003e 0B4A     		ldr	r2, .L31+12
 668 0040 5370     		strb	r3, [r2, #1]
 669 0042 0AE0     		b	.L24
 670              	.L30:
 197:Src/main.c    **** 			ClearCommand();
 671              		.loc 1 197 4 is_stmt 1 view .LVU140
 672 0044 01A8     		add	r0, sp, #4
 673 0046 FFF7FEFF 		bl	USART_SendString
 674              	.LVL35:
 198:Src/main.c    **** 		}
 675              		.loc 1 198 4 view .LVU141
 676 004a FFF7FEFF 		bl	ClearCommand
 677              	.LVL36:
 678 004e 04E0     		b	.L24
 679              	.L26:
 205:Src/main.c    **** 	}
 680              		.loc 1 205 3 view .LVU142
 205:Src/main.c    **** 	}
 681              		.loc 1 205 22 is_stmt 0 view .LVU143
 682 0050 054B     		ldr	r3, .L31+8
 683 0052 9B8C     		ldrh	r3, [r3, #36]
 205:Src/main.c    **** 	}
 684              		.loc 1 205 14 view .LVU144
 685 0054 DBB2     		uxtb	r3, r3
 686 0056 054A     		ldr	r2, .L31+12
 687 0058 1370     		strb	r3, [r2]
 688              	.L24:
 207:Src/main.c    **** 
 689              		.loc 1 207 1 view .LVU145
 690 005a 07B0     		add	sp, sp, #28
 691              		@ sp needed
 692 005c 30BD     		pop	{r4, r5, pc}
 693              	.L32:
 694 005e C046     		.align	2
 695              	.L31:
 696 0060 00000000 		.word	.LC25
 697 0064 00000000 		.word	incomingCommand
 698 0068 00480040 		.word	1073760256
 699 006c 00000000 		.word	command
 700              		.cfi_endproc
 701              	.LFE49:
 703              		.section	.rodata.Log.str1.4,"aMS",%progbits,1
 704              		.align	2
 705              	.LC29:
 706 0000 4E6F7420 		.ascii	"Not yet implemented\012\000"
 706      79657420 
 706      696D706C 
 706      656D656E 
 706      7465640A 
ARM GAS  /tmp/ccufSi0X.s 			page 27


 707              		.section	.text.Log,"ax",%progbits
 708              		.align	1
 709              		.global	Log
 710              		.syntax unified
 711              		.code	16
 712              		.thumb_func
 714              	Log:
 715              	.LFB50:
 209:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 716              		.loc 1 209 11 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720 0000 10B5     		push	{r4, lr}
 721              	.LCFI13:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 4, -8
 724              		.cfi_offset 14, -4
 210:Src/main.c    **** 	USART_SendString(err);
 725              		.loc 1 210 2 view .LVU147
 726              	.LVL37:
 211:Src/main.c    **** }
 727              		.loc 1 211 2 view .LVU148
 728 0002 0248     		ldr	r0, .L34
 729 0004 FFF7FEFF 		bl	USART_SendString
 730              	.LVL38:
 212:Src/main.c    **** 
 731              		.loc 1 212 1 is_stmt 0 view .LVU149
 732              		@ sp needed
 733 0008 10BD     		pop	{r4, pc}
 734              	.L35:
 735 000a C046     		.align	2
 736              	.L34:
 737 000c 00000000 		.word	.LC29
 738              		.cfi_endproc
 739              	.LFE50:
 741              		.section	.text.Proceed,"ax",%progbits
 742              		.align	1
 743              		.global	Proceed
 744              		.syntax unified
 745              		.code	16
 746              		.thumb_func
 748              	Proceed:
 749              	.LFB51:
 214:Src/main.c    **** 	uint8_t* err = "Not yet implemented\n";
 750              		.loc 1 214 15 is_stmt 1 view -0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754 0000 10B5     		push	{r4, lr}
 755              	.LCFI14:
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 4, -8
 758              		.cfi_offset 14, -4
 215:Src/main.c    **** 	USART_SendString(err);
 759              		.loc 1 215 2 view .LVU151
 760              	.LVL39:
ARM GAS  /tmp/ccufSi0X.s 			page 28


 216:Src/main.c    **** }
 761              		.loc 1 216 2 view .LVU152
 762 0002 0248     		ldr	r0, .L37
 763 0004 FFF7FEFF 		bl	USART_SendString
 764              	.LVL40:
 217:Src/main.c    **** 
 765              		.loc 1 217 1 is_stmt 0 view .LVU153
 766              		@ sp needed
 767 0008 10BD     		pop	{r4, pc}
 768              	.L38:
 769 000a C046     		.align	2
 770              	.L37:
 771 000c 00000000 		.word	.LC29
 772              		.cfi_endproc
 773              	.LFE51:
 775              		.section	.rodata.ProcessCommand.str1.4,"aMS",%progbits,1
 776              		.align	2
 777              	.LC47:
 778 0000 696E6465 		.ascii	"indefinitely\012\000"
 778      66696E69 
 778      74656C79 
 778      0A00
 779 000e 0000     		.align	2
 780              	.LC49:
 781 0010 25640A00 		.ascii	"%d\012\000"
 782              		.align	2
 783              	.LC32:
 784 0014 4552524F 		.ascii	"ERROR: Invalid command!\012\000"
 784      523A2049 
 784      6E76616C 
 784      69642063 
 784      6F6D6D61 
 785 002d 000000   		.align	2
 786              	.LC34:
 787 0030 4D6F7669 		.ascii	"Moving forward \000"
 787      6E672066 
 787      6F727761 
 787      72642000 
 788              		.align	2
 789              	.LC36:
 790 0040 5475726E 		.ascii	"Turning left \000"
 790      696E6720 
 790      6C656674 
 790      2000
 791 004e 0000     		.align	2
 792              	.LC38:
 793 0050 5475726E 		.ascii	"Turning right \000"
 793      696E6720 
 793      72696768 
 793      742000
 794 005f 00       		.align	2
 795              	.LC40:
 796 0060 4C6F6767 		.ascii	"Logging sensor data\012\000"
 796      696E6720 
 796      73656E73 
 796      6F722064 
 796      6174610A 
ARM GAS  /tmp/ccufSi0X.s 			page 29


 797 0075 000000   		.align	2
 798              	.LC42:
 799 0078 456E7465 		.ascii	"Entering autonomous mode...\012\000"
 799      72696E67 
 799      20617574 
 799      6F6E6F6D 
 799      6F757320 
 800 0095 000000   		.align	2
 801              	.LC44:
 802 0098 53746F70 		.ascii	"Stopping all motors!\012\000"
 802      70696E67 
 802      20616C6C 
 802      206D6F74 
 802      6F727321 
 803              		.section	.text.ProcessCommand,"ax",%progbits
 804              		.align	1
 805              		.global	ProcessCommand
 806              		.syntax unified
 807              		.code	16
 808              		.thumb_func
 810              	ProcessCommand:
 811              	.LVL41:
 812              	.LFB52:
 219:Src/main.c    **** 	uint32_t left_motor_pin;
 813              		.loc 1 219 57 is_stmt 1 view -0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 184
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 219:Src/main.c    **** 	uint32_t left_motor_pin;
 817              		.loc 1 219 57 is_stmt 0 view .LVU155
 818 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 819              	.LCFI15:
 820              		.cfi_def_cfa_offset 20
 821              		.cfi_offset 4, -20
 822              		.cfi_offset 5, -16
 823              		.cfi_offset 6, -12
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 AFB0     		sub	sp, sp, #188
 827              	.LCFI16:
 828              		.cfi_def_cfa_offset 208
 829 0004 0400     		movs	r4, r0
 830 0006 0D00     		movs	r5, r1
 220:Src/main.c    **** 	uint32_t right_motor_pin;
 831              		.loc 1 220 2 is_stmt 1 view .LVU156
 221:Src/main.c    **** 	int32_t CH1_DC = 65535;
 832              		.loc 1 221 2 view .LVU157
 222:Src/main.c    **** 
 833              		.loc 1 222 2 view .LVU158
 834              	.LVL42:
 224:Src/main.c    **** 
 835              		.loc 1 224 2 view .LVU159
 224:Src/main.c    **** 
 836              		.loc 1 224 10 is_stmt 0 view .LVU160
 837 0008 27A9     		add	r1, sp, #156
 838              	.LVL43:
 224:Src/main.c    **** 
ARM GAS  /tmp/ccufSi0X.s 			page 30


 839              		.loc 1 224 10 view .LVU161
 840 000a 5C4B     		ldr	r3, .L56
 841 000c 0A00     		movs	r2, r1
 842 000e C1CB     		ldmia	r3!, {r0, r6, r7}
 843 0010 C1C2     		stmia	r2!, {r0, r6, r7}
 844              	.LVL44:
 224:Src/main.c    **** 
 845              		.loc 1 224 10 view .LVU162
 846 0012 43CB     		ldmia	r3!, {r0, r1, r6}
 847 0014 43C2     		stmia	r2!, {r0, r1, r6}
 848 0016 1B78     		ldrb	r3, [r3]
 849 0018 1370     		strb	r3, [r2]
 226:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 850              		.loc 1 226 2 is_stmt 1 view .LVU163
 226:Src/main.c    **** 	uint8_t left[] = "Turning left ";
 851              		.loc 1 226 10 is_stmt 0 view .LVU164
 852 001a 23AA     		add	r2, sp, #140
 853 001c 584B     		ldr	r3, .L56+4
 854 001e C1CB     		ldmia	r3!, {r0, r6, r7}
 855 0020 C1C2     		stmia	r2!, {r0, r6, r7}
 856 0022 1B68     		ldr	r3, [r3]
 857 0024 1360     		str	r3, [r2]
 227:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 858              		.loc 1 227 2 is_stmt 1 view .LVU165
 227:Src/main.c    **** 	uint8_t right[] = "Turning right ";
 859              		.loc 1 227 10 is_stmt 0 view .LVU166
 860 0026 1FAA     		add	r2, sp, #124
 861 0028 564B     		ldr	r3, .L56+8
 862 002a C1CB     		ldmia	r3!, {r0, r6, r7}
 863 002c C1C2     		stmia	r2!, {r0, r6, r7}
 864 002e 1B88     		ldrh	r3, [r3]
 865 0030 1380     		strh	r3, [r2]
 228:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 866              		.loc 1 228 2 is_stmt 1 view .LVU167
 228:Src/main.c    **** 	uint8_t log[] = "Logging sensor data\n";
 867              		.loc 1 228 10 is_stmt 0 view .LVU168
 868 0032 1BAA     		add	r2, sp, #108
 869 0034 544B     		ldr	r3, .L56+12
 870 0036 C1CB     		ldmia	r3!, {r0, r6, r7}
 871 0038 C1C2     		stmia	r2!, {r0, r6, r7}
 872 003a 1100     		movs	r1, r2
 873 003c 1A88     		ldrh	r2, [r3]
 874 003e 0A80     		strh	r2, [r1]
 875 0040 9B78     		ldrb	r3, [r3, #2]
 876 0042 8B70     		strb	r3, [r1, #2]
 229:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 877              		.loc 1 229 2 is_stmt 1 view .LVU169
 229:Src/main.c    **** 	uint8_t proceed[] = "Entering autonomous mode...\n";
 878              		.loc 1 229 10 is_stmt 0 view .LVU170
 879 0044 15A9     		add	r1, sp, #84
 880 0046 514B     		ldr	r3, .L56+16
 881 0048 0A00     		movs	r2, r1
 882 004a C1CB     		ldmia	r3!, {r0, r6, r7}
 883 004c C1C2     		stmia	r2!, {r0, r6, r7}
 884 004e 03CB     		ldmia	r3!, {r0, r1}
 885 0050 03C2     		stmia	r2!, {r0, r1}
 886 0052 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/ccufSi0X.s 			page 31


 887 0054 1370     		strb	r3, [r2]
 230:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 888              		.loc 1 230 2 is_stmt 1 view .LVU171
 230:Src/main.c    **** 	uint8_t stop[] = "Stopping all motors!\n";
 889              		.loc 1 230 10 is_stmt 0 view .LVU172
 890 0056 0DA9     		add	r1, sp, #52
 891 0058 4D4B     		ldr	r3, .L56+20
 892 005a 0A00     		movs	r2, r1
 893 005c C1CB     		ldmia	r3!, {r0, r6, r7}
 894 005e C1C2     		stmia	r2!, {r0, r6, r7}
 895 0060 43CB     		ldmia	r3!, {r0, r1, r6}
 896 0062 43C2     		stmia	r2!, {r0, r1, r6}
 897 0064 1968     		ldr	r1, [r3]
 898 0066 1160     		str	r1, [r2]
 899 0068 1B79     		ldrb	r3, [r3, #4]
 900 006a 1371     		strb	r3, [r2, #4]
 231:Src/main.c    **** 
 901              		.loc 1 231 2 is_stmt 1 view .LVU173
 231:Src/main.c    **** 
 902              		.loc 1 231 10 is_stmt 0 view .LVU174
 903 006c 07A9     		add	r1, sp, #28
 904 006e 494B     		ldr	r3, .L56+24
 905 0070 0A00     		movs	r2, r1
 906 0072 C1CB     		ldmia	r3!, {r0, r6, r7}
 907 0074 C1C2     		stmia	r2!, {r0, r6, r7}
 908 0076 03CB     		ldmia	r3!, {r0, r1}
 909 0078 03C2     		stmia	r2!, {r0, r1}
 910 007a 1B88     		ldrh	r3, [r3]
 911 007c 1380     		strh	r3, [r2]
 233:Src/main.c    **** 
 912              		.loc 1 233 2 is_stmt 1 view .LVU175
 233:Src/main.c    **** 
 913              		.loc 1 233 15 is_stmt 0 view .LVU176
 914 007e 06AB     		add	r3, sp, #24
 915 0080 0022     		movs	r2, #0
 916 0082 1A80     		strh	r2, [r3]
 235:Src/main.c    **** 	uint8_t part2[15];
 917              		.loc 1 235 2 is_stmt 1 view .LVU177
 236:Src/main.c    **** 	uint8_t zero = 0;
 918              		.loc 1 236 2 view .LVU178
 237:Src/main.c    **** 	memcpy(part2, &zero, 15);
 919              		.loc 1 237 2 view .LVU179
 237:Src/main.c    **** 	memcpy(part2, &zero, 15);
 920              		.loc 1 237 10 is_stmt 0 view .LVU180
 921 0084 6B46     		mov	r3, sp
 922 0086 D91D     		adds	r1, r3, #7
 923 0088 0023     		movs	r3, #0
 924 008a 0B70     		strb	r3, [r1]
 238:Src/main.c    **** 
 925              		.loc 1 238 2 is_stmt 1 view .LVU181
 926 008c 0F32     		adds	r2, r2, #15
 927 008e 02A8     		add	r0, sp, #8
 928 0090 FFF7FEFF 		bl	memcpy
 929              	.LVL45:
 240:Src/main.c    **** 		case 'w':
 930              		.loc 1 240 2 view .LVU182
 931 0094 2300     		movs	r3, r4
ARM GAS  /tmp/ccufSi0X.s 			page 32


 932 0096 613B     		subs	r3, r3, #97
 933 0098 DAB2     		uxtb	r2, r3
 934 009a 172A     		cmp	r2, #23
 935 009c 53D8     		bhi	.L40
 936 009e 9300     		lsls	r3, r2, #2
 937 00a0 3D4A     		ldr	r2, .L56+28
 938 00a2 D358     		ldr	r3, [r2, r3]
 939 00a4 9F46     		mov	pc, r3
 940              		.section	.rodata.ProcessCommand,"a",%progbits
 941              		.align	2
 942              	.L42:
 943 0000 A6000000 		.word	.L47
 944 0004 46010000 		.word	.L40
 945 0008 46010000 		.word	.L40
 946 000c 04010000 		.word	.L46
 947 0010 46010000 		.word	.L40
 948 0014 46010000 		.word	.L40
 949 0018 46010000 		.word	.L40
 950 001c 46010000 		.word	.L40
 951 0020 46010000 		.word	.L40
 952 0024 46010000 		.word	.L40
 953 0028 46010000 		.word	.L40
 954 002c 0E010000 		.word	.L45
 955 0030 46010000 		.word	.L40
 956 0034 46010000 		.word	.L40
 957 0038 46010000 		.word	.L40
 958 003c 1E010000 		.word	.L44
 959 0040 46010000 		.word	.L40
 960 0044 46010000 		.word	.L40
 961 0048 46010000 		.word	.L40
 962 004c 46010000 		.word	.L40
 963 0050 46010000 		.word	.L40
 964 0054 46010000 		.word	.L40
 965 0058 52010000 		.word	.L53
 966 005c 2E010000 		.word	.L41
 967              		.section	.text.ProcessCommand
 968              	.L47:
 246:Src/main.c    **** 			motorcmd.dir = LEFT;
 969              		.loc 1 246 4 view .LVU183
 970              	.LVL46:
 247:Src/main.c    **** 			break;
 971              		.loc 1 247 4 view .LVU184
 247:Src/main.c    **** 			break;
 972              		.loc 1 247 17 is_stmt 0 view .LVU185
 973 00a6 06AB     		add	r3, sp, #24
 974 00a8 0122     		movs	r2, #1
 975 00aa 1A70     		strb	r2, [r3]
 248:Src/main.c    **** 		case 'd':
 976              		.loc 1 248 4 is_stmt 1 view .LVU186
 246:Src/main.c    **** 			motorcmd.dir = LEFT;
 977              		.loc 1 246 10 is_stmt 0 view .LVU187
 978 00ac 1FAE     		add	r6, sp, #124
 979              	.LVL47:
 980              	.L43:
 280:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 981              		.loc 1 280 2 is_stmt 1 view .LVU188
 280:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
ARM GAS  /tmp/ccufSi0X.s 			page 33


 982              		.loc 1 280 4 is_stmt 0 view .LVU189
 983 00ae 302D     		cmp	r5, #48
 984 00b0 51D0     		beq	.L54
 985              	.L49:
 284:Src/main.c    **** 		USART_SendString(err);
 986              		.loc 1 284 7 is_stmt 1 view .LVU190
 284:Src/main.c    **** 		USART_SendString(err);
 987              		.loc 1 284 25 is_stmt 0 view .LVU191
 988 00b2 2B00     		movs	r3, r5
 989 00b4 313B     		subs	r3, r3, #49
 990 00b6 DBB2     		uxtb	r3, r3
 284:Src/main.c    **** 		USART_SendString(err);
 991              		.loc 1 284 9 view .LVU192
 992 00b8 082B     		cmp	r3, #8
 993 00ba 58D8     		bhi	.L55
 994              	.LBB16:
 290:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 995              		.loc 1 290 3 is_stmt 1 view .LVU193
 290:Src/main.c    **** 		sprintf(part2, "%d\n", dist);
 996              		.loc 1 290 11 is_stmt 0 view .LVU194
 997 00bc 1424     		movs	r4, #20
 998 00be 6C43     		muls	r4, r5
 999 00c0 4034     		adds	r4, r4, #64
 1000 00c2 E4B2     		uxtb	r4, r4
 1001              	.LVL48:
 291:Src/main.c    **** 		motorcmd.amount = dist;
 1002              		.loc 1 291 3 is_stmt 1 view .LVU195
 1003 00c4 3549     		ldr	r1, .L56+32
 1004 00c6 2200     		movs	r2, r4
 1005 00c8 02A8     		add	r0, sp, #8
 1006 00ca FFF7FEFF 		bl	sprintf
 1007              	.LVL49:
 292:Src/main.c    **** 	}
 1008              		.loc 1 292 3 view .LVU196
 292:Src/main.c    **** 	}
 1009              		.loc 1 292 19 is_stmt 0 view .LVU197
 1010 00ce 06AB     		add	r3, sp, #24
 1011 00d0 5C70     		strb	r4, [r3, #1]
 1012              	.LVL50:
 1013              	.L50:
 292:Src/main.c    **** 	}
 1014              		.loc 1 292 19 view .LVU198
 1015              	.LBE16:
 296:Src/main.c    **** 	USART_SendString(part2);
 1016              		.loc 1 296 2 is_stmt 1 view .LVU199
 1017 00d2 3000     		movs	r0, r6
 1018 00d4 FFF7FEFF 		bl	USART_SendString
 1019              	.LVL51:
 297:Src/main.c    **** 
 1020              		.loc 1 297 2 view .LVU200
 1021 00d8 02A8     		add	r0, sp, #8
 1022 00da FFF7FEFF 		bl	USART_SendString
 1023              	.LVL52:
 299:Src/main.c    **** 	HAL_Delay(1000);
 1024              		.loc 1 299 2 view .LVU201
 299:Src/main.c    **** 	HAL_Delay(1000);
 1025              		.loc 1 299 13 is_stmt 0 view .LVU202
ARM GAS  /tmp/ccufSi0X.s 			page 34


 1026 00de 8024     		movs	r4, #128
 1027 00e0 E405     		lsls	r4, r4, #23
 1028 00e2 2F4B     		ldr	r3, .L56+36
 1029 00e4 6363     		str	r3, [r4, #52]
 300:Src/main.c    **** 	TIM2->CCR1 = 0;
 1030              		.loc 1 300 2 is_stmt 1 view .LVU203
 1031 00e6 FA20     		movs	r0, #250
 1032 00e8 8000     		lsls	r0, r0, #2
 1033 00ea FFF7FEFF 		bl	HAL_Delay
 1034              	.LVL53:
 301:Src/main.c    **** 
 1035              		.loc 1 301 2 view .LVU204
 301:Src/main.c    **** 
 1036              		.loc 1 301 13 is_stmt 0 view .LVU205
 1037 00ee 0023     		movs	r3, #0
 1038 00f0 6363     		str	r3, [r4, #52]
 303:Src/main.c    **** 	USART_SendString(result);
 1039              		.loc 1 303 2 is_stmt 1 view .LVU206
 303:Src/main.c    **** 	USART_SendString(result);
 1040              		.loc 1 303 20 is_stmt 0 view .LVU207
 1041 00f2 06A8     		add	r0, sp, #24
 1042 00f4 FFF7FEFF 		bl	MoveMotors
 1043              	.LVL54:
 304:Src/main.c    **** 
 1044              		.loc 1 304 2 is_stmt 1 view .LVU208
 1045 00f8 FFF7FEFF 		bl	USART_SendString
 1046              	.LVL55:
 306:Src/main.c    **** 
 1047              		.loc 1 306 2 view .LVU209
 1048 00fc FFF7FEFF 		bl	ClearCommand
 1049              	.LVL56:
 1050              	.L39:
 325:Src/main.c    **** 
 1051              		.loc 1 325 1 is_stmt 0 view .LVU210
 1052 0100 2FB0     		add	sp, sp, #188
 1053              		@ sp needed
 1054 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 1055              	.L46:
 250:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1056              		.loc 1 250 4 is_stmt 1 view .LVU211
 1057              	.LVL57:
 251:Src/main.c    **** 			break;
 1058              		.loc 1 251 4 view .LVU212
 251:Src/main.c    **** 			break;
 1059              		.loc 1 251 17 is_stmt 0 view .LVU213
 1060 0104 06AB     		add	r3, sp, #24
 1061 0106 0222     		movs	r2, #2
 1062 0108 1A70     		strb	r2, [r3]
 252:Src/main.c    **** 		case 'l':
 1063              		.loc 1 252 4 is_stmt 1 view .LVU214
 250:Src/main.c    **** 			motorcmd.dir = RIGHT;
 1064              		.loc 1 250 10 is_stmt 0 view .LVU215
 1065 010a 1BAE     		add	r6, sp, #108
 1066              	.LVL58:
 252:Src/main.c    **** 		case 'l':
 1067              		.loc 1 252 4 view .LVU216
 1068 010c CFE7     		b	.L43
ARM GAS  /tmp/ccufSi0X.s 			page 35


 1069              	.LVL59:
 1070              	.L45:
 254:Src/main.c    **** 			USART_SendString(part1);
 1071              		.loc 1 254 4 is_stmt 1 view .LVU217
 255:Src/main.c    **** 			Log();
 1072              		.loc 1 255 4 view .LVU218
 1073 010e 15A8     		add	r0, sp, #84
 1074              	.LVL60:
 255:Src/main.c    **** 			Log();
 1075              		.loc 1 255 4 is_stmt 0 view .LVU219
 1076 0110 FFF7FEFF 		bl	USART_SendString
 1077              	.LVL61:
 256:Src/main.c    **** 			ClearCommand();
 1078              		.loc 1 256 4 is_stmt 1 view .LVU220
 1079 0114 FFF7FEFF 		bl	Log
 1080              	.LVL62:
 257:Src/main.c    **** 			return;
 1081              		.loc 1 257 4 view .LVU221
 1082 0118 FFF7FEFF 		bl	ClearCommand
 1083              	.LVL63:
 258:Src/main.c    **** 		case 'p':
 1084              		.loc 1 258 4 view .LVU222
 1085 011c F0E7     		b	.L39
 1086              	.LVL64:
 1087              	.L44:
 260:Src/main.c    **** 			USART_SendString(part1);
 1088              		.loc 1 260 4 view .LVU223
 261:Src/main.c    **** 			Proceed();
 1089              		.loc 1 261 4 view .LVU224
 1090 011e 0DA8     		add	r0, sp, #52
 1091              	.LVL65:
 261:Src/main.c    **** 			Proceed();
 1092              		.loc 1 261 4 is_stmt 0 view .LVU225
 1093 0120 FFF7FEFF 		bl	USART_SendString
 1094              	.LVL66:
 262:Src/main.c    **** 			ClearCommand();
 1095              		.loc 1 262 4 is_stmt 1 view .LVU226
 1096 0124 FFF7FEFF 		bl	Proceed
 1097              	.LVL67:
 263:Src/main.c    **** 			return;
 1098              		.loc 1 263 4 view .LVU227
 1099 0128 FFF7FEFF 		bl	ClearCommand
 1100              	.LVL68:
 264:Src/main.c    **** 		case 'x':
 1101              		.loc 1 264 4 view .LVU228
 1102 012c E8E7     		b	.L39
 1103              	.LVL69:
 1104              	.L41:
 266:Src/main.c    **** 			USART_SendString(part1);
 1105              		.loc 1 266 4 view .LVU229
 267:Src/main.c    **** 			motorcmd.dir = OFF;
 1106              		.loc 1 267 4 view .LVU230
 1107 012e 07A8     		add	r0, sp, #28
 1108              	.LVL70:
 267:Src/main.c    **** 			motorcmd.dir = OFF;
 1109              		.loc 1 267 4 is_stmt 0 view .LVU231
 1110 0130 FFF7FEFF 		bl	USART_SendString
ARM GAS  /tmp/ccufSi0X.s 			page 36


 1111              	.LVL71:
 268:Src/main.c    **** 			ClearCommand();
 1112              		.loc 1 268 4 is_stmt 1 view .LVU232
 268:Src/main.c    **** 			ClearCommand();
 1113              		.loc 1 268 17 is_stmt 0 view .LVU233
 1114 0134 06AC     		add	r4, sp, #24
 1115 0136 0423     		movs	r3, #4
 1116 0138 2370     		strb	r3, [r4]
 269:Src/main.c    **** 			MoveMotors(&motorcmd);
 1117              		.loc 1 269 4 is_stmt 1 view .LVU234
 1118 013a FFF7FEFF 		bl	ClearCommand
 1119              	.LVL72:
 270:Src/main.c    **** 			return;
 1120              		.loc 1 270 4 view .LVU235
 1121 013e 2000     		movs	r0, r4
 1122 0140 FFF7FEFF 		bl	MoveMotors
 1123              	.LVL73:
 271:Src/main.c    **** 		default:
 1124              		.loc 1 271 4 view .LVU236
 1125 0144 DCE7     		b	.L39
 1126              	.LVL74:
 1127              	.L40:
 273:Src/main.c    **** 			ClearCommand();
 1128              		.loc 1 273 4 view .LVU237
 1129 0146 27A8     		add	r0, sp, #156
 1130 0148 FFF7FEFF 		bl	USART_SendString
 1131              	.LVL75:
 274:Src/main.c    **** 			return;
 1132              		.loc 1 274 4 view .LVU238
 1133 014c FFF7FEFF 		bl	ClearCommand
 1134              	.LVL76:
 275:Src/main.c    **** 	}
 1135              		.loc 1 275 4 view .LVU239
 1136 0150 D6E7     		b	.L39
 1137              	.L53:
 240:Src/main.c    **** 		case 'w':
 1138              		.loc 1 240 2 is_stmt 0 view .LVU240
 1139 0152 23AE     		add	r6, sp, #140
 1140 0154 ABE7     		b	.L43
 1141              	.LVL77:
 1142              	.L54:
 280:Src/main.c    **** 		sprintf(part2, "indefinitely\n");
 1143              		.loc 1 280 21 discriminator 1 view .LVU241
 1144 0156 772C     		cmp	r4, #119
 1145 0158 ABD1     		bne	.L49
 281:Src/main.c    **** 		motorcmd.amount = 0;
 1146              		.loc 1 281 3 is_stmt 1 view .LVU242
 1147 015a 02AA     		add	r2, sp, #8
 1148 015c 114B     		ldr	r3, .L56+40
 1149 015e 31CB     		ldmia	r3!, {r0, r4, r5}
 1150 0160 31C2     		stmia	r2!, {r0, r4, r5}
 1151 0162 1B88     		ldrh	r3, [r3]
 1152 0164 1380     		strh	r3, [r2]
 282:Src/main.c    **** 	}
 1153              		.loc 1 282 3 view .LVU243
 282:Src/main.c    **** 	}
 1154              		.loc 1 282 19 is_stmt 0 view .LVU244
ARM GAS  /tmp/ccufSi0X.s 			page 37


 1155 0166 06AB     		add	r3, sp, #24
 1156 0168 0022     		movs	r2, #0
 1157 016a 5A70     		strb	r2, [r3, #1]
 1158 016c B1E7     		b	.L50
 1159              	.L55:
 285:Src/main.c    **** 		ClearCommand();
 1160              		.loc 1 285 3 is_stmt 1 view .LVU245
 1161 016e 27A8     		add	r0, sp, #156
 1162 0170 FFF7FEFF 		bl	USART_SendString
 1163              	.LVL78:
 286:Src/main.c    **** 		return;
 1164              		.loc 1 286 3 view .LVU246
 1165 0174 FFF7FEFF 		bl	ClearCommand
 1166              	.LVL79:
 287:Src/main.c    **** 	}
 1167              		.loc 1 287 3 view .LVU247
 1168 0178 C2E7     		b	.L39
 1169              	.L57:
 1170 017a C046     		.align	2
 1171              	.L56:
 1172 017c 14000000 		.word	.LC32
 1173 0180 30000000 		.word	.LC34
 1174 0184 40000000 		.word	.LC36
 1175 0188 50000000 		.word	.LC38
 1176 018c 60000000 		.word	.LC40
 1177 0190 78000000 		.word	.LC42
 1178 0194 98000000 		.word	.LC44
 1179 0198 00000000 		.word	.L42
 1180 019c 10000000 		.word	.LC49
 1181 01a0 FFFF0000 		.word	65535
 1182 01a4 00000000 		.word	.LC47
 1183              		.cfi_endproc
 1184              	.LFE52:
 1186              		.global	__aeabi_f2d
 1187              		.section	.rodata.GetDistance.str1.4,"aMS",%progbits,1
 1188              		.align	2
 1189              	.LC51:
 1190 0000 25660A00 		.ascii	"%f\012\000"
 1191              		.section	.text.GetDistance,"ax",%progbits
 1192              		.align	1
 1193              		.global	GetDistance
 1194              		.syntax unified
 1195              		.code	16
 1196              		.thumb_func
 1198              	GetDistance:
 1199              	.LFB53:
 365:Src/main.c    **** 	char dist[32] = "";
 1200              		.loc 1 365 1 view -0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 32
 1203              		@ frame_needed = 0, uses_anonymous_args = 0
 1204 0000 00B5     		push	{lr}
 1205              	.LCFI17:
 1206              		.cfi_def_cfa_offset 4
 1207              		.cfi_offset 14, -4
 1208 0002 89B0     		sub	sp, sp, #36
 1209              	.LCFI18:
ARM GAS  /tmp/ccufSi0X.s 			page 38


 1210              		.cfi_def_cfa_offset 40
 366:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 1211              		.loc 1 366 2 view .LVU249
 366:Src/main.c    **** 	sprintf(dist, "%f\n", get_distance());
 1212              		.loc 1 366 7 is_stmt 0 view .LVU250
 1213 0004 0023     		movs	r3, #0
 1214 0006 0093     		str	r3, [sp]
 1215 0008 1C22     		movs	r2, #28
 1216 000a 0021     		movs	r1, #0
 1217 000c 01A8     		add	r0, sp, #4
 1218 000e FFF7FEFF 		bl	memset
 1219              	.LVL80:
 367:Src/main.c    **** 	USART_SendString(dist);
 1220              		.loc 1 367 2 is_stmt 1 view .LVU251
 367:Src/main.c    **** 	USART_SendString(dist);
 1221              		.loc 1 367 24 is_stmt 0 view .LVU252
 1222 0012 FFF7FEFF 		bl	get_distance
 1223              	.LVL81:
 367:Src/main.c    **** 	USART_SendString(dist);
 1224              		.loc 1 367 2 view .LVU253
 1225 0016 FFF7FEFF 		bl	__aeabi_f2d
 1226              	.LVL82:
 1227 001a 0200     		movs	r2, r0
 1228 001c 0B00     		movs	r3, r1
 1229 001e 0449     		ldr	r1, .L59
 1230 0020 6846     		mov	r0, sp
 1231 0022 FFF7FEFF 		bl	sprintf
 1232              	.LVL83:
 368:Src/main.c    **** }
 1233              		.loc 1 368 2 is_stmt 1 view .LVU254
 1234 0026 6846     		mov	r0, sp
 1235 0028 FFF7FEFF 		bl	USART_SendString
 1236              	.LVL84:
 369:Src/main.c    **** 
 1237              		.loc 1 369 1 is_stmt 0 view .LVU255
 1238 002c 09B0     		add	sp, sp, #36
 1239              		@ sp needed
 1240 002e 00BD     		pop	{pc}
 1241              	.L60:
 1242              		.align	2
 1243              	.L59:
 1244 0030 00000000 		.word	.LC51
 1245              		.cfi_endproc
 1246              	.LFE53:
 1248              		.section	.text.Error_Handler,"ax",%progbits
 1249              		.align	1
 1250              		.global	Error_Handler
 1251              		.syntax unified
 1252              		.code	16
 1253              		.thumb_func
 1255              	Error_Handler:
 1256              	.LFB58:
 658:Src/main.c    **** 
 659:Src/main.c    **** /* USER CODE BEGIN 4 */
 660:Src/main.c    **** 
 661:Src/main.c    **** /* USER CODE END 4 */
 662:Src/main.c    **** 
ARM GAS  /tmp/ccufSi0X.s 			page 39


 663:Src/main.c    **** /**
 664:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 665:Src/main.c    ****  * @retval None
 666:Src/main.c    ****  */
 667:Src/main.c    **** void Error_Handler(void)
 668:Src/main.c    **** {
 1257              		.loc 1 668 1 is_stmt 1 view -0
 1258              		.cfi_startproc
 1259              		@ Volatile: function does not return.
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
 669:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 670:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state */
 671:Src/main.c    **** 	__disable_irq();
 1263              		.loc 1 671 2 view .LVU257
 1264              	.LBB17:
 1265              	.LBI17:
 1266              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccufSi0X.s 			page 40


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccufSi0X.s 			page 41


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1267              		.loc 2 140 27 view .LVU258
 1268              	.LBB18:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1269              		.loc 2 142 3 view .LVU259
 1270              		.syntax divided
 1271              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1272 0000 72B6     		cpsid i
 1273              	@ 0 "" 2
 1274              		.thumb
 1275              		.syntax unified
 1276              	.L62:
ARM GAS  /tmp/ccufSi0X.s 			page 42


 1277              	.LBE18:
 1278              	.LBE17:
 672:Src/main.c    **** 	while (1)
 1279              		.loc 1 672 2 discriminator 1 view .LVU260
 673:Src/main.c    **** 	{
 674:Src/main.c    **** 	}
 1280              		.loc 1 674 2 discriminator 1 view .LVU261
 672:Src/main.c    **** 	while (1)
 1281              		.loc 1 672 8 discriminator 1 view .LVU262
 1282 0002 FEE7     		b	.L62
 1283              		.cfi_endproc
 1284              	.LFE58:
 1286              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1287              		.align	1
 1288              		.syntax unified
 1289              		.code	16
 1290              		.thumb_func
 1292              	MX_TIM1_Init:
 1293              	.LFB56:
 557:Src/main.c    **** 
 1294              		.loc 1 557 1 view -0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 88
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298 0000 00B5     		push	{lr}
 1299              	.LCFI19:
 1300              		.cfi_def_cfa_offset 4
 1301              		.cfi_offset 14, -4
 1302 0002 97B0     		sub	sp, sp, #92
 1303              	.LCFI20:
 1304              		.cfi_def_cfa_offset 96
 563:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1305              		.loc 1 563 2 view .LVU264
 563:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1306              		.loc 1 563 25 is_stmt 0 view .LVU265
 1307 0004 1022     		movs	r2, #16
 1308 0006 0021     		movs	r1, #0
 1309 0008 12A8     		add	r0, sp, #72
 1310 000a FFF7FEFF 		bl	memset
 1311              	.LVL85:
 564:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1312              		.loc 1 564 2 is_stmt 1 view .LVU266
 564:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC = {0};
 1313              		.loc 1 564 26 is_stmt 0 view .LVU267
 1314 000e 0822     		movs	r2, #8
 1315 0010 0021     		movs	r1, #0
 1316 0012 10A8     		add	r0, sp, #64
 1317 0014 FFF7FEFF 		bl	memset
 1318              	.LVL86:
 565:Src/main.c    **** 	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1319              		.loc 1 565 2 is_stmt 1 view .LVU268
 565:Src/main.c    **** 	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1320              		.loc 1 565 21 is_stmt 0 view .LVU269
 1321 0018 1C22     		movs	r2, #28
 1322 001a 0021     		movs	r1, #0
 1323 001c 09A8     		add	r0, sp, #36
 1324 001e FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccufSi0X.s 			page 43


 1325              	.LVL87:
 566:Src/main.c    **** 
 1326              		.loc 1 566 2 is_stmt 1 view .LVU270
 566:Src/main.c    **** 
 1327              		.loc 1 566 33 is_stmt 0 view .LVU271
 1328 0022 2022     		movs	r2, #32
 1329 0024 0021     		movs	r1, #0
 1330 0026 01A8     		add	r0, sp, #4
 1331 0028 FFF7FEFF 		bl	memset
 1332              	.LVL88:
 571:Src/main.c    **** 	htim1.Init.Prescaler = 0;
 1333              		.loc 1 571 2 is_stmt 1 view .LVU272
 571:Src/main.c    **** 	htim1.Init.Prescaler = 0;
 1334              		.loc 1 571 17 is_stmt 0 view .LVU273
 1335 002c 3048     		ldr	r0, .L78
 1336 002e 314B     		ldr	r3, .L78+4
 1337 0030 0360     		str	r3, [r0]
 572:Src/main.c    **** 	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1338              		.loc 1 572 2 is_stmt 1 view .LVU274
 572:Src/main.c    **** 	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1339              		.loc 1 572 23 is_stmt 0 view .LVU275
 1340 0032 0023     		movs	r3, #0
 1341 0034 4360     		str	r3, [r0, #4]
 573:Src/main.c    **** 	htim1.Init.Period = 65535;
 1342              		.loc 1 573 2 is_stmt 1 view .LVU276
 573:Src/main.c    **** 	htim1.Init.Period = 65535;
 1343              		.loc 1 573 25 is_stmt 0 view .LVU277
 1344 0036 8360     		str	r3, [r0, #8]
 574:Src/main.c    **** 	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1345              		.loc 1 574 2 is_stmt 1 view .LVU278
 574:Src/main.c    **** 	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1346              		.loc 1 574 20 is_stmt 0 view .LVU279
 1347 0038 2F4A     		ldr	r2, .L78+8
 1348 003a C260     		str	r2, [r0, #12]
 575:Src/main.c    **** 	htim1.Init.RepetitionCounter = 0;
 1349              		.loc 1 575 2 is_stmt 1 view .LVU280
 575:Src/main.c    **** 	htim1.Init.RepetitionCounter = 0;
 1350              		.loc 1 575 27 is_stmt 0 view .LVU281
 1351 003c 0361     		str	r3, [r0, #16]
 576:Src/main.c    **** 	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1352              		.loc 1 576 2 is_stmt 1 view .LVU282
 576:Src/main.c    **** 	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1353              		.loc 1 576 31 is_stmt 0 view .LVU283
 1354 003e 4361     		str	r3, [r0, #20]
 577:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1355              		.loc 1 577 2 is_stmt 1 view .LVU284
 577:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1356              		.loc 1 577 31 is_stmt 0 view .LVU285
 1357 0040 8033     		adds	r3, r3, #128
 1358 0042 8361     		str	r3, [r0, #24]
 578:Src/main.c    **** 	{
 1359              		.loc 1 578 2 is_stmt 1 view .LVU286
 578:Src/main.c    **** 	{
 1360              		.loc 1 578 6 is_stmt 0 view .LVU287
 1361 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1362              	.LVL89:
 578:Src/main.c    **** 	{
ARM GAS  /tmp/ccufSi0X.s 			page 44


 1363              		.loc 1 578 5 view .LVU288
 1364 0048 0028     		cmp	r0, #0
 1365 004a 42D1     		bne	.L71
 582:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1366              		.loc 1 582 2 is_stmt 1 view .LVU289
 582:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1367              		.loc 1 582 33 is_stmt 0 view .LVU290
 1368 004c 8023     		movs	r3, #128
 1369 004e 5B01     		lsls	r3, r3, #5
 1370 0050 1293     		str	r3, [sp, #72]
 583:Src/main.c    **** 	{
 1371              		.loc 1 583 2 is_stmt 1 view .LVU291
 583:Src/main.c    **** 	{
 1372              		.loc 1 583 6 is_stmt 0 view .LVU292
 1373 0052 2748     		ldr	r0, .L78
 1374 0054 12A9     		add	r1, sp, #72
 1375 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1376              	.LVL90:
 583:Src/main.c    **** 	{
 1377              		.loc 1 583 5 view .LVU293
 1378 005a 0028     		cmp	r0, #0
 1379 005c 3BD1     		bne	.L72
 587:Src/main.c    **** 	{
 1380              		.loc 1 587 2 is_stmt 1 view .LVU294
 587:Src/main.c    **** 	{
 1381              		.loc 1 587 6 is_stmt 0 view .LVU295
 1382 005e 2448     		ldr	r0, .L78
 1383 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1384              	.LVL91:
 587:Src/main.c    **** 	{
 1385              		.loc 1 587 5 view .LVU296
 1386 0064 0028     		cmp	r0, #0
 1387 0066 38D1     		bne	.L73
 591:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1388              		.loc 1 591 2 is_stmt 1 view .LVU297
 591:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1389              		.loc 1 591 36 is_stmt 0 view .LVU298
 1390 0068 0023     		movs	r3, #0
 1391 006a 1093     		str	r3, [sp, #64]
 592:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1392              		.loc 1 592 2 is_stmt 1 view .LVU299
 592:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1393              		.loc 1 592 32 is_stmt 0 view .LVU300
 1394 006c 1193     		str	r3, [sp, #68]
 593:Src/main.c    **** 	{
 1395              		.loc 1 593 2 is_stmt 1 view .LVU301
 593:Src/main.c    **** 	{
 1396              		.loc 1 593 6 is_stmt 0 view .LVU302
 1397 006e 2048     		ldr	r0, .L78
 1398 0070 10A9     		add	r1, sp, #64
 1399 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1400              	.LVL92:
 593:Src/main.c    **** 	{
 1401              		.loc 1 593 5 view .LVU303
 1402 0076 0028     		cmp	r0, #0
 1403 0078 31D1     		bne	.L74
 597:Src/main.c    **** 	sConfigOC.Pulse = 0;
ARM GAS  /tmp/ccufSi0X.s 			page 45


 1404              		.loc 1 597 2 is_stmt 1 view .LVU304
 597:Src/main.c    **** 	sConfigOC.Pulse = 0;
 1405              		.loc 1 597 19 is_stmt 0 view .LVU305
 1406 007a 6023     		movs	r3, #96
 1407 007c 0993     		str	r3, [sp, #36]
 598:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1408              		.loc 1 598 2 is_stmt 1 view .LVU306
 598:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1409              		.loc 1 598 18 is_stmt 0 view .LVU307
 1410 007e 0023     		movs	r3, #0
 1411 0080 0A93     		str	r3, [sp, #40]
 599:Src/main.c    **** 	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1412              		.loc 1 599 2 is_stmt 1 view .LVU308
 599:Src/main.c    **** 	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1413              		.loc 1 599 23 is_stmt 0 view .LVU309
 1414 0082 0B93     		str	r3, [sp, #44]
 600:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1415              		.loc 1 600 2 is_stmt 1 view .LVU310
 600:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1416              		.loc 1 600 24 is_stmt 0 view .LVU311
 1417 0084 0C93     		str	r3, [sp, #48]
 601:Src/main.c    **** 	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1418              		.loc 1 601 2 is_stmt 1 view .LVU312
 601:Src/main.c    **** 	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1419              		.loc 1 601 23 is_stmt 0 view .LVU313
 1420 0086 0D93     		str	r3, [sp, #52]
 602:Src/main.c    **** 	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1421              		.loc 1 602 2 is_stmt 1 view .LVU314
 602:Src/main.c    **** 	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1422              		.loc 1 602 24 is_stmt 0 view .LVU315
 1423 0088 0E93     		str	r3, [sp, #56]
 603:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1424              		.loc 1 603 2 is_stmt 1 view .LVU316
 603:Src/main.c    **** 	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1425              		.loc 1 603 25 is_stmt 0 view .LVU317
 1426 008a 0F93     		str	r3, [sp, #60]
 604:Src/main.c    **** 	{
 1427              		.loc 1 604 2 is_stmt 1 view .LVU318
 604:Src/main.c    **** 	{
 1428              		.loc 1 604 6 is_stmt 0 view .LVU319
 1429 008c 1848     		ldr	r0, .L78
 1430 008e 0022     		movs	r2, #0
 1431 0090 09A9     		add	r1, sp, #36
 1432 0092 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1433              	.LVL93:
 604:Src/main.c    **** 	{
 1434              		.loc 1 604 5 view .LVU320
 1435 0096 0028     		cmp	r0, #0
 1436 0098 23D1     		bne	.L75
 608:Src/main.c    **** 	{
 1437              		.loc 1 608 2 is_stmt 1 view .LVU321
 608:Src/main.c    **** 	{
 1438              		.loc 1 608 6 is_stmt 0 view .LVU322
 1439 009a 1548     		ldr	r0, .L78
 1440 009c 0422     		movs	r2, #4
 1441 009e 09A9     		add	r1, sp, #36
 1442 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/ccufSi0X.s 			page 46


 1443              	.LVL94:
 608:Src/main.c    **** 	{
 1444              		.loc 1 608 5 view .LVU323
 1445 00a4 0028     		cmp	r0, #0
 1446 00a6 1ED1     		bne	.L76
 612:Src/main.c    **** 	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1447              		.loc 1 612 2 is_stmt 1 view .LVU324
 612:Src/main.c    **** 	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1448              		.loc 1 612 39 is_stmt 0 view .LVU325
 1449 00a8 0023     		movs	r3, #0
 1450 00aa 0193     		str	r3, [sp, #4]
 613:Src/main.c    **** 	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1451              		.loc 1 613 2 is_stmt 1 view .LVU326
 613:Src/main.c    **** 	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1452              		.loc 1 613 40 is_stmt 0 view .LVU327
 1453 00ac 0293     		str	r3, [sp, #8]
 614:Src/main.c    **** 	sBreakDeadTimeConfig.DeadTime = 0;
 1454              		.loc 1 614 2 is_stmt 1 view .LVU328
 614:Src/main.c    **** 	sBreakDeadTimeConfig.DeadTime = 0;
 1455              		.loc 1 614 33 is_stmt 0 view .LVU329
 1456 00ae 0393     		str	r3, [sp, #12]
 615:Src/main.c    **** 	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1457              		.loc 1 615 2 is_stmt 1 view .LVU330
 615:Src/main.c    **** 	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1458              		.loc 1 615 32 is_stmt 0 view .LVU331
 1459 00b0 0493     		str	r3, [sp, #16]
 616:Src/main.c    **** 	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1460              		.loc 1 616 2 is_stmt 1 view .LVU332
 616:Src/main.c    **** 	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1461              		.loc 1 616 34 is_stmt 0 view .LVU333
 1462 00b2 0593     		str	r3, [sp, #20]
 617:Src/main.c    **** 	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1463              		.loc 1 617 2 is_stmt 1 view .LVU334
 617:Src/main.c    **** 	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1464              		.loc 1 617 37 is_stmt 0 view .LVU335
 1465 00b4 8022     		movs	r2, #128
 1466 00b6 9201     		lsls	r2, r2, #6
 1467 00b8 0692     		str	r2, [sp, #24]
 618:Src/main.c    **** 	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1468              		.loc 1 618 2 is_stmt 1 view .LVU336
 618:Src/main.c    **** 	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1469              		.loc 1 618 39 is_stmt 0 view .LVU337
 1470 00ba 0893     		str	r3, [sp, #32]
 619:Src/main.c    **** 	{
 1471              		.loc 1 619 2 is_stmt 1 view .LVU338
 619:Src/main.c    **** 	{
 1472              		.loc 1 619 6 is_stmt 0 view .LVU339
 1473 00bc 0C48     		ldr	r0, .L78
 1474 00be 01A9     		add	r1, sp, #4
 1475 00c0 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1476              	.LVL95:
 619:Src/main.c    **** 	{
 1477              		.loc 1 619 5 view .LVU340
 1478 00c4 0028     		cmp	r0, #0
 1479 00c6 10D1     		bne	.L77
 626:Src/main.c    **** 
 1480              		.loc 1 626 2 is_stmt 1 view .LVU341
ARM GAS  /tmp/ccufSi0X.s 			page 47


 1481 00c8 0948     		ldr	r0, .L78
 1482 00ca FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1483              	.LVL96:
 628:Src/main.c    **** 
 1484              		.loc 1 628 1 is_stmt 0 view .LVU342
 1485 00ce 17B0     		add	sp, sp, #92
 1486              		@ sp needed
 1487 00d0 00BD     		pop	{pc}
 1488              	.L71:
 580:Src/main.c    **** 	}
 1489              		.loc 1 580 3 is_stmt 1 view .LVU343
 1490 00d2 FFF7FEFF 		bl	Error_Handler
 1491              	.LVL97:
 1492              	.L72:
 585:Src/main.c    **** 	}
 1493              		.loc 1 585 3 view .LVU344
 1494 00d6 FFF7FEFF 		bl	Error_Handler
 1495              	.LVL98:
 1496              	.L73:
 589:Src/main.c    **** 	}
 1497              		.loc 1 589 3 view .LVU345
 1498 00da FFF7FEFF 		bl	Error_Handler
 1499              	.LVL99:
 1500              	.L74:
 595:Src/main.c    **** 	}
 1501              		.loc 1 595 3 view .LVU346
 1502 00de FFF7FEFF 		bl	Error_Handler
 1503              	.LVL100:
 1504              	.L75:
 606:Src/main.c    **** 	}
 1505              		.loc 1 606 3 view .LVU347
 1506 00e2 FFF7FEFF 		bl	Error_Handler
 1507              	.LVL101:
 1508              	.L76:
 610:Src/main.c    **** 	}
 1509              		.loc 1 610 3 view .LVU348
 1510 00e6 FFF7FEFF 		bl	Error_Handler
 1511              	.LVL102:
 1512              	.L77:
 621:Src/main.c    **** 	}
 1513              		.loc 1 621 3 view .LVU349
 1514 00ea FFF7FEFF 		bl	Error_Handler
 1515              	.LVL103:
 1516              	.L79:
 1517 00ee C046     		.align	2
 1518              	.L78:
 1519 00f0 00000000 		.word	htim1
 1520 00f4 002C0140 		.word	1073818624
 1521 00f8 FFFF0000 		.word	65535
 1522              		.cfi_endproc
 1523              	.LFE56:
 1525              		.section	.text.SystemClock_Config,"ax",%progbits
 1526              		.align	1
 1527              		.global	SystemClock_Config
 1528              		.syntax unified
 1529              		.code	16
 1530              		.thumb_func
ARM GAS  /tmp/ccufSi0X.s 			page 48


 1532              	SystemClock_Config:
 1533              	.LFB55:
 521:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1534              		.loc 1 521 1 view -0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 72
 1537              		@ frame_needed = 0, uses_anonymous_args = 0
 1538 0000 00B5     		push	{lr}
 1539              	.LCFI21:
 1540              		.cfi_def_cfa_offset 4
 1541              		.cfi_offset 14, -4
 1542 0002 93B0     		sub	sp, sp, #76
 1543              	.LCFI22:
 1544              		.cfi_def_cfa_offset 80
 522:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1545              		.loc 1 522 2 view .LVU351
 522:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1546              		.loc 1 522 21 is_stmt 0 view .LVU352
 1547 0004 3422     		movs	r2, #52
 1548 0006 0021     		movs	r1, #0
 1549 0008 05A8     		add	r0, sp, #20
 1550 000a FFF7FEFF 		bl	memset
 1551              	.LVL104:
 523:Src/main.c    **** 
 1552              		.loc 1 523 2 is_stmt 1 view .LVU353
 523:Src/main.c    **** 
 1553              		.loc 1 523 21 is_stmt 0 view .LVU354
 1554 000e 1022     		movs	r2, #16
 1555 0010 0021     		movs	r1, #0
 1556 0012 01A8     		add	r0, sp, #4
 1557 0014 FFF7FEFF 		bl	memset
 1558              	.LVL105:
 528:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1559              		.loc 1 528 2 is_stmt 1 view .LVU355
 528:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1560              		.loc 1 528 35 is_stmt 0 view .LVU356
 1561 0018 0223     		movs	r3, #2
 1562 001a 0593     		str	r3, [sp, #20]
 529:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1563              		.loc 1 529 2 is_stmt 1 view .LVU357
 529:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1564              		.loc 1 529 29 is_stmt 0 view .LVU358
 1565 001c 013B     		subs	r3, r3, #1
 1566 001e 0893     		str	r3, [sp, #32]
 530:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1567              		.loc 1 530 2 is_stmt 1 view .LVU359
 530:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1568              		.loc 1 530 40 is_stmt 0 view .LVU360
 1569 0020 0F33     		adds	r3, r3, #15
 1570 0022 0993     		str	r3, [sp, #36]
 531:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1571              		.loc 1 531 2 is_stmt 1 view .LVU361
 532:Src/main.c    **** 	{
 1572              		.loc 1 532 2 view .LVU362
 532:Src/main.c    **** 	{
 1573              		.loc 1 532 6 is_stmt 0 view .LVU363
 1574 0024 05A8     		add	r0, sp, #20
ARM GAS  /tmp/ccufSi0X.s 			page 49


 1575 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1576              	.LVL106:
 532:Src/main.c    **** 	{
 1577              		.loc 1 532 5 view .LVU364
 1578 002a 0028     		cmp	r0, #0
 1579 002c 0DD1     		bne	.L83
 539:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1580              		.loc 1 539 2 is_stmt 1 view .LVU365
 539:Src/main.c    **** 		|RCC_CLOCKTYPE_PCLK1;
 1581              		.loc 1 539 30 is_stmt 0 view .LVU366
 1582 002e 0723     		movs	r3, #7
 1583 0030 0193     		str	r3, [sp, #4]
 541:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1584              		.loc 1 541 2 is_stmt 1 view .LVU367
 541:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1585              		.loc 1 541 33 is_stmt 0 view .LVU368
 1586 0032 0023     		movs	r3, #0
 1587 0034 0293     		str	r3, [sp, #8]
 542:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1588              		.loc 1 542 2 is_stmt 1 view .LVU369
 542:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1589              		.loc 1 542 34 is_stmt 0 view .LVU370
 1590 0036 0393     		str	r3, [sp, #12]
 543:Src/main.c    **** 
 1591              		.loc 1 543 2 is_stmt 1 view .LVU371
 543:Src/main.c    **** 
 1592              		.loc 1 543 35 is_stmt 0 view .LVU372
 1593 0038 0493     		str	r3, [sp, #16]
 545:Src/main.c    **** 	{
 1594              		.loc 1 545 2 is_stmt 1 view .LVU373
 545:Src/main.c    **** 	{
 1595              		.loc 1 545 6 is_stmt 0 view .LVU374
 1596 003a 0021     		movs	r1, #0
 1597 003c 01A8     		add	r0, sp, #4
 1598 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1599              	.LVL107:
 545:Src/main.c    **** 	{
 1600              		.loc 1 545 5 view .LVU375
 1601 0042 0028     		cmp	r0, #0
 1602 0044 03D1     		bne	.L84
 549:Src/main.c    **** 
 1603              		.loc 1 549 1 view .LVU376
 1604 0046 13B0     		add	sp, sp, #76
 1605              		@ sp needed
 1606 0048 00BD     		pop	{pc}
 1607              	.L83:
 534:Src/main.c    **** 	}
 1608              		.loc 1 534 3 is_stmt 1 view .LVU377
 1609 004a FFF7FEFF 		bl	Error_Handler
 1610              	.LVL108:
 1611              	.L84:
 547:Src/main.c    **** 	}
 1612              		.loc 1 547 3 view .LVU378
 1613 004e FFF7FEFF 		bl	Error_Handler
 1614              	.LVL109:
 1615              		.cfi_endproc
 1616              	.LFE55:
ARM GAS  /tmp/ccufSi0X.s 			page 50


 1618              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1619              		.align	2
 1620              	.LC61:
 1621 0000 257500   		.ascii	"%u\000"
 1622              		.section	.text.main,"ax",%progbits
 1623              		.align	1
 1624              		.global	main
 1625              		.syntax unified
 1626              		.code	16
 1627              		.thumb_func
 1629              	main:
 1630              	.LFB54:
 378:Src/main.c    **** 	HAL_Init();								// Initialize HAL
 1631              		.loc 1 378 1 view -0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 40
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635 0000 10B5     		push	{r4, lr}
 1636              	.LCFI23:
 1637              		.cfi_def_cfa_offset 8
 1638              		.cfi_offset 4, -8
 1639              		.cfi_offset 14, -4
 1640 0002 8AB0     		sub	sp, sp, #40
 1641              	.LCFI24:
 1642              		.cfi_def_cfa_offset 48
 379:Src/main.c    **** 	SystemClock_Config();
 1643              		.loc 1 379 2 view .LVU380
 1644 0004 FFF7FEFF 		bl	HAL_Init
 1645              	.LVL110:
 380:Src/main.c    **** 
 1646              		.loc 1 380 2 view .LVU381
 1647 0008 FFF7FEFF 		bl	SystemClock_Config
 1648              	.LVL111:
 383:Src/main.c    **** 	USART_Init();
 1649              		.loc 1 383 2 view .LVU382
 1650 000c FFF7FEFF 		bl	GPIO_AF_Init
 1651              	.LVL112:
 384:Src/main.c    **** 
 1652              		.loc 1 384 2 view .LVU383
 1653 0010 FFF7FEFF 		bl	USART_Init
 1654              	.LVL113:
 386:Src/main.c    **** 
 1655              		.loc 1 386 2 view .LVU384
 1656 0014 FFF7FEFF 		bl	motor_init
 1657              	.LVL114:
 388:Src/main.c    **** 	NVIC_SetPriority(USART3_4_IRQn,1);
 1658              		.loc 1 388 2 view .LVU385
 1659              	.LBB19:
 1660              	.LBI19:
 1661              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
ARM GAS  /tmp/ccufSi0X.s 			page 51


   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
ARM GAS  /tmp/ccufSi0X.s 			page 52


  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccufSi0X.s 			page 53


 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
ARM GAS  /tmp/ccufSi0X.s 			page 54


 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/ccufSi0X.s 			page 55


 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
ARM GAS  /tmp/ccufSi0X.s 			page 56


 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
ARM GAS  /tmp/ccufSi0X.s 			page 57


 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
ARM GAS  /tmp/ccufSi0X.s 			page 58


 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
ARM GAS  /tmp/ccufSi0X.s 			page 59


 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
ARM GAS  /tmp/ccufSi0X.s 			page 60


 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
ARM GAS  /tmp/ccufSi0X.s 			page 61


 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1662              		.loc 3 623 22 view .LVU386
 1663              	.LBB20:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1664              		.loc 3 625 3 view .LVU387
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1665              		.loc 3 627 5 view .LVU388
 1666              		.loc 3 627 20 is_stmt 0 view .LVU389
 1667 0018 834B     		ldr	r3, .L107
 1668 001a 8022     		movs	r2, #128
ARM GAS  /tmp/ccufSi0X.s 			page 62


 1669 001c 9205     		lsls	r2, r2, #22
 1670 001e 1A60     		str	r2, [r3]
 1671              	.LVL115:
 1672              		.loc 3 627 20 view .LVU390
 1673              	.LBE20:
 1674              	.LBE19:
 389:Src/main.c    **** 
 1675              		.loc 1 389 2 is_stmt 1 view .LVU391
 1676              	.LBB21:
 1677              	.LBI21:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
ARM GAS  /tmp/ccufSi0X.s 			page 63


 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1678              		.loc 3 730 22 view .LVU392
ARM GAS  /tmp/ccufSi0X.s 			page 64


 1679              	.LBB22:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1680              		.loc 3 732 3 view .LVU393
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1681              		.loc 3 734 5 view .LVU394
 1682              		.loc 3 734 52 is_stmt 0 view .LVU395
 1683 0020 C720     		movs	r0, #199
 1684 0022 8000     		lsls	r0, r0, #2
 1685 0024 1958     		ldr	r1, [r3, r0]
 1686              		.loc 3 734 33 view .LVU396
 1687 0026 814A     		ldr	r2, .L107+4
 1688 0028 1140     		ands	r1, r2
 1689              		.loc 3 734 102 view .LVU397
 1690 002a 8022     		movs	r2, #128
 1691 002c D201     		lsls	r2, r2, #7
 1692 002e 0A43     		orrs	r2, r1
 1693              		.loc 3 734 30 view .LVU398
 1694 0030 1A50     		str	r2, [r3, r0]
 1695              	.LVL116:
 1696              		.loc 3 734 30 view .LVU399
 1697              	.LBE22:
 1698              	.LBE21:
 391:Src/main.c    **** 
 1699              		.loc 1 391 2 is_stmt 1 view .LVU400
 391:Src/main.c    **** 
 1700              		.loc 1 391 10 is_stmt 0 view .LVU401
 1701 0032 7F4B     		ldr	r3, .L107+8
 1702 0034 1A68     		ldr	r2, [r3]
 1703 0036 0892     		str	r2, [sp, #32]
 1704 0038 9A88     		ldrh	r2, [r3, #4]
 1705 003a 08AB     		add	r3, sp, #32
 1706 003c 9A80     		strh	r2, [r3, #4]
 394:Src/main.c    **** 	MX_TIM1_Init();
 1707              		.loc 1 394 2 is_stmt 1 view .LVU402
 1708 003e FFF7FEFF 		bl	MX_GPIO_Init
 1709              	.LVL117:
 395:Src/main.c    **** 
 1710              		.loc 1 395 2 view .LVU403
 1711 0042 FFF7FEFF 		bl	MX_TIM1_Init
 1712              	.LVL118:
 397:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_RESET);
 1713              		.loc 1 397 2 view .LVU404
 1714 0046 7B48     		ldr	r0, .L107+12
 1715 0048 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1716              	.LVL119:
 398:Src/main.c    **** 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);
 1717              		.loc 1 398 2 view .LVU405
 1718 004c 8021     		movs	r1, #128
 1719 004e 7A4C     		ldr	r4, .L107+16
 1720 0050 0022     		movs	r2, #0
 1721 0052 0901     		lsls	r1, r1, #4
 1722 0054 2000     		movs	r0, r4
 1723 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1724              	.LVL120:
 399:Src/main.c    **** 
ARM GAS  /tmp/ccufSi0X.s 			page 65


 1725              		.loc 1 399 2 view .LVU406
 1726 005a 8021     		movs	r1, #128
 1727 005c 0022     		movs	r2, #0
 1728 005e 8901     		lsls	r1, r1, #6
 1729 0060 2000     		movs	r0, r4
 1730 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1731              	.LVL121:
 1732 0066 C4E0     		b	.L102
 1733              	.LVL122:
 1734              	.L106:
 1735              	.LBB23:
 410:Src/main.c    **** 
 1736              		.loc 1 410 3 view .LVU407
 1737 0068 8021     		movs	r1, #128
 1738 006a 0022     		movs	r2, #0
 1739 006c 0901     		lsls	r1, r1, #4
 1740 006e 7248     		ldr	r0, .L107+16
 1741 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1742              	.LVL123:
 413:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1743              		.loc 1 413 3 view .LVU408
 413:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1744              		.loc 1 413 15 is_stmt 0 view .LVU409
 1745 0074 FFF7FEFF 		bl	HAL_GetTick
 1746              	.LVL124:
 413:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1747              		.loc 1 413 13 view .LVU410
 1748 0078 80B2     		uxth	r0, r0
 1749 007a 704B     		ldr	r3, .L107+20
 1750 007c 1880     		strh	r0, [r3]
 414:Src/main.c    **** 
 1751              		.loc 1 414 3 is_stmt 1 view .LVU411
 414:Src/main.c    **** 
 1752              		.loc 1 414 13 is_stmt 0 view .LVU412
 1753 007e FFF7FEFF 		bl	HAL_GetTick
 1754              	.LVL125:
 414:Src/main.c    **** 
 1755              		.loc 1 414 11 view .LVU413
 1756 0082 6F4B     		ldr	r3, .L107+24
 1757 0084 1860     		str	r0, [r3]
 417:Src/main.c    **** 		{
 1758              		.loc 1 417 3 is_stmt 1 view .LVU414
 1759              	.L89:
 420:Src/main.c    **** 		//Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1760              		.loc 1 420 3 discriminator 2 view .LVU415
 417:Src/main.c    **** 		{
 1761              		.loc 1 417 57 discriminator 2 view .LVU416
 417:Src/main.c    **** 		{
 1762              		.loc 1 417 12 is_stmt 0 discriminator 2 view .LVU417
 1763 0086 8021     		movs	r1, #128
 1764 0088 4901     		lsls	r1, r1, #5
 1765 008a 6B48     		ldr	r0, .L107+16
 1766 008c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1767              	.LVL126:
 417:Src/main.c    **** 		{
 1768              		.loc 1 417 57 discriminator 2 view .LVU418
 1769 0090 0028     		cmp	r0, #0
ARM GAS  /tmp/ccufSi0X.s 			page 66


 1770 0092 06D1     		bne	.L88
 417:Src/main.c    **** 		{
 1771              		.loc 1 417 68 discriminator 1 view .LVU419
 1772 0094 6A4B     		ldr	r3, .L107+24
 1773 0096 1C68     		ldr	r4, [r3]
 1774 0098 0A34     		adds	r4, r4, #10
 417:Src/main.c    **** 		{
 1775              		.loc 1 417 76 discriminator 1 view .LVU420
 1776 009a FFF7FEFF 		bl	HAL_GetTick
 1777              	.LVL127:
 417:Src/main.c    **** 		{
 1778              		.loc 1 417 57 discriminator 1 view .LVU421
 1779 009e 8442     		cmp	r4, r0
 1780 00a0 F1D8     		bhi	.L89
 1781              	.L88:
 422:Src/main.c    **** 
 1782              		.loc 1 422 3 is_stmt 1 view .LVU422
 422:Src/main.c    **** 
 1783              		.loc 1 422 13 is_stmt 0 view .LVU423
 1784 00a2 FFF7FEFF 		bl	HAL_GetTick
 1785              	.LVL128:
 422:Src/main.c    **** 
 1786              		.loc 1 422 27 view .LVU424
 1787 00a6 654B     		ldr	r3, .L107+20
 1788 00a8 1B88     		ldrh	r3, [r3]
 1789 00aa C01A     		subs	r0, r0, r3
 1790 00ac 80B2     		uxth	r0, r0
 422:Src/main.c    **** 
 1791              		.loc 1 422 10 view .LVU425
 1792 00ae 654B     		ldr	r3, .L107+28
 1793 00b0 1880     		strh	r0, [r3]
 425:Src/main.c    **** 								 // wait for the echo pin to go low
 1794              		.loc 1 425 3 is_stmt 1 view .LVU426
 425:Src/main.c    **** 								 // wait for the echo pin to go low
 1795              		.loc 1 425 13 is_stmt 0 view .LVU427
 1796 00b2 FFF7FEFF 		bl	HAL_GetTick
 1797              	.LVL129:
 425:Src/main.c    **** 								 // wait for the echo pin to go low
 1798              		.loc 1 425 11 view .LVU428
 1799 00b6 624B     		ldr	r3, .L107+24
 1800 00b8 1860     		str	r0, [r3]
 427:Src/main.c    **** 		{
 1801              		.loc 1 427 3 is_stmt 1 view .LVU429
 1802              	.L91:
 430:Src/main.c    **** 		//Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1803              		.loc 1 430 3 discriminator 2 view .LVU430
 427:Src/main.c    **** 		{
 1804              		.loc 1 427 56 discriminator 2 view .LVU431
 427:Src/main.c    **** 		{
 1805              		.loc 1 427 11 is_stmt 0 discriminator 2 view .LVU432
 1806 00ba 8021     		movs	r1, #128
 1807 00bc 4901     		lsls	r1, r1, #5
 1808 00be 5E48     		ldr	r0, .L107+16
 1809 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1810              	.LVL130:
 427:Src/main.c    **** 		{
 1811              		.loc 1 427 56 discriminator 2 view .LVU433
ARM GAS  /tmp/ccufSi0X.s 			page 67


 1812 00c4 0028     		cmp	r0, #0
 1813 00c6 06D0     		beq	.L90
 427:Src/main.c    **** 		{
 1814              		.loc 1 427 67 discriminator 1 view .LVU434
 1815 00c8 5D4B     		ldr	r3, .L107+24
 1816 00ca 1C68     		ldr	r4, [r3]
 1817 00cc 3234     		adds	r4, r4, #50
 427:Src/main.c    **** 		{
 1818              		.loc 1 427 74 discriminator 1 view .LVU435
 1819 00ce FFF7FEFF 		bl	HAL_GetTick
 1820              	.LVL131:
 427:Src/main.c    **** 		{
 1821              		.loc 1 427 56 discriminator 1 view .LVU436
 1822 00d2 8442     		cmp	r4, r0
 1823 00d4 F1D8     		bhi	.L91
 1824              	.L90:
 432:Src/main.c    **** 
 1825              		.loc 1 432 3 is_stmt 1 view .LVU437
 432:Src/main.c    **** 
 1826              		.loc 1 432 13 is_stmt 0 view .LVU438
 1827 00d6 FFF7FEFF 		bl	HAL_GetTick
 1828              	.LVL132:
 432:Src/main.c    **** 
 1829              		.loc 1 432 27 view .LVU439
 1830 00da 584B     		ldr	r3, .L107+20
 1831 00dc 1B88     		ldrh	r3, [r3]
 1832 00de C01A     		subs	r0, r0, r3
 1833 00e0 80B2     		uxth	r0, r0
 432:Src/main.c    **** 
 1834              		.loc 1 432 10 view .LVU440
 1835 00e2 594B     		ldr	r3, .L107+32
 1836 00e4 1880     		strh	r0, [r3]
 435:Src/main.c    **** 		if(leftDistance < 10)
 1837              		.loc 1 435 3 is_stmt 1 view .LVU441
 435:Src/main.c    **** 		if(leftDistance < 10)
 1838              		.loc 1 435 26 is_stmt 0 view .LVU442
 1839 00e6 1B88     		ldrh	r3, [r3]
 1840 00e8 564A     		ldr	r2, .L107+28
 1841 00ea 1288     		ldrh	r2, [r2]
 1842 00ec 9B1A     		subs	r3, r3, r2
 1843 00ee 9BB2     		uxth	r3, r3
 435:Src/main.c    **** 		if(leftDistance < 10)
 1844              		.loc 1 435 16 view .LVU443
 1845 00f0 564A     		ldr	r2, .L107+36
 1846 00f2 1380     		strh	r3, [r2]
 436:Src/main.c    **** 		{
 1847              		.loc 1 436 3 is_stmt 1 view .LVU444
 436:Src/main.c    **** 		{
 1848              		.loc 1 436 19 is_stmt 0 view .LVU445
 1849 00f4 1388     		ldrh	r3, [r2]
 1850 00f6 9BB2     		uxth	r3, r3
 436:Src/main.c    **** 		{
 1851              		.loc 1 436 5 view .LVU446
 1852 00f8 092B     		cmp	r3, #9
 1853 00fa 07D9     		bls	.L103
 1854              	.L92:
 447:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
ARM GAS  /tmp/ccufSi0X.s 			page 68


 1855              		.loc 1 447 3 is_stmt 1 view .LVU447
 1856              	.LVL133:
 448:Src/main.c    **** 
 1857              		.loc 1 448 3 view .LVU448
 1858 00fc 8021     		movs	r1, #128
 1859 00fe 0122     		movs	r2, #1
 1860 0100 8901     		lsls	r1, r1, #6
 1861 0102 4D48     		ldr	r0, .L107+16
 1862 0104 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1863              	.LVL134:
 452:Src/main.c    **** 			counter++;
 1864              		.loc 1 452 3 view .LVU449
 447:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 1865              		.loc 1 447 11 is_stmt 0 view .LVU450
 1866 0108 0023     		movs	r3, #0
 452:Src/main.c    **** 			counter++;
 1867              		.loc 1 452 9 view .LVU451
 1868 010a 07E0     		b	.L93
 1869              	.LVL135:
 1870              	.L103:
 1871              	.LBB24:
 438:Src/main.c    **** 			sprintf(strLeft, "%u", leftDistance);
 1872              		.loc 1 438 4 is_stmt 1 view .LVU452
 439:Src/main.c    **** 			/*
 1873              		.loc 1 439 4 view .LVU453
 1874 010c 1288     		ldrh	r2, [r2]
 1875 010e 92B2     		uxth	r2, r2
 1876 0110 4F49     		ldr	r1, .L107+40
 1877 0112 6846     		mov	r0, sp
 1878 0114 FFF7FEFF 		bl	sprintf
 1879              	.LVL136:
 1880 0118 F0E7     		b	.L92
 1881              	.LVL137:
 1882              	.L94:
 439:Src/main.c    **** 			/*
 1883              		.loc 1 439 4 is_stmt 0 view .LVU454
 1884              	.LBE24:
 453:Src/main.c    **** 		}  // wait for 10 us
 1885              		.loc 1 453 4 is_stmt 1 view .LVU455
 453:Src/main.c    **** 		}  // wait for 10 us
 1886              		.loc 1 453 11 is_stmt 0 view .LVU456
 1887 011a 0133     		adds	r3, r3, #1
 1888              	.LVL138:
 1889              	.L93:
 452:Src/main.c    **** 			counter++;
 1890              		.loc 1 452 18 is_stmt 1 view .LVU457
 1891 011c 092B     		cmp	r3, #9
 1892 011e FCDD     		ble	.L94
 455:Src/main.c    **** 
 1893              		.loc 1 455 3 view .LVU458
 1894 0120 8021     		movs	r1, #128
 1895 0122 0022     		movs	r2, #0
 1896 0124 8901     		lsls	r1, r1, #6
 1897 0126 4448     		ldr	r0, .L107+16
 1898 0128 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1899              	.LVL139:
 458:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
ARM GAS  /tmp/ccufSi0X.s 			page 69


 1900              		.loc 1 458 3 view .LVU459
 458:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1901              		.loc 1 458 15 is_stmt 0 view .LVU460
 1902 012c FFF7FEFF 		bl	HAL_GetTick
 1903              	.LVL140:
 458:Src/main.c    **** 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 1904              		.loc 1 458 13 view .LVU461
 1905 0130 80B2     		uxth	r0, r0
 1906 0132 424B     		ldr	r3, .L107+20
 1907 0134 1880     		strh	r0, [r3]
 459:Src/main.c    **** 
 1908              		.loc 1 459 3 is_stmt 1 view .LVU462
 459:Src/main.c    **** 
 1909              		.loc 1 459 13 is_stmt 0 view .LVU463
 1910 0136 FFF7FEFF 		bl	HAL_GetTick
 1911              	.LVL141:
 459:Src/main.c    **** 
 1912              		.loc 1 459 11 view .LVU464
 1913 013a 414B     		ldr	r3, .L107+24
 1914 013c 1860     		str	r0, [r3]
 462:Src/main.c    **** 		{
 1915              		.loc 1 462 3 is_stmt 1 view .LVU465
 1916              	.L96:
 465:Src/main.c    **** 		//Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 1917              		.loc 1 465 3 discriminator 2 view .LVU466
 462:Src/main.c    **** 		{
 1918              		.loc 1 462 58 discriminator 2 view .LVU467
 462:Src/main.c    **** 		{
 1919              		.loc 1 462 12 is_stmt 0 discriminator 2 view .LVU468
 1920 013e 8021     		movs	r1, #128
 1921 0140 C901     		lsls	r1, r1, #7
 1922 0142 3D48     		ldr	r0, .L107+16
 1923 0144 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1924              	.LVL142:
 462:Src/main.c    **** 		{
 1925              		.loc 1 462 58 discriminator 2 view .LVU469
 1926 0148 0028     		cmp	r0, #0
 1927 014a 06D1     		bne	.L95
 462:Src/main.c    **** 		{
 1928              		.loc 1 462 69 discriminator 1 view .LVU470
 1929 014c 3C4B     		ldr	r3, .L107+24
 1930 014e 1C68     		ldr	r4, [r3]
 1931 0150 0A34     		adds	r4, r4, #10
 462:Src/main.c    **** 		{
 1932              		.loc 1 462 77 discriminator 1 view .LVU471
 1933 0152 FFF7FEFF 		bl	HAL_GetTick
 1934              	.LVL143:
 462:Src/main.c    **** 		{
 1935              		.loc 1 462 58 discriminator 1 view .LVU472
 1936 0156 8442     		cmp	r4, r0
 1937 0158 F1D8     		bhi	.L96
 1938              	.L95:
 467:Src/main.c    **** 
 1939              		.loc 1 467 3 is_stmt 1 view .LVU473
 467:Src/main.c    **** 
 1940              		.loc 1 467 13 is_stmt 0 view .LVU474
 1941 015a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccufSi0X.s 			page 70


 1942              	.LVL144:
 467:Src/main.c    **** 
 1943              		.loc 1 467 27 view .LVU475
 1944 015e 374B     		ldr	r3, .L107+20
 1945 0160 1B88     		ldrh	r3, [r3]
 1946 0162 C01A     		subs	r0, r0, r3
 1947 0164 80B2     		uxth	r0, r0
 467:Src/main.c    **** 
 1948              		.loc 1 467 10 view .LVU476
 1949 0166 374B     		ldr	r3, .L107+28
 1950 0168 1880     		strh	r0, [r3]
 470:Src/main.c    **** 								 // wait for the echo pin to go low
 1951              		.loc 1 470 3 is_stmt 1 view .LVU477
 470:Src/main.c    **** 								 // wait for the echo pin to go low
 1952              		.loc 1 470 13 is_stmt 0 view .LVU478
 1953 016a FFF7FEFF 		bl	HAL_GetTick
 1954              	.LVL145:
 470:Src/main.c    **** 								 // wait for the echo pin to go low
 1955              		.loc 1 470 11 view .LVU479
 1956 016e 344B     		ldr	r3, .L107+24
 1957 0170 1860     		str	r0, [r3]
 472:Src/main.c    **** 		{
 1958              		.loc 1 472 3 is_stmt 1 view .LVU480
 1959              	.L98:
 475:Src/main.c    **** 		//Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 1960              		.loc 1 475 3 discriminator 2 view .LVU481
 472:Src/main.c    **** 		{
 1961              		.loc 1 472 57 discriminator 2 view .LVU482
 472:Src/main.c    **** 		{
 1962              		.loc 1 472 11 is_stmt 0 discriminator 2 view .LVU483
 1963 0172 8021     		movs	r1, #128
 1964 0174 C901     		lsls	r1, r1, #7
 1965 0176 3048     		ldr	r0, .L107+16
 1966 0178 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1967              	.LVL146:
 472:Src/main.c    **** 		{
 1968              		.loc 1 472 57 discriminator 2 view .LVU484
 1969 017c 0028     		cmp	r0, #0
 1970 017e 06D0     		beq	.L97
 472:Src/main.c    **** 		{
 1971              		.loc 1 472 68 discriminator 1 view .LVU485
 1972 0180 2F4B     		ldr	r3, .L107+24
 1973 0182 1C68     		ldr	r4, [r3]
 1974 0184 3234     		adds	r4, r4, #50
 472:Src/main.c    **** 		{
 1975              		.loc 1 472 75 discriminator 1 view .LVU486
 1976 0186 FFF7FEFF 		bl	HAL_GetTick
 1977              	.LVL147:
 472:Src/main.c    **** 		{
 1978              		.loc 1 472 57 discriminator 1 view .LVU487
 1979 018a 8442     		cmp	r4, r0
 1980 018c F1D8     		bhi	.L98
 1981              	.L97:
 477:Src/main.c    **** 
 1982              		.loc 1 477 3 is_stmt 1 view .LVU488
 477:Src/main.c    **** 
 1983              		.loc 1 477 13 is_stmt 0 view .LVU489
ARM GAS  /tmp/ccufSi0X.s 			page 71


 1984 018e FFF7FEFF 		bl	HAL_GetTick
 1985              	.LVL148:
 477:Src/main.c    **** 
 1986              		.loc 1 477 27 view .LVU490
 1987 0192 2A4B     		ldr	r3, .L107+20
 1988 0194 1B88     		ldrh	r3, [r3]
 1989 0196 C01A     		subs	r0, r0, r3
 1990 0198 80B2     		uxth	r0, r0
 477:Src/main.c    **** 
 1991              		.loc 1 477 10 view .LVU491
 1992 019a 2B4B     		ldr	r3, .L107+32
 1993 019c 1880     		strh	r0, [r3]
 480:Src/main.c    **** 		if(rightDistance < 10)
 1994              		.loc 1 480 3 is_stmt 1 view .LVU492
 480:Src/main.c    **** 		if(rightDistance < 10)
 1995              		.loc 1 480 27 is_stmt 0 view .LVU493
 1996 019e 1B88     		ldrh	r3, [r3]
 1997 01a0 284A     		ldr	r2, .L107+28
 1998 01a2 1288     		ldrh	r2, [r2]
 1999 01a4 9B1A     		subs	r3, r3, r2
 2000 01a6 9BB2     		uxth	r3, r3
 480:Src/main.c    **** 		if(rightDistance < 10)
 2001              		.loc 1 480 17 view .LVU494
 2002 01a8 2A4A     		ldr	r2, .L107+44
 2003 01aa 1380     		strh	r3, [r2]
 481:Src/main.c    **** 		{
 2004              		.loc 1 481 3 is_stmt 1 view .LVU495
 481:Src/main.c    **** 		{
 2005              		.loc 1 481 20 is_stmt 0 view .LVU496
 2006 01ac 1388     		ldrh	r3, [r2]
 2007 01ae 9BB2     		uxth	r3, r3
 481:Src/main.c    **** 		{
 2008              		.loc 1 481 5 view .LVU497
 2009 01b0 092B     		cmp	r3, #9
 2010 01b2 2AD9     		bls	.L104
 2011              	.L99:
 491:Src/main.c    **** 		{
 2012              		.loc 1 491 3 is_stmt 1 view .LVU498
 491:Src/main.c    **** 		{
 2013              		.loc 1 491 6 is_stmt 0 view .LVU499
 2014 01b4 284B     		ldr	r3, .L107+48
 2015 01b6 1B78     		ldrb	r3, [r3]
 491:Src/main.c    **** 		{
 2016              		.loc 1 491 5 view .LVU500
 2017 01b8 002B     		cmp	r3, #0
 2018 01ba 16D0     		beq	.L100
 493:Src/main.c    **** 					command[0] != 'a' &&
 2019              		.loc 1 493 4 is_stmt 1 view .LVU501
 493:Src/main.c    **** 					command[0] != 'a' &&
 2020              		.loc 1 493 14 is_stmt 0 view .LVU502
 2021 01bc 274B     		ldr	r3, .L107+52
 2022 01be 1B78     		ldrb	r3, [r3]
 493:Src/main.c    **** 					command[0] != 'a' &&
 2023              		.loc 1 493 6 view .LVU503
 2024 01c0 772B     		cmp	r3, #119
 2025 01c2 07D0     		beq	.L101
 494:Src/main.c    **** 					command[0] != 'd'){
ARM GAS  /tmp/ccufSi0X.s 			page 72


 2026              		.loc 1 494 13 discriminator 1 view .LVU504
 2027 01c4 254B     		ldr	r3, .L107+52
 2028 01c6 1B78     		ldrb	r3, [r3]
 493:Src/main.c    **** 					command[0] != 'a' &&
 2029              		.loc 1 493 25 discriminator 1 view .LVU505
 2030 01c8 612B     		cmp	r3, #97
 2031 01ca 03D0     		beq	.L101
 495:Src/main.c    **** 				ProcessCommand(command[0], NULL);
 2032              		.loc 1 495 13 view .LVU506
 2033 01cc 234B     		ldr	r3, .L107+52
 2034 01ce 1B78     		ldrb	r3, [r3]
 494:Src/main.c    **** 					command[0] != 'd'){
 2035              		.loc 1 494 24 view .LVU507
 2036 01d0 642B     		cmp	r3, #100
 2037 01d2 21D1     		bne	.L105
 2038              	.L101:
 498:Src/main.c    **** 			{
 2039              		.loc 1 498 4 is_stmt 1 view .LVU508
 498:Src/main.c    **** 			{
 2040              		.loc 1 498 14 is_stmt 0 view .LVU509
 2041 01d4 214B     		ldr	r3, .L107+52
 2042 01d6 5B78     		ldrb	r3, [r3, #1]
 498:Src/main.c    **** 			{
 2043              		.loc 1 498 6 view .LVU510
 2044 01d8 002B     		cmp	r3, #0
 2045 01da 06D0     		beq	.L100
 500:Src/main.c    **** 			}
 2046              		.loc 1 500 5 is_stmt 1 view .LVU511
 500:Src/main.c    **** 			}
 2047              		.loc 1 500 27 is_stmt 0 view .LVU512
 2048 01dc 1F4B     		ldr	r3, .L107+52
 2049 01de 1878     		ldrb	r0, [r3]
 2050 01e0 C0B2     		uxtb	r0, r0
 500:Src/main.c    **** 			}
 2051              		.loc 1 500 39 view .LVU513
 2052 01e2 5978     		ldrb	r1, [r3, #1]
 2053 01e4 C9B2     		uxtb	r1, r1
 500:Src/main.c    **** 			}
 2054              		.loc 1 500 5 view .LVU514
 2055 01e6 FFF7FEFF 		bl	ProcessCommand
 2056              	.LVL149:
 2057              	.L100:
 512:Src/main.c    **** 	}
 2058              		.loc 1 512 3 is_stmt 1 view .LVU515
 2059 01ea FA20     		movs	r0, #250
 2060 01ec 4000     		lsls	r0, r0, #1
 2061 01ee FFF7FEFF 		bl	HAL_Delay
 2062              	.LVL150:
 2063              	.LBE23:
 401:Src/main.c    **** 		int32_t counter = 0;
 2064              		.loc 1 401 8 view .LVU516
 2065              	.L102:
 401:Src/main.c    **** 		int32_t counter = 0;
 2066              		.loc 1 401 2 view .LVU517
 2067              	.LBB26:
 402:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 2068              		.loc 1 402 3 view .LVU518
ARM GAS  /tmp/ccufSi0X.s 			page 73


 403:Src/main.c    **** 
 2069              		.loc 1 403 3 view .LVU519
 2070 01f2 8021     		movs	r1, #128
 2071 01f4 0122     		movs	r2, #1
 2072 01f6 0901     		lsls	r1, r1, #4
 2073 01f8 0F48     		ldr	r0, .L107+16
 2074 01fa FFF7FEFF 		bl	HAL_GPIO_WritePin
 2075              	.LVL151:
 407:Src/main.c    **** 			counter++;
 2076              		.loc 1 407 3 view .LVU520
 402:Src/main.c    **** 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 2077              		.loc 1 402 11 is_stmt 0 view .LVU521
 2078 01fe 0023     		movs	r3, #0
 2079              	.LVL152:
 2080              	.L86:
 407:Src/main.c    **** 			counter++;
 2081              		.loc 1 407 18 is_stmt 1 view .LVU522
 2082 0200 092B     		cmp	r3, #9
 2083 0202 00DD     		ble	.LCB1668
 2084 0204 30E7     		b	.L106	@long jump
 2085              	.LCB1668:
 408:Src/main.c    **** 		}  // wait for 10 us
 2086              		.loc 1 408 4 view .LVU523
 408:Src/main.c    **** 		}  // wait for 10 us
 2087              		.loc 1 408 11 is_stmt 0 view .LVU524
 2088 0206 0133     		adds	r3, r3, #1
 2089              	.LVL153:
 408:Src/main.c    **** 		}  // wait for 10 us
 2090              		.loc 1 408 11 view .LVU525
 2091 0208 FAE7     		b	.L86
 2092              	.LVL154:
 2093              	.L104:
 2094              	.LBB25:
 483:Src/main.c    **** 			sprintf(strRight, "%u", rightDistance);
 2095              		.loc 1 483 4 is_stmt 1 view .LVU526
 484:Src/main.c    **** 			/*
 2096              		.loc 1 484 4 view .LVU527
 2097 020a 1288     		ldrh	r2, [r2]
 2098 020c 92B2     		uxth	r2, r2
 2099 020e 1049     		ldr	r1, .L107+40
 2100 0210 6846     		mov	r0, sp
 2101 0212 FFF7FEFF 		bl	sprintf
 2102              	.LVL155:
 2103 0216 CDE7     		b	.L99
 2104              	.L105:
 2105              	.LBE25:
 496:Src/main.c    **** 			}
 2106              		.loc 1 496 5 view .LVU528
 496:Src/main.c    **** 			}
 2107              		.loc 1 496 27 is_stmt 0 view .LVU529
 2108 0218 104B     		ldr	r3, .L107+52
 2109 021a 1878     		ldrb	r0, [r3]
 2110 021c C0B2     		uxtb	r0, r0
 496:Src/main.c    **** 			}
 2111              		.loc 1 496 5 view .LVU530
 2112 021e 0021     		movs	r1, #0
 2113 0220 FFF7FEFF 		bl	ProcessCommand
ARM GAS  /tmp/ccufSi0X.s 			page 74


 2114              	.LVL156:
 2115 0224 D6E7     		b	.L101
 2116              	.L108:
 2117 0226 C046     		.align	2
 2118              	.L107:
 2119 0228 00E100E0 		.word	-536813312
 2120 022c FF00FFFF 		.word	-65281
 2121 0230 00000000 		.word	.LC21
 2122 0234 00000000 		.word	htim1
 2123 0238 00040048 		.word	1207960576
 2124 023c 00000000 		.word	startTime
 2125 0240 00000000 		.word	pMillis
 2126 0244 00000000 		.word	Value1
 2127 0248 00000000 		.word	Value2
 2128 024c 00000000 		.word	leftDistance
 2129 0250 00000000 		.word	.LC61
 2130 0254 00000000 		.word	rightDistance
 2131 0258 00000000 		.word	incomingCommand
 2132 025c 00000000 		.word	command
 2133              	.LBE26:
 2134              		.cfi_endproc
 2135              	.LFE54:
 2137              		.global	incomingCommand
 2138              		.section	.bss.incomingCommand,"aw",%nobits
 2141              	incomingCommand:
 2142 0000 00       		.space	1
 2143              		.global	command
 2144              		.section	.bss.command,"aw",%nobits
 2145              		.align	2
 2148              	command:
 2149 0000 000000   		.space	3
 2150              		.global	rightDistance
 2151              		.section	.bss.rightDistance,"aw",%nobits
 2152              		.align	1
 2155              	rightDistance:
 2156 0000 0000     		.space	2
 2157              		.global	leftDistance
 2158              		.section	.bss.leftDistance,"aw",%nobits
 2159              		.align	1
 2162              	leftDistance:
 2163 0000 0000     		.space	2
 2164              		.global	Value2
 2165              		.section	.bss.Value2,"aw",%nobits
 2166              		.align	1
 2169              	Value2:
 2170 0000 0000     		.space	2
 2171              		.global	Value1
 2172              		.section	.bss.Value1,"aw",%nobits
 2173              		.align	1
 2176              	Value1:
 2177 0000 0000     		.space	2
 2178              		.global	startTime
 2179              		.section	.bss.startTime,"aw",%nobits
 2180              		.align	1
 2183              	startTime:
 2184 0000 0000     		.space	2
 2185              		.global	pMillis
ARM GAS  /tmp/ccufSi0X.s 			page 75


 2186              		.section	.bss.pMillis,"aw",%nobits
 2187              		.align	2
 2190              	pMillis:
 2191 0000 00000000 		.space	4
 2192              		.global	htim1
 2193              		.section	.bss.htim1,"aw",%nobits
 2194              		.align	2
 2197              	htim1:
 2198 0000 00000000 		.space	64
 2198      00000000 
 2198      00000000 
 2198      00000000 
 2198      00000000 
 2199              		.text
 2200              	.Letext0:
 2201              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 2202              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2203              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2204              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2205              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2206              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2207              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2208              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2209              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2210              		.file 13 "Inc/pins.h"
 2211              		.file 14 "Inc/motor.h"
 2212              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2213              		.file 16 "Inc/main.h"
 2214              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2215              		.file 18 "/usr/arm-none-eabi/include/stdio.h"
 2216              		.file 19 "/usr/arm-none-eabi/include/string.h"
 2217              		.file 20 "<built-in>"
ARM GAS  /tmp/ccufSi0X.s 			page 76


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccufSi0X.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccufSi0X.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccufSi0X.s:97     .text.MX_GPIO_Init:00000048 $d
     /tmp/ccufSi0X.s:102    .text.LED_Init:00000000 $t
     /tmp/ccufSi0X.s:108    .text.LED_Init:00000000 LED_Init
     /tmp/ccufSi0X.s:151    .text.LED_Init:00000024 $d
     /tmp/ccufSi0X.s:156    .text.GPIO_AF_Init:00000000 $t
     /tmp/ccufSi0X.s:162    .text.GPIO_AF_Init:00000000 GPIO_AF_Init
     /tmp/ccufSi0X.s:331    .text.GPIO_AF_Init:000000e0 $d
     /tmp/ccufSi0X.s:342    .text.USART_Init:00000000 $t
     /tmp/ccufSi0X.s:348    .text.USART_Init:00000000 USART_Init
     /tmp/ccufSi0X.s:440    .text.USART_Init:0000005c $d
     /tmp/ccufSi0X.s:447    .text.USART_SendChar:00000000 $t
     /tmp/ccufSi0X.s:453    .text.USART_SendChar:00000000 USART_SendChar
     /tmp/ccufSi0X.s:479    .text.USART_SendChar:00000010 $d
     /tmp/ccufSi0X.s:484    .text.USART_SendString:00000000 $t
     /tmp/ccufSi0X.s:490    .text.USART_SendString:00000000 USART_SendString
     /tmp/ccufSi0X.s:535    .rodata.ClearCommand.str1.4:00000000 $d
     /tmp/ccufSi0X.s:539    .text.ClearCommand:00000000 $t
     /tmp/ccufSi0X.s:545    .text.ClearCommand:00000000 ClearCommand
     /tmp/ccufSi0X.s:588    .text.ClearCommand:0000002c $d
     /tmp/ccufSi0X.s:2148   .bss.command:00000000 command
     /tmp/ccufSi0X.s:2141   .bss.incomingCommand:00000000 incomingCommand
     /tmp/ccufSi0X.s:595    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
     /tmp/ccufSi0X.s:599    .text.USART3_4_IRQHandler:00000000 $t
     /tmp/ccufSi0X.s:605    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
     /tmp/ccufSi0X.s:696    .text.USART3_4_IRQHandler:00000060 $d
     /tmp/ccufSi0X.s:704    .rodata.Log.str1.4:00000000 $d
     /tmp/ccufSi0X.s:708    .text.Log:00000000 $t
     /tmp/ccufSi0X.s:714    .text.Log:00000000 Log
     /tmp/ccufSi0X.s:737    .text.Log:0000000c $d
     /tmp/ccufSi0X.s:742    .text.Proceed:00000000 $t
     /tmp/ccufSi0X.s:748    .text.Proceed:00000000 Proceed
     /tmp/ccufSi0X.s:771    .text.Proceed:0000000c $d
     /tmp/ccufSi0X.s:776    .rodata.ProcessCommand.str1.4:00000000 $d
     /tmp/ccufSi0X.s:804    .text.ProcessCommand:00000000 $t
     /tmp/ccufSi0X.s:810    .text.ProcessCommand:00000000 ProcessCommand
     /tmp/ccufSi0X.s:941    .rodata.ProcessCommand:00000000 $d
     /tmp/ccufSi0X.s:1172   .text.ProcessCommand:0000017c $d
     /tmp/ccufSi0X.s:1188   .rodata.GetDistance.str1.4:00000000 $d
     /tmp/ccufSi0X.s:1192   .text.GetDistance:00000000 $t
     /tmp/ccufSi0X.s:1198   .text.GetDistance:00000000 GetDistance
     /tmp/ccufSi0X.s:1244   .text.GetDistance:00000030 $d
     /tmp/ccufSi0X.s:1249   .text.Error_Handler:00000000 $t
     /tmp/ccufSi0X.s:1255   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccufSi0X.s:1287   .text.MX_TIM1_Init:00000000 $t
     /tmp/ccufSi0X.s:1292   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/ccufSi0X.s:1519   .text.MX_TIM1_Init:000000f0 $d
     /tmp/ccufSi0X.s:2197   .bss.htim1:00000000 htim1
     /tmp/ccufSi0X.s:1526   .text.SystemClock_Config:00000000 $t
     /tmp/ccufSi0X.s:1532   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccufSi0X.s:1619   .rodata.main.str1.4:00000000 $d
     /tmp/ccufSi0X.s:1623   .text.main:00000000 $t
     /tmp/ccufSi0X.s:1629   .text.main:00000000 main
     /tmp/ccufSi0X.s:2119   .text.main:00000228 $d
ARM GAS  /tmp/ccufSi0X.s 			page 77


     /tmp/ccufSi0X.s:2183   .bss.startTime:00000000 startTime
     /tmp/ccufSi0X.s:2190   .bss.pMillis:00000000 pMillis
     /tmp/ccufSi0X.s:2176   .bss.Value1:00000000 Value1
     /tmp/ccufSi0X.s:2169   .bss.Value2:00000000 Value2
     /tmp/ccufSi0X.s:2162   .bss.leftDistance:00000000 leftDistance
     /tmp/ccufSi0X.s:2155   .bss.rightDistance:00000000 rightDistance
     /tmp/ccufSi0X.s:2142   .bss.incomingCommand:00000000 $d
     /tmp/ccufSi0X.s:2145   .bss.command:00000000 $d
     /tmp/ccufSi0X.s:2152   .bss.rightDistance:00000000 $d
     /tmp/ccufSi0X.s:2159   .bss.leftDistance:00000000 $d
     /tmp/ccufSi0X.s:2166   .bss.Value2:00000000 $d
     /tmp/ccufSi0X.s:2173   .bss.Value1:00000000 $d
     /tmp/ccufSi0X.s:2180   .bss.startTime:00000000 $d
     /tmp/ccufSi0X.s:2187   .bss.pMillis:00000000 $d
     /tmp/ccufSi0X.s:2194   .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
uart_pins
motor_left_pins
motor_right_pins
ultrasonic_left_pins
ultrasonic_right_pins
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
memcpy
sprintf
HAL_Delay
MoveMotors
__aeabi_f2d
get_distance
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
motor_init
HAL_TIM_Base_Start
HAL_GetTick
HAL_GPIO_ReadPin
